<?xml version="1.0"?>
<rss version="2.0">

  <channel>
    <title>ploeh blog</title>
    <link>https://blog.ploeh.dk</link>
    <description>danish software design</description>
    <language>en-us</language>
    <copyright>Mark Seemann</copyright>
    <pubDate>Mon, 09 Dec 2024 21:46:13 UTC</pubDate>
    <lastBuildDate>Mon, 09 Dec 2024 21:46:13 UTC</lastBuildDate>

    
      <item>
        <title>Implementation and usage mindsets</title>
        <link>https://blog.ploeh.dk/2024/12/09/implementation-and-usage-mindsets/</link>
        <pubDate>Mon, 09 Dec 2024 21:45:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A one-dimensional take on the enduring static-versus-dynamic debate.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It recently occurred to me that one possible explanation for the standing, and probably never-ending, debate about static versus dynamic types may be that each camp have disjoint perspectives on the kinds of problems their favourite languages help them solve. In short, my hypothesis is that perhaps lovers of dynamically-typed languages often approach a problem from an implementation mindset, whereas proponents of static types emphasize usage.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/implementation-versus-usage.png&quot; alt=&quot;A question mark in the middle. An arrow from left labelled &apos;implementation&apos; points to the question mark from a figure indicating a person. Another arrow from the right labelled &apos;usage&apos; points to the question mark from another figure indicating a person.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll expand on this idea here, and then provide examples in two subsequent articles.
    &lt;/p&gt;
    &lt;h3 id=&quot;d748f29ae31543fbb6db537711800c62&quot;&gt;
        Background &lt;a href=&quot;#d748f29ae31543fbb6db537711800c62&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        For years I&apos;ve struggled to understand &apos;the other side&apos;. While I&apos;m firmly in the statically typed camp, I realize that many highly skilled programmers and thought leaders enjoy, or get great use out of, dynamically typed languages. This worries me, because it &lt;a href=&quot;/2021/08/09/am-i-stuck-in-a-local-maximum&quot;&gt;might indicate that I&apos;m stuck in a local maximum&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In other words, just because I, personally, prefer static types, it doesn&apos;t follow that static types are universally better than dynamic types.
    &lt;/p&gt;
    &lt;p&gt;
        In reality, it&apos;s probably rather the case that we&apos;re dealing with a false dichotomy, and that the problem is really multi-dimensional.
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;Let me stop you right there: I don&apos;t think there is a real dynamic typing versus static typing debate.
        &lt;/p&gt;
        &lt;p&gt;
            &quot;What such debates normally are is language X vs language Y debates (where X happens to be dynamic and Y happens to be static).&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;https://twitter.com/KevlinHenney/status/1425513161252278280&quot;&gt;Kevlin Henney&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        Even so, I can&apos;t help thinking about such things. Am I missing something?
    &lt;/p&gt;
    &lt;p&gt;
        For the past few years, I&apos;ve dabbled with &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; to see what writing in a popular dynamically typed language is like. It&apos;s not a bad language, and I can clearly see how it&apos;s attractive. Even so, I&apos;m still frustrated every time I return to some Python code after a few weeks or more. The lack of static types makes it hard for me to pick up, or revisit, old code.
    &lt;/p&gt;
    &lt;h3 id=&quot;8b6d87e0536d40b6aaec28d8e6356553&quot;&gt;
        A question of perspective? &lt;a href=&quot;#8b6d87e0536d40b6aaec28d8e6356553&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Whenever I run into a difference of opinion, I often interpret it as a difference in perspective. Perhaps it&apos;s my academic background as an economist, but I consider it a given that people have different motivations, and that incentives influence actions.
    &lt;/p&gt;
    &lt;p&gt;
        A related kind of analysis deals with problem definitions. Are we even trying to solve the same problem?
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ve &lt;a href=&quot;/2021/08/09/am-i-stuck-in-a-local-maximum&quot;&gt;discussed such questions before, but in a different context&lt;/a&gt;. Here, it strikes me that perhaps programmers who gravitate toward dynamically typed languages are focused on another problem than the other group.
    &lt;/p&gt;
    &lt;p&gt;
        Again, I&apos;d like to emphasize that I don&apos;t consider the world so black and white in reality. Some developers straddle the two camps, and as the above Kevlin Henney quote suggests, there really aren&apos;t only two kinds of languages. &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)&quot;&gt;C&lt;/a&gt; and &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; are both statically typed, but the similarities stop there. Likewise, I don&apos;t know if it&apos;s fair to put JavaScript and &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; in the same bucket.
    &lt;/p&gt;
    &lt;p&gt;
        That said, I&apos;d still like to offer the following hypothesis, in the spirit that although &lt;a href=&quot;https://en.wikipedia.org/wiki/All_models_are_wrong&quot;&gt;all models are wrong&lt;/a&gt;, some are useful.
    &lt;/p&gt;
    &lt;p&gt;
        The idea is that if you&apos;re trying to solve a problem related to &lt;em&gt;implementation&lt;/em&gt;, dynamically typed languages may be more suitable. If you&apos;re trying to implement an algorithm, or even trying to invent one, a dynamic language seems useful. One year, I did a good chunk of &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; in Python, and didn&apos;t find it harder than in Haskell. (I ultimately ran out of steam for reasons unrelated to Python.)
    &lt;/p&gt;
    &lt;p&gt;
        On the other hand, if your main focus may be &lt;em&gt;usage&lt;/em&gt; of your code, perhaps you&apos;ll find a statically typed language more useful. At least, I do. I can use the static type system to communicate how my APIs work. How to instantiate my classes. How to call my functions. How return values are shaped. In other words, the preconditions, invariants, and postconditions of my reusable code: &lt;a href=&quot;/encapsulation-and-solid/&quot;&gt;Encapsulation&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;f0cbf02e11484e9a8c8d0fab9a6463f2&quot;&gt;
        Examples &lt;a href=&quot;#f0cbf02e11484e9a8c8d0fab9a6463f2&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Some examples may be in order. In the next two articles, I&apos;ll first examine how easy it is to implement an algorithm in various programming languages. Then I&apos;ll discuss how to encapsulate that algorithm.
    &lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;Implementing rod-cutting&lt;/li&gt;
        &lt;li&gt;Encapsulating rod-cutting&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
        The articles will both discuss the rod-cutting problem from &lt;a href=&quot;/ref/clrs&quot;&gt;Introduction to Algorithms&lt;/a&gt;, but I&apos;ll introduce the problem in the next article.
    &lt;/p&gt;
    &lt;h3 id=&quot;97b3e722024b4228924faa2d6ff5d188&quot;&gt;
        Conclusion &lt;a href=&quot;#97b3e722024b4228924faa2d6ff5d188&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I&apos;d be naive if I believed that a single model can fully explain why some people prefer dynamically typed languages, and others rather like statically typed languages. Even so, suggesting a model helps me understand how to analyze problems.
    &lt;/p&gt;
    &lt;p&gt;
        My hypothesis is that dynamically typed languages may be suitable for implementing algorithms, whereas statically typed languages offer better encapsulation.
    &lt;/p&gt;
    &lt;p&gt;
        This may be used as a heuristic for &apos;picking the right tool for the job&apos;. If I need to suss out an algorithm, perhaps I should do it in Python. If, on the other hand, I need to publish a reusable library, perhaps Haskell is a better choice.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; Implementing rod-cutting.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/12/09/implementation-and-usage-mindsets</guid>
      </item>
    
      <item>
        <title>Short-circuiting an asynchronous traversal</title>
        <link>https://blog.ploeh.dk/2024/12/02/short-circuiting-an-asynchronous-traversal/</link>
        <pubDate>Mon, 02 Dec 2024 09:32:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Another C# example.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This article is a continuation of &lt;a href=&quot;/2024/11/18/collecting-and-handling-result-values&quot;&gt;an earlier post&lt;/a&gt; about refactoring a piece of imperative code to a &lt;a href=&quot;/2018/11/19/functional-architecture-a-definition&quot;&gt;functional architecture&lt;/a&gt;. It all started with &lt;a href=&quot;https://stackoverflow.com/q/79112836/126014&quot;&gt;a Stack Overflow question&lt;/a&gt;, but read the previous article, and you&apos;ll be up to speed.
    &lt;/p&gt;
    &lt;h3 id=&quot;2bf66b90d3ba4dfe980538175b647070&quot;&gt;
        Imperative outset &lt;a href=&quot;#2bf66b90d3ba4dfe980538175b647070&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To begin, consider this mostly imperative code snippet:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;();
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;();
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;&amp;nbsp;=&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;,&amp;nbsp;hasError:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;false&lt;/span&gt;);
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;foreach&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;updateResult&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;updateResult&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;bool&lt;/span&gt;)&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.hasError&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;true&lt;/span&gt;;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.hasError)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Results&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;BadRequest&lt;/span&gt;();
}
 
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
 
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Results&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Ok&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;]));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll recap a few points from the previous article. Apart from one crucial detail, it&apos;s similar to the other post. One has to infer most of the types and APIs, since the original post didn&apos;t show more code than that. If you&apos;re used to engaging with Stack Overflow questions, however, it&apos;s not too hard to figure out what most of the moving parts do.
    &lt;/p&gt;
    &lt;p&gt;
        The most non-obvious detail is that the code uses a library called &lt;a href=&quot;https://github.com/mcintyre321/OneOf/&quot;&gt;OneOf&lt;/a&gt;, which supplies general-purpose, but rather abstract, sum types. Both the container type &lt;code&gt;OneOf&lt;/code&gt;, as well as the two indicator types &lt;code&gt;NotFound&lt;/code&gt; and &lt;code&gt;Error&lt;/code&gt; are defined in that library.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;Match&lt;/code&gt; method implements standard &lt;a href=&quot;/2018/05/22/church-encoding&quot;&gt;Church encoding&lt;/a&gt;, which enables the code to pattern-match on the three alternative values that &lt;code&gt;UpdateItem&lt;/code&gt; returns.
    &lt;/p&gt;
    &lt;p&gt;
        One more detail also warrants an explicit description: The &lt;code&gt;itemsToUpdate&lt;/code&gt; object is an input argument of the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The major difference from before is that now the update process short-circuits on the first &lt;code&gt;Error&lt;/code&gt;. If an error occurs, it stops processing the rest of the items. In that case, it now returns &lt;code&gt;Results.BadRequest()&lt;/code&gt;, and it &lt;em&gt;doesn&apos;t&lt;/em&gt; save the changes to &lt;code&gt;dbContext&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?
    &lt;/p&gt;
    &lt;h3 id=&quot;d5b47b3ebb0345ea9b1d2879755bec12&quot;&gt;
        Short-circuiting traversal &lt;a href=&quot;#d5b47b3ebb0345ea9b1d2879755bec12&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        &lt;a href=&quot;/2024/11/11/traversals&quot;&gt;The standard Traverse function&lt;/a&gt; isn&apos;t lazy, or rather, it does consume the entire input sequence. Even various &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; data structures I investigated do that. And yes, I even tried to &lt;code&gt;traverse&lt;/code&gt; &lt;a href=&quot;https://hackage.haskell.org/package/list-t/docs/ListT.html&quot;&gt;ListT&lt;/a&gt;. If there&apos;s a data structure that you can &lt;code&gt;traverse&lt;/code&gt; with deferred execution of I/O-bound actions, I&apos;m not aware of it.
    &lt;/p&gt;
    &lt;p&gt;
        That said, all is not lost, but you&apos;ll need to implement a more specialized traversal. While consuming the input sequence, the function needs to know when to stop. It can&apos;t do that on just any &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1&quot;&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/a&gt;, because it has no information about &lt;code&gt;T&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If, on the other hand, you specialize the traversal to a sequence of items with more information, you can stop processing if it encounters a particular condition. You could generalize this to, say, &lt;code&gt;IEnumerable&amp;lt;Either&amp;lt;L, R&amp;gt;&amp;gt;&lt;/code&gt;, but since I already have the OneOf library in scope, I&apos;ll use that, instead of implementing or pulling in a general-purpose &lt;a href=&quot;/2018/06/11/church-encoded-either&quot;&gt;Either&lt;/a&gt; data type.
    &lt;/p&gt;
    &lt;p&gt;
        In fact, I&apos;ll just use a three-way &lt;code&gt;OneOf&lt;/code&gt; type compatible with the one that &lt;code&gt;UpdateItem&lt;/code&gt; returns.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;Sequence&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;tasks&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;foreach&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;task&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;tasks&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;task&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.IsT2)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;break&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;;
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This implementation doesn&apos;t care what &lt;code&gt;T1&lt;/code&gt; or &lt;code&gt;T2&lt;/code&gt; is, so they&apos;re free to be &lt;code&gt;ShoppingListItem&lt;/code&gt; and &lt;code&gt;NotFound&lt;/code&gt;. The third type argument, on the other hand, must be &lt;code&gt;Error&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;if&lt;/code&gt; conditional looks a bit odd, but as I wrote, the types that ship with the OneOf library have rather abstract APIs. A three-way &lt;code&gt;OneOf&lt;/code&gt; value comes with three case tests called &lt;code&gt;IsT0&lt;/code&gt;, &lt;code&gt;IsT1&lt;/code&gt;, and &lt;code&gt;IsT2&lt;/code&gt;. Notice that the library uses a zero-indexed naming convention for its type parameters. &lt;code&gt;IsT2&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if the value is the &lt;em&gt;third&lt;/em&gt; kind, in this case &lt;code&gt;Error&lt;/code&gt;. If a &lt;code&gt;task&lt;/code&gt; turns out to produce an &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Sequence&lt;/code&gt; method adds that one error, but then stops processing any remaining items.
    &lt;/p&gt;
    &lt;p&gt;
        Some readers may complain that the entire implementation of &lt;code&gt;Sequence&lt;/code&gt; is imperative. It hardly matters that much, since the mutation doesn&apos;t escape the method. The behaviour is as functional as it&apos;s possible to make it. It&apos;s fundamentally I/O-bound, so we can&apos;t consider it a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;. That said, if we hypothetically imagine that all the &lt;code&gt;tasks&lt;/code&gt; are deterministic and have no side effects, the &lt;code&gt;Sequence&lt;/code&gt; function does become a pure function when viewed as a black box. From the outside, you can&apos;t tell that the implementation is imperative.
    &lt;/p&gt;
    &lt;p&gt;
        It &lt;em&gt;is&lt;/em&gt; possible to implement &lt;code&gt;Sequence&lt;/code&gt; in a proper functional style, and it might make &lt;a href=&quot;/2020/01/13/on-doing-katas&quot;&gt;a good exercise&lt;/a&gt;. I think, however, that it&apos;ll be difficult in C#. In &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; or Haskell I&apos;d use recursion, and while you &lt;em&gt;can&lt;/em&gt; do that in C#, I admit that I&apos;ve lost sight of whether or not &lt;a href=&quot;/2015/12/22/tail-recurse&quot;&gt;tail recursion&lt;/a&gt; is supported by the C# compiler.
    &lt;/p&gt;
    &lt;p&gt;
        Be that as it may, the traversal implementation doesn&apos;t change.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;items&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;items&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Sequence&lt;/span&gt;();
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can now &lt;code&gt;Traverse&lt;/code&gt; the &lt;code&gt;itemsToUpdate&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        As the &lt;code&gt;// Impure&lt;/code&gt; comment may suggest, this constitutes the first impure layer of an &lt;a href=&quot;/2020/03/02/impureim-sandwich&quot;&gt;Impureim Sandwich&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;e7d6b741e8e1406b9588a5788df0ff9b&quot;&gt;
        Aggregating the results &lt;a href=&quot;#e7d6b741e8e1406b9588a5788df0ff9b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Since the above statement awaits the traversal, the &lt;code&gt;results&lt;/code&gt; object is a &apos;pure&apos; object that can be passed to a pure function. This does, however, assume that &lt;code&gt;ShoppingListItem&lt;/code&gt; is an immutable object.
    &lt;/p&gt;
    &lt;p&gt;
        The next step must collect results and &lt;code&gt;NotFound&lt;/code&gt;-related failures, but contrary to the previous article, it must short-circuit if it encounters an &lt;code&gt;Error&lt;/code&gt;. This again suggests an Either-like data structure, but again I&apos;ll repurpose a &lt;code&gt;OneOf&lt;/code&gt; container. I&apos;ll start by defining a &lt;code&gt;seed&lt;/code&gt; for an aggregation (a &lt;em&gt;left fold&lt;/em&gt;).
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;seed&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;),&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromT0&lt;/span&gt;(([],&amp;nbsp;[]));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This type can be either a tuple or an error. The .NET tendency is often to define an explicit &lt;code&gt;Result&amp;lt;TSuccess, TFailure&amp;gt;&lt;/code&gt; type, where &lt;code&gt;TSuccess&lt;/code&gt; is defined to the left of &lt;code&gt;TFailure&lt;/code&gt;. This, for example, is &lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/language-reference/results&quot;&gt;how F# defines Result types&lt;/a&gt;, and other .NET libraries tend to emulate that design. That&apos;s also what I&apos;ve done here, although I admit that I&apos;m regularly confused when going back and forth between F# and Haskell, where the &lt;code&gt;Right&lt;/code&gt; case is &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatically&lt;/a&gt; considered to indicate success.
    &lt;/p&gt;
    &lt;p&gt;
        As already discussed, OneOf follows a zero-indexed naming convention for type parameters, so &lt;code&gt;FromT0&lt;/code&gt; indicates the first (or leftmost) case. The seed is thus initialized with a tuple that contains two empty sequences.
    &lt;/p&gt;
    &lt;p&gt;
        As in the previous article, you can now use the &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.linq.enumerable.aggregate&quot;&gt;Aggregate&lt;/a&gt; method to collect the result you want.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;seed&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;MapT0&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item1.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Append&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item2)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;MapT0&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item1,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item2.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Append&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;.Item))),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;e&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;e&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;MapT0&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item1.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;(),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;t&lt;/span&gt;.Item2.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;()));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This expression is a two-step composition. I&apos;ll get back to the concluding &lt;code&gt;MapT0&lt;/code&gt; in a moment, but let&apos;s first discuss what happens in the &lt;code&gt;Aggregate&lt;/code&gt; step. Since the &lt;code&gt;state&lt;/code&gt; is now a discriminated union, the big lambda expression not only has to &lt;code&gt;Match&lt;/code&gt; on the &lt;code&gt;result&lt;/code&gt;, but it also has to deal with the two mutually exclusive cases in which &lt;code&gt;state&lt;/code&gt; can be.
    &lt;/p&gt;
    &lt;p&gt;
        Although it comes third in the code listing, it may be easiest to explain if we start with the error case. Keep in mind that the &lt;code&gt;seed&lt;/code&gt; starts with the optimistic assumption that the operation is going to succeed. If, however, we encounter an error &lt;code&gt;e&lt;/code&gt;, we now switch the &lt;code&gt;state&lt;/code&gt; to the &lt;code&gt;Error&lt;/code&gt; case. Once in that state, it stays there.
    &lt;/p&gt;
    &lt;p&gt;
        The two other &lt;code&gt;result&lt;/code&gt; cases map over the first (i.e. the success) case, appending the result to the appropriate sequence in the tuple &lt;code&gt;t&lt;/code&gt;. Since these expressions map over the first (zero-indexed) case, these updates only run as long as the &lt;code&gt;state&lt;/code&gt; is in the success case. If the &lt;code&gt;state&lt;/code&gt; is in the error state, these lambda expressions don&apos;t run, and the &lt;code&gt;state&lt;/code&gt; doesn&apos;t change.
    &lt;/p&gt;
    &lt;p&gt;
        After having collected the tuple of sequences, the final step is to map over the success case, turning the tuple &lt;code&gt;t&lt;/code&gt; into a &lt;code&gt;BulkUpdateResult&lt;/code&gt;. That&apos;s what &lt;code&gt;MapT0&lt;/code&gt; does: It maps over the first (zero-indexed) case, which contains the tuple of sequences. It&apos;s a standard &lt;a href=&quot;/2018/03/22/functors&quot;&gt;functor&lt;/a&gt; projection.
    &lt;/p&gt;
    &lt;h3 id=&quot;e4c3b20a30c34b4785ccdd886b20d197&quot;&gt;
        Saving the changes and returning the results &lt;a href=&quot;#e4c3b20a30c34b4785ccdd886b20d197&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The final, impure step in the sandwich is to save the changes and return the results:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bulkUpdateResult&lt;/span&gt;&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Results&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Ok&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bulkUpdateResult&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;_&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromResult&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Results&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;BadRequest&lt;/span&gt;()));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Note that it only calls &lt;code&gt;dbContext.SaveChangesAsync()&lt;/code&gt; in case the &lt;code&gt;result&lt;/code&gt; is a success.
    &lt;/p&gt;
    &lt;h3 id=&quot;a6d28bd9d66a4e068bc4cd4ba21dde32&quot;&gt;
        Accumulating the bulk-update result &lt;a href=&quot;#a6d28bd9d66a4e068bc4cd4ba21dde32&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        So far, I&apos;ve assumed that the final &lt;code&gt;BulkUpdateResult&lt;/code&gt; class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use that to aggregate the result, instead of an anonymous tuple.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Store&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;([..&amp;nbsp;StoredItems,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;],&amp;nbsp;FailedItems);
 
&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Fail&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;(StoredItems,&amp;nbsp;[..&amp;nbsp;FailedItems,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;]);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I would have personally preferred the name &lt;code&gt;NotFound&lt;/code&gt; instead of &lt;code&gt;Fail&lt;/code&gt;, but I was going with the original post&apos;s &lt;code&gt;failedItems&lt;/code&gt; terminology, and I thought that it made more sense to call a method &lt;code&gt;Fail&lt;/code&gt; when it adds to a collection called &lt;code&gt;FailedItems&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Adding these two instance methods to &lt;code&gt;BulkUpdateResult&lt;/code&gt; simplifies the composing code:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Pure&lt;/span&gt;
&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromT0&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;([],&amp;nbsp;[])),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;MapT0&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bur&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bur&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Store&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;MapT0&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bur&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;bur&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Fail&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;.Item)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;e&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;e&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This variation starts with an empty &lt;code&gt;BulkUpdateResult&lt;/code&gt; and then uses &lt;code&gt;Store&lt;/code&gt; or &lt;code&gt;Fail&lt;/code&gt; as appropriate to update the state. The final, impure step of the sandwich remains the same.
    &lt;/p&gt;
    &lt;h3 id=&quot;ed88649e2d75403ab654fe7c034b6c1f&quot;&gt;
        Conclusion &lt;a href=&quot;#ed88649e2d75403ab654fe7c034b6c1f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        It&apos;s a bit more tricky to implement a short-circuiting traversal than the standard traversal. You can, still, implement a specialized &lt;code&gt;Sequence&lt;/code&gt; or &lt;code&gt;Traverse&lt;/code&gt; method, but it requires that the input stream carries enough information to decide when to stop processing more items. In this article, I used a specialized three-way union, but you could generalize this to use a standard Either or Result type.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/12/02/short-circuiting-an-asynchronous-traversal</guid>
      </item>
    
      <item>
        <title>Nested monads</title>
        <link>https://blog.ploeh.dk/2024/11/25/nested-monads/</link>
        <pubDate>Mon, 25 Nov 2024 07:31:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;You can stack some monads in such a way that the composition is also a monad.&lt;/em&gt;
    &lt;/p&gt;
	&lt;p&gt;
		This article is part of &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;a series of articles about functor relationships&lt;/a&gt;. In a previous article you learned that &lt;a href=&quot;/2024/10/28/functor-compositions&quot;&gt;nested functors form a functor&lt;/a&gt;. You may have wondered if &lt;a href=&quot;/2022/03/28/monads&quot;&gt;monads&lt;/a&gt; compose in the same way. Does a monad nested in a monad form a monad?
	&lt;/p&gt;
    &lt;p&gt;
        As far as I know, there&apos;s no universal rule like that, but some monads compose well. Fortunately, it&apos;s been my experience that the combinations that you need in practice are among those that exist and are well-known. In a &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; context, it&apos;s often the case that you need to run some kind of &apos;effect&apos; inside &lt;code&gt;IO&lt;/code&gt;. Perhaps you want to use &lt;code&gt;Maybe&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt; nested within &lt;code&gt;IO&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In .NET, you may run into a similar need to compose task-based programming with an effect. This happens more often in &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; than in C#, since F# comes with other native monads (&lt;code&gt;option&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt;, to name the most common).
    &lt;/p&gt;
    &lt;h3 id=&quot;d84f448d09124e31a8fbeb27abe3d826&quot;&gt;
        Abstract shape &lt;a href=&quot;#d84f448d09124e31a8fbeb27abe3d826&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You&apos;ll see some real examples in a moment, but as usual it helps to outline what it is that we&apos;re looking for. Imagine that you have a monad. We&apos;ll call it &lt;code&gt;F&lt;/code&gt; in keeping with tradition. In this article series, you&apos;ve seen how two or more &lt;a href=&quot;/2018/03/22/functors&quot;&gt;functors&lt;/a&gt; compose. When discussing the abstract shapes of things, we&apos;ve typically called our two abstract functors &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;. I&apos;ll stick to that naming scheme here, because monads are functors (&lt;a href=&quot;/2022/03/28/monads&quot;&gt;that you can flatten&lt;/a&gt;).
    &lt;/p&gt;
    &lt;p&gt;
        Now imagine that you have a value that stacks two monads: &lt;code&gt;F&amp;lt;G&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. If the inner monad &lt;code&gt;G&lt;/code&gt; is the &apos;right&apos; kind of monad, that configuration itself forms a monad.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/nested-monads-transformed-to-single-monad.png&quot; alt=&quot;Nested monads depicted as concentric circles. To the left the circle F contains the circle G that again contains the circle a. To the right the wider circle FG contains the circle that contains a. An arrow points from the left circles to the right circles.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In the diagram, I&apos;ve simply named the combined monad &lt;code&gt;FG&lt;/code&gt;, which is a naming strategy I&apos;ve seen in the real world, too: &lt;code&gt;TaskResult&lt;/code&gt;, etc.
    &lt;/p&gt;
    &lt;p&gt;
        As I&apos;ve already mentioned, if there&apos;s a general theorem that says that this is always possible, I&apos;m not aware of it. To the contrary, I seem to recall reading that this is distinctly not the case, but the source escapes me at the moment. One hint, though, is offered in the documentation of &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html&quot;&gt;Data.Functor.Compose&lt;/a&gt;:
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;The composition of applicative functors is always applicative, but the composition of monads is not always a monad.&quot;
        &lt;/p&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        Thankfully, the monads that you mostly need to compose do, in fact, compose. They include &lt;a href=&quot;/2022/04/25/the-maybe-monad&quot;&gt;Maybe&lt;/a&gt;, &lt;a href=&quot;/2022/05/09/an-either-monad&quot;&gt;Either&lt;/a&gt;, &lt;a href=&quot;/2022/06/20/the-state-monad&quot;&gt;State&lt;/a&gt;, &lt;a href=&quot;/2022/11/14/the-reader-monad&quot;&gt;Reader&lt;/a&gt;, and &lt;a href=&quot;/2022/05/16/the-identity-monad&quot;&gt;Identity&lt;/a&gt; (okay, that one maybe isn&apos;t that useful). In other words, any monad &lt;code&gt;F&lt;/code&gt; that composes with e.g. &lt;code&gt;Maybe&lt;/code&gt;, that is, &lt;code&gt;F&amp;lt;Maybe&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, also forms a monad.
    &lt;/p&gt;
    &lt;p&gt;
        Notice that it&apos;s the &apos;inner&apos; monad that determines whether composition is possible. Not the &apos;outer&apos; monad.
    &lt;/p&gt;
    &lt;p&gt;
        For what it&apos;s worth, I&apos;m basing much of this on my personal experience, which was again helpfully guided by &lt;a href=&quot;https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Class.html&quot;&gt;Control.Monad.Trans.Class&lt;/a&gt;. I don&apos;t, however, wish to turn this article into an article about monad transformers, because if you already know Haskell, you can read the documentation and look at examples. And if you don&apos;t know Haskell, the specifics of monad transformers don&apos;t readily translate to languages like C# or F#.
    &lt;/p&gt;
    &lt;p&gt;
        The conclusions do translate, but the specific language mechanics don&apos;t.
    &lt;/p&gt;
    &lt;p&gt;
        Let&apos;s look at some common examples.
    &lt;/p&gt;
    &lt;h3 id=&quot;51dcb0d54afc46d7b26b7f4021e08dbc&quot;&gt;
        TaskMaybe monad &lt;a href=&quot;#51dcb0d54afc46d7b26b7f4021e08dbc&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        We&apos;ll start with a simple, yet realistic example. The article &lt;a href=&quot;/2019/02/11/asynchronous-injection&quot;&gt;Asynchronous Injection&lt;/a&gt; shows a simple operation that involves reading from a database, making a decision, and potentially writing to the database. The final composition, repeated here for your convenience, is an asynchronous (that is, &lt;code&gt;Task&lt;/code&gt;-based) process.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ReadReservations&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryAccept&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Create&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;InternalServerError&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Table&amp;nbsp;unavailable&amp;quot;&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Ok&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The problem here is that &lt;code&gt;TryAccept&lt;/code&gt; returns &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Reservation&lt;/span&gt;&amp;gt;&lt;/code&gt;, but since the overall workflow already &apos;runs in&apos; an &lt;a href=&quot;/2022/06/06/asynchronous-monads&quot;&gt;asynchronous monad&lt;/a&gt; (&lt;code&gt;Task&lt;/code&gt;), the monads are now nested as &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The way I dealt with that issue in the above code snippet was to rely on a &lt;a href=&quot;/2024/11/11/traversals&quot;&gt;traversal&lt;/a&gt;, but it&apos;s actually an inelegant solution. The way that the &lt;code&gt;SelectMany&lt;/code&gt; invocation maps over the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Reservation&lt;/span&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;m&lt;/code&gt; is awkward. Instead of &lt;a href=&quot;/2018/07/02/terse-operators-make-business-code-more-readable&quot;&gt;composing a business process&lt;/a&gt;, the scaffolding is on display, so to speak. Sometimes this is unavoidable, but at other times, there may be a better way.
    &lt;/p&gt;
    &lt;p&gt;
        In my defence, when I wrote that article in 2019 I had another pedagogical goal than teaching nested monads. It turns out, however, that you can rewrite the business process using the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; stack as a monad in its own right.
    &lt;/p&gt;
    &lt;p&gt;
        A monad needs two functions: &lt;em&gt;return&lt;/em&gt; and either &lt;em&gt;bind&lt;/em&gt; or &lt;em&gt;join&lt;/em&gt;. In C# or F#, you can often treat &lt;em&gt;return&lt;/em&gt; as &apos;implied&apos;, in the sense that you can always wrap &lt;code&gt;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; in a call to &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.fromresult&quot;&gt;Task.FromResult&lt;/a&gt;. You&apos;ll see that in a moment.
    &lt;/p&gt;
    &lt;p&gt;
        While you can be cavalier about monadic &lt;em&gt;return&lt;/em&gt;, you&apos;ll need to explicitly implement either &lt;em&gt;bind&lt;/em&gt; or &lt;em&gt;join&lt;/em&gt;. In this case, it turns out that the sample code base already had a &lt;code&gt;SelectMany&lt;/code&gt; implementation:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;m&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;nothing&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromResult&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;()),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;just&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The method first awaits the &lt;code&gt;Maybe&lt;/code&gt; value, and then proceeds to &lt;code&gt;Match&lt;/code&gt; on it. In the &lt;code&gt;nothing&lt;/code&gt; case, you see the implicit &lt;em&gt;return&lt;/em&gt; being used. In the &lt;code&gt;just&lt;/code&gt; case, the &lt;code&gt;SelectMany&lt;/code&gt; method calls &lt;code&gt;selector&lt;/code&gt; with whatever &lt;code&gt;x&lt;/code&gt; value was contained in the &lt;code&gt;Maybe&lt;/code&gt; object. The result of calling &lt;code&gt;selector&lt;/code&gt; already has the desired type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt;, so the implementation simply returns that value without further ado.
    &lt;/p&gt;
    &lt;p&gt;
        This enables you to rewrite the &lt;code&gt;SelectMany&lt;/code&gt; call in the business process so that it instead looks like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ReadReservations&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryAccept&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;InternalServerError&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Table&amp;nbsp;unavailable&amp;quot;&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Ok&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        At first glance, it doesn&apos;t look like much of an improvement. To be sure, the lambda expression within the &lt;code&gt;SelectMany&lt;/code&gt; method no longer operates on a &lt;code&gt;Maybe&lt;/code&gt; value, but rather on the &lt;code&gt;Reservation&lt;/code&gt; Domain Model &lt;code&gt;r&lt;/code&gt;. On the other hand, we&apos;re now saddled with that graceless &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;))&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Had this been Haskell, we could have made this more succinct by eta reducing the &lt;code&gt;Maybe&lt;/code&gt; case constructor and used the &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; infix operator instead of &lt;code&gt;fmap&lt;/code&gt;; something like &lt;code&gt;Just &amp;lt;$&amp;gt; create r&lt;/code&gt;. In C#, on the other hand, we can do something that Haskell doesn&apos;t allow. We can overload the &lt;code&gt;SelectMany&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;y&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;y&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This overload generalizes the &apos;pattern&apos; exemplified by the above business process composition. Instead of a specific method call, it now works with any &lt;code&gt;selector&lt;/code&gt; function that returns &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt;. Since &lt;code&gt;selector&lt;/code&gt; only returns a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt; value, and not a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; value, as actually required in this nested monad, the overload has to map (that is, &lt;code&gt;Select&lt;/code&gt;) the result by wrapping it in a &lt;code&gt;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        This now enables you to improve the business process composition to something more readable.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ReadReservations&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;TryAccept&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;rs&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;reservation&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Create&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;InternalServerError&lt;/span&gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Table&amp;nbsp;unavailable&amp;quot;&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Ok&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It even turned out to be possible to eta reduce the lambda expression instead of the (also valid, but more verbose) &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;Repository.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Create&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;)&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If you&apos;re interested in the sample code, I&apos;ve pushed a branch named &lt;code&gt;use-monad-stack&lt;/code&gt; to &lt;a href=&quot;https://github.com/ploeh/asynchronous-injection&quot;&gt;the GitHub repository&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Not surprisingly, the F# &lt;code&gt;bind&lt;/code&gt; function is much terser:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;bind&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;match!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Some&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&amp;#39;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&amp;#39;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;None&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;None&lt;/span&gt;&amp;nbsp;}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can find that particular snippet in the code base that accompanies the article &lt;a href=&quot;/2019/12/02/refactoring-registration-flow-to-functional-architecture&quot;&gt;Refactoring registration flow to functional architecture&lt;/a&gt;, although as far as I can tell, it&apos;s not actually in use in that code base. I probably just added it because I could.
    &lt;/p&gt;
    &lt;p&gt;
        You can find Haskell examples of combining &lt;a href=&quot;https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Maybe.html&quot;&gt;MaybeT&lt;/a&gt; with &lt;code&gt;IO&lt;/code&gt; in various articles on this blog. One of them is &lt;a href=&quot;/2017/02/02/dependency-rejection&quot;&gt;Dependency rejection&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;74c0764ee623459596700a6462dd5452&quot;&gt;
        TaskResult monad &lt;a href=&quot;#74c0764ee623459596700a6462dd5452&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        A similar, but slightly more complex, example involves nesting Either values in asynchronous workflows. In some languages, such as F#, Either is rather called &lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/language-reference/results&quot;&gt;Result&lt;/a&gt;, and asynchronous workflows are modelled by a &lt;code&gt;Task&lt;/code&gt; &lt;a href=&quot;https://bartoszmilewski.com/2014/01/14/functors-are-containers/&quot;&gt;container&lt;/a&gt;, as already demonstrated above. Thus, on .NET at least, this nested monad is often called &lt;em&gt;TaskResult&lt;/em&gt;, but you may also see &lt;em&gt;AsyncResult&lt;/em&gt;, &lt;em&gt;AsyncEither&lt;/em&gt;, or other combinations. Depending on the programming language, such names may be used only for modules, and not for the container type itself. In C# or F# code, for example, you may look in vain after a class called &lt;code&gt;TaskResult&amp;lt;T&amp;gt;&lt;/code&gt;, but rather find a &lt;code&gt;TaskResult&lt;/code&gt; static class or module.
    &lt;/p&gt;
    &lt;p&gt;
        In C# you can define monadic &lt;em&gt;bind&lt;/em&gt; like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;is&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;null&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;throw&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;ArgumentNullException&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;nameof&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;));
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ConfigureAwait&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;false&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromResult&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Left&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ConfigureAwait&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;false&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Here I&apos;ve again passed the eta-reduced &lt;code&gt;selector&lt;/code&gt; straight to the &lt;em&gt;right&lt;/em&gt; case of the &lt;code&gt;Either&lt;/code&gt; value, but &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;)&lt;/code&gt; works, too.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;em&gt;left&lt;/em&gt; case shows another example of &apos;implicit monadic &lt;em&gt;return&lt;/em&gt;&apos;. I didn&apos;t bother defining an explicit &lt;code&gt;Return&lt;/code&gt; function, but rather use &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;FromResult&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Left&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;))&lt;/code&gt; to return a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; value.
    &lt;/p&gt;
    &lt;p&gt;
        As is the case with C#, you&apos;ll also need to add a special overload to enable the syntactic sugar of &lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/linq/get-started/query-expression-basics&quot;&gt;query expressions&lt;/a&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;U&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;L&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;U&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;k&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;R&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;U&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;R1&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;source&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SelectMany&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;k&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;y&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;y&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ll see a comprehensive example using these functions in a future article.
    &lt;/p&gt;
    &lt;p&gt;
        In F# I&apos;d often first define a module with a few functions including &lt;code&gt;bind&lt;/code&gt;, and then use those implementations to define a &lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/language-reference/computation-expressions&quot;&gt;computation expression&lt;/a&gt;, but in &lt;a href=&quot;/2016/04/11/async-as-surrogate-io&quot;&gt;one article&lt;/a&gt;, I jumped straight to the expression builder:
    &lt;/p&gt;
    &lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#4ec9b0;&quot;&gt;AsyncEitherBuilder&lt;/span&gt;&amp;nbsp;()&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Async&amp;lt;Result&amp;lt;&amp;#39;a,&amp;#39;c&amp;gt;&amp;gt;&amp;nbsp;*&amp;nbsp;(&amp;#39;a&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;Result&amp;lt;&amp;#39;b,&amp;#39;c&amp;gt;&amp;gt;)&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;Result&amp;lt;&amp;#39;b,&amp;#39;c&amp;gt;&amp;gt;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;this.&lt;span style=&quot;color:navy;&quot;&gt;Bind&lt;/span&gt;(x,&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;f&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;x&amp;#39;&amp;nbsp;=&amp;nbsp;x
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;match&lt;/span&gt;&amp;nbsp;x&amp;#39;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Success&lt;/span&gt;&amp;nbsp;s&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return!&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;f&lt;/span&gt;&amp;nbsp;s
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Failure&lt;/span&gt;&amp;nbsp;f&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:navy;&quot;&gt;Failure&lt;/span&gt;&amp;nbsp;f&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;&amp;#39;a&amp;nbsp;-&amp;gt;&amp;nbsp;&amp;#39;a&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;member&lt;/span&gt;&amp;nbsp;this.&lt;span style=&quot;color:navy;&quot;&gt;ReturnFrom&lt;/span&gt;&amp;nbsp;x&amp;nbsp;=&amp;nbsp;x
 
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;asyncEither&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#4ec9b0;&quot;&gt;AsyncEitherBuilder&lt;/span&gt;&amp;nbsp;()&lt;/pre&gt;
	&lt;/p&gt;
    &lt;p&gt;
        That article also shows usage examples. Another article, &lt;a href=&quot;/2022/02/14/a-conditional-sandwich-example&quot;&gt;A conditional sandwich example&lt;/a&gt;, shows more examples of using this nested monad, although there, the computation expression is named &lt;code&gt;taskResult&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;e6426619b2ae4f8d97d62edfe9cae0ca&quot;&gt;
        Stateful computations that may fail &lt;a href=&quot;#e6426619b2ae4f8d97d62edfe9cae0ca&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To be honest, you mostly run into a scenario where nested monads are useful when some kind of &apos;effect&apos; (errors, mostly) is embedded in an &lt;a href=&quot;https://en.wikipedia.org/wiki/Input/output&quot;&gt;I/O&lt;/a&gt;-bound computation. In Haskell, this means &lt;code&gt;IO&lt;/code&gt;, in C# &lt;code&gt;Task&lt;/code&gt;, and in F# either &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;Async&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Other combinations are possible, however, but I&apos;ve rarely encountered a need for additional nested monads outside of Haskell. In multi-paradigmatic languages, you can usually find other good designs that address issues that you may occasionally run into in a purely functional language. The following example is a Haskell-only example. You can skip it if you don&apos;t know or care about Haskell.
    &lt;/p&gt;
    &lt;p&gt;
        Imagine that you want to keep track of some statistics related to a software service you offer. If the &lt;a href=&quot;https://en.wikipedia.org/wiki/Variance&quot;&gt;variance&lt;/a&gt; of some number (say, response time) exceeds 10 then you want to issue an alert that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service-level_agreement&quot;&gt;SLA&lt;/a&gt; was violated. Apparently, in your system, reliability means staying consistent.
    &lt;/p&gt;
    &lt;p&gt;
        You have millions of observations, and they keep arriving, so you need an &lt;a href=&quot;https://en.wikipedia.org/wiki/Online_algorithm&quot;&gt;online algorithm&lt;/a&gt;. For average and variance we&apos;ll use &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance&quot;&gt;Welford&apos;s algorithm&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The following code uses these imports:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;Control.Monad
&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;Control.Monad.Trans.State.Strict
&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;Control.Monad.Trans.Maybe&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        First, you can define a data structure to hold the aggregate values required for the algorithm, as well as an initial, empty value:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;data&lt;/span&gt;&amp;nbsp;Aggregate&amp;nbsp;=&amp;nbsp;Aggregate&amp;nbsp;{&amp;nbsp;count&amp;nbsp;::&amp;nbsp;Int,&amp;nbsp;meanA&amp;nbsp;::&amp;nbsp;Double,&amp;nbsp;m2&amp;nbsp;::&amp;nbsp;Double&amp;nbsp;}&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;deriving&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Eq&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Show&lt;/span&gt;)
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;emptyA&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;
emptyA&amp;nbsp;=&amp;nbsp;Aggregate&amp;nbsp;0&amp;nbsp;0&amp;nbsp;0&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can also define a function to update the aggregate values with a new observation:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;update&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;
update&amp;nbsp;(Aggregate&amp;nbsp;count&amp;nbsp;mean&amp;nbsp;m2)&amp;nbsp;x&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;count&amp;#39;&amp;nbsp;=&amp;nbsp;count&amp;nbsp;+&amp;nbsp;1
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delta&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;mean
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mean&amp;#39;&amp;nbsp;=&amp;nbsp;mean&amp;nbsp;+&amp;nbsp;delta&amp;nbsp;/&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;fromIntegral&lt;/span&gt;&amp;nbsp;count&amp;#39;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;delta2&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;mean&amp;#39;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;m2&amp;#39;&amp;nbsp;=&amp;nbsp;m2&amp;nbsp;+&amp;nbsp;delta&amp;nbsp;*&amp;nbsp;delta2
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;Aggregate&amp;nbsp;count&amp;#39;&amp;nbsp;mean&amp;#39;&amp;nbsp;m2&amp;#39;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Given an existing &lt;code&gt;Aggregate&lt;/code&gt; record and a new observation, this function implements the algorithm to calculate a new &lt;code&gt;Aggregate&lt;/code&gt; record.
    &lt;/p&gt;
    &lt;p&gt;
        The values in an &lt;code&gt;Aggregate&lt;/code&gt; record, however, are only intermediary values that you can use to calculate statistics such as mean, variance, and sample variance. You&apos;ll need a data type and function to do that, as well:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;data&lt;/span&gt;&amp;nbsp;Statistics&amp;nbsp;=
&amp;nbsp;&amp;nbsp;Statistics
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;nbsp;mean&amp;nbsp;::&amp;nbsp;Double,&amp;nbsp;variance&amp;nbsp;::&amp;nbsp;Double,&amp;nbsp;sampleVariance&amp;nbsp;::&amp;nbsp;Maybe&amp;nbsp;Double&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;deriving&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Eq&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Show&lt;/span&gt;)
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;extractStatistics&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Statistics&lt;/span&gt;
extractStatistics&amp;nbsp;(Aggregate&amp;nbsp;count&amp;nbsp;mean&amp;nbsp;m2)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;count&amp;nbsp;&amp;lt;&amp;nbsp;1&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;Nothing
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;variance&amp;nbsp;=&amp;nbsp;m2&amp;nbsp;/&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;fromIntegral&lt;/span&gt;&amp;nbsp;count
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sampleVariance&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;count&amp;nbsp;&amp;lt;&amp;nbsp;2&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;Nothing&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;Just&amp;nbsp;$&amp;nbsp;m2&amp;nbsp;/&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;fromIntegral&lt;/span&gt;&amp;nbsp;(count&amp;nbsp;-&amp;nbsp;1)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;in&lt;/span&gt;&amp;nbsp;Just&amp;nbsp;$&amp;nbsp;Statistics&amp;nbsp;mean&amp;nbsp;variance&amp;nbsp;sampleVariance&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is where the computation becomes &apos;failure-prone&apos;. Granted, we only have a real problem when we have zero observations, but this still means that we need to return a &lt;code&gt;Maybe Statistics&lt;/code&gt; value in order to avoid division by zero.
    &lt;/p&gt;
    &lt;p&gt;
        (There might be other designs that avoid that problem, or you might simply decide to tolerate that edge case and code around it in other ways. I&apos;ve decided to design the &lt;code&gt;extractStatistics&lt;/code&gt; function in this particular way in order to furnish an example. Work with me here.)
    &lt;/p&gt;
    &lt;p&gt;
        Let&apos;s say that as the next step, you&apos;d like to compose these two functions into a single function that both adds a new observation, computes the statistics, but also returns the updated &lt;code&gt;Aggregate&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You &lt;em&gt;could&lt;/em&gt; write it like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;addAndCompute&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Statistics&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;)
addAndCompute&amp;nbsp;x&amp;nbsp;agg&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;agg&amp;#39;&amp;nbsp;=&amp;nbsp;update&amp;nbsp;agg&amp;nbsp;x
&amp;nbsp;&amp;nbsp;stats&amp;nbsp;&amp;lt;-&amp;nbsp;extractStatistics&amp;nbsp;agg&amp;#39;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;(stats,&amp;nbsp;agg&amp;#39;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This implementation uses &lt;code&gt;do&lt;/code&gt; notation to automate handling of &lt;code&gt;Nothing&lt;/code&gt; values. Still, it&apos;s a bit inelegant with its two &lt;code&gt;agg&lt;/code&gt; values only distinguishable by the prime sign after one of them, and the need to explicitly return a tuple of the value and the new state.
    &lt;/p&gt;
    &lt;p&gt;
        This is the kind of problem that the State monad addresses. You could instead write the function like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;addAndCompute&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;State&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Statistics&lt;/span&gt;)
addAndCompute&amp;nbsp;x&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;modify&amp;nbsp;$&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;flip&lt;/span&gt;&amp;nbsp;update&amp;nbsp;x
&amp;nbsp;&amp;nbsp;gets&amp;nbsp;extractStatistics&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You could actually also write it as a one-liner, but that&apos;s already a bit too terse to my liking:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;addAndCompute&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;State&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Statistics&lt;/span&gt;)
addAndCompute&amp;nbsp;x&amp;nbsp;=&amp;nbsp;modify&amp;nbsp;(`update`&amp;nbsp;x)&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;gets&amp;nbsp;extractStatistics&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        And if you really hate your co-workers, you can always visit &lt;a href=&quot;https://pointfree.io&quot;&gt;pointfree.io&lt;/a&gt; to entirely obscure that expression, but I digress.
    &lt;/p&gt;
    &lt;p&gt;
        The point is that the State monad &lt;a href=&quot;/ref/doocautbm&quot;&gt;amplifies the essential and eliminates the irrelevant&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Now you&apos;d like to add a function that issues an alert if the variance is greater than 10. Again, you &lt;em&gt;could&lt;/em&gt; write it like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;monitor&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;State&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;)
monitor&amp;nbsp;x&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;stats&amp;nbsp;&amp;lt;-&amp;nbsp;addAndCompute&amp;nbsp;x
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;case&lt;/span&gt;&amp;nbsp;stats&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Just&amp;nbsp;Statistics&amp;nbsp;{&amp;nbsp;variance&amp;nbsp;}&amp;nbsp;-&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;10&amp;nbsp;&amp;lt;&amp;nbsp;variance
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;Just&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;SLA&amp;nbsp;violation&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;Nothing
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Nothing&amp;nbsp;-&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;Nothing&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        But again, the code is graceless with its explicit handling of &lt;code&gt;Maybe&lt;/code&gt; cases. Whenever you see code that matches &lt;code&gt;Maybe&lt;/code&gt; cases and maps &lt;code&gt;Nothing&lt;/code&gt; to &lt;code&gt;Nothing&lt;/code&gt;, your spider sense should be tingling. Could you abstract that away with a functor or monad?
    &lt;/p&gt;
    &lt;p&gt;
        Yes you can! You can use the &lt;code&gt;MaybeT&lt;/code&gt; monad transformer, which nests &lt;code&gt;Maybe&lt;/code&gt; computations inside another monad. In this case &lt;code&gt;State&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;monitor&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Double&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;State&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Aggregate&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;)
monitor&amp;nbsp;x&amp;nbsp;=&amp;nbsp;runMaybeT&amp;nbsp;$&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;Statistics&amp;nbsp;{&amp;nbsp;variance&amp;nbsp;}&amp;nbsp;&amp;lt;-&amp;nbsp;MaybeT&amp;nbsp;$&amp;nbsp;addAndCompute&amp;nbsp;x
&amp;nbsp;&amp;nbsp;guard&amp;nbsp;(10&amp;nbsp;&amp;lt;&amp;nbsp;variance)
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;SLA&amp;nbsp;Violation&amp;quot;&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The function type is the same, but the implementation is much simpler. First, the code lifts the &lt;code&gt;Maybe&lt;/code&gt;-valued &lt;code&gt;addAndCompute&lt;/code&gt; result into &lt;code&gt;MaybeT&lt;/code&gt; and pattern-matches on the &lt;code&gt;variance&lt;/code&gt;. Since the code is now &apos;running in&apos; a &lt;code&gt;Maybe&lt;/code&gt;-like context, this line of code only executes if there&apos;s a &lt;code&gt;Statistics&lt;/code&gt; value to extract. If, on the other hand, &lt;code&gt;addAndCompute&lt;/code&gt; returns &lt;code&gt;Nothing&lt;/code&gt;, the function already short-circuits there.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;guard&lt;/code&gt; works just like imperative &lt;a href=&quot;https://en.wikipedia.org/wiki/Guard_(computer_science)&quot;&gt;Guard Clauses&lt;/a&gt;. The third line of code only runs if the &lt;code&gt;variance&lt;/code&gt; is greater than 10. In that case, it returns an alert message.
    &lt;/p&gt;
    &lt;p&gt;
        The entire &lt;code&gt;do&lt;/code&gt; workflow gets unwrapped with &lt;code&gt;runMaybeT&lt;/code&gt; so that we return back to a normal stateful computation that may fail.
    &lt;/p&gt;
    &lt;p&gt;
        Let&apos;s try it out:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; (evalState $ monitor 1 &amp;gt;&amp;gt; monitor 7) emptyA
Nothing
ghci&amp;gt; (evalState $ monitor 1 &amp;gt;&amp;gt; monitor 8) emptyA
Just &quot;SLA Violation&quot;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Good, rigorous testing suggests that it&apos;s working.
    &lt;/p&gt;
    &lt;h3 id=&quot;e67fa8bc1b40459c91c1c8b45595c379&quot;&gt;
        Conclusion &lt;a href=&quot;#e67fa8bc1b40459c91c1c8b45595c379&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        You sometimes run into situations where monads are nested. This mostly happens in I/O-bound computations, where you may have a Maybe or Either value embedded inside &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt;. This can sometimes make working with the &apos;inner&apos; monad awkward, but in many cases there&apos;s a good solution at hand.
    &lt;/p&gt;
    &lt;p&gt;
        Some monads, like Maybe, Either, State, Reader, and Identity, nest nicely inside other monads. Thus, if your &apos;inner&apos; monad is one of those, you can turn the nested arrangement into a monad in its own right. This may help simplify your code base.
    &lt;/p&gt;
    &lt;p&gt;
        In addition to the common monads listed here, there are few more exotic ones that also play well in a nested configuration. Additionally, if your &apos;inner&apos; monad is a custom data structure of your own creation, it&apos;s up to you to investigate if it nests nicely in another monad. As far as I can tell, though, if you can make it nest in one monad (e.g Task, Async, or IO) you can probably make it nest in any monad.
    &lt;/p&gt;
	&lt;p&gt;
		&lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2018/01/08/software-design-isomorphisms&quot;&gt;Software design isomorphisms&lt;/a&gt;.
	&lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/11/25/nested-monads</guid>
      </item>
    
      <item>
        <title>Collecting and handling result values</title>
        <link>https://blog.ploeh.dk/2024/11/18/collecting-and-handling-result-values/</link>
        <pubDate>Mon, 18 Nov 2024 07:39:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;The answer is traverse. It&apos;s always traverse.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I recently came across &lt;a href=&quot;https://stackoverflow.com/q/79112836/126014&quot;&gt;a Stack Overflow question&lt;/a&gt; about collecting and handling &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;sum types&lt;/a&gt; (AKA discriminated unions or, in this case, result types). While the question was tagged &lt;em&gt;functional-programming&lt;/em&gt;, the overall structure of the code was so imperative, with so much interleaved &lt;a href=&quot;https://en.wikipedia.org/wiki/Input/output&quot;&gt;I/O&lt;/a&gt;, that it hardly &lt;a href=&quot;/2018/11/19/functional-architecture-a-definition&quot;&gt;qualified as functional architecture&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Instead, I gave &lt;a href=&quot;https://stackoverflow.com/a/79112992/126014&quot;&gt;an answer which involved a minimal change to the code&lt;/a&gt;. Subsequently, the original poster asked to see a more functional version of the code. That&apos;s a bit too large a task for a Stack Overflow answer, I think, so I&apos;ll do it here on the blog instead.
    &lt;/p&gt;
    &lt;p&gt;
        Further comments and discussion on the original post reveal that the poster is interested in two alternatives. I&apos;ll start with the alternative that&apos;s only discussed, but not shown, in the question. The motivation for this ordering is that this variation is easier to implement than the other one, and I consider it pedagogical to start with the simplest case.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll do that in this article, and then follow up with another article that covers the short-circuiting case.
    &lt;/p&gt;
    &lt;h3 id=&quot;9b3987ad5daf4df48c8155a54fb39318&quot;&gt;
        Imperative outset &lt;a href=&quot;#9b3987ad5daf4df48c8155a54fb39318&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To begin, consider this mostly imperative code snippet:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;();
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;();
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;errors&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;();
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;&amp;nbsp;=&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;errors&lt;/span&gt;);
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;foreach&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;in&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;updateResult&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;updateResult&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;&amp;lt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;)&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;},
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;errors&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;);&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);
}
 
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
 
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Results&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Ok&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItems&lt;/span&gt;],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;failedItems&lt;/span&gt;],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;errors&lt;/span&gt;]));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        There&apos;s quite a few things to take in, and one has to infer most of the types and APIs, since the original post didn&apos;t show more code than that. If you&apos;re used to engaging with Stack Overflow questions, however, it&apos;s not too hard to figure out what most of the moving parts do.
    &lt;/p&gt;
    &lt;p&gt;
        The most non-obvious detail is that the code uses a library called &lt;a href=&quot;https://github.com/mcintyre321/OneOf/&quot;&gt;OneOf&lt;/a&gt;, which supplies general-purpose, but rather abstract, sum types. Both the container type &lt;code&gt;OneOf&lt;/code&gt;, as well as the two indicator types &lt;code&gt;NotFound&lt;/code&gt; and &lt;code&gt;Error&lt;/code&gt; are defined in that library.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;Match&lt;/code&gt; method implements standard &lt;a href=&quot;/2018/05/22/church-encoding&quot;&gt;Church encoding&lt;/a&gt;, which enables the code to pattern-match on the three alternative values that &lt;code&gt;UpdateItem&lt;/code&gt; returns.
    &lt;/p&gt;
    &lt;p&gt;
        One more detail also warrants an explicit description: The &lt;code&gt;itemsToUpdate&lt;/code&gt; object is an input argument of the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?
    &lt;/p&gt;
    &lt;h3 id=&quot;c4e1b030e919464aa22ade11a511414f&quot;&gt;
        Standard traversal &lt;a href=&quot;#c4e1b030e919464aa22ade11a511414f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I&apos;ll pretend that we only need to turn the above code snippet into a functional design. Thus, I&apos;m ignoring that the code is most likely part of a larger code base. Because of the implied database interaction, the method isn&apos;t a &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure function&lt;/a&gt;. Unless it&apos;s a top-level method (that is, at the boundary of the application), it doesn&apos;t exemplify larger-scale &lt;a href=&quot;/2018/11/19/functional-architecture-a-definition&quot;&gt;functional architecture&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        That said, my goal is to refactor the code to an &lt;a href=&quot;/2020/03/02/impureim-sandwich&quot;&gt;Impureim Sandwich&lt;/a&gt;: Impure actions first, then the meat of the functionality as a pure function, and then some more impure actions to complete the functionality. This strongly suggests that the first step should be to map over &lt;code&gt;itemsToUpdate&lt;/code&gt; and call &lt;code&gt;UpdateItem&lt;/code&gt; for each.
    &lt;/p&gt;
    &lt;p&gt;
        If, however, you do that, you get this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;results&lt;/code&gt; object is a sequence of tasks. If we consider &lt;a href=&quot;/2020/07/27/task-asynchronous-programming-as-an-io-surrogate&quot;&gt;Task as a surrogate for IO&lt;/a&gt;, each task should be considered impure, as it&apos;s either non-deterministic, has side effects, or both. This means that we can&apos;t pass &lt;code&gt;results&lt;/code&gt; to a pure function, and that frustrates the ambition to structure the code as an Impureim Sandwich.
    &lt;/p&gt;
    &lt;p&gt;
        This is one of the most common problems in functional programming, and the answer is usually: Use a &lt;a href=&quot;/2024/11/11/traversals&quot;&gt;traversal&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Because this first, impure layer of the sandwich awaits the task, &lt;code&gt;results&lt;/code&gt; is now an immutable value that can be passed to the pure step. This, by the way, assumes that &lt;code&gt;ShoppingListItem&lt;/code&gt; is immutable, too.
    &lt;/p&gt;
    &lt;p&gt;
        Notice that I adjusted one of the cases of the discriminated union to &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;&lt;/code&gt; rather than just &lt;code&gt;NotFound&lt;/code&gt;. While the OneOf library ships with a &lt;code&gt;NotFound&lt;/code&gt; type, it doesn&apos;t have a generic container of that name, so I defined it myself:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;record&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Item&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I added it to make the next step simpler.
    &lt;/p&gt;
    &lt;h3 id=&quot;8f0e6fb0f34047ed99c59f6140a2b08f&quot;&gt;
        Aggregating the results &lt;a href=&quot;#8f0e6fb0f34047ed99c59f6140a2b08f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The next step is to sort the &lt;code&gt;results&lt;/code&gt; into three &apos;buckets&apos;, as it were.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Pure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;seed&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Enumerable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Empty&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Enumerable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Empty&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Enumerable&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Empty&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;seed&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item1.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Append&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item2,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item3),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item1,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item2.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Append&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;.Item),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item3),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item1,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item2,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.Item3.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Append&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;))));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s also possible to inline the &lt;code&gt;seed&lt;/code&gt; value, but here I defined it in a separate expression in an attempt at making the code a little more readable. I don&apos;t know if I succeeded, because regardless of where it goes, it&apos;s hardly &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatic&lt;/a&gt; to break tuple initialization over multiple lines. I had to, though, because otherwise the code would run &lt;a href=&quot;/2019/11/04/the-80-24-rule&quot;&gt;too far to the right&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The lambda expression handles each &lt;code&gt;result&lt;/code&gt; in &lt;code&gt;results&lt;/code&gt; and uses &lt;code&gt;Match&lt;/code&gt; to append the value to its proper &apos;bucket&apos;. The outer &lt;code&gt;result&lt;/code&gt; is a tuple of the three collections.
    &lt;/p&gt;
    &lt;h3 id=&quot;035012be047e431d8904686ec9915b8f&quot;&gt;
        Saving the changes and returning the results &lt;a href=&quot;#035012be047e431d8904686ec9915b8f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The final, impure step in the sandwich is to save the changes and return the results:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OkResult&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.Item1],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.Item2],&amp;nbsp;[..&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.Item3]));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        To be honest, the last line of code is pure, but &lt;a href=&quot;/2023/10/09/whats-a-sandwich&quot;&gt;that&apos;s not unusual&lt;/a&gt; when it comes to Impureim Sandwiches.
    &lt;/p&gt;
    &lt;h3 id=&quot;178ff7d455e44a619b67d911a6aecba7&quot;&gt;
        Accumulating the bulk-update result &lt;a href=&quot;#178ff7d455e44a619b67d911a6aecba7&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        So far, I&apos;ve assumed that the final &lt;code&gt;BulkUpdateResult&lt;/code&gt; class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use them to aggregate the result, instead of an anonymous tuple.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Store&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;([..&amp;nbsp;StoredItems,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;],&amp;nbsp;FailedItems,&amp;nbsp;Errors);
 
&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Fail&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;(StoredItems,&amp;nbsp;[..&amp;nbsp;FailedItems,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;],&amp;nbsp;Errors);
 
&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Error&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;(StoredItems,&amp;nbsp;FailedItems,&amp;nbsp;[..&amp;nbsp;Errors,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;]);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I would have personally preferred the name &lt;code&gt;NotFound&lt;/code&gt; instead of &lt;code&gt;Fail&lt;/code&gt;, but I was going with the original post&apos;s &lt;code&gt;failedItems&lt;/code&gt; terminology, and I thought that it made more sense to call a method &lt;code&gt;Fail&lt;/code&gt; when it adds to a collection called &lt;code&gt;FailedItems&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Adding these three instance methods to &lt;code&gt;BulkUpdateResult&lt;/code&gt; simplifies the composing code:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;OneOf&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NotFound&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;ShoppingListItem&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Error&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;itemsToUpdate&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Traverse&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;UpdateItem&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;));
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Pure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;results&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BulkUpdateResult&lt;/span&gt;([],&amp;nbsp;[],&amp;nbsp;[]),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Store&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;storedItem&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Fail&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;notFound&lt;/span&gt;.Item),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;state&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Error&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;error&lt;/span&gt;)));
 
&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Impure&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;dbContext&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;SaveChangesAsync&lt;/span&gt;();
&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;OkResult&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;result&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This variation starts with an empty &lt;code&gt;BulkUpdateResult&lt;/code&gt; and then uses &lt;code&gt;Store&lt;/code&gt;, &lt;code&gt;Fail&lt;/code&gt;, or &lt;code&gt;Error&lt;/code&gt; as appropriate to update the state.
    &lt;/p&gt;
    &lt;h3 id=&quot;32e680ea1dbb4bc7bc097e8fcfcb90e9&quot;&gt;
        Parallel Sequence &lt;a href=&quot;#32e680ea1dbb4bc7bc097e8fcfcb90e9&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        If the tasks you want to traverse are thread-safe, you might consider making the traversal concurrent. You can use &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.whenall&quot;&gt;Task.WhenAll&lt;/a&gt; for that. It has the same type as &lt;code&gt;Sequence&lt;/code&gt;, so if you can live with the extra non-determinism that comes with parallel execution, you can use that instead:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;internal&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;Sequence&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;tasks&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Task&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;WhenAll&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;tasks&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since the method signature doesn&apos;t change, the rest of the code remains unchanged.
    &lt;/p&gt;
    &lt;h3 id=&quot;a54fe20498bd4aca99d7d4184209a4df&quot;&gt;
        Conclusion &lt;a href=&quot;#a54fe20498bd4aca99d7d4184209a4df&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        One of the most common stumbling blocks in functional programming is when you have a collection of values, and you need to perform an impure action (typically I/O) for each. This leaves you with a collection of impure values (&lt;code&gt;Task&lt;/code&gt; in C#, &lt;code&gt;Task&lt;/code&gt; or &lt;code&gt;Async&lt;/code&gt; in &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;, &lt;code&gt;IO&lt;/code&gt; in &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, etc.). What you actually need is a single impure value that contains the collection of results.
    &lt;/p&gt;
    &lt;p&gt;
        The solution to this kind of problem is to &lt;em&gt;traverse&lt;/em&gt; the collection, rather than mapping over it (with &lt;code&gt;Select&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fmap&lt;/code&gt;, or similar). Note that computer scientists often talk about &lt;em&gt;traversing&lt;/em&gt; a data structure like a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_(abstract_data_type)&quot;&gt;tree&lt;/a&gt;. This is a less well-defined use of the word, and not directly related. That said, you &lt;em&gt;can&lt;/em&gt; also write &lt;code&gt;Traverse&lt;/code&gt; and &lt;code&gt;Sequence&lt;/code&gt; functions for trees.
    &lt;/p&gt;
    &lt;p&gt;
        This article used a Stack Overflow question as the starting point for an example showing how to refactor imperative code to an Impureim Sandwich.
    &lt;/p&gt;
    &lt;p&gt;
        This completes the first variation requested in the Stack Overflow question.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2024/12/02/short-circuiting-an-asynchronous-traversal&quot;&gt;Short-circuiting an asynchronous traversal&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/11/18/collecting-and-handling-result-values</guid>
      </item>
    
      <item>
        <title>Traversals</title>
        <link>https://blog.ploeh.dk/2024/11/11/traversals/</link>
        <pubDate>Mon, 11 Nov 2024 07:45:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
	&lt;p&gt;
		&lt;em&gt;How to convert a list of tasks into an asynchronous list, and similar problems.&lt;/em&gt;
	&lt;/p&gt;
	&lt;p&gt;
		This article is part of &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;a series of articles about functor relationships&lt;/a&gt;. In a previous article you learned about &lt;a href=&quot;/2022/07/18/natural-transformations&quot;&gt;natural transformations&lt;/a&gt;, and then how &lt;a href=&quot;/2018/03/22/functors&quot;&gt;functors&lt;/a&gt; compose. You can skip several of them if you like, but you might find the one about &lt;a href=&quot;/2024/10/28/functor-compositions&quot;&gt;functor compositions&lt;/a&gt; relevant. Still, this article can be read independently of the rest of the series.
	&lt;/p&gt;
	&lt;p&gt;
		You can go a long way with just a single functor or &lt;a href=&quot;/2022/03/28/monads&quot;&gt;monad&lt;/a&gt;. Consider how useful C#&apos;s LINQ API is, or similar kinds of APIs in other languages - typically &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; methods. These APIs work exclusively with the &lt;a href=&quot;/2022/04/19/the-list-monad&quot;&gt;List monad&lt;/a&gt; (which is also a functor). Working with lists, sequences, or collections is so useful that many languages have other kinds of special syntax specifically aimed at working with multiple values: &lt;a href=&quot;https://en.wikipedia.org/wiki/List_comprehension&quot;&gt;List comprehension&lt;/a&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		&lt;a href=&quot;/2022/06/06/asynchronous-monads&quot;&gt;Asynchronous monads&lt;/a&gt; like &lt;a href=&quot;https://docs.microsoft.com/dotnet/api/system.threading.tasks.task-1&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/a&gt; or &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;&apos;s &lt;a href=&quot;https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync-1.html&quot;&gt;Async&amp;lt;&apos;T&amp;gt;&lt;/a&gt; are another kind of functor so useful in their own right that languages have special &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; keywords to compose them.
	&lt;/p&gt;
	&lt;p&gt;
		Sooner or later, though, you run into situations where you&apos;d like to combine two different functors.
	&lt;/p&gt;
	&lt;h3 id=&quot;ebf67a9789e44ad8997832e1ac7c17da&quot;&gt;
		Lists and tasks &lt;a href=&quot;#ebf67a9789e44ad8997832e1ac7c17da&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		It&apos;s not unusual to combine collections and asynchrony. If you make an asynchronous database query, you could easily receive something like &lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;Reservation&amp;gt;&amp;gt;&lt;/code&gt;. This, in isolation, hardly causes problems, but things get more interesting when you need to compose multiple reads.
	&lt;/p&gt;
	&lt;p&gt;
		Consider a query like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;Task&amp;lt;Foo&amp;gt;&amp;nbsp;Read(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;id)&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		What happens if you have a collection of IDs that you&apos;d like to read? This happens:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;ids&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;[]&amp;nbsp;{&amp;nbsp;42,&amp;nbsp;1337,&amp;nbsp;2112&amp;nbsp;};
IEnumerable&amp;lt;Task&amp;lt;Foo&amp;gt;&amp;gt;&amp;nbsp;fooTasks&amp;nbsp;=&amp;nbsp;ids.Select(id&amp;nbsp;=&amp;gt;&amp;nbsp;Foo.Read(id));&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		You get a collection of Tasks, which may be awkward because you can&apos;t &lt;code&gt;await&lt;/code&gt; it. Perhaps you&apos;d rather prefer a single Task that contains a collection: &lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt;. In other words, you&apos;d like to flip the functors:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;IEnumerable&amp;lt;Task&amp;lt;Foo&amp;gt;&amp;gt;
Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		The top type is what you have. The bottom type is what you&apos;d like to have.
	&lt;/p&gt;
	&lt;p&gt;
		The combination of asynchrony and collections is so common that .NET has special methods to do that. I&apos;ll briefly mention one of these later, but what&apos;s the &lt;em&gt;general&lt;/em&gt; solution to this problem?
	&lt;/p&gt;
	&lt;p&gt;
		Whenever you need to flip two functors, you need a &lt;em&gt;traversal&lt;/em&gt;.
	&lt;/p&gt;
	&lt;h3 id=&quot;b962041a5e3d4eb9ba5101641407ca3f&quot;&gt;
		Sequence &lt;a href=&quot;#b962041a5e3d4eb9ba5101641407ca3f&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		As is almost always the case, we can look to &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; for a canonical definition of traversals - or, as the type class is called: &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Traversable.html&quot;&gt;Traversable&lt;/a&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		A &lt;em&gt;traversable functor&lt;/em&gt; is a functor that enables you to flip that functor and another functor, like the above C# example. In more succinct syntax:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;t (f a) -&amp;gt; f (t a)&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Here, &lt;code&gt;t&lt;/code&gt; symbolises any traversable functor (like &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; in the above C# example), and &lt;code&gt;f&lt;/code&gt; is another functor (like &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;, above). By flipping the functors I mean making &lt;code&gt;t&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; change places; just like &lt;code&gt;IEnumerable&lt;/code&gt; and &lt;code&gt;Task&lt;/code&gt;, above.
	&lt;/p&gt;
	&lt;p&gt;
		Thinking of &lt;a href=&quot;https://bartoszmilewski.com/2014/01/14/functors-are-containers/&quot;&gt;functors as containers&lt;/a&gt; we might depict the function like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;img src=&quot;/content/binary/traversal-sequence.png&quot; alt=&quot;Nested functors depicted as concentric circles. To the left the circle t contains the circle f that again contains the circle a. To the right the circle f contains the circle t that again contains the circle a. An arrow points from the left circles to the right circles.&quot;&gt;
	&lt;/p&gt;
	&lt;p&gt;
		To the left, we have an outer functor &lt;code&gt;t&lt;/code&gt; (e.g. &lt;code&gt;IEnumerable&lt;/code&gt;) that contains another functor &lt;code&gt;f&lt;/code&gt; (e.g. &lt;code&gt;Task&lt;/code&gt;) that again &apos;contains&apos; values of type &lt;code&gt;a&lt;/code&gt; (in C# typically called &lt;code&gt;T&lt;/code&gt;). We&apos;d like to flip how the containers are nested so that &lt;code&gt;f&lt;/code&gt; contains &lt;code&gt;t&lt;/code&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		Contrary to what you might expect, the function that does that isn&apos;t called &lt;em&gt;traverse&lt;/em&gt;; it&apos;s called &lt;em&gt;sequence&lt;/em&gt;. (For those readers who are interested in Haskell specifics, the function I&apos;m going to be talking about is actually called &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequenceA&quot;&gt;sequenceA&lt;/a&gt;. There&apos;s also a function called &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequence&quot;&gt;sequence&lt;/a&gt;, but it&apos;s not as general. The reason for the odd names are related to the evolution of various Haskell type classes.)
	&lt;/p&gt;
	&lt;p&gt;
		The &lt;em&gt;sequence&lt;/em&gt; function doesn&apos;t work for any old functor. First, &lt;code&gt;t&lt;/code&gt; has to be a &lt;em&gt;traversable functor&lt;/em&gt;. We&apos;ll get back to that later. Second, &lt;code&gt;f&lt;/code&gt; has to be an &lt;a href=&quot;/2018/10/01/applicative-functors&quot;&gt;applicative functor&lt;/a&gt;. (To be honest, I&apos;m not sure if this is &lt;em&gt;always&lt;/em&gt; required, or if it&apos;s possible to produce an example of a specific functor that isn&apos;t applicative, but where it&apos;s still possible to implement a &lt;em&gt;sequence&lt;/em&gt; function. The Haskell &lt;code&gt;sequenceA&lt;/code&gt; function has &lt;code&gt;Applicative f&lt;/code&gt; as a constraint, but as far as I can tell, this only means that this is a &lt;em&gt;sufficient&lt;/em&gt; requirement - not that it&apos;s necessary.)
	&lt;/p&gt;
	&lt;p&gt;
		Since tasks (e.g. &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt;) are applicative functors (they are, because &lt;a href=&quot;/2022/06/06/asynchronous-monads&quot;&gt;they are monads&lt;/a&gt;, and &lt;a href=&quot;/2022/03/28/monads&quot;&gt;all monads are applicative functors&lt;/a&gt;), that second requirement is fulfilled for the above example. I&apos;ll show you how to implement a &lt;code&gt;Sequence&lt;/code&gt; function in C# and how to use it, and then we&apos;ll return to the general discussion of what a traversable functor is:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;Task&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&amp;nbsp;Sequence&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;IEnumerable&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;&amp;nbsp;source)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;source.Aggregate(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Task.FromResult(Enumerable.Empty&amp;lt;T&amp;gt;()),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;(acc,&amp;nbsp;t)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;xs&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;acc;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;x&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;t;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;xs.Concat(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;[]&amp;nbsp;{&amp;nbsp;x&amp;nbsp;});
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		This &lt;code&gt;Sequence&lt;/code&gt; function enables you to flip any &lt;code&gt;IEnumerable&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to a &lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, including the above &lt;code&gt;fooTasks&lt;/code&gt;:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;fooTasks.Sequence();&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		You can also implement &lt;code&gt;sequence&lt;/code&gt; in F#:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Async&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;list&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;&amp;#39;a&amp;nbsp;list&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;sequence&amp;nbsp;asyncs&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;go&amp;nbsp;acc&amp;nbsp;t&amp;nbsp;=&amp;nbsp;async&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;xs&amp;nbsp;=&amp;nbsp;acc
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;x&amp;nbsp;&amp;nbsp;=&amp;nbsp;t
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;List.append&amp;nbsp;xs&amp;nbsp;[x]&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List.fold&amp;nbsp;go&amp;nbsp;(fromValue&amp;nbsp;[])&amp;nbsp;asyncs&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		and use it like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;fooTasks&amp;nbsp;=&amp;nbsp;ids&amp;nbsp;|&amp;gt;&amp;nbsp;List.map&amp;nbsp;Foo.Read
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;fooTasks&amp;nbsp;|&amp;gt;&amp;nbsp;Async.sequence&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		For this example, I put the &lt;code&gt;sequence&lt;/code&gt; function in a local &lt;code&gt;Async&lt;/code&gt; module; it&apos;s not part of any published &lt;code&gt;Async&lt;/code&gt; module.
	&lt;/p&gt;
	&lt;p&gt;
		These C# and F# examples are specific translations: From lists of tasks to a task of list. If you need another translation, you&apos;ll have to write a new function for that particular combination of functors. Haskell has more general capabilities, so that you don&apos;t have to write functions for all combinations. I&apos;m not assuming that you know Haskell, however, so I&apos;ll proceed with the description.
	&lt;/p&gt;
	&lt;h3 id=&quot;d63d059d841b4d9783f42c0360b21662&quot;&gt;
		Traversable functor &lt;a href=&quot;#d63d059d841b4d9783f42c0360b21662&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		The &lt;em&gt;sequence&lt;/em&gt; function requires that the &apos;other&apos; functor (the one that&apos;s &lt;em&gt;not&lt;/em&gt; the traversable functor) is an applicative functor, but what about the traversable functor itself? What does it take to be a traversable functor?
	&lt;/p&gt;
	&lt;p&gt;
		I have to admit that I have to rely on Haskell specifics to a greater extent than normal. For most other concepts and abstractions in &lt;a href=&quot;/2017/10/04/from-design-patterns-to-category-theory&quot;&gt;the overall article series&lt;/a&gt;, I&apos;ve been able to draw on various sources, chief of which are &lt;a href=&quot;https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/&quot;&gt;Category Theory for Programmers&lt;/a&gt;. In various articles, I&apos;ve cited my sources whenever possible. While I&apos;ve relied on Haskell libraries for &apos;canonical&apos; ways to &lt;em&gt;represent&lt;/em&gt; concepts in a programming language, I&apos;ve tried to present ideas as having a more universal origin than just Haskell.
	&lt;/p&gt;
	&lt;p&gt;
		When it comes to traversable functors, I haven&apos;t come across universal reasoning like that which gives rise to concepts like &lt;a href=&quot;/2017/10/06/monoids&quot;&gt;monoids&lt;/a&gt;, functors, &lt;a href=&quot;/2018/05/22/church-encoding&quot;&gt;Church encodings&lt;/a&gt;, or &lt;a href=&quot;/2019/04/29/catamorphisms&quot;&gt;catamorphisms&lt;/a&gt;. This is most likely a failing on my part.
	&lt;/p&gt;
	&lt;p&gt;
		Traversals of the Haskell kind are, however, so &lt;em&gt;useful&lt;/em&gt; that I find it appropriate to describe them. When consulting, it&apos;s a common solution to a lot of problems that people are having with functional programming.
	&lt;/p&gt;
	&lt;p&gt;
		Thus, based on Haskell&apos;s &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Traversable.html&quot;&gt;Data.Traversable&lt;/a&gt;, a traversable functor must:
		&lt;ul&gt;
			&lt;li&gt;be a functor&lt;/li&gt;
			&lt;li&gt;be a &apos;foldable&apos; functor&lt;/li&gt;
			&lt;li&gt;define a &lt;em&gt;sequence&lt;/em&gt; or &lt;em&gt;traverse&lt;/em&gt; function&lt;/li&gt;
		&lt;/ul&gt;
		You&apos;ve already seen examples of &lt;em&gt;sequence&lt;/em&gt; functions, and I&apos;m also assuming that (since you&apos;ve made it so far in the article already) you know what a functor is. But what&apos;s a &lt;em&gt;foldable&lt;/em&gt; functor?
	&lt;/p&gt;
	&lt;p&gt;
		Haskell comes with a &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Foldable.html&quot;&gt;Foldable&lt;/a&gt; type class. It defines a class of data that has a particular type of &lt;a href=&quot;/2019/04/29/catamorphisms&quot;&gt;catamorphism&lt;/a&gt;. As I&apos;ve outlined in my article on catamorphisms, Haskell&apos;s notion of a &lt;em&gt;fold&lt;/em&gt; sometimes coincides with a (or &apos;the&apos;) catamorphism for a type, and sometimes not. For &lt;a href=&quot;/2019/05/20/maybe-catamorphism&quot;&gt;Maybe&lt;/a&gt; and &lt;a href=&quot;/2019/05/27/list-catamorphism&quot;&gt;List&lt;/a&gt; they do coincide, while they don&apos;t for &lt;a href=&quot;/2019/06/03/either-catamorphism&quot;&gt;Either&lt;/a&gt; or &lt;a href=&quot;/2019/06/10/tree-catamorphism&quot;&gt;Tree&lt;/a&gt;. It&apos;s not that you can&apos;t define &lt;code&gt;Foldable&lt;/code&gt; for &lt;a href=&quot;/2018/06/11/church-encoded-either&quot;&gt;Either&lt;/a&gt; or &lt;a href=&quot;/2018/08/06/a-tree-functor&quot;&gt;Tree&lt;/a&gt;, it&apos;s just that it&apos;s not &apos;the&apos; &lt;em&gt;general&lt;/em&gt; catamorphism for that type.
	&lt;/p&gt;
	&lt;p&gt;
		I can&apos;t tell whether &lt;code&gt;Foldable&lt;/code&gt; is a universal abstraction, or if it&apos;s just an ad-hoc API that turns out to be useful in practice. It looks like the latter to me, but my knowledge is only limited. Perhaps I&apos;ll be wiser in a year or two.
	&lt;/p&gt;
	&lt;p&gt;
		I will, however, take it as licence to treat this topic a little less formally than I&apos;ve done with other articles. While there &lt;em&gt;are&lt;/em&gt; laws associated with &lt;code&gt;Traversable&lt;/code&gt;, they are rather complex, so I&apos;m going to skip them.
	&lt;/p&gt;
	&lt;p&gt;
		The above requirements will enable you to define traversable functors if you run into some more exotic ones, but in practice, the common functors List, &lt;a href=&quot;/2018/03/26/the-maybe-functor&quot;&gt;Maybe&lt;/a&gt;, &lt;a href=&quot;/2019/01/14/an-either-functor&quot;&gt;Either&lt;/a&gt;, &lt;a href=&quot;/2018/08/06/a-tree-functor&quot;&gt;Tree&lt;/a&gt;, and &lt;a href=&quot;/2018/09/03/the-identity-functor&quot;&gt;Identity&lt;/a&gt; are all traversable. That it useful to know. If any of those functors is the outer functor in a composition of functors, then you can flip them to the inner position as long as the other functor is an applicative functor.
	&lt;/p&gt;
	&lt;p&gt;
		Since &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; is traversable, and &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; (or &lt;code&gt;Async&amp;lt;&apos;T&amp;gt;&lt;/code&gt;) is an applicative functor, it&apos;s possible to use &lt;code&gt;Sequence&lt;/code&gt; to convert &lt;code&gt;IEnumerable&amp;lt;Task&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&lt;/code&gt;.
	&lt;/p&gt;
	&lt;h3 id=&quot;3346c092666c4dacb9a61cc1f622fc0f&quot;&gt;
		Traverse &lt;a href=&quot;#3346c092666c4dacb9a61cc1f622fc0f&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		The C# and F# examples you&apos;ve seen so far arrive at the desired type in a two-step process. First they produce the &apos;wrong&apos; type with &lt;code&gt;ids.Select(Foo.Read)&lt;/code&gt; or &lt;code&gt;ids&amp;nbsp;|&amp;gt;&amp;nbsp;List.map&amp;nbsp;Foo.Read&lt;/code&gt;, and then they use &lt;code&gt;Sequence&lt;/code&gt; to arrive at the desired type.
	&lt;/p&gt;
	&lt;p&gt;
		When you use two expressions, you need two lines of code, and you also need to come up with a name for the intermediary value. It might be easier to chain the two function calls into a single expression:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;ids.Select(Foo.Read).Sequence();&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Or, in F#:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;ids&amp;nbsp;|&amp;gt;&amp;nbsp;List.map&amp;nbsp;Foo.Read&amp;nbsp;|&amp;gt;&amp;nbsp;Async.sequence&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Chaining &lt;code&gt;Select&lt;/code&gt;/&lt;code&gt;map&lt;/code&gt; with &lt;code&gt;Sequence&lt;/code&gt;/&lt;code&gt;sequence&lt;/code&gt; is so common that it&apos;s a named function: &lt;em&gt;traverse&lt;/em&gt;. In C#:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;Task&amp;lt;IEnumerable&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;Traverse&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;IEnumerable&amp;lt;T&amp;gt;&amp;nbsp;source,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Func&amp;lt;T,&amp;nbsp;Task&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;selector)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;source.Select(selector).Sequence();
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		This makes usage a little easier:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;IEnumerable&amp;lt;Foo&amp;gt;&amp;gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;ids.Traverse(Foo.Read);&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		In F# the implementation might be similar:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;(&amp;#39;a&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;&amp;#39;b&amp;gt;)&amp;nbsp;-&amp;gt;&amp;nbsp;&amp;#39;a&amp;nbsp;list&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;&amp;#39;b&amp;nbsp;list&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;traverse&amp;nbsp;f&amp;nbsp;xs&amp;nbsp;=&amp;nbsp;xs&amp;nbsp;|&amp;gt;&amp;nbsp;List.map&amp;nbsp;f&amp;nbsp;|&amp;gt;&amp;nbsp;sequence&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Usage then looks like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;foosTask&amp;nbsp;=&amp;nbsp;ids&amp;nbsp;|&amp;gt;&amp;nbsp;Async.traverse&amp;nbsp;Foo.Read&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		As you can tell, if you&apos;ve already implemented &lt;em&gt;sequence&lt;/em&gt; you can always implement &lt;em&gt;traverse&lt;/em&gt;. The converse is also true: If you&apos;ve already implemented &lt;em&gt;traverse&lt;/em&gt;, you can always implement &lt;em&gt;sequence&lt;/em&gt;. You&apos;ll see an example of that later.
	&lt;/p&gt;
	&lt;h3 id=&quot;117fac3b686e4db8b6c3c4e0ac556929&quot;&gt;
		A reusable idea &lt;a href=&quot;#117fac3b686e4db8b6c3c4e0ac556929&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		If you know the .NET Task Parallel Library (TPL), you may demur that my implementation of &lt;code&gt;Sequence&lt;/code&gt; seems like an inefficient version of &lt;a href=&quot;https://docs.microsoft.com/dotnet/api/system.threading.tasks.task.whenall&quot;&gt;Task.WhenAll&lt;/a&gt;, and that &lt;code&gt;Traverse&lt;/code&gt; could be written like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;Task&amp;lt;IEnumerable&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;Traverse&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;IEnumerable&amp;lt;T&amp;gt;&amp;nbsp;source,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Func&amp;lt;T,&amp;nbsp;Task&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;selector)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Task.WhenAll(source.Select(selector));
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		This alternative is certainly possible. Whether it&apos;s more efficient I don&apos;t know; I haven&apos;t measured. As foreshadowed in the beginning of the article, the combination of collections and asynchrony is so common that .NET has special APIs to handle that. You may ask, then: &lt;em&gt;What&apos;s the point?&lt;/em&gt;
	&lt;/p&gt;
	&lt;p&gt;
		The point of is that a traversable functor is &lt;em&gt;a reusable idea&lt;/em&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		You may be able to find existing APIs like &lt;code&gt;Task.WhenAll&lt;/code&gt; to deal with combinations of collections and asynchrony, but what if you need to deal with asynchronous Maybe or Either? Or a List of Maybes?
	&lt;/p&gt;
	&lt;p&gt;
		There may be no existing API to flip things around - before you add it. Now you know that there&apos;s a (dare I say it?) design pattern you can implement.
	&lt;/p&gt;
	&lt;h3 id=&quot;f81375a0121247698f0ad5eac4deebff&quot;&gt;
		Asynchronous Maybe &lt;a href=&quot;#f81375a0121247698f0ad5eac4deebff&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		Once people go beyond collections they often run into problems. You may, for example, decide to use the &lt;a href=&quot;/2022/04/25/the-maybe-monad&quot;&gt;Maybe monad&lt;/a&gt; in order to model the presence or absence of a value. Then, once you combine Maybe-based decision values with asynchronous processesing, you may run into problems.
	&lt;/p&gt;
	&lt;p&gt;
		For example, in my article &lt;a href=&quot;/2019/02/11/asynchronous-injection&quot;&gt;Asynchronous Injection&lt;/a&gt; I modelled the core domaim logic as returning &lt;code&gt;Maybe&amp;lt;Reservation&amp;gt;&lt;/code&gt;. When handling an HTTP request, the application should use that value to determine what to do next. If the return value is empty it should do nothing, but when the Maybe value is populated, it should save the reservation in a data store using this method:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;nbsp;Create(Reservation&amp;nbsp;reservation)&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Finally, if accepting the reservation, the HTTP handler (&lt;code&gt;ReservationsController&lt;/code&gt;) should return the resevation ID, which is the &lt;code&gt;int&lt;/code&gt; returned by &lt;code&gt;Create&lt;/code&gt;. Please refer to the article for details. It also links to the sample code on GitHub.
	&lt;/p&gt;
	&lt;p&gt;
		The entire expression is, however, &lt;code&gt;Task&lt;/code&gt;-based:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;Task&amp;lt;IActionResult&amp;gt;&amp;nbsp;Post(Reservation&amp;nbsp;reservation)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;Repository.ReadReservations(reservation.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Select(rs&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.TryAccept(rs,&amp;nbsp;reservation))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.SelectMany(m&amp;nbsp;=&amp;gt;&amp;nbsp;m.Traverse(Repository.Create))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Match(InternalServerError(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Table&amp;nbsp;unavailable&amp;quot;&lt;/span&gt;),&amp;nbsp;Ok);
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		The &lt;code&gt;Select&lt;/code&gt; and &lt;code&gt;SelectMany&lt;/code&gt; methods are defined on the &lt;code&gt;Task&lt;/code&gt; monad. The &lt;code&gt;m&lt;/code&gt; in the &lt;code&gt;SelectMany&lt;/code&gt; lambda expression is the &lt;code&gt;Maybe&amp;lt;Reservation&amp;gt;&lt;/code&gt; returned by &lt;code&gt;TryAccept&lt;/code&gt;. What would happen if you didn&apos;t have a &lt;code&gt;Traverse&lt;/code&gt; method?
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;Maybe&amp;lt;Task&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;whatIsThis&amp;nbsp;=&amp;nbsp;Repository.ReadReservations(reservation.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Select(rs&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.TryAccept(rs,&amp;nbsp;reservation))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Select(m&amp;nbsp;=&amp;gt;&amp;nbsp;m.Select(Repository.Create));&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Notice that &lt;code&gt;whatIsThis&lt;/code&gt; (so named because it&apos;s a temporary variable used to investigate the type of the expression so far) has an awkward type: &lt;code&gt;Task&amp;lt;Maybe&amp;lt;Task&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;. That&apos;s a Task within a Maybe within a Task.
	&lt;/p&gt;
	&lt;p&gt;
		This makes it difficult to continue the composition and return an HTTP result.
	&lt;/p&gt;
	&lt;p&gt;
		Instead, use &lt;code&gt;Traverse&lt;/code&gt;:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;Task&amp;lt;Task&amp;lt;Maybe&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt;&amp;nbsp;whatIsThis&amp;nbsp;=&amp;nbsp;Repository.ReadReservations(reservation.Date)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Select(rs&amp;nbsp;=&amp;gt;&amp;nbsp;maîtreD.TryAccept(rs,&amp;nbsp;reservation))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.Select(m&amp;nbsp;=&amp;gt;&amp;nbsp;m.Traverse(Repository.Create));&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		This flips the inner &lt;code&gt;Maybe&amp;lt;Task&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;Task&amp;lt;Maybe&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Now you have a Maybe within a Task within a Task. The outer two Tasks are now nicely nested, and it&apos;s a job for a monad to remove one level of nesting. That&apos;s the reason that the final composition uses &lt;code&gt;SelectMany&lt;/code&gt; instead of &lt;code&gt;Select&lt;/code&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		The &lt;code&gt;Traverse&lt;/code&gt; function is implemented like this:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;Task&amp;lt;Maybe&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;Traverse&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;Maybe&amp;lt;T&amp;gt;&amp;nbsp;source,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Func&amp;lt;T,&amp;nbsp;Task&amp;lt;TResult&amp;gt;&amp;gt;&amp;nbsp;selector)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;source.Match(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nothing:&amp;nbsp;Task.FromResult(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;Maybe&amp;lt;TResult&amp;gt;()),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;just:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;async&lt;/span&gt;&amp;nbsp;x&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;Maybe&amp;lt;TResult&amp;gt;(&lt;span style=&quot;color:blue;&quot;&gt;await&lt;/span&gt;&amp;nbsp;selector(x)));
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		The &lt;em&gt;idea&lt;/em&gt; is reusable. You can also implement a similar traversal in F#:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;(&amp;#39;a&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;&amp;#39;b&amp;gt;)&amp;nbsp;-&amp;gt;&amp;nbsp;&amp;#39;a&amp;nbsp;option&amp;nbsp;-&amp;gt;&amp;nbsp;Async&amp;lt;&amp;#39;b&amp;nbsp;option&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;traverse&amp;nbsp;f&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;function&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;Some&amp;nbsp;x&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;async&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let!&lt;/span&gt;&amp;nbsp;x&amp;#39;&amp;nbsp;=&amp;nbsp;f&amp;nbsp;x
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;Some&amp;nbsp;x&amp;#39;&amp;nbsp;}
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;None&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;async&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;None&amp;nbsp;}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		You can see the F# function as well as a usage example in the article &lt;a href=&quot;/2019/12/02/refactoring-registration-flow-to-functional-architecture&quot;&gt;Refactoring registration flow to functional architecture&lt;/a&gt;.
	&lt;/p&gt;
	&lt;h3 id=&quot;a9e25f8c3dc24d99b669f90a4e46afa0&quot;&gt;
		Sequence from traverse &lt;a href=&quot;#a9e25f8c3dc24d99b669f90a4e46afa0&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		You&apos;ve already seen that if you have a &lt;em&gt;sequence&lt;/em&gt; function, you can implement &lt;em&gt;traverse&lt;/em&gt;. I also claimed that the reverse is true: If you have &lt;em&gt;traverse&lt;/em&gt; you can implement &lt;em&gt;sequence&lt;/em&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		When you&apos;ve encountered these kinds of dual definitions a couple of times, you start to expect the ubiquitous identity function to make an appearance, and indeed it does:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;sequence&amp;nbsp;x&amp;nbsp;=&amp;nbsp;traverse&amp;nbsp;id&amp;nbsp;x&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		That&apos;s the F# version where the identity function is built in as &lt;code&gt;id&lt;/code&gt;. In C# you&apos;d use a lambda expression:
	&lt;/p&gt;
	&lt;p&gt;
		&lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;Task&amp;lt;Maybe&amp;lt;T&amp;gt;&amp;gt;&amp;nbsp;Sequence&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;&amp;nbsp;Maybe&amp;lt;Task&amp;lt;T&amp;gt;&amp;gt;&amp;nbsp;source)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;source.Traverse(x&amp;nbsp;=&amp;gt;&amp;nbsp;x);
}&lt;/pre&gt;
	&lt;/p&gt;
	&lt;p&gt;
		Since C# doesn&apos;t come with a predefined identity function, it&apos;s &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatic&lt;/a&gt; to use &lt;code&gt;x&amp;nbsp;=&amp;gt;&amp;nbsp;x&lt;/code&gt; instead.
	&lt;/p&gt;
	&lt;h3 id=&quot;cc6c409706e24ea9b3ebefa49fcc3235&quot;&gt;
		Conclusion &lt;a href=&quot;#cc6c409706e24ea9b3ebefa49fcc3235&quot; title=&quot;permalink&quot;&gt;#&lt;/a&gt;
	&lt;/h3&gt;
	&lt;p&gt;
		Traversals are useful when you need to &apos;flip&apos; the order of two different, nested functors. The outer one must be a traversable functor, and the inner an applicative functor.
	&lt;/p&gt;
	&lt;p&gt;
		Common traversable functors are List, Maybe, Either, Tree, and Identity, but there are more than those. In .NET you often need them when combining them with Tasks. In Haskell, they are useful when combined with &lt;code&gt;IO&lt;/code&gt;.
	&lt;/p&gt;
	&lt;p&gt;
		&lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2024/11/25/nested-monads&quot;&gt;Nested monads&lt;/a&gt;.
	&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;comments&quot;&gt;
    &lt;hr&gt;
    &lt;h2 id=&quot;comments-header&quot;&gt;
        Comments
    &lt;/h2&gt;
    &lt;div class=&quot;comment&quot; id=&quot;c72c30e16cdd48419f95fd7ad5c74f81&quot;&gt;
        &lt;div class=&quot;comment-author&quot;&gt;qfilip &lt;a href=&quot;#c72c30e16cdd48419f95fd7ad5c74f81&quot;&gt;#&lt;/a&gt;&lt;/div&gt;
        &lt;div class=&quot;comment-content&quot;&gt;
            &lt;p&gt;
				Thanks for this one. You might be interested in &lt;a href=&quot;https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/&quot;&gt;Andrew Lock&apos;s&lt;/a&gt; take on the whole subject as well.
			&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class=&quot;comment-date&quot;&gt;2024-11-17 14:51 UTC&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/11/11/traversals</guid>
      </item>
    
      <item>
        <title>Pendulum swing: no Haskell type annotation by default</title>
        <link>https://blog.ploeh.dk/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default/</link>
        <pubDate>Mon, 04 Nov 2024 07:45:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Are Haskell IDE plugins now good enough that you don&apos;t need explicit type annotations?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        More than three years ago, I published &lt;a href=&quot;/2021/02/22/pendulum-swings&quot;&gt;a small article series&lt;/a&gt; to document that I&apos;d changed my mind on various small practices. Belatedly, here comes a fourth article, which, frankly, is a cousin rather than a sibling. Still, it fits the overall theme well enough to become another instalment in the series.
    &lt;/p&gt;
    &lt;p&gt;
        Here, I consider using fewer &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; type annotations, following a practice that I&apos;ve always followed in &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        To be honest, though, it&apos;s not that I&apos;ve already applied the following practice for a long time, and only now write about it. It&apos;s rather that I feel the need to write this article to kick an old habit and start a new.
    &lt;/p&gt;
    &lt;h3 id=&quot;227874a509f24b93b9a091429b9ad03e&quot;&gt;
        Inertia &lt;a href=&quot;#227874a509f24b93b9a091429b9ad03e&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As I write in the dedication in &lt;a href=&quot;/2021/06/14/new-book-code-that-fits-in-your-head&quot;&gt;Code That Fits in Your Head&lt;/a&gt;,
    &lt;/p&gt;
    &lt;blockquote&gt;
        &lt;p&gt;
            &quot;To my parents:
        &lt;/p&gt;
        &lt;p&gt;
            &quot;My mother, Ulla Seemann, to whom I owe my attention to detail.
        &lt;/p&gt;
        &lt;p&gt;
            &quot;My father, Leif Seemann, from whom I inherited my contrarian streak.&quot;
        &lt;/p&gt;
        &lt;footer&gt;&lt;cite&gt;&lt;a href=&quot;/code-that-fits-in-your-head&quot;&gt;Code That Fits in Your Head&lt;/a&gt;&lt;/cite&gt;, dedication&lt;/footer&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
        One should always be careful simplifying one&apos;s personality to a simple, easy-to-understand model, but a major point here is that I have two traits that pull in almost the opposite direction.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/neatness-contrariness-vector-sum.png&quot; alt=&quot;Two vectors labelled respectively neatness and contrariness pulling in almost opposing directions, while still not quite cancelling each other out, leaving a short vector sum pointing to the right.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Despite much work, I only make slow progress. My desire to make things neat and proper almost cancel out my tendency to go against the norms. I tend to automatically toe whatever line that exists until the cognitive dissonance becomes so great that I can no longer ignore it.
    &lt;/p&gt;
    &lt;p&gt;
        I then write an article for the blog to clarify my thoughts.
    &lt;/p&gt;
    &lt;p&gt;
        You may read what comes next and ask, &lt;em&gt;what took you so long?!&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I can only refer to the above. I may look calm on the surface, but underneath I&apos;m paddling like the dickens. Despite much work, though, only limited progress is visible.
    &lt;/p&gt;
    &lt;h3 id=&quot;a00a292d223a435b873f7cc1de1730c3&quot;&gt;
        Nudge &lt;a href=&quot;#a00a292d223a435b873f7cc1de1730c3&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Haskell is a statically typed language with the most powerful type system I know my way around. The types carry so much information that one can often infer &lt;a href=&quot;/2022/10/24/encapsulation-in-functional-programming&quot;&gt;a function&apos;s contract&lt;/a&gt; from the type alone. This is also fortunate, since many Haskell libraries tend to have, shall we say, minimal documentation. Even so, I&apos;ve often found myself able to figure out how to use an unfamiliar Haskell API by examining the various types that a library exports.
    &lt;/p&gt;
    &lt;p&gt;
        In fact, the type system is so powerful that it drives &lt;a href=&quot;https://hoogle.haskell.org/&quot;&gt;a specialized search engine&lt;/a&gt;. If you need a function with the type &lt;code&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IO&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Int&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;[&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IO&lt;/span&gt;&amp;nbsp;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Int&lt;/span&gt;]&lt;/code&gt; you can search for it. Hoogle will list all functions that match that type, including functions that are more abstract than your specialized need. You don&apos;t even have to imagine what the name might be.
    &lt;/p&gt;
    &lt;p&gt;
        Since the type system is so powerful, it&apos;s a major means of communication. Thus, it makes sense that &lt;a href=&quot;https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler&quot;&gt;GHC&lt;/a&gt; regularly issues &lt;a href=&quot;https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wmissing-signatures&quot;&gt;a warning&lt;/a&gt; if a function lacks a type annotation.
    &lt;/p&gt;
    &lt;p&gt;
        While the compiler enables you to control which warnings are turned on, the &lt;code&gt;missing-signatures&lt;/code&gt; warning is included in the popular &lt;a href=&quot;https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wall&quot;&gt;all&lt;/a&gt; flag that most people, I take it, use. I do, at least.
    &lt;/p&gt;
    &lt;p&gt;
        If you forget to declare the type of a function, the compiler will complain:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;src\SecurityManager.hs:15:1: &lt;span style=&quot;color:red;&quot;&gt;warning&lt;/span&gt;: [&lt;span style=&quot;color:red;&quot;&gt;GHC-38417&lt;/span&gt;] [&lt;span style=&quot;color:red;&quot;&gt;-Wmissing-signatures&lt;/span&gt;]
    Top-level binding with no type signature:
      createUser :: (Monad m, Text.Printf.PrintfArg b,
                     Text.Printf.PrintfArg (t a), Foldable t, Eq (t a)) =&amp;gt;
                    (String -&amp;gt; m ()) -&amp;gt; m (t a) -&amp;gt; (t a -&amp;gt; b) -&amp;gt; m ()
&lt;span style=&quot;color:blue;&quot;&gt;   |&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;15 |&lt;/span&gt; &lt;span style=&quot;color:red;&quot;&gt;createUser&lt;/span&gt; writeLine readLine encrypt = do
&lt;span style=&quot;color:blue;&quot;&gt;   |&lt;/span&gt; &lt;span style=&quot;color:red;&quot;&gt;^^^^^^^^^^&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This is a strong nudge that you&apos;re supposed to give each function a type declaration, so I&apos;ve been doing that for years. Neat and proper.
    &lt;/p&gt;
    &lt;p&gt;
        Of course, if you treat warnings as errors, as &lt;a href=&quot;/code-that-fits-in-your-head&quot;&gt;I recommend&lt;/a&gt;, the nudge becomes a law.
    &lt;/p&gt;
    &lt;h3 id=&quot;cf16318003ef46ed8c67d81217e56011&quot;&gt;
        Learning from F# &lt;a href=&quot;#cf16318003ef46ed8c67d81217e56011&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        While I try to adopt the style and &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idioms&lt;/a&gt; of any language I work in, it&apos;s always annoyed me that I had to add a type annotation to a Haskell function. After all, the compiler can usually infer the type. Frankly, adding a type signature feels like redundant ceremony. It&apos;s like having to declare a function in a header file before being able to implement it in another file.
    &lt;/p&gt;
    &lt;p&gt;
        This particularly bothers me because I&apos;ve long since abandoned type annotations in F#. As far as I can tell, most of the F# community has, too.
    &lt;/p&gt;
    &lt;p&gt;
        When you implement an F# function, you just write the implementation and let the compiler infer the type. (Code example from &lt;a href=&quot;/2019/12/16/zone-of-ceremony&quot;&gt;Zone of Ceremony&lt;/a&gt;.)
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;inline&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;consume&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;quantity&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;go&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#1f377f;&quot;&gt;acc&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;xs&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;quantity&lt;/span&gt;&amp;nbsp;&amp;lt;=&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;acc&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#1f377f;&quot;&gt;acc&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Seq&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;append&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;xs&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Seq&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;singleton&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;x&lt;/span&gt;))
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#1f377f;&quot;&gt;acc&lt;/span&gt;&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;x&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;xs&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Seq&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;fold&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;go&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;LanguagePrimitives&lt;/span&gt;.GenericZero,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Seq&lt;/span&gt;.empty)&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;snd&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since F# often has to interact with .NET code written in C#, you regularly have to add &lt;em&gt;some&lt;/em&gt; type annotations to help the compiler along:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;average&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;timeSpans&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;NonEmpty&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TimeSpan&lt;/span&gt;&amp;gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;timeSpans&lt;/span&gt;.Head&amp;nbsp;]&amp;nbsp;@&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;ofSeq&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;timeSpans&lt;/span&gt;.Tail
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;List&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;averageBy&lt;/span&gt;&amp;nbsp;(_.Ticks&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;double&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;int64&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TimeSpan&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;FromTicks&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Even so, I follow the rule of minimal annotations: Only add the type information required to compile, and let the compiler infer the rest. For example, the above &lt;a href=&quot;/2024/05/06/conservative-codomain-conjecture&quot;&gt;average function&lt;/a&gt; has the inferred type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;NonEmpty&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TimeSpan&lt;/span&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TimeSpan&lt;/span&gt;&lt;/code&gt;. While I had to specify the input type in order to be able to use the &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.datetime.ticks&quot;&gt;Ticks property&lt;/a&gt;, I didn&apos;t have to specify the return type. So I didn&apos;t.
    &lt;/p&gt;
    &lt;p&gt;
        My impression from reading other people&apos;s F# code is that this is a common, albeit not universal, approach to type annotation.
    &lt;/p&gt;
    &lt;p&gt;
        This minimizes ceremony, since you only need to declare and maintain the types that the compiler can&apos;t infer. There&apos;s no reason to repeat the work that the compiler can already do, and in practice, if you do, it just gets in the way.
    &lt;/p&gt;
    &lt;h3 id=&quot;fdd9161164f64f438aa0bedf5ff6f9a8&quot;&gt;
        Motivation for explicit type definitions &lt;a href=&quot;#fdd9161164f64f438aa0bedf5ff6f9a8&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        When I extol the merits of static types, proponents of dynamically typed languages often argue that the types are in the way. Granted, this is &lt;a href=&quot;/2021/08/09/am-i-stuck-in-a-local-maximum&quot;&gt;a discussion that I still struggle with&lt;/a&gt;, but based on my understanding of the argument, it seems entirely reasonable. After all, if you have to spend time declaring the type of each and every parameter, as well as a function&apos;s return type, it does seem to be in the way. This is only exacerbated if you later change your mind.
    &lt;/p&gt;
    &lt;p&gt;
        Programming is, to a large extend, an explorative activity. You start with one notion of how your code should be structured, but as you progress, you learn. You&apos;ll often have to go back and change existing code. This, as far as I can tell, is much easier in, say, &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; or &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt; than in C# or &lt;a href=&quot;https://www.java.com/&quot;&gt;Java&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If, however, one extrapolates from the experience with Java or C# to all statically typed languages, that would be a logical fallacy. My point with &lt;a href=&quot;/2019/12/16/zone-of-ceremony&quot;&gt;Zone of Ceremony&lt;/a&gt; was exactly that there&apos;s a group of languages &apos;to the right&apos; of high-ceremony languages with low levels of ceremony. Even though they&apos;re statically typed.
    &lt;/p&gt;
    &lt;p&gt;
        I have to admit, however, that in that article I cheated a little in order to drive home a point. While you &lt;em&gt;can&lt;/em&gt; write Haskell code in a low-ceremony style, the tooling (in the form of the &lt;code&gt;all&lt;/code&gt; warning set, at least) encourages a high-ceremony style. Add those type definitions, even thought they&apos;re redundant.
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s not that I don&apos;t understand some of the underlying motivation behind that rule. &lt;a href=&quot;http://dmwit.com/&quot;&gt;Daniel Wagner&lt;/a&gt; enumerated several reasons in &lt;a href=&quot;https://stackoverflow.com/a/19626857/126014&quot;&gt;a 2013 Stack Overflow answer&lt;/a&gt;. Some of the reasons still apply, but on the other hand, the world has also moved on in the intervening decade.
    &lt;/p&gt;
    &lt;p&gt;
        To be honest, the Haskell &lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;IDE&lt;/a&gt; situation has always been precarious. One day, it works really well; the next day, I struggle with it. Over the years, though, things have improved.
    &lt;/p&gt;
    &lt;p&gt;
        There was a time when an explicit type definition was a indisputable help, because you couldn&apos;t rely on tools to light up and tell you what the inferred type was.
    &lt;/p&gt;
    &lt;p&gt;
        Today, on the other hand, the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&quot;&gt;Haskell extension for Visual Studio Code&lt;/a&gt; automatically displays the inferred type above a function implementation:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/haskell-code-with-inferred-type-displayed-by-vs-code.png&quot; alt=&quot;Screen shot of a Haskell function in Visual Studio Code with the function&apos;s type automatically displayed above it by the Haskell extension.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        To be clear, the top line that shows the type definition is not part of the source code. It&apos;s just shown by Visual Studio Code as a code lens (I think it&apos;s called), and it automatically changes if I edit the code in such a way that the type changes.
    &lt;/p&gt;
    &lt;p&gt;
        If you can rely on such automatic type information, it seems that an explicit type declaration is less useful. It&apos;s at least one less reason to add type annotations to the source code.
    &lt;/p&gt;
    &lt;h3 id=&quot;367135868de54bcb8eebd2d9bc9a0f8c&quot;&gt;
        Ceremony example &lt;a href=&quot;#367135868de54bcb8eebd2d9bc9a0f8c&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In order to explain what I mean by &lt;em&gt;the types being in the way&lt;/em&gt;, I&apos;ll give an example. Consider the code example from the article &lt;a href=&quot;/2024/10/21/legacy-security-manager-in-haskell&quot;&gt;Legacy Security Manager in Haskell&lt;/a&gt;. In it, I described how every time I made a change to the &lt;code&gt;createUser&lt;/code&gt; action, I had to effectively remove and re-add the type declaration.
    &lt;/p&gt;
    &lt;p&gt;
        It doesn&apos;t have to be like that. If instead I&apos;d started without type annotations, I could have moved forward without being slowed down by having to edit type definitions. Take the first edit, breaking the dependency on the console, as an example. Without type annotations, the &lt;code&gt;createUser&lt;/code&gt; action would look exactly as before, just without the type declaration. Its type would still be &lt;code&gt;IO ()&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        After the first edit, the first lines of the action now look like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;()&lt;/span&gt;&amp;nbsp;&amp;lt;-&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;--&amp;nbsp;...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Even without a type definition, the action still has a type. The compiler infers it to be &lt;code&gt;(&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Eq&lt;/span&gt;&amp;nbsp;a,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;IsChar&lt;/span&gt;&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;[a]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/code&gt;, which is certainly a bit of a mouthful, but exactly what I had explicitly added in the other article.
    &lt;/p&gt;
    &lt;p&gt;
        The code doesn&apos;t compile until I also change the &lt;code&gt;main&lt;/code&gt; method to pass the new parameters:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;main&amp;nbsp;=&amp;nbsp;createUser&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;d have to make a similar edit in, say, Python, although there&apos;d be no compiler to remind you. My point isn&apos;t that this is better than a dynamically typed language, but rather that it&apos;s on par. The types aren&apos;t in the way.
    &lt;/p&gt;
    &lt;p&gt;
        We see the similar lack of required ceremony when the &lt;code&gt;createUser&lt;/code&gt; action finally pulls in the &lt;code&gt;comparePasswords&lt;/code&gt; and &lt;code&gt;validatePassword&lt;/code&gt; functions:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;()&lt;/span&gt;&amp;nbsp;&amp;lt;-&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
 
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;$&amp;nbsp;either
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;id&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(printf&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(%s,&amp;nbsp;%s,&amp;nbsp;%s)&amp;quot;&lt;/span&gt;&amp;nbsp;username&amp;nbsp;fullName&amp;nbsp;.&amp;nbsp;encrypt)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(validatePassword&amp;nbsp;=&amp;lt;&amp;lt;&amp;nbsp;comparePasswords&amp;nbsp;password&amp;nbsp;confirmPassword)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Again, there&apos;s no type annotation, and while the type actually &lt;em&gt;does&lt;/em&gt; change to
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;(&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;PrintfArg&lt;/span&gt;&amp;nbsp;b,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;PrintfArg&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a),&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Foldable&lt;/span&gt;&amp;nbsp;t,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Eq&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a))&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;
(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;(t&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;b)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        it impacts none of the existing code. Again, the types aren&apos;t in the way, and no ceremony is required.
    &lt;/p&gt;
    &lt;p&gt;
        Compare that inferred type signature with the explicit final type annotation in &lt;a href=&quot;/2024/10/21/legacy-security-manager-in-haskell&quot;&gt;the previous article&lt;/a&gt;. The inferred type is much more abstract and permissive than the explicit declaration, although I also grant that Daniel Wagner had a point that you can make explicit type definitions more reader-friendly.
    &lt;/p&gt;
    &lt;h3 id=&quot;d4469073def54f289edb56d1ca8417ee&quot;&gt;
        Flies in the ointment &lt;a href=&quot;#d4469073def54f289edb56d1ca8417ee&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Do the inferred types communicate intent? That&apos;s debatable. For example, it&apos;s not immediately clear that the above &lt;code&gt;t a&lt;/code&gt; allows &lt;code&gt;String&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Another thing that annoys me is that I had to add that &lt;em&gt;unit&lt;/em&gt; binding on the first line:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;()&lt;/span&gt;&amp;nbsp;&amp;lt;-&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;--&amp;nbsp;...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The reason for that is that if I don&apos;t do that (that is, if I just write &lt;code&gt;writeLine &quot;Xyz&quot;&lt;/code&gt; all the way), the compiler infers the type of &lt;code&gt;writeLine&lt;/code&gt; to be &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;b2&lt;/code&gt;, rather than just &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/code&gt;. In effect, I want &lt;code&gt;b2 ~ ()&lt;/code&gt;, but because the compiler thinks that &lt;code&gt;b2&lt;/code&gt; may be anything, it issues an &lt;a href=&quot;https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wunused-do-bind&quot;&gt;unused-do-bind&lt;/a&gt; warning.
    &lt;/p&gt;
    &lt;p&gt;
        The idiomatic way to resolve that situation is to add a type definition, but that&apos;s the situation I&apos;m trying to avoid. Thus, my desire to do without annotations pushes me to write unnatural implementation code. This reminds me of the notion of &lt;a href=&quot;https://dhh.dk/2014/test-induced-design-damage.html&quot;&gt;test-induced damage&lt;/a&gt;. This is at best a disagreeable compromise.
    &lt;/p&gt;
    &lt;p&gt;
        It also annoys me that implementation details leak out to the inferred type, witnessed by the &lt;code&gt;PrintfArg&lt;/code&gt; type constraint. What happens if I change the implementation to use list concatenation?
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;()&lt;/span&gt;&amp;nbsp;&amp;lt;-&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
 
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;createMsg&amp;nbsp;pwd&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(&amp;quot;&lt;/span&gt;&amp;nbsp;++&amp;nbsp;username&amp;nbsp;++&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;,&amp;nbsp;&amp;quot;&lt;/span&gt;&amp;nbsp;++&amp;nbsp;fullName&amp;nbsp;++&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;,&amp;nbsp;&amp;quot;&lt;/span&gt;&amp;nbsp;++&amp;nbsp;pwd&amp;nbsp;++&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;$&amp;nbsp;either
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;id&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(createMsg&amp;nbsp;.&amp;nbsp;encrypt)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(validatePassword&amp;nbsp;=&amp;lt;&amp;lt;&amp;nbsp;comparePasswords&amp;nbsp;password&amp;nbsp;confirmPassword)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If I do that, the type also changes:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Char&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;([&lt;span style=&quot;color:#2b91af;&quot;&gt;Char&lt;/span&gt;]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Char&lt;/span&gt;])&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While we get rid of the &lt;code&gt;PrintfArg&lt;/code&gt; type constraint, the type becomes otherwise more concrete, now operating on &lt;code&gt;String&lt;/code&gt; values (keeping in mind that &lt;code&gt;String&lt;/code&gt; is a type synonym for &lt;code&gt;[Char]&lt;/code&gt;).
    &lt;/p&gt;
    &lt;p&gt;
        The code still compiles, and all tests still pass, because the abstraction I&apos;ve had in mind all along is essentially this last type.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;writeLine&lt;/code&gt; action should take a &lt;code&gt;String&lt;/code&gt; and have some side effect, but return no data. The type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/code&gt; nicely models that, striking a fine balance between being sufficiently concrete to capture intent, but still abstract enough to be testable.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;readLine&lt;/code&gt; action should provide input &lt;code&gt;String&lt;/code&gt; values, and again &lt;code&gt;m String&lt;/code&gt; nicely models that concern.
    &lt;/p&gt;
    &lt;p&gt;
        Finally, &lt;code&gt;encrypt&lt;/code&gt; is indeed a naked &lt;code&gt;String&lt;/code&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Endomorphism&quot;&gt;endomorphism&lt;/a&gt;: &lt;code&gt;String -&amp;gt; String&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        With my decades of experience with object-oriented design, it still strikes me as odd that implementation details can make a type more abstract, but once you think it over, it may be okay.
    &lt;/p&gt;
    &lt;h3 id=&quot;a82d4017be064ce980c40e22aa6f801e&quot;&gt;
        More liberal abstractions &lt;a href=&quot;#a82d4017be064ce980c40e22aa6f801e&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The inferred types are consistently more liberal than the abstraction I have in mind, which is
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In all cases, the inferred types include that type as a subset.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;img src=&quot;/content/binary/create-user-abstraction-sets.png&quot; alt=&quot;Various sets of inferred types.&quot;&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I hope that I&apos;ve created the above diagram so that it makes sense, but the point I&apos;m trying to get across is that the two type definitions in the lower middle are equivalent, and are the most specific types. That&apos;s the intended abstraction. Thinking of &lt;a href=&quot;/2021/11/15/types-as-sets&quot;&gt;types as sets&lt;/a&gt;, all the other inferred types are supersets of that type, in various ways. Even though implementation details leak out in the shape of &lt;code&gt;PrintfArg&lt;/code&gt; and &lt;code&gt;IsChar&lt;/code&gt;, these are effectually larger sets.
    &lt;/p&gt;
    &lt;p&gt;
        This takes some getting used to: The implementation details are &lt;em&gt;more&lt;/em&gt; liberal than the abstraction. This seems to be at odds with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_inversion_principle&quot;&gt;Dependency Inversion Principle&lt;/a&gt; (DIP), which suggests that abstractions shouldn&apos;t depend on implementation details. I&apos;m not yet sure what to make of this, but I suspect that this is more of problem of overlapping linguistic semantics than software design. What I mean is that I have a feeling that &apos;implementation detail&apos; have more than one meaning. At least, in the perspective of the DIP, an implementation detail &lt;em&gt;limits&lt;/em&gt; your options. For example, depending on a particular database technology is more constraining than depending on some abstract notion of what the persistence mechanism might be. Contrast this with an implementation detail such as the &lt;code&gt;PrintfArg&lt;/code&gt; type constraint. It doesn&apos;t narrow your options; on the contrary, it makes the implementation more liberal.
    &lt;/p&gt;
    &lt;p&gt;
        Still, while an implementation should &lt;a href=&quot;https://en.wikipedia.org/wiki/Robustness_principle&quot;&gt;be liberal in what it accepts&lt;/a&gt;, it&apos;s probably not a good idea to publish such a capability to the wider world. After all, if you do, &lt;a href=&quot;https://www.hyrumslaw.com/&quot;&gt;someone will eventually rely on it&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;42ffe5249c7542809ca55a95a8f15f6c&quot;&gt;
        For internal use only &lt;a href=&quot;#42ffe5249c7542809ca55a95a8f15f6c&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Going through all these considerations, I think I&apos;ll revise my position as the following.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll forgo type annotations as long as I explore a problem space. For internal application use, this may effectively mean forever, in the sense that how you compose an application from smaller building blocks is likely to be in permanent flux. Here I have in mind your average web asset or other public-facing service that&apos;s in constant development. You keep adding new features, or changing domain logic as the overall business evolves.
    &lt;/p&gt;
    &lt;p&gt;
        As I&apos;ve also recently discussed, &lt;a href=&quot;/2024/02/05/statically-and-dynamically-typed-scripts&quot;&gt;Haskell is a great scripting language&lt;/a&gt;, and I think that here, too, I&apos;ll dial down the type definitions.
    &lt;/p&gt;
    &lt;p&gt;
        If I ever do another &lt;a href=&quot;https://adventofcode.com/&quot;&gt;Advent of Code&lt;/a&gt; in Haskell, I think I&apos;ll also eschew explicit type annotations.
    &lt;/p&gt;
    &lt;p&gt;
        On the other hand, I can see that once an API stabilizes, you may want to lock it down. This may also apply to internal abstractions if you&apos;re working in a team and you explicitly want to communicate what a contract is.
    &lt;/p&gt;
    &lt;p&gt;
        If the code is a reusable library, I think that explicit type definitions are still required. Both for the reasons outlined by Daniel Wagner, and also to avoid being the victim of &lt;a href=&quot;https://www.hyrumslaw.com/&quot;&gt;Hyrum&apos;s law&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s why I phrase this pendulum swing as a new &lt;em&gt;default&lt;/em&gt;. I&apos;ll begin programming without type definitions, but add them as needed. The point is rather that there may be parts of a code base where they&apos;re never needed, and then it&apos;s okay to keep going without them.
    &lt;/p&gt;
    &lt;p&gt;
        You can use a language pragma to opt out of the &lt;code&gt;missing-signatures&lt;/code&gt; compiler warning on a module-by-module basis:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;{-#&amp;nbsp;&lt;span style=&quot;color:gray;&quot;&gt;OPTIONS_GHC&lt;/span&gt;&amp;nbsp;-Wno-missing-signatures&amp;nbsp;#-}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This will enable me to rely on type inference in parts of the code base, while keeping the build clean of compiler warnings.
    &lt;/p&gt;
    &lt;h3 id=&quot;36e2b141fff548678e34d24eda5a3e03&quot;&gt;
        Conclusion &lt;a href=&quot;#36e2b141fff548678e34d24eda5a3e03&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I&apos;ve always appreciated the F# compiler&apos;s ability to infer types and just let type changes automatically ripple through the code base. For that reason, the Haskell norm of explicitly adding a (redundant) type annotation has always vexed me.
    &lt;/p&gt;
    &lt;p&gt;
        It often takes me a long time to reach seemingly obvious conclusions, such as: Don&apos;t always add type definitions to Haskell functions. Let the type inference engine do its job.
    &lt;/p&gt;
    &lt;p&gt;
        The reason it takes me so long to take such a small step is that I want to follow &apos;best practice&apos;; I want to write idiomatic code. When the standard compiler-warning set complains about missing type definitions, it takes me significant deliberation to discard such advice. I could imagine other programmers being in the same situation, which is one reason I wrote this article.
    &lt;/p&gt;
    &lt;p&gt;
        The point isn&apos;t that type definitions are a universally bad idea. They aren&apos;t. Rather, the point is only that it&apos;s also okay to do without them in parts of a code base. Perhaps only temporarily, but in some cases maybe permanently.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;missing-signatures&lt;/code&gt; warning shouldn&apos;t, I now believe, be considered an absolute law, but rather a contextual rule.
    &lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default</guid>
      </item>
    
      <item>
        <title>Functor compositions</title>
        <link>https://blog.ploeh.dk/2024/10/28/functor-compositions/</link>
        <pubDate>Mon, 28 Oct 2024 06:58:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A functor nested within another functor forms a functor. With examples in C# and another language.&lt;/em&gt;
    &lt;/p&gt;
	&lt;p&gt;
		This article is part of &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;a series of articles about functor relationships&lt;/a&gt;. In this one you&apos;ll learn about a universal composition of functors. In short, if you have one functor nested within another functor, then this composition itself gives rise to a functor.
	&lt;/p&gt;
    &lt;p&gt;
        Together with other articles in this series, this result can help you answer questions such as: &lt;em&gt;Does this data structure form a functor?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since &lt;a href=&quot;/2018/03/22/functors&quot;&gt;functors&lt;/a&gt; tend to be quite common, and since they&apos;re useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; (C# syntax) or &lt;code&gt;Bar&amp;lt;T1, T2&amp;gt;&lt;/code&gt;, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it&apos;s a functor strongly suggests that you should give it a &lt;code&gt;Select&lt;/code&gt; method in C#, a &lt;code&gt;map&lt;/code&gt; function in &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;, and so on.
    &lt;/p&gt;
    &lt;p&gt;
        Not all generic types give rise to a (covariant) functor. Some are rather &lt;a href=&quot;/2021/09/02/contravariant-functors&quot;&gt;contravariant functors&lt;/a&gt;, and some are &lt;a href=&quot;/2022/08/01/invariant-functors&quot;&gt;invariant&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If, on the other hand, you have a data type where one functor is nested within another functor, then the data type itself gives rise to a functor. You&apos;ll see some examples in this article.
    &lt;/p&gt;
    &lt;h3 id=&quot;a97b2f6471b74db6a83362a552ee5b03&quot;&gt;
        Abstract shape &lt;a href=&quot;#a97b2f6471b74db6a83362a552ee5b03&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Before we look at some examples found in other code, it helps if we know what we&apos;re looking for. Imagine that you have two functors &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;, and you&apos;re now considering a data structure that contains a value where &lt;code&gt;G&lt;/code&gt; is nested inside of &lt;code&gt;F&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;readonly&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;ginf;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ginf&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;.ginf&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ginf&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;Methods&amp;nbsp;go&amp;nbsp;here...&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; class has a single class field. The type of this field is an &lt;code&gt;F&lt;/code&gt; &lt;a href=&quot;https://bartoszmilewski.com/2014/01/14/functors-are-containers/&quot;&gt;container&lt;/a&gt;, but &apos;inside&apos; &lt;code&gt;F&lt;/code&gt; there&apos;s a &lt;code&gt;G&lt;/code&gt; functor.
    &lt;/p&gt;
    &lt;p&gt;
        This kind of data structure gives rise to a functor. Knowing that, you can give it a &lt;code&gt;Select&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(ginf.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The composed &lt;code&gt;Select&lt;/code&gt; method calls &lt;code&gt;Select&lt;/code&gt; on the &lt;code&gt;F&lt;/code&gt; functor, passing it a lambda expression that calls &lt;code&gt;Select&lt;/code&gt; on the &lt;code&gt;G&lt;/code&gt; functor. That nested &lt;code&gt;Select&lt;/code&gt; call produces an &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; that the composed &lt;code&gt;Select&lt;/code&gt; method finally wraps in a &lt;code&gt;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt; object that it returns.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll have more to say about how this generalizes to a nested composition of more than two functors, but first, let&apos;s consider some examples.
    &lt;/p&gt;
    &lt;h3 id=&quot;fcd4126b51c24b10867de4280f5e8844&quot;&gt;
        Priority list &lt;a href=&quot;#fcd4126b51c24b10867de4280f5e8844&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        A common configuration is when the &apos;outer&apos; functor is a collection, and the &apos;inner&apos; functor is some other kind of container. The article &lt;a href=&quot;/2024/07/01/an-immutable-priority-collection&quot;&gt;An immutable priority collection&lt;/a&gt; shows a straightforward example. The &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriorityCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; class composes a single class field:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;readonly&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;[]&amp;nbsp;priorities;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;priorities&lt;/code&gt; field is an array (a collection) of &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; objects. That type is a simple &lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record&quot;&gt;record&lt;/a&gt; type:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;record&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Priority&lt;/span&gt;);&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If we squint a little and consider only the parameter list, we may realize that this is fundamentally an &apos;embellished&apos; tuple: &lt;code&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Priority&lt;/span&gt;)&lt;/code&gt;. &lt;a href=&quot;/2018/12/31/tuple-bifunctor&quot;&gt;A pair forms a bifunctor&lt;/a&gt;, but in the &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; &lt;code&gt;Prelude&lt;/code&gt; a tuple is also a &lt;code&gt;Functor&lt;/code&gt; instance over its rightmost element. In other words, if we&apos;d swapped the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; constructor parameters, it might have naturally looked like something we could &lt;code&gt;fmap&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; fmap (elem &apos;r&apos;) (55, &quot;foo&quot;)
(55,False)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Here we have a tuple of an integer and a string. Imagine that the number &lt;code&gt;55&lt;/code&gt; is the priority that we give to the label &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. This little ad-hoc example demonstrates how to map that tuple to another tuple with a priority, but now it instead holds a Boolean value indicating whether or not the string contained the character &lt;code&gt;&apos;r&apos;&lt;/code&gt; (which it didn&apos;t).
    &lt;/p&gt;
    &lt;p&gt;
        You can easily swap the elements:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; import Data.Tuple
ghci&amp;gt; swap (55, &quot;foo&quot;)
(&quot;foo&quot;,55)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This looks just like the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; parameter list. This also implies that if you originally have the parameter list in that order, you could &lt;code&gt;swap&lt;/code&gt; it, map it, and swap it again:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; swap $ fmap (elem &apos;r&apos;) $ swap (&quot;foo&quot;, 55)
(False,55)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        My point is only that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; is isomorphic to a known functor. In reality you rarely need to analyze things that thoroughly to come to that realization, but the bottom line is that you can give &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; a lawful &lt;code&gt;Select&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;record&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Item&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;Priority&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Prioritized&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(Item),&amp;nbsp;Priority);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Hardly surprising, but since this article postulates that a functor of a functor is a functor, and since we already know that collections give rise to a functor, we should deduce that we can give &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriorityCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; a &lt;code&gt;Select&lt;/code&gt; method. And we can:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriorityCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriorityCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;priorities.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;p&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ToArray&lt;/span&gt;());
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice how much this implementation looks like the above &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;GInF&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; &apos;shape&apos; implementation.
    &lt;/p&gt;
    &lt;h3 id=&quot;32b4e828d4584c3d8cda81a9682aee34&quot;&gt;
        Tree &lt;a href=&quot;#32b4e828d4584c3d8cda81a9682aee34&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        An example only marginally more complicated than the above is shown in &lt;a href=&quot;/2018/08/06/a-tree-functor&quot;&gt;A Tree functor&lt;/a&gt;. The &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; class shown in that article contains two constituents:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;private&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;readonly&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;children;
 
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;Item&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Just like &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;PriorityCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; there&apos;s a collection, as well as a &apos;naked&apos; &lt;code&gt;T&lt;/code&gt; value. The main difference is that here, the collection is of the same type as the object itself: &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ve seen a similar example in &lt;a href=&quot;/2024/10/14/functor-sums&quot;&gt;the previous article&lt;/a&gt;, which also had a recursive data structure. If you assume, however, that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; gives rise to a functor, then so does the nested composition of putting it in a collection. This means, from the &apos;theorem&apos; put forth in this article, that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IReadOnlyCollection&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt; composes as a functor. Finally you have a product of a &lt;code&gt;T&lt;/code&gt; (which is isomorphic to the &lt;a href=&quot;/2018/09/03/the-identity-functor&quot;&gt;Identity functor&lt;/a&gt;) and that composed functor. From &lt;a href=&quot;/2024/09/16/functor-products&quot;&gt;Functor products&lt;/a&gt; it follows that that&apos;s a functor too, which explains why &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Tree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; forms a functor. &lt;a href=&quot;/2018/08/06/a-tree-functor&quot;&gt;The article&lt;/a&gt; shows the &lt;code&gt;Select&lt;/code&gt; implementation.
    &lt;/p&gt;
    &lt;h3 id=&quot;17209725eab64da598ba924342dafbd0&quot;&gt;
        Binary tree Zipper &lt;a href=&quot;#17209725eab64da598ba924342dafbd0&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In both previous articles you&apos;ve seen pieces of the puzzle explaining why the &lt;a href=&quot;/2024/09/09/a-binary-tree-zipper-in-c&quot;&gt;binary tree Zipper&lt;/a&gt; gives rise to functor. There&apos;s one missing piece, however, that we can now finally address.
    &lt;/p&gt;
    &lt;p&gt;
        Recall that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTreeZipper&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; composes these two objects:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;Tree&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&amp;nbsp;Breadcrumbs&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        We&apos;ve already established that both &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; form functors. In this article you&apos;ve learned that a functor in a functor is a functor, which applies to &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;IEnumerable&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;gt;&lt;/code&gt;. Both of the above read-only properties are functors, then, which means that the entire class is a product of functors. The &lt;code&gt;Select&lt;/code&gt; method follows:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTreeZipper&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTreeZipper&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Tree.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Breadcrumbs.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that this &lt;code&gt;Select&lt;/code&gt; implementation calls &lt;code&gt;Select&lt;/code&gt; on the &apos;outer&apos; &lt;code&gt;Breadcrumbs&lt;/code&gt; by calling &lt;code&gt;Select&lt;/code&gt; on each &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;. This is similar to the previous examples in this article.
    &lt;/p&gt;
    &lt;h3 id=&quot;800728c4c9c54aec815c62352843d52b&quot;&gt;
        Other nested containers &lt;a href=&quot;#800728c4c9c54aec815c62352843d52b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        There are plenty of other examples of functors that contains other functor values. Asynchronous programming supplies its own family of examples.
    &lt;/p&gt;
    &lt;p&gt;
        The way that C# and many other languages model asynchronous or I/O-bound actions is to wrap them in a &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1&quot;&gt;Task&lt;/a&gt; container. If the value inside the &lt;code&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; container is itself a functor, you can make that a functor, too. Examples include &lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;Task&amp;lt;Maybe&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; (or its close cousin &lt;code&gt;Task&amp;lt;T?&amp;gt;&lt;/code&gt;; notice &lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/nullable-reference-types&quot;&gt;the question mark&lt;/a&gt;), &lt;code&gt;Task&amp;lt;Result&amp;lt;T1, T2&amp;gt;&amp;gt;&lt;/code&gt;, etc. You&apos;ll run into such types every time you have an I/O-bound or concurrent operation that returns &lt;code&gt;IEnumerable&amp;lt;T&amp;gt&lt;/code&gt;, &lt;code&gt;Maybe&amp;lt;T&amp;gt;&lt;/code&gt; etc. as an asynchronous result.
    &lt;/p&gt;
    &lt;p&gt;
        While you &lt;em&gt;can&lt;/em&gt; make such nested task functors a functor in its own right, you rarely need that in languages with native &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; features, since those languages nudge you in other directions.
    &lt;/p&gt;
    &lt;p&gt;
        You can, however, run into other issues with task-based programming, but you&apos;ll see examples and solutions in &lt;a href=&quot;/2024/11/11/traversals&quot;&gt;a future article&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ll run into other examples of nested containers with many property-based testing libraries. They typically define &lt;a href=&quot;/2017/09/18/the-test-data-generator-functor&quot;&gt;Test Data Generators&lt;/a&gt;, often called &lt;code&gt;Gen&amp;lt;T&amp;gt;&lt;/code&gt;. For .NET, both &lt;a href=&quot;https://fscheck.github.io/FsCheck/&quot;&gt;FsCheck&lt;/a&gt;, &lt;a href=&quot;https://github.com/hedgehogqa/fsharp-hedgehog&quot;&gt;Hedgehog&lt;/a&gt;, and &lt;a href=&quot;https://github.com/AnthonyLloyd/CsCheck&quot;&gt;CsCheck&lt;/a&gt; does this. For Haskell, &lt;a href=&quot;https://hackage.haskell.org/package/QuickCheck&quot;&gt;QuickCheck&lt;/a&gt;, too, defines &lt;code&gt;Gen a&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You often need to generate random collections, in which case you&apos;d work with &lt;code&gt;Gen&amp;lt;IEnumerable&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; or a similar collection type. If you need random &lt;a href=&quot;/2018/03/26/the-maybe-functor&quot;&gt;Maybe&lt;/a&gt; values, you&apos;ll work with &lt;code&gt;Gen&amp;lt;Maybe&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, and so on.
    &lt;/p&gt;
    &lt;p&gt;
        On the other hand, &lt;a href=&quot;/2016/06/28/roman-numerals-via-property-based-tdd&quot;&gt;sometimes you need&lt;/a&gt; to work with a collection of generators, such as &lt;code&gt;seq&amp;lt;Gen&amp;lt;&apos;a&amp;gt;&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        These are all examples of functors within functors. It&apos;s not a given that you &lt;em&gt;must&lt;/em&gt; treat such a combination as a functor in its own right. To be honest, typically, you don&apos;t. On the other hand, if you find yourself writing &lt;code&gt;Select&lt;/code&gt; within &lt;code&gt;Select&lt;/code&gt;, or &lt;code&gt;map&lt;/code&gt; within &lt;code&gt;map&lt;/code&gt;, depending on your language, it might make your code more succinct and readable if you give that combination a specialized functor affordance.
    &lt;/p&gt;
    &lt;h3 id=&quot;bffe8909eb904260be8aa4ab1a22efb2&quot;&gt;
        Higher arities &lt;a href=&quot;#bffe8909eb904260be8aa4ab1a22efb2&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Like the previous two articles, the &apos;theorem&apos; presented here generalizes to more than two functors. If you have a third &lt;code&gt;H&lt;/code&gt; functor, then &lt;code&gt;F&amp;lt;G&amp;lt;H&amp;lt;T&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; also gives rise to a functor. You can easily prove this by simple induction. We may first consider the base case. With a single functor (&lt;em&gt;n = 1&lt;/em&gt;) any functor (say, &lt;code&gt;F&lt;/code&gt;) is trivially a functor.
    &lt;/p&gt;
    &lt;p&gt;
        In the induction step (&lt;em&gt;n &gt; 1&lt;/em&gt;), you then assume that the &lt;em&gt;n - 1&lt;/em&gt; &apos;stack&apos; of functors already gives rise to a functor, and then proceed to prove that the configuration where all those nested functors are wrapped by yet another functor also forms a functor. Since the &apos;inner stack&apos; of functors forms a functor (by assumption), you only need to prove that a configuration of the outer functor, and that &apos;inner stack&apos;, gives rise to a functor. You&apos;ve seen how this works in this article, but I admit that a few examples constitute no proof. I&apos;ll leave you with only a sketch of this step, but you may consider using equational reasoning &lt;a href=&quot;https://bartoszmilewski.com/2015/01/20/functors/&quot;&gt;as demonstrated by Bartosz Milewski&lt;/a&gt; and then prove the functor laws for such a composition.
    &lt;/p&gt;
    &lt;p&gt;
        The Haskell &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html&quot;&gt;Data.Functor.Compose&lt;/a&gt; module defines a general-purpose data type to compose functors. You may, for example, compose a tuple inside a Maybe inside a list:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;thriceNested&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Compose&lt;/span&gt;&amp;nbsp;[]&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Compose&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;((,)&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Integer&lt;/span&gt;))&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;
thriceNested&amp;nbsp;=&amp;nbsp;Compose&amp;nbsp;[Compose&amp;nbsp;(Just&amp;nbsp;(42,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)),&amp;nbsp;Compose&amp;nbsp;Nothing,&amp;nbsp;Compose&amp;nbsp;(Just&amp;nbsp;(89,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;ba&amp;quot;&lt;/span&gt;))]&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can easily &lt;code&gt;fmap&lt;/code&gt; that data structure, for example by evaluating whether the number of characters in each string is an odd number (if it&apos;s there at all):
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; fmap (odd . length) thriceNested
Compose [Compose (Just (42,True)),Compose Nothing,Compose (Just (89,False))]&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The first element now has &lt;code&gt;True&lt;/code&gt; as the second tuple element, since &lt;code&gt;&quot;foo&quot;&lt;/code&gt; has an odd number of characters (3). The next element is &lt;code&gt;Nothing&lt;/code&gt;, because &lt;code&gt;Nothing&lt;/code&gt; maps to &lt;code&gt;Nothing&lt;/code&gt;. The third element has &lt;code&gt;False&lt;/code&gt; in the rightmost tuple element, since &lt;code&gt;&quot;ba&quot;&lt;/code&gt; doesn&apos;t have an odd number of characters (it has 2).
    &lt;/p&gt;
    &lt;h3 id=&quot;8c6ca7bcdc554856bee94bd11981aa6f&quot;&gt;
        Relations to monads &lt;a href=&quot;#8c6ca7bcdc554856bee94bd11981aa6f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        A nested &apos;stack&apos; of functors may remind you of the way that I prefer to teach &lt;a href=&quot;/2022/03/28/monads&quot;&gt;monads&lt;/a&gt;: &lt;em&gt;A monad is a functor your can flatten&lt;/em&gt;. In short, the definition is the ability to &apos;flatten&apos; &lt;code&gt;F&amp;lt;F&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; to &lt;code&gt;F&amp;lt;T&amp;gt;&lt;/code&gt;. A function that can do that is often called &lt;code&gt;join&lt;/code&gt; or &lt;code&gt;Flatten&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        So far in this article, we&apos;ve been looking at stacks of different functors, abstractly denoted &lt;code&gt;F&amp;lt;G&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. There&apos;s no rule, however, that says that &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; may not be the same. If &lt;code&gt;F = G&lt;/code&gt; then &lt;code&gt;F&amp;lt;G&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; is really &lt;code&gt;F&amp;lt;F&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. This starts to look like the &lt;a href=&quot;https://en.wikipedia.org/wiki/Antecedent_(logic)&quot;&gt;antecedent&lt;/a&gt; of the monad definition.
    &lt;/p&gt;
    &lt;p&gt;
        While the starting point may be the same, these notions are not equivalent. Yes, &lt;code&gt;F&amp;lt;F&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; &lt;em&gt;may&lt;/em&gt; form a monad (if you can flatten it), but it does, universally, give rise to a functor. On the other hand, we can hardly talk about flattening &lt;code&gt;F&amp;lt;G&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, because that would imply that you&apos;d have to somehow &apos;throw away&apos; either &lt;code&gt;F&lt;/code&gt; or &lt;code&gt;G&lt;/code&gt;. There may be specific functors (e.g. Identity) for which this is possible, but there&apos;s no universal law to that effect.
    &lt;/p&gt;
    &lt;p&gt;
        Not all &apos;stacks&apos; of functors are monads. &lt;a href=&quot;/2022/03/28/monads&quot;&gt;All monads, on the other hand, are functors&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;14f39729b7ab426e83a35a067cf8f3a1&quot;&gt;
        Conclusion &lt;a href=&quot;#14f39729b7ab426e83a35a067cf8f3a1&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        A data structure that configures one type of functor inside of another functor itself forms a functor. The examples shown in this article are mostly constrained to two functors, but if you have a &apos;stack&apos; of three, four, or more functors, that arrangement still gives rise to a functor.
    &lt;/p&gt;
	&lt;p&gt;
		This is useful to know, particularly if you&apos;re working in a language with only partial support for functors. Mainstream languages aren&apos;t going to automatically turn such stacks into functors, in the way that Haskell&apos;s &lt;code&gt;Compose&lt;/code&gt; container almost does. Thus, knowing when you can safely give your generic types a &lt;code&gt;Select&lt;/code&gt; method or &lt;code&gt;map&lt;/code&gt; function may come in handy.
	&lt;/p&gt;
    &lt;p&gt;
        To be honest, though, this result is hardly the most important &apos;theorem&apos; concerning stacks of functors. In reality, you often run into situations where you &lt;em&gt;do&lt;/em&gt; have a stack of functors, but they&apos;re in the wrong order. You may have a collection of asynchronous tasks, but you really need an asynchronous task that contains a collection of values. The next article addresses that problem.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2024/11/11/traversals&quot;&gt;Traversals&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/10/28/functor-compositions</guid>
      </item>
    
      <item>
        <title>Legacy Security Manager in Haskell</title>
        <link>https://blog.ploeh.dk/2024/10/21/legacy-security-manager-in-haskell/</link>
        <pubDate>Mon, 21 Oct 2024 06:14:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A translation of the kata, and my first attempt at it.&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In early 2013 Richard Dalton published an article about &lt;a href=&quot;https://www.devjoy.com/blog/legacy-code-katas/&quot;&gt;legacy code katas&lt;/a&gt;. The idea is to present a piece of &apos;legacy code&apos; that you have to somehow refactor or improve. Of course, in order to make the exercise manageable, it&apos;s necessary to reduce it to some essence of what we might regard as legacy code. It&apos;ll only be one aspect of true legacy code. For the legacy Security Manager exercise, the main problem is that the code is difficult to unit test.
    &lt;/p&gt;
    &lt;p&gt;
        The original kata presents the &apos;legacy code&apos; in C#, which may exclude programmers who aren&apos;t familiar with that language and platform. Since I find the exercise useful, I&apos;ve previous published &lt;a href=&quot;https://github.com/ploeh/SecurityManagerPython&quot;&gt;a port to Python&lt;/a&gt;. In this article, I&apos;ll port the exercise to &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, as well as walk through one attempt at achieving the goals of the kata.
    &lt;/p&gt;
    &lt;h3 id=&quot;03ee8805b5a44e77b92f9f6d132513bf&quot;&gt;
        The legacy code &lt;a href=&quot;#03ee8805b5a44e77b92f9f6d132513bf&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The original C# code is a &lt;code&gt;static&lt;/code&gt; procedure that uses the &lt;a href=&quot;https://learn.microsoft.com/dotnet/api/system.console&quot;&gt;Console&lt;/a&gt; API to ask a user a few simple questions, do some basic input validation, and print a message to the standard output stream. That&apos;s easy enough to port to Haskell:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;module&lt;/span&gt;&amp;nbsp;SecurityManager&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;where&lt;/span&gt;
 
&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;Text.Printf&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;printf&lt;/span&gt;)
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IO&lt;/span&gt;&amp;nbsp;()
createUser&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;password&amp;nbsp;/=&amp;nbsp;confirmPassword
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;length&lt;/span&gt;&amp;nbsp;password&amp;nbsp;&amp;lt;&amp;nbsp;8
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;nbsp;must&amp;nbsp;be&amp;nbsp;at&amp;nbsp;least&amp;nbsp;8&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;length&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;--&amp;nbsp;Encrypt&amp;nbsp;the&amp;nbsp;password&amp;nbsp;(just&amp;nbsp;reverse&amp;nbsp;it,&amp;nbsp;should&amp;nbsp;be&amp;nbsp;secure)
&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;array&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;reverse&lt;/span&gt;&amp;nbsp;password
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;$
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(%s,&amp;nbsp;%s,&amp;nbsp;%s)&amp;quot;&lt;/span&gt;&amp;nbsp;username&amp;nbsp;fullName&amp;nbsp;array&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice how the Haskell code seems to suffer slightly from the &lt;a href=&quot;https://wiki.c2.com/?ArrowAntiPattern&quot;&gt;Arrow code smell&lt;/a&gt;, which is a problem that the C# code actually doesn&apos;t exhibit. The reason is that when using Haskell in an &apos;imperative style&apos; (which you can, after a fashion, with &lt;code&gt;do&lt;/code&gt; notation), you can&apos;t &apos;exit early&apos; from a an &lt;code&gt;if&lt;/code&gt; check. The problem is that you can&apos;t have &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;then&lt;/code&gt; without &lt;code&gt;else&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Haskell has other language features that enable you to get rid of Arrow code, but in the spirit of the exercise, this would take us too far away from the original C# code. Making the code prettier should be a task for the refactoring exercise, rather than the starting point.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ve &lt;a href=&quot;https://github.com/ploeh/SecurityManagerHaskell&quot;&gt;published the code to GitHub&lt;/a&gt;, if you want a leg up.
    &lt;/p&gt;
    &lt;p&gt;
        Combined with Richard Dalton&apos;s original article, that&apos;s all you need to try your hand at the exercise. In the rest of this article, I&apos;ll go through my own attempt at the exercise. That said, while this was my first attempt at the Haskell version of it, I&apos;ve done it multiple times in C#, and once in &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;. In other words, this isn&apos;t my first rodeo.
    &lt;/p&gt;
    &lt;h3 id=&quot;b5098b724e8443c4afeaa56e92c2f0d2&quot;&gt;
        Break the dependency on the Console &lt;a href=&quot;#b5098b724e8443c4afeaa56e92c2f0d2&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        As warned, the rest of the article is a walkthrough of the exercise, so if you&apos;d like to try it yourself, stop reading now. On the other hand, if you want to read on, but follow along in the GitHub repository, I&apos;ve pushed the rest of the code to a branch called &lt;code&gt;first-pass&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        The first part of the exercise is to &lt;em&gt;break the dependency on the console&lt;/em&gt;. In a language like Haskell where functions are first-class citizens, this part is trivial. I removed the type declaration, moved &lt;code&gt;putStrLn&lt;/code&gt; and &lt;code&gt;getLine&lt;/code&gt; to parameters and renamed them. Finally, I asked the compiler what the new type is, and added the new type signature.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;Text.Printf&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;printf&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;IsChar&lt;/span&gt;)
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Eq&lt;/span&gt;&amp;nbsp;a,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;IsChar&lt;/span&gt;&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;[a]&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()
createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
 
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;password&amp;nbsp;/=&amp;nbsp;confirmPassword
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;length&lt;/span&gt;&amp;nbsp;password&amp;nbsp;&amp;lt;&amp;nbsp;8
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;nbsp;must&amp;nbsp;be&amp;nbsp;at&amp;nbsp;least&amp;nbsp;8&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;length&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:green;&quot;&gt;--&amp;nbsp;Encrypt&amp;nbsp;the&amp;nbsp;password&amp;nbsp;(just&amp;nbsp;reverse&amp;nbsp;it,&amp;nbsp;should&amp;nbsp;be&amp;nbsp;secure)
&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;array&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;reverse&lt;/span&gt;&amp;nbsp;password
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;$
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(%s,&amp;nbsp;%s,&amp;nbsp;%s)&amp;quot;&lt;/span&gt;&amp;nbsp;username&amp;nbsp;fullName&amp;nbsp;array&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I also changed the &lt;code&gt;main&lt;/code&gt; action of the program to pass &lt;code&gt;putStrLn&lt;/code&gt; and &lt;code&gt;getLine&lt;/code&gt; as arguments:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;import&lt;/span&gt;&amp;nbsp;SecurityManager&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;)
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;main&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IO&lt;/span&gt;&amp;nbsp;()
main&amp;nbsp;=&amp;nbsp;createUser&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Manual testing indicates that I didn&apos;t break any functionality.
    &lt;/p&gt;
    &lt;h3 id=&quot;53e3144fa5b04528a8d54ae035dc40b8&quot;&gt;
        Get the password comparison feature under test &lt;a href=&quot;#53e3144fa5b04528a8d54ae035dc40b8&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The next task is to &lt;em&gt;get the password comparison feature under test&lt;/em&gt;. Over a small series of Git commits, I added these &lt;a href=&quot;/2018/05/07/inlined-hunit-test-lists&quot;&gt;inlined, parametrized HUnit tests&lt;/a&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Matching&amp;nbsp;passwords&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;pw&amp;nbsp;&amp;lt;-&amp;nbsp;[&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;abcdefgh&amp;quot;&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;actual&amp;nbsp;=&amp;nbsp;comparePasswords&amp;nbsp;pw&amp;nbsp;pw
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;Right&amp;nbsp;pw&amp;nbsp;~=?&amp;nbsp;actual
,
&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Non-matching&amp;nbsp;passwords&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;(pw1,&amp;nbsp;pw2)&amp;nbsp;&amp;lt;-
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;PASSWORD&amp;quot;&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345677&amp;quot;&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;abcdefgh&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;bacdefgh&amp;quot;&lt;/span&gt;),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;actual&amp;nbsp;=&amp;nbsp;comparePasswords&amp;nbsp;pw1&amp;nbsp;pw2
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;Left&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;&amp;nbsp;~=?&amp;nbsp;actual&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The resulting implementation is this &lt;code&gt;comparePasswords&lt;/code&gt; function:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;comparePasswords&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;
comparePasswords&amp;nbsp;pw1&amp;nbsp;pw2&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;pw1&amp;nbsp;==&amp;nbsp;pw2
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;Right&amp;nbsp;pw1
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;Left&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You&apos;ll notice that I chose to implement it as an &lt;code&gt;Either&lt;/code&gt;-valued function. While I consider &lt;a href=&quot;/2020/12/14/validation-a-solved-problem&quot;&gt;validation a solved problem&lt;/a&gt;, the usual solution involves some &lt;a href=&quot;/2018/11/05/applicative-validation&quot;&gt;applicative validation&lt;/a&gt; container. In this exercise, validation is already short-circuiting, which means that we can use the standard monadic composition that &lt;code&gt;Either&lt;/code&gt; affords.
    &lt;/p&gt;
    &lt;p&gt;
        At this point in the exercise, I just left the &lt;code&gt;comparePasswords&lt;/code&gt; function there, without trying to use it within &lt;code&gt;createUser&lt;/code&gt;. The reason for that is that &lt;code&gt;Either&lt;/code&gt;-based composition is sufficiently different from &lt;code&gt;if&lt;/code&gt;-&lt;code&gt;then&lt;/code&gt;-&lt;code&gt;else&lt;/code&gt; code that I wanted to get the entire system under test before I attempted that.
    &lt;/p&gt;
    &lt;h3 id=&quot;a1dc5d33f8eb4d5b80d015b197d1afc3&quot;&gt;
        Get the password validation feature under test &lt;a href=&quot;#a1dc5d33f8eb4d5b80d015b197d1afc3&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The third task of the exercise is to &lt;em&gt;get the password validation feature under test&lt;/em&gt;. That&apos;s similar to the previous task. Once more, I&apos;ll show the tests first, and then the function driven by those tests, but I want to point out that both code artefacts came iteratively into existence through the usual &lt;a href=&quot;/2019/10/21/a-red-green-refactor-checklist&quot;&gt;red-green-refactor&lt;/a&gt; cycle.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Validate&amp;nbsp;short&amp;nbsp;password&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;pw&amp;nbsp;&amp;lt;-&amp;nbsp;[&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;gtrex&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;1234567&amp;quot;&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;actual&amp;nbsp;=&amp;nbsp;validatePassword&amp;nbsp;pw
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;Left&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;nbsp;must&amp;nbsp;be&amp;nbsp;at&amp;nbsp;least&amp;nbsp;8&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;length&amp;quot;&lt;/span&gt;&amp;nbsp;~=?&amp;nbsp;actual
,
&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Validate&amp;nbsp;long&amp;nbsp;password&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;pw&amp;nbsp;&amp;lt;-&amp;nbsp;[&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;123456789&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;abcdefghij&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;elevenchars&amp;quot;&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;actual&amp;nbsp;=&amp;nbsp;validatePassword&amp;nbsp;pw
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;Right&amp;nbsp;pw&amp;nbsp;~=?&amp;nbsp;actual&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The resulting function is hardly surprising.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;validatePassword&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;
validatePassword&amp;nbsp;pw&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;length&lt;/span&gt;&amp;nbsp;pw&amp;nbsp;&amp;lt;&amp;nbsp;8
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;&amp;nbsp;Left&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;nbsp;must&amp;nbsp;be&amp;nbsp;at&amp;nbsp;least&amp;nbsp;8&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;length&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;Right&amp;nbsp;pw&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        As in the previous step, I chose to postpone &lt;em&gt;using&lt;/em&gt; this function from within &lt;code&gt;createUser&lt;/code&gt; until I had a set of characterization tests. That may not be entirely in the spirit of the four subtasks of the exercise, but on the other hand, I intended to do more than just those four activities. The code here is actually simple enough that I could easily refactor without full test coverage, but recalling that this is a legacy code exercise, I find it warranted to &lt;em&gt;pretend&lt;/em&gt; that it&apos;s complicated.
    &lt;/p&gt;
    &lt;p&gt;
        To be fair to the exercise, there&apos;d &lt;em&gt;also&lt;/em&gt; be a valuable exercise in attempting to extract each feature piecemeal, because it&apos;s not alway possible to add complete characterization test coverage to a piece of gnarly legacy code. Be that as it may, I&apos;ve already done that kind of exercise in C# a few times, and I had a different agenda for the Haskell exercise. In short, I was curious about what sort of inferred type &lt;code&gt;createUser&lt;/code&gt; would have, once I&apos;d gone through all four subtasks. I&apos;ll return to that topic in a moment. First, I want to address the fourth subtask.
    &lt;/p&gt;
    &lt;h3 id=&quot;dc17b82e5e374cce8d59e2791eadfdfb&quot;&gt;
        Allow different encryption algorithms to be used &lt;a href=&quot;#dc17b82e5e374cce8d59e2791eadfdfb&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The final part of the exercise is to &lt;em&gt;add a feature to allow different encryption algorithms to be used&lt;/em&gt;. Once again, when you&apos;re working in a language where functions are first-class citizens, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Higher-order_function&quot;&gt;higher-order functions&lt;/a&gt; are &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatic&lt;/a&gt;, one solution is easily at hand:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Foldable&lt;/span&gt;&amp;nbsp;t,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Eq&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a),&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;PrintfArg&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a),&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;PrintfArg&lt;/span&gt;&amp;nbsp;b)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;(t&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;(t&amp;nbsp;a&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;b)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()
createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
 
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;password&amp;nbsp;/=&amp;nbsp;confirmPassword
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;length&lt;/span&gt;&amp;nbsp;password&amp;nbsp;&amp;lt;&amp;nbsp;8
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;then&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;nbsp;must&amp;nbsp;be&amp;nbsp;at&amp;nbsp;least&amp;nbsp;8&amp;nbsp;characters&amp;nbsp;in&amp;nbsp;length&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;else&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;array&amp;nbsp;=&amp;nbsp;encrypt&amp;nbsp;password
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;$
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(%s,&amp;nbsp;%s,&amp;nbsp;%s)&amp;quot;&lt;/span&gt;&amp;nbsp;username&amp;nbsp;fullName&amp;nbsp;array&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The only change I&apos;ve made is to promote &lt;code&gt;encrypt&lt;/code&gt; to a parameter. This, of course, ripples through the code that calls the action, but currently, that&apos;s only the &lt;code&gt;main&lt;/code&gt; action, where I had to add &lt;code&gt;reverse&lt;/code&gt; as a third argument:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;main&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;IO&lt;/span&gt;&amp;nbsp;()
main&amp;nbsp;=&amp;nbsp;createUser&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;putStrLn&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;getLine&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;reverse&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Before I made the change, I removed the type annotation from &lt;code&gt;createUser&lt;/code&gt;, because adding a parameter causes the type to change. Keeping the type annotation would have caused a compilation error. Eschewing type annotations makes it easier to make changes. Once I&apos;d made the change, I added the new annotation, inferred by the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&quot;&gt;Haskell Visual Studio Code extension&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        I was curious what kind of abstraction would arise. Would it be testable in some way?
    &lt;/p&gt;
    &lt;h3 id=&quot;da305705261f4c1fae7842d204097c6b&quot;&gt;
        Testability &lt;a href=&quot;#da305705261f4c1fae7842d204097c6b&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Consider the inferred type of &lt;code&gt;createUser&lt;/code&gt; above. It&apos;s quite abstract, and I was curious if it was flexible enough to allow testability without adding &lt;a href=&quot;https://dhh.dk/2014/test-induced-design-damage.html&quot;&gt;test-induced damage&lt;/a&gt;. In short, in object-oriented programming, you often need to add Dependency Injection to make code testable, and the valid criticism is that this makes code more complicated than it would otherwise have been. I consider such reproval justified, although I disagree with the conclusion. It&apos;s not the desire for testability that causes the damage, but rather that object-oriented design is at odds with testability.
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s my conjecture, anyway, so I&apos;m always curious when working with other paradigms like functional programming. Is idiomatic code already testable, or do you need to &apos;do damage to it&apos; in order to make it testable?
    &lt;/p&gt;
    &lt;p&gt;
        As a Haskell action goes, I would consider its type fairly idiomatic. The code, too, is straightforward, although perhaps rather naive. It looks like beginner Haskell, and as we&apos;ll see later, we can rewrite it to be more elegant.
    &lt;/p&gt;
    &lt;p&gt;
        Before I started the exercise, I wondered whether it&apos;d be necessary to &lt;a href=&quot;/2017/07/11/hello-pure-command-line-interaction&quot;&gt;use free monads to model pure command-line interactions&lt;/a&gt;. Since &lt;code&gt;createUser&lt;/code&gt; returns &lt;code&gt;m ()&lt;/code&gt;, where &lt;code&gt;m&lt;/code&gt; is any &lt;code&gt;Monad&lt;/code&gt; instance, using a free monad would be possible, but turns out to be overkill. After having thought about it a bit, I recalled that in many languages and platforms, you can &lt;a href=&quot;https://stackoverflow.com/a/2139303/126014&quot;&gt;redirect &lt;em&gt;standard in&lt;/em&gt; and &lt;em&gt;standard out&lt;/em&gt; for testing purposes&lt;/a&gt;. The way you do that is typically by replacing each with some kind of text stream. Based on that knowledge, I thought I could use &lt;a href=&quot;/2022/06/20/the-state-monad&quot;&gt;the State monad&lt;/a&gt; for characterization testing, with a list of strings for each text stream.
    &lt;/p&gt;
    &lt;p&gt;
        In other words, the code is already testable as it is. No test-induced damage here.
    &lt;/p&gt;
    &lt;h3 id=&quot;ae4ba5da448b4e248cb63f124b135834&quot;&gt;
        Characterization tests &lt;a href=&quot;#ae4ba5da448b4e248cb63f124b135834&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        To use the State monad, I started by importing &lt;a href=&quot;https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-State-Lazy.html&quot;&gt;Control.Monad.Trans.State.Lazy&lt;/a&gt; into my test code. This enabled me to write the first characterization test:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Happy&amp;nbsp;path&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;flip&lt;/span&gt;&amp;nbsp;evalState
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;([&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;just.inhale&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Justin&amp;nbsp;Hale&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;12345678&amp;quot;&lt;/span&gt;],&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;[]&lt;/span&gt;)&amp;nbsp;$&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;writeLine&amp;nbsp;x&amp;nbsp;=&amp;nbsp;modify&amp;nbsp;(second&amp;nbsp;(++&amp;nbsp;[x]))
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;readLine&amp;nbsp;=&amp;nbsp;state&amp;nbsp;(\(i,&amp;nbsp;o)&amp;nbsp;-&amp;gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;head&lt;/span&gt;&amp;nbsp;i,&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;tail&lt;/span&gt;&amp;nbsp;i,&amp;nbsp;o)))
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;reverse&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt
 
&amp;nbsp;&amp;nbsp;actual&amp;nbsp;&amp;lt;-&amp;nbsp;gets&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;snd&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;expected&amp;nbsp;=&amp;nbsp;[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(just.inhale,&amp;nbsp;Justin&amp;nbsp;Hale,&amp;nbsp;87654321)&amp;quot;&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;expected&amp;nbsp;~=?&amp;nbsp;actual&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        I consulted my earlier code from &lt;a href=&quot;/2019/03/11/an-example-of-state-based-testing-in-haskell&quot;&gt;An example of state-based testing in Haskell&lt;/a&gt; instead of reinventing the wheel, so if you want a more detailed walkthrough, you may want to consult that article as well as this one.
    &lt;/p&gt;
    &lt;p&gt;
        The type of the state that the test makes use of is &lt;code&gt;([String], [String])&lt;/code&gt;. As the lambda expression suggests by naming the elements &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;o&lt;/code&gt;, the two string lists are used for respectively input and output. The test starts with an &apos;input stream&apos; populated by &apos;user input&apos; values, corresponding to each of the four answers a user might give to the questions asked.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;readLine&lt;/code&gt; function works by pulling the &lt;code&gt;head&lt;/code&gt; off the input list &lt;code&gt;i&lt;/code&gt;, while on the other hand not touching the output list &lt;code&gt;o&lt;/code&gt;. Its type is &lt;code&gt;State ([a], b) a&lt;/code&gt;, compatible with &lt;code&gt;createUser&lt;/code&gt;, which requires its &lt;code&gt;readLine&lt;/code&gt; parameter to have the type &lt;code&gt;m (t a)&lt;/code&gt;, where &lt;code&gt;m&lt;/code&gt; is a &lt;code&gt;Monad&lt;/code&gt; instance, and &lt;code&gt;t&lt;/code&gt; a &lt;code&gt;Foldable&lt;/code&gt; instance. The effective type turns out to be &lt;code&gt;t a ~ [Char] = String&lt;/code&gt;, so that &lt;code&gt;readLine&lt;/code&gt; effectively has the type &lt;code&gt;State ([String], b) String&lt;/code&gt;. Since &lt;code&gt;State ([String], b)&lt;/code&gt; is a &lt;code&gt;Monad&lt;/code&gt; instance, it fits the &lt;code&gt;m&lt;/code&gt; type argument of the requirement.
    &lt;/p&gt;
    &lt;p&gt;
        The same kind of reasoning applies to &lt;code&gt;writeLine&lt;/code&gt;, which appends the input value to the &apos;output stream&apos;, which is the second list in the I/O tuple.
    &lt;/p&gt;
    &lt;p&gt;
        The test runs the &lt;code&gt;createUser&lt;/code&gt; action and then checks that the output list contains the &lt;code&gt;expected&lt;/code&gt; values.
    &lt;/p&gt;
    &lt;p&gt;
        A similar test verifies the behaviour when the passwords don&apos;t match:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Mismatched&amp;nbsp;passwords&amp;quot;&lt;/span&gt;&amp;nbsp;~:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;flip&lt;/span&gt;&amp;nbsp;evalState
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;([&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;i.lean.right&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Ilene&amp;nbsp;Wright&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Password&amp;quot;&lt;/span&gt;],&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;[]&lt;/span&gt;)&amp;nbsp;$&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;writeLine&amp;nbsp;x&amp;nbsp;=&amp;nbsp;modify&amp;nbsp;(second&amp;nbsp;(++&amp;nbsp;[x]))
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;readLine&amp;nbsp;=&amp;nbsp;state&amp;nbsp;(\(i,&amp;nbsp;o)&amp;nbsp;-&amp;gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;head&lt;/span&gt;&amp;nbsp;i,&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;tail&lt;/span&gt;&amp;nbsp;i,&amp;nbsp;o)))
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;reverse&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt
 
&amp;nbsp;&amp;nbsp;actual&amp;nbsp;&amp;lt;-&amp;nbsp;gets&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;snd&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;expected&amp;nbsp;=&amp;nbsp;[
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;The&amp;nbsp;passwords&amp;nbsp;don&amp;#39;t&amp;nbsp;match&amp;quot;&lt;/span&gt;]
&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;return&lt;/span&gt;&amp;nbsp;$&amp;nbsp;expected&amp;nbsp;~=?&amp;nbsp;actual&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can see the third and final characterization test in the GitHub repository.
    &lt;/p&gt;
    &lt;h3 id=&quot;ba7601efc69a4b929e738396588dc69a&quot;&gt;
        Refactored action &lt;a href=&quot;#ba7601efc69a4b929e738396588dc69a&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        With &lt;a href=&quot;/2015/11/16/code-coverage-is-a-useless-target-measure&quot;&gt;full test coverage&lt;/a&gt; I could proceed to refactor the &lt;code&gt;createUser&lt;/code&gt; action, pulling in the two functions I&apos;d test-driven into existence earlier:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;createUser&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Monad&lt;/span&gt;&amp;nbsp;m,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;PrintfArg&lt;/span&gt;&amp;nbsp;a)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;())&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;m&amp;nbsp;()
createUser&amp;nbsp;writeLine&amp;nbsp;readLine&amp;nbsp;encrypt&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;do&lt;/span&gt;
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;a&amp;nbsp;username&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;username&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;full&amp;nbsp;name&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;fullName&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;password&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Re-enter&amp;nbsp;your&amp;nbsp;password&amp;quot;&lt;/span&gt;
&amp;nbsp;&amp;nbsp;confirmPassword&amp;nbsp;&amp;lt;-&amp;nbsp;readLine
 
&amp;nbsp;&amp;nbsp;writeLine&amp;nbsp;$&amp;nbsp;either
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;id&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(printf&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;Saving&amp;nbsp;Details&amp;nbsp;for&amp;nbsp;User&amp;nbsp;(%s,&amp;nbsp;%s,&amp;nbsp;%s)&amp;quot;&lt;/span&gt;&amp;nbsp;username&amp;nbsp;fullName&amp;nbsp;.&amp;nbsp;encrypt)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(validatePassword&amp;nbsp;=&amp;lt;&amp;lt;&amp;nbsp;comparePasswords&amp;nbsp;password&amp;nbsp;confirmPassword)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Because &lt;code&gt;createUser&lt;/code&gt; now calls &lt;code&gt;comparePasswords&lt;/code&gt; and &lt;code&gt;validatePassword&lt;/code&gt;, the type of the overall composition is also more concrete. That&apos;s really just an artefact of my (misguided?) decision to give each of the two helper functions types that are more concrete than necessary.
    &lt;/p&gt;
    &lt;p&gt;
        As you can see, I left the initial call-and-response sequence intact, since I didn&apos;t feel that it needed improvement.
    &lt;/p&gt;
    &lt;h3 id=&quot;5dcbfa4c67c64780a76dc380fb64b138&quot;&gt;
        Conclusion &lt;a href=&quot;#5dcbfa4c67c64780a76dc380fb64b138&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        I ported the Legacy Security Manager kata to Haskell because I thought it&apos;d be easy enough to port the code itself, and I also found the exercise compelling enough in its own right.
    &lt;/p&gt;
    &lt;p&gt;
        The most interesting point, I think, is that the &lt;code&gt;createUser&lt;/code&gt; action remains testable without making any other concession to testability than turning it into a higher-order function. For pure functions, we would expect this to be the case, since &lt;a href=&quot;/2015/05/07/functional-design-is-intrinsically-testable&quot;&gt;pure functions are intrinsically testable&lt;/a&gt;, but for impure actions like &lt;code&gt;createUser&lt;/code&gt;, this isn&apos;t a given. Interacting exclusively with the command-line API is, however, sufficiently simple that we can get by with the State monad. No free monad is needed, and so test-induced damage is kept at a minimum.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/10/21/legacy-security-manager-in-haskell</guid>
      </item>
    
      <item>
        <title>Functor sums</title>
        <link>https://blog.ploeh.dk/2024/10/14/functor-sums/</link>
        <pubDate>Mon, 14 Oct 2024 18:26:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;A choice of two or more functors gives rise to a functor. An article for object-oriented programmers.&lt;/em&gt;
    &lt;/p&gt;
	&lt;p&gt;
		This article is part of &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;a series of articles about functor relationships&lt;/a&gt;. In this one you&apos;ll learn about a universal composition of functors. In short, if you have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tagged_union&quot;&gt;sum type&lt;/a&gt; of functors, that data structure itself gives rise to a functor.
	&lt;/p&gt;
    &lt;p&gt;
        Together with other articles in this series, this result can help you answer questions such as: &lt;em&gt;Does this data structure form a functor?&lt;/em&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since &lt;a href=&quot;/2018/03/22/functors&quot;&gt;functors&lt;/a&gt; tend to be quite common, and since they&apos;re useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like &lt;code&gt;Foo&amp;lt;T&amp;gt;&lt;/code&gt; (C# syntax) or &lt;code&gt;Bar&amp;lt;T1, T2&amp;gt;&lt;/code&gt;, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it&apos;s a functor strongly suggests that you should give it a &lt;code&gt;Select&lt;/code&gt; method in C#, a &lt;code&gt;map&lt;/code&gt; function in &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt;, and so on.
    &lt;/p&gt;
    &lt;p&gt;
        Not all generic types give rise to a (covariant) functor. Some are rather &lt;a href=&quot;/2021/09/02/contravariant-functors&quot;&gt;contravariant functors&lt;/a&gt;, and some are &lt;a href=&quot;/2022/08/01/invariant-functors&quot;&gt;invariant&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        If, on the other hand, you have a data type which is a sum of two or more (covariant) functors &lt;em&gt;with the same type parameter&lt;/em&gt;, then the data type itself gives rise to a functor. You&apos;ll see some examples in this article.
    &lt;/p&gt;
    &lt;h3 id=&quot;fd1c2960d14946008a49b07698151647&quot;&gt;
        Abstract shape in F# &lt;a href=&quot;#fd1c2960d14946008a49b07698151647&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Before we look at some examples found in other code, it helps if we know what we&apos;re looking for. You&apos;ll see a C# example in a minute, but since sum types require so much &lt;a href=&quot;/2019/12/16/zone-of-ceremony&quot;&gt;ceremony&lt;/a&gt; in C#, we&apos;ll make a brief detour around F#.
    &lt;/p&gt;
    &lt;p&gt;
        Imagine that you have two lawful functors, &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;. Also imagine that you have a data structure that holds either an &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value or a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGF&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGG&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The name of the type is &lt;code&gt;FOrG&lt;/code&gt;. In the &lt;code&gt;FOrGF&lt;/code&gt; case, it holds an &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value, and in the &lt;code&gt;FOrGG&lt;/code&gt; case it holds a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; value.
    &lt;/p&gt;
    &lt;p&gt;
        The point of this article is that since both &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; are (lawful) functors, then &lt;code&gt;FOrG&lt;/code&gt; also gives rise to a functor. The composed &lt;code&gt;map&lt;/code&gt; function can pattern-match on each case and call the respective &lt;code&gt;map&lt;/code&gt; function that belongs to each of the two functors.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;forg&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;match&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;forg&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;with&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGF&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;fa&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGF&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;fa&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGG&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ga&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrGG&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;ga&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        For clarity I&apos;ve named the values &lt;code&gt;fa&lt;/code&gt; indicating &lt;em&gt;f of a&lt;/em&gt; and &lt;code&gt;ga&lt;/code&gt; indicating &lt;em&gt;g of a&lt;/em&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Notice that it&apos;s an essential requirement that the individual functors (here &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;) are parametrized by the same type parameter (here &lt;code&gt;&apos;a&lt;/code&gt;). If your data structure contains &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&amp;gt;&lt;/code&gt;, the &apos;theorem&apos; doesn&apos;t apply.
    &lt;/p&gt;
    &lt;h3 id=&quot;9ff2f85804104bf192941ec8634757b6&quot;&gt;
        Abstract shape in C# &lt;a href=&quot;#9ff2f85804104bf192941ec8634757b6&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The same kind of abstract shape requires much more boilerplate in C#. When defining a sum type in a language that doesn&apos;t support them, we may instead either &lt;a href=&quot;/2018/06/25/visitor-as-a-sum-type&quot;&gt;turn to the Visitor design pattern&lt;/a&gt; or alternatively use &lt;a href=&quot;/2018/05/22/church-encoding&quot;&gt;Church encoding&lt;/a&gt;. While the two are isomorphic, Church encoding is a bit simpler while the &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;Visitor pattern&lt;/a&gt; seems more object-oriented. In this example I&apos;ve chosen the simplicity of Church encoding.
    &lt;/p&gt;
    &lt;p&gt;
        Like in the above F# code, I&apos;ve named the data structure the same, but it&apos;s now a class:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Two constructors enable you to initialize it with either an &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; or a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; value.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;)

&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; share the same type parameter &lt;code&gt;T&lt;/code&gt;. If a class had, instead, composed either &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;&amp;gt;&lt;/code&gt;, the &apos;theorem&apos; doesn&apos;t apply.
    &lt;/p&gt;
    &lt;p&gt;
        Finally, a &lt;code&gt;Match&lt;/code&gt; method completes the Church encoding.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;F&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenF&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;G&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenG&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Regardless of exactly what &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; are, you can add a &lt;code&gt;Select&lt;/code&gt; method to &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenF&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenG&lt;/span&gt;:&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Since we assume that &lt;code&gt;F&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; are functors, which in C# &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatically&lt;/a&gt; have a &lt;code&gt;Select&lt;/code&gt; method, we pass the &lt;code&gt;selector&lt;/code&gt; to their respective &lt;code&gt;Select&lt;/code&gt; methods. &lt;code&gt;f.Select&lt;/code&gt; returns a new &lt;code&gt;F&lt;/code&gt; value, while &lt;code&gt;g.Select&lt;/code&gt; returns a new &lt;code&gt;G&lt;/code&gt; value, but there&apos;s a constructor for each case, so the composed &lt;code&gt;Select&lt;/code&gt; method repackages those return values in &lt;code&gt;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;FOrG&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt; objects.
    &lt;/p&gt;
    &lt;p&gt;
        I&apos;ll have more to say about how this generalizes to a sum of more than two alternatives, but first, let&apos;s consider some examples.
    &lt;/p&gt;
    &lt;h3 id=&quot;03a6f1ef94ca4ca2927b38d95e34c31f&quot;&gt;
        Open or closed endpoints &lt;a href=&quot;#03a6f1ef94ca4ca2927b38d95e34c31f&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The simplest example that I can think of is that of &lt;a href=&quot;/2024/01/01/variations-of-the-range-kata&quot;&gt;range&lt;/a&gt; endpoints. A range may be open, closed, or a mix thereof. Some mathematical notations use &lt;code&gt;(1, 6]&lt;/code&gt; to indicate the range between 1 and 6, where 1 is excluded from the range, but 6 is included. An alternative notation is &lt;code&gt;]1, 6]&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        A given endpoint (1 and 6, above) is either open or closed, which implies a sum type. &lt;a href=&quot;/2024/01/15/a-range-kata-implementation-in-f&quot;&gt;In F# I defined it like this&lt;/a&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;Endpoint&amp;lt;&amp;#39;a&amp;gt;&amp;nbsp;=&amp;nbsp;Open&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&amp;#39;a&amp;nbsp;|&amp;nbsp;Closed&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&amp;#39;a&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If you&apos;re at all familiar with F#, this is clearly a &lt;a href=&quot;https://learn.microsoft.com/dotnet/fsharp/language-reference/discriminated-unions&quot;&gt;discriminated union&lt;/a&gt;, which is just what the F# documentation calls sum types.
    &lt;/p&gt;
    &lt;p&gt;
        The article &lt;a href=&quot;/2024/02/12/range-as-a-functor&quot;&gt;Range as a functor&lt;/a&gt; goes through examples in both &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;, F#, and C#, demonstrating, among other points, how an endpoint sum type forms a functor.
    &lt;/p&gt;
    &lt;h3 id=&quot;9cf974abd1fb497aa43087e7697bb982&quot;&gt;
        Binary tree &lt;a href=&quot;#9cf974abd1fb497aa43087e7697bb982&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The next example we&apos;ll consider is the binary tree from &lt;a href=&quot;/2024/09/09/a-binary-tree-zipper-in-c&quot;&gt;A Binary Tree Zipper in C#&lt;/a&gt;. In the &lt;a href=&quot;https://learnyouahaskell.com/zippers&quot;&gt;original Haskell Zippers article&lt;/a&gt;, the data type is defined like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;data&lt;/span&gt;&amp;nbsp;Tree&amp;nbsp;a&amp;nbsp;=&amp;nbsp;Empty&amp;nbsp;|&amp;nbsp;Node&amp;nbsp;a&amp;nbsp;(Tree&amp;nbsp;a)&amp;nbsp;(Tree&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;deriving&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Show&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Even if you&apos;re not familiar with Haskell syntax, the vertical bar (&lt;code&gt;|&lt;/code&gt;) indicates a choice between the left-hand side and the right-hand side. Many programming languages use the &lt;code&gt;|&lt;/code&gt; character for Boolean disjunction (&lt;em&gt;or&lt;/em&gt;), so the syntax should be intuitive. In this definition, a binary tree is either empty or a node with a value and two subtrees. What interests us here is that it&apos;s a sum type.
    &lt;/p&gt;
    &lt;p&gt;
        One way this manifests in C# is in the choice of two alternative constructors:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;()&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Empty&lt;/span&gt;.Instance)
{
}
 
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;this&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Node&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;.root,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;.root))
{
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; clearly has a generic type parameter. Does the class give rise to a functor?
    &lt;/p&gt;
    &lt;p&gt;
        It does if it&apos;s composed from a sum of two functors. Is that the case?
    &lt;/p&gt;
    &lt;p&gt;
        On the &apos;left&apos; side, it seems that we have nothing. In the Haskell code, it&apos;s called &lt;code&gt;Empty&lt;/code&gt;. In the C# code, this case is represented by the parameterless constructor (also known as the &lt;em&gt;default constructor&lt;/em&gt;). There&apos;s no &lt;code&gt;T&lt;/code&gt; there, so that doesn&apos;t look much like a functor.
    &lt;/p&gt;
    &lt;p&gt;
        All is, however, not lost. We may view this lack of data as a particular value (&apos;nothing&apos;) wrapped in &lt;a href=&quot;/2024/10/07/the-const-functor&quot;&gt;the Const functor&lt;/a&gt;. In Haskell and F# a value without data is called &lt;em&gt;unit&lt;/em&gt; and written &lt;code&gt;()&lt;/code&gt;. In C# or &lt;a href=&quot;https://www.java.com/&quot;&gt;Java&lt;/a&gt; you may &lt;a href=&quot;/2018/01/15/unit-isomorphisms&quot;&gt;think of it as void&lt;/a&gt;, although &lt;em&gt;unit&lt;/em&gt; is a value that you can pass around, which isn&apos;t the case for &lt;code&gt;void&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In Haskell, we could instead represent &lt;code&gt;Empty&lt;/code&gt; as &lt;code&gt;Const ()&lt;/code&gt;, which is a bona-fide &lt;code&gt;Functor&lt;/code&gt; instance that you can &lt;code&gt;fmap&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; emptyNode = Const ()
ghci&amp;gt; fmap (+1) emptyNode
Const ()&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This examples pretends to &apos;increment&apos; a number that isn&apos;t there. Not that you&apos;d need to do this. I&apos;m only showing you this to make the argument that the empty node forms a functor.
    &lt;/p&gt;
    &lt;p&gt;
        The &apos;right&apos; side of the sum type is most succinctly summarized by the Haskell code:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;Node&amp;nbsp;a&amp;nbsp;(Tree&amp;nbsp;a)&amp;nbsp;(Tree&amp;nbsp;a)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        It&apos;s a &apos;naked&apos; generic value and two generic trees. In C# it&apos;s the parameter list
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Does that make a functor? Yes, it&apos;s a triple of a &apos;naked&apos; generic value and two recursive subtrees, all sharing the same &lt;code&gt;T&lt;/code&gt;. Just like in the &lt;a href=&quot;/2024/09/16/functor-products&quot;&gt;previous article&lt;/a&gt; we can view a &apos;naked&apos; generic value as equivalent to &lt;a href=&quot;/2018/09/03/the-identity-functor&quot;&gt;the Identity functor&lt;/a&gt;, so that parameter is a functor. The other ones are recursive types: They are of the same type as the type we&apos;re trying to evaluate, &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;. If we assume that that forms a functor, that triple is a product type of functors. From the previous article, we know that that gives rise to a functor.
    &lt;/p&gt;
    &lt;p&gt;
        This means that in C#, for example, you can add the idiomatic &lt;code&gt;Select&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Aggregate&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenEmpty&lt;/span&gt;:&amp;nbsp;()&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;whenNode&lt;/span&gt;:&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;)&amp;nbsp;=&amp;gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        In languages that support pattern-matching on sum types (such as F#), you&apos;d have to match on each case and explicitly deal with the recursive mapping. Notice, however, that here I&apos;ve used the &lt;code&gt;Aggregate&lt;/code&gt; method to implement &lt;code&gt;Select&lt;/code&gt;. The &lt;code&gt;Aggregate&lt;/code&gt; method is the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; class&apos; &lt;a href=&quot;/2019/04/29/catamorphisms&quot;&gt;catamorphism&lt;/a&gt;, and it already handles the recursion for us. In other words, &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; are already &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&lt;/code&gt; objects.
    &lt;/p&gt;
    &lt;p&gt;
        What remains is only to tell &lt;code&gt;Aggregate&lt;/code&gt; what to do when the tree is empty, and how to transform the &apos;naked&apos; node &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;Select&lt;/code&gt; implementation handles the former by returning a new empty tree, and the latter by invoking &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;)&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        Not only does the binary tree form a functor, but it turns out that the &lt;a href=&quot;/2024/08/19/zippers&quot;&gt;Zipper&lt;/a&gt; does as well, because the breadcrumbs also give rise to a functor.
    &lt;/p&gt;
    &lt;h3 id=&quot;02e7e55d7f6f4c0d94c50cf577238859&quot;&gt;
        Breadcrumbs &lt;a href=&quot;#02e7e55d7f6f4c0d94c50cf577238859&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The &lt;a href=&quot;https://learnyouahaskell.com/zippers&quot;&gt;original Haskell Zippers article&lt;/a&gt; defines a breadcrumb for the binary tree Zipper like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;data&lt;/span&gt;&amp;nbsp;Crumb&amp;nbsp;a&amp;nbsp;=&amp;nbsp;LeftCrumb&amp;nbsp;a&amp;nbsp;(Tree&amp;nbsp;a)&amp;nbsp;|&amp;nbsp;RightCrumb&amp;nbsp;a&amp;nbsp;(Tree&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;deriving&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Show&lt;/span&gt;)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s another sum type with generics on the left as well as the right. In C# the two options may be best illustrated by these two creation methods:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;Left&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Left&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}
 
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;static&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;Right&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Right&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Notice that the &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; choices have the same structure: A &apos;naked&apos; generic &lt;code&gt;T&lt;/code&gt; value, and a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; object. Only the names differ. This suggests that we only need to think about one of them, and then we can reuse our conclusion for the other.
    &lt;/p&gt;
    &lt;p&gt;
        As we&apos;ve already done once, we consider a &lt;code&gt;T&lt;/code&gt; value equivalent with &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Identity&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt;, which is a functor. We&apos;ve also, just above, established that &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTree&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; forms a functor. We have a product (argument list, or tuple) of functors, so that combination forms a functor.
    &lt;/p&gt;
    &lt;p&gt;
        Since this is true for both alternatives, this sum type, too, gives rise to a functor. This enables you to implement a &lt;code&gt;Select&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Match&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;v&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Left&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;v&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;r&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)),
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;v&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;)&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Crumb&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Right&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;v&lt;/span&gt;),&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;l&lt;/span&gt;.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)));
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        By now the pattern should be familiar. Call &lt;code&gt;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;v&lt;/span&gt;)&lt;/code&gt; directly on the &apos;naked&apos; values, and pass &lt;code&gt;selector&lt;/code&gt; to any other functors&apos; &lt;code&gt;Select&lt;/code&gt; method.
    &lt;/p&gt;
    &lt;p&gt;
        That&apos;s &lt;em&gt;almost&lt;/em&gt; all the building blocks we have to declare &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;BinaryTreeZipper&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T&lt;/span&gt;&amp;gt;&lt;/code&gt; a functor as well, but we need one last theorem before we can do that. We&apos;ll conclude this work in &lt;a href=&quot;/2024/10/28/functor-compositions&quot;&gt;the next article&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;2b3a70f8791c41eb952ff160398fe441&quot;&gt;
        Higher arities &lt;a href=&quot;#2b3a70f8791c41eb952ff160398fe441&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Although we finally saw a &apos;real&apos; triple product, all the sum types have involved binary choices between a &apos;left side&apos; and a &apos;right side&apos;. As was the case with functor products, the result generalizes to higher arities. A sum type with any number of cases forms a functor if all the cases give rise to a functor.
    &lt;/p&gt;
    &lt;p&gt;
        We can, again, use canonicalized forms to argue the case. (See &lt;a href=&quot;https://thinkingwithtypes.com/&quot;&gt;Thinking with Types&lt;/a&gt; for a clear explanation of canonicalization of types.) A two-way choice is isomorphic to &lt;a href=&quot;/2019/01/14/an-either-functor&quot;&gt;Either&lt;/a&gt;, and a three-way choice is isomorphic to &lt;code&gt;Either a (Either b c)&lt;/code&gt;. Just like it&apos;s possible to build triples, quadruples, etc. by nesting pairs, we can construct n-ary choices by nesting Eithers. It&apos;s the same kind of inductive reasoning.
    &lt;/p&gt;
    &lt;p&gt;
        This is relevant because just as Haskell&apos;s &lt;a href=&quot;https://hackage.haskell.org/package/base&quot;&gt;base&lt;/a&gt; library provides &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Product.html&quot;&gt;Data.Functor.Product&lt;/a&gt; for composing two (and thereby any number of) functors, it also provides &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Data-Functor-Sum.html&quot;&gt;Data.Functor.Sum&lt;/a&gt; for composing functor sums.
    &lt;/p&gt;
    &lt;p&gt;
        The &lt;code&gt;Sum&lt;/code&gt; type defines two case constructors: &lt;code&gt;InL&lt;/code&gt; and &lt;code&gt;InR&lt;/code&gt;, but it&apos;s isomorphic with &lt;code&gt;Either&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;canonizeSum&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;f&amp;nbsp;g&amp;nbsp;a&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;nbsp;(f&amp;nbsp;a)&amp;nbsp;(g&amp;nbsp;a)
canonizeSum&amp;nbsp;(InL&amp;nbsp;x)&amp;nbsp;=&amp;nbsp;Left&amp;nbsp;x
canonizeSum&amp;nbsp;(InR&amp;nbsp;y)&amp;nbsp;=&amp;nbsp;Right&amp;nbsp;y
 
&lt;span style=&quot;color:#2b91af;&quot;&gt;summarizeEither&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Either&lt;/span&gt;&amp;nbsp;(f&amp;nbsp;a)&amp;nbsp;(g&amp;nbsp;a)&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;f&amp;nbsp;g&amp;nbsp;a
summarizeEither&amp;nbsp;(Left&amp;nbsp;x)&amp;nbsp;=&amp;nbsp;InL&amp;nbsp;x
summarizeEither&amp;nbsp;(Right&amp;nbsp;y)&amp;nbsp;=&amp;nbsp;InR&amp;nbsp;y&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The point is that we can compose not only a choice of two, but of any number of functors, to a single functor type. A simple example is this choice between &lt;a href=&quot;/2018/03/26/the-maybe-functor&quot;&gt;Maybe&lt;/a&gt;, list, or &lt;a href=&quot;/2018/08/06/a-tree-functor&quot;&gt;Tree&lt;/a&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;maybeOrListOrTree&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;[])&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Tree&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;
maybeOrListOrTree&amp;nbsp;=&amp;nbsp;InL&amp;nbsp;(InL&amp;nbsp;(Just&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;))&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If we rather wanted to embed a list in that type, we can do that as well:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;maybeOrListOrTree&amp;#39;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;::&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:blue;&quot;&gt;Sum&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Maybe&lt;/span&gt;&amp;nbsp;[])&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;Tree&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;String&lt;/span&gt;
maybeOrListOrTree&amp;#39;&amp;nbsp;=&amp;nbsp;InL&amp;nbsp;(InR&amp;nbsp;[&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;])&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Both values have the same type, and since it&apos;s a &lt;code&gt;Functor&lt;/code&gt; instance, you can &lt;code&gt;fmap&lt;/code&gt; over it:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; fmap (elem &apos;r&apos;) maybeOrListOrTree
InL (InL (Just False))
ghci&amp;gt; fmap (elem &apos;r&apos;) maybeOrListOrTree&apos;
InL (InR [True,False])&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        These queries examine each &lt;code&gt;String&lt;/code&gt; to determine whether or not they contain the letter &lt;code&gt;&apos;r&apos;&lt;/code&gt;, which only &lt;code&gt;&quot;bar&quot;&lt;/code&gt; does.
    &lt;/p&gt;
    &lt;p&gt;
        The point, anyway, is that sum types of any arity form a functor if all the cases do.
    &lt;/p&gt;
    &lt;h3 id=&quot;8545e09908fb4df4ace08e7b20ffc509&quot;&gt;
        Conclusion &lt;a href=&quot;#8545e09908fb4df4ace08e7b20ffc509&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In the previous article, you learned that a functor product gives rise to a functor. In this article, you learned that a functor sum does, too. If a data structure contains a choice of two or more functors, then that data type itself forms a functor.
    &lt;/p&gt;
    &lt;p&gt;
        As the previous article argues, this is useful to know, particularly if you&apos;re working in a language with only partial support for functors. Mainstream languages aren&apos;t going to automatically turn such sums into functors, in the way that Haskell&apos;s &lt;code&gt;Sum&lt;/code&gt; &lt;a href=&quot;https://bartoszmilewski.com/2014/01/14/functors-are-containers/&quot;&gt;container&lt;/a&gt; almost does. Thus, knowing when you can safely give your generic types a &lt;code&gt;Select&lt;/code&gt; method or &lt;code&gt;map&lt;/code&gt; function may come in handy.
    &lt;/p&gt;
	&lt;p&gt;
		There&apos;s one more rule like this one.
	&lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2024/10/28/functor-compositions&quot;&gt;Functor compositions&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/10/14/functor-sums</guid>
      </item>
    
      <item>
        <title>The Const functor</title>
        <link>https://blog.ploeh.dk/2024/10/07/the-const-functor/</link>
        <pubDate>Mon, 07 Oct 2024 18:37:00 UTC</pubDate>
        <description>


&lt;div id=&quot;post&quot;&gt;
    &lt;p&gt;
        &lt;em&gt;Package a constant value, but make it look like a functor. An article for object-oriented programmers.&lt;/em&gt;
    &lt;/p&gt;
	&lt;p&gt;
		This article is an instalment in &lt;a href=&quot;/2018/03/22/functors&quot;&gt;an article series about functors&lt;/a&gt;. In previous articles, you&apos;ve learned about useful functors such as &lt;a href=&quot;/2018/03/26/the-maybe-functor&quot;&gt;Maybe&lt;/a&gt; and &lt;a href=&quot;/2019/01/14/an-either-functor&quot;&gt;Either&lt;/a&gt;. You&apos;ve also seen at least one less-than useful functor: &lt;a href=&quot;/2018/09/03/the-identity-functor&quot;&gt;The Identity functor&lt;/a&gt;. In this article, you&apos;ll learn about another (practically) useless functor called &lt;em&gt;Const&lt;/em&gt;. You can skip this article if you want.
	&lt;/p&gt;
    &lt;p&gt;
        Like Identity, the Const functor may not be that useful, but it nonetheless exists. You&apos;ll probably not need it for actual programming tasks, but knowing that it exists, like Identity, can be a useful as an analysis tool. It may help you quickly evaluate whether a particular data structure affords various compositions. For example, it may enable you to quickly identify whether, say, a constant type and a list &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;may compose to a functor&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        This article starts with C#, then proceeds over &lt;a href=&quot;https://fsharp.org/&quot;&gt;F#&lt;/a&gt; to finally discuss &lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt;&apos;s built-in Const functor. You can just skip the languages you don&apos;t care about.
    &lt;/p&gt;
    &lt;h3 id=&quot;050cc4bc478f449ca11c28a83f8a2fda&quot;&gt;
        C# Const class &lt;a href=&quot;#050cc4bc478f449ca11c28a83f8a2fda&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        While C# supports &lt;a href=&quot;https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record&quot;&gt;records&lt;/a&gt;, and you can implement Const as one, I here present it as a full-fledged class. For readers who may not be that familiar with modern C#, a normal class may be more recognizable.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;sealed&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;class&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;&amp;gt;
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;nbsp;Value&amp;nbsp;{&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;get&lt;/span&gt;;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Value&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;value&lt;/span&gt;;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;selector&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;TResult&lt;/span&gt;&amp;gt;(Value);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;override&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;bool&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Equals&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;object&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;obj&lt;/span&gt;)
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;obj&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;is&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;@const&lt;/span&gt;&amp;nbsp;&amp;amp;&amp;amp;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;EqualityComparer&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;.Default.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Equals&lt;/span&gt;(Value,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;@const&lt;/span&gt;.Value);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;override&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;GetHashCode&lt;/span&gt;()
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#8f08c4;&quot;&gt;return&lt;/span&gt;&amp;nbsp;-1584136870&amp;nbsp;+&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;EqualityComparer&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;&amp;gt;.Default.&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;GetHashCode&lt;/span&gt;(Value);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The point of the Const functor is to make a constant value look like a functor; that is, &lt;a href=&quot;https://bartoszmilewski.com/2014/01/14/functors-are-containers/&quot;&gt;a container&lt;/a&gt; that you can map from one type to another. The difference from the Identity functor is that Const doesn&apos;t allow you to map the constant. Rather, it cheats and pretends having a mappable type that, however, has no value associated with it; a &lt;a href=&quot;https://wiki.haskell.org/Phantom_type&quot;&gt;phantom type&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        In &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;T1&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;T2&lt;/span&gt;&amp;gt;&lt;/code&gt;, the &lt;code&gt;T2&lt;/code&gt; type parameter is the &apos;pretend&apos; type. While the class contains a &lt;code&gt;T1&lt;/code&gt; value, it contains no &lt;code&gt;T2&lt;/code&gt; value. The &lt;code&gt;Select&lt;/code&gt; method, on the other hand, maps &lt;code&gt;T2&lt;/code&gt; to &lt;code&gt;TResult&lt;/code&gt;. The operation is close to being a &lt;a href=&quot;https://en.wikipedia.org/wiki/NOP_(code)&quot;&gt;no-op&lt;/a&gt;, but still not quite. While it doesn&apos;t do anything particularly practical, it &lt;em&gt;does&lt;/em&gt; change the type of the returned value.
    &lt;/p&gt;
    &lt;p&gt;
        Here&apos;s a simple example of using the &lt;code&gt;Select&lt;/code&gt; method:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;double&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;c&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;color:#a31515;&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Math&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Sqrt&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;));&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The new &lt;code&gt;c&lt;/code&gt; value &lt;em&gt;also&lt;/em&gt; contains &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. Only its type has changed.
    &lt;/p&gt;
    &lt;p&gt;
        If you find this peculiar, think of it as similar to mapping an empty list, or an empty Maybe value. In those cases, too, no &lt;em&gt;values&lt;/em&gt; change; only the type changes. The difference between empty Maybe objects or empty lists, and the Const functor is that Const isn&apos;t empty. There &lt;em&gt;is&lt;/em&gt; a value; it&apos;s just not the value being mapped.
    &lt;/p&gt;
    &lt;h3 id=&quot;3262b7a3818d46bca452500138f776b2&quot;&gt;
        Functor laws &lt;a href=&quot;#3262b7a3818d46bca452500138f776b2&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        Although the Const functor doesn&apos;t really do anything, it still obeys the functor laws. To illustrate it (but not to prove it), here&apos;s an &lt;a href=&quot;https://fscheck.github.io/FsCheck/&quot;&gt;FsCheck&lt;/a&gt; property that exercises the first functor law:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Property&lt;/span&gt;(QuietOnSuccess&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;true&lt;/span&gt;)]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ConstObeysFirstFunctorLaw&lt;/span&gt;(&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;var&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;);
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If you think it over for a minute, this makes sense. The test creates a &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/code&gt; that contains the integer &lt;code&gt;i&lt;/code&gt;, and then proceeds to map &lt;em&gt;the string that isn&apos;t there&lt;/em&gt; to &apos;itself&apos;. Clearly, this doesn&apos;t change the &lt;code&gt;i&lt;/code&gt; value contained in the &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/code&gt; container.
    &lt;/p&gt;
    &lt;p&gt;
        In the same spirit, a property demonstrates the second functor law:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&lt;span style=&quot;color:#2b91af;&quot;&gt;Property&lt;/span&gt;(QuietOnSuccess&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;true&lt;/span&gt;)]
&lt;span style=&quot;color:blue;&quot;&gt;public&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;void&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;ConstObeysSecondFunctorLaw&lt;/span&gt;(
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Func&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;string&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;,
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;short&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;)
{
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;short&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;short&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;short&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;byte&lt;/span&gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:blue;&quot;&gt;short&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;int&lt;/span&gt;&amp;gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;).&lt;span style=&quot;font-weight:bold;color:#74531f;&quot;&gt;Select&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;=&amp;gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;f&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;g&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;)));
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Assert&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;Equal&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;);
}&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Again, the same kind of almost-no-op takes place. The &lt;code&gt;g&lt;/code&gt; function first changes the &lt;code&gt;int&lt;/code&gt; type to &lt;code&gt;string&lt;/code&gt;, and then &lt;code&gt;f&lt;/code&gt; changes the &lt;code&gt;string&lt;/code&gt; type to &lt;code&gt;byte&lt;/code&gt;, but no &lt;em&gt;value&lt;/em&gt; ever changes; only the second type parameter. Thus, &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; remain equal, since they both contain the same value &lt;code&gt;s&lt;/code&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;ca40bd6e23794a0b9de36b0835dce6cb&quot;&gt;
        F# Const &lt;a href=&quot;#ca40bd6e23794a0b9de36b0835dce6cb&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        In F# we may &lt;a href=&quot;/2015/08/03/idiomatic-or-idiosyncratic&quot;&gt;idiomatically&lt;/a&gt; express Const as a single-case union:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;type&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;v&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;of&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;v&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Here I&apos;ve chosen to name the first type parameter &lt;code&gt;&apos;v&lt;/code&gt; (for &lt;em&gt;value&lt;/em&gt;) in order to keep the &apos;functor type parameter&apos; name &lt;code&gt;&apos;a&lt;/code&gt;. This enables me to meaningfully annotate the functor mapping function with the type &lt;code&gt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:blue;&quot;&gt;module&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;get&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;)&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;v&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;a&lt;/span&gt;&amp;gt;)&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;v&lt;/span&gt;,&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;&amp;#39;b&lt;/span&gt;&amp;gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Usually, you don&apos;t need to annotate F# functions like &lt;code&gt;map&lt;/code&gt;, but in this case I added explicit types in order to make it a recognizable functor map.
    &lt;/p&gt;
    &lt;p&gt;
        I could also have defined &lt;code&gt;map&lt;/code&gt; like this:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;&lt;span style=&quot;color:green;&quot;&gt;//&amp;nbsp;&amp;#39;a&amp;nbsp;-&amp;gt;&amp;nbsp;Const&amp;lt;&amp;#39;b,&amp;#39;c&amp;gt;&amp;nbsp;-&amp;gt;&amp;nbsp;Const&amp;lt;&amp;#39;b,&amp;#39;d&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#1f377f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;)&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;x&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        This still works, but is less recognizable as a functor map, since &lt;code&gt;f&lt;/code&gt; may be any &lt;code&gt;&apos;a&lt;/code&gt;. Notice that if type inference is left to its own devices, it names the input type &lt;code&gt;Const&amp;lt;&apos;b,&apos;c&amp;gt;&lt;/code&gt; and the return type &lt;code&gt;Const&amp;lt;&apos;b,&apos;d&amp;gt;&lt;/code&gt;. This also means that if you want to supply &lt;code&gt;f&lt;/code&gt; as a mapping function, this is legal, because we may consider &lt;code&gt;&apos;a ~ &apos;c -&amp;gt; &apos;d&lt;/code&gt;. It&apos;s still a functor map, but a less familiar representation.
    &lt;/p&gt;
    &lt;p&gt;
        Similar to the above C# code, two FsCheck properties demonstrate that the &lt;code&gt;Const&lt;/code&gt; type obeys the functor laws.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;[&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Property&lt;/span&gt;(QuietOnSuccess&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;true&lt;/span&gt;)&amp;gt;]
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;``Const&amp;nbsp;obeys&amp;nbsp;first&amp;nbsp;functor&amp;nbsp;law``&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;i&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;id&lt;/span&gt;
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=!&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;
 
[&amp;lt;&lt;span style=&quot;color:#2b91af;&quot;&gt;Property&lt;/span&gt;(QuietOnSuccess&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;true&lt;/span&gt;)&amp;gt;]
&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;``Const&amp;nbsp;obeys&amp;nbsp;second&amp;nbsp;functor&amp;nbsp;law``&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;string&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;byte&lt;/span&gt;)&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;g&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;string&lt;/span&gt;)&amp;nbsp;(&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;:&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;int16&lt;/span&gt;)&amp;nbsp;=
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;g&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;color:blue;&quot;&gt;let&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&amp;nbsp;=&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;s&lt;/span&gt;&amp;nbsp;|&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#2b91af;&quot;&gt;Const&lt;/span&gt;.&lt;span style=&quot;color:#74531f;&quot;&gt;map&lt;/span&gt;&amp;nbsp;(&lt;span style=&quot;color:#74531f;&quot;&gt;g&lt;/span&gt;&amp;nbsp;&amp;gt;&amp;gt;&amp;nbsp;&lt;span style=&quot;color:#74531f;&quot;&gt;f&lt;/span&gt;)
 
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;left&lt;/span&gt;&amp;nbsp;=!&amp;nbsp;&lt;span style=&quot;font-weight:bold;color:#1f377f;&quot;&gt;right&lt;/span&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        The assertions use &lt;a href=&quot;https://github.com/SwensenSoftware/unquote&quot;&gt;Unquote&lt;/a&gt;&apos;s &lt;code&gt;=!&lt;/code&gt; operator, which I usually read as &lt;em&gt;should equal&lt;/em&gt; or &lt;em&gt;must equal&lt;/em&gt;.
    &lt;/p&gt;
    &lt;h3 id=&quot;9474bc7665ed4f1da688dbb2484ccbf9&quot;&gt;
        Haskell Const &lt;a href=&quot;#9474bc7665ed4f1da688dbb2484ccbf9&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The Haskell &lt;a href=&quot;https://hackage.haskell.org/package/base&quot;&gt;base&lt;/a&gt; library already comes with a &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Const&quot;&gt;Const&lt;/a&gt; &lt;code&gt;newtype&lt;/code&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        You can easily create a new &lt;code&gt;Const&lt;/code&gt; value:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; Const &quot;foo&quot;
Const &quot;foo&quot;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        If you inquire about its type, GHCi will tell you in a rather verbose way that the first type parameter is &lt;code&gt;String&lt;/code&gt;, but the second may be any type &lt;code&gt;b&lt;/code&gt;:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; :t Const &quot;foo&quot;
Const &quot;foo&quot; :: forall {k} {b :: k}. Const String b&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        You can also map by &apos;incrementing&apos; its non-existent second value:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;ghci&amp;gt; (+1) &amp;lt;$&amp;gt; Const &quot;foo&quot;
Const &quot;foo&quot;
ghci&amp;gt; :t (+1) &amp;lt;$&amp;gt; Const &quot;foo&quot;
(+1) &amp;lt;$&amp;gt; Const &quot;foo&quot; :: Num b =&amp;gt; Const String b&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While the value remains &lt;code&gt;Const &quot;foo&quot;&lt;/code&gt;, the type of &lt;code&gt;b&lt;/code&gt; is now constrained to a &lt;a href=&quot;https://hackage.haskell.org/package/base/docs/Prelude.html#t:Num&quot;&gt;Num&lt;/a&gt; instance, which follows from the use of the &lt;code&gt;+&lt;/code&gt; operator.
    &lt;/p&gt;
    &lt;h3 id=&quot;83eea33a91f84b2c9ff4d364b0c868d6&quot;&gt;
        Functor law proofs &lt;a href=&quot;#83eea33a91f84b2c9ff4d364b0c868d6&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        If you look at the source code for the &lt;code&gt;Functor&lt;/code&gt; instance, it looks much like its F# equivalent:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;instance Functor (Const m) where
    fmap _ (Const v) = Const v&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        We can use equational reasoning with &lt;a href=&quot;https://bartoszmilewski.com/2015/01/20/functors/&quot;&gt;the notation that Bartosz Milewski uses&lt;/a&gt; to prove that both functor laws hold, starting with the first:
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;  fmap id (Const x)
= { definition of fmap }
  Const x&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        Clearly, there&apos;s not much to that part. What about the second functor law?
    &lt;/p&gt;
    &lt;p&gt;
        &lt;pre&gt;  fmap (g . f) (Const x)
= { definition of fmap }
  Const x
= { definition of fmap }
  fmap g (Const x)
= { definition of fmap }
  fmap g (fmap f (Const x))
= { definition of composition }
  (fmap g . fmap f) (Const x)&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;
        While that proof takes a few more steps, most are as trivial as the first proof.
    &lt;/p&gt;
    &lt;h3 id=&quot;e71a037a6f3f491ca3f755ce31809123&quot;&gt;
        Conclusion &lt;a href=&quot;#e71a037a6f3f491ca3f755ce31809123&quot;&gt;#&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;
        The Const functor is hardly a programming construct you&apos;ll use in your day-to-day work, but the fact that it exists can be used to generalize some results that involve functors. Now, whenever you have a result that involves a functor, you know that it also generalizes to constant values, just like the Identity functor teaches us that &apos;naked&apos; type parameters can be thought of as functors.
    &lt;/p&gt;
    &lt;p&gt;
        To give a few examples, we may already know that &lt;code&gt;Tree&amp;lt;T&amp;gt;&lt;/code&gt; (C# syntax) is a functor, but a &apos;naked&apos; generic type parameter &lt;code&gt;T&lt;/code&gt; also gives rise to a functor (Identity), as does a non-generic type (such as &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;MyCustomClass&lt;/code&gt;).
    &lt;/p&gt;
    &lt;p&gt;
        Thus, if you have a function that operates on any functor, it may also, conceivably, operate on data structures that have non-generic types. This may for example be interesting when we begin to consider &lt;a href=&quot;/2022/07/11/functor-relationships&quot;&gt;how functors compose&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
        &lt;strong&gt;Next:&lt;/strong&gt; &lt;a href=&quot;/2021/07/19/the-state-functor&quot;&gt;The State functor&lt;/a&gt;.
    &lt;/p&gt;
&lt;/div&gt;&lt;hr&gt;
      This blog is totally free, but if you like it, please consider &lt;a href="https://blog.ploeh.dk/support"&gt;supporting it&lt;/a&gt;.</description>
        <author>Mark Seemann</author>
        <guid isPermaLink="false">https://blog.ploeh.dk/2024/10/07/the-const-functor</guid>
      </item>
    

  </channel>
</rss>
