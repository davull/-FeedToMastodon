{
  "Id": "https://andrewlock.net/rss/",
  "Website": "https://andrewlock.net/",
  "Title": "Andrew Lock | .NET Escapades",
  "LastUpdatedTime": "2024-12-31T10:15:30+00:00",
  "Description": "Hi, my name is Andrew, or ‘Sock’ to most people. This blog is where I share my experiences as I journey into ASP.NET Core.",
  "Language": null,
  "Items": [
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/building-latex-projects-on-windows-easily-with-docker/",
      "Title": "Building LaTeX projects on Windows easily with Docker",
      "PublishDate": "2024-12-17T09:00:00+00:00",
      "Summary": "In this post I describe how I build LaTeX projects on a Windows machine by using Docker and the blang/latex image",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/latex_windows.webp\" /><p>In this short post I describe how I build LaTeX projects on a Windows machine by using Docker. There's nothing particularly novel or exciting about this, someone just asked me about it recently so this is effectively my reply!</p> <h2 id=\"typesetting-documents-with-latex\" class=\"heading-with-anchor\"><a href=\"#typesetting-documents-with-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Typesetting documents with LaTeX</a></h2> <p>I love using markdown for writing documentation, blog posts, <a href=\"https://obsidian.md/\">notes</a>, or anything I can. Even with a very simple editor, you can have something that roughly <em>looks</em> like the markup that you want to produce. But markdown is generally tied closely to HTML (though this is not strictly required), and sometimes you want or need to produce a standalone document, like a PDF, for which HTML isn't generally well suited.</p> <p>For those rare cases where I want to produce a nice looking document, such as a CV, I fallback to <a href=\"https://en.wikipedia.org/wiki/LaTeX\">LaTeX</a>. LaTeX is a markup language that is explicitly about typesetting <em>documents</em> so it cares deeply about pages and margins, which contrasts with HTML markup. You then use a <a href=\"https://en.wikipedia.org/wiki/LaTeX\">TeX</a> distribution to render the LaTeX document as a PDF (or other format).</p> <blockquote> <p>LaTeX performs the same general function as <a href=\"https://en.wikipedia.org/wiki/WYSIWYG\">WYSIWYG</a> editors like Google Docs or Microsoft Word. However, LaTeX is <em>not</em> WYSIWYG (requiring an exxplicit rendering step) which can make it harder to use in general, but this all can enable broader optimisations and produce better looking documents overall.</p> </blockquote> <p>LaTeX is very common in the scientific community in particular, with papers often being written in LaTeX. It is also particularly good for writing large documents, which is why I used it to write my PhD thesis. However, that was years ago. When I came to work with LaTeX again recently, I was reminded that working with it on Windows was not obvious.</p> <h2 id=\"rendering-latex-on-windows\" class=\"heading-with-anchor\"><a href=\"#rendering-latex-on-windows\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rendering LaTeX on Windows</a></h2> <p>LaTeX comes very much from the *Nix world, which means that it's very open, and available, but also that there are thousand different \"suggested\" approaches to rending LaTeX documents. For people who want choice, or who care about the little details of each distribution, that's great. For people who just want to \"install something\" and get on with it, getting started can be confusing 😅</p> <blockquote> <p>Just to be clear, I am very much a beginner with LaTeX, despite having used it a lot 15 years ago. I still find it has a very steep learning curve (softened somewhat these days by StackOverflow and ChatGPT), but there are some things it just does better than WYSWIG editors, so I lean on it where I can now and again.</p> </blockquote> <p>When I was working on my PhD, I'm pretty sure I used <a href=\"https://www.texniccenter.org/\">TeXnicCenter</a>, but it's been a decade since there were any updates there, and you need to manage your own TeX distribution (e.g. MiKTeX) directly if I understand correctly. <a href=\"https://www.reddit.com/r/LaTeX/comments/sle89v/preferred_latex_editor/\">Other common suggestions</a> include <a href=\"https://www.xm1math.net/texmaker/\">Texmaker</a>, <a href=\"https://www.texstudio.org/\">TeXstudio</a>, or just to use VS Code, but these all still require you manage the TeX distribution yourself. Unfortunately I have bad memories of manually managing MiKTeX on Windows and really wanted to avoid that if I could help it.</p> <p>For a long while, I was using <a href=\"https://overleaf.com/\">Overleaf</a>, an online-only platform, for occasionally rendering LaTeX documents, and it worked very well for my needs. I was only rendering relatively short documents and didn't particularly need a lot of IDE or collaborative features.</p> <p><img src=\"/content/images/2024/overleaf.png\" alt=\"Overleaf\"></p> <p>Unfortunately, Overleaf made the individual free-plan basically unusable (rendering a two page document was \"too complex\"), and I couldn't justify paying a subscription for something I only used a couple of times a year.</p> <p>Using Docker seemed like the obvious choice to solve my issue: I could use VS Code as my editor (it has built-in syntax support for LaTeX), and then rending the documents using a self-contained distribution.</p> <p>Overleaf itself <em>is</em> open source, and provides Docker images for running the community edition. I looked into this initially, but it was overkill for what I needed: I didn't need multiple accounts and project storage in the Overleaf implementation itself, I just needed the <em>rendering</em> part.</p> <h2 id=\"building-latex-with-docker-using-blang-latex\" class=\"heading-with-anchor\"><a href=\"#building-latex-with-docker-using-blang-latex\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building LaTeX with Docker using <code>blang/latex</code></a></h2> <p>Eventually I found <a href=\"https://hub.docker.com/r/blang/latex\">the <code>blang/latex</code> docker images</a>, which do exactly what I want—an Ubuntu-based image, with everything you need to compile locally in docker. The <code>blang/latex</code> come in three different flavours:</p> <ul><li><code>blang/latex:ubuntu</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.ubuntu\">Dockerfile</a>)—Ubuntu TexLive distribution: Old but stable, most needed packages(3.9GB)</li> <li><code>blang/latex:ctanbasic</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.basic\">Dockerfile</a>)— CTAN TexLive Scheme-basic: Up-to-date, only basic packages, base for custom builds (500MB)</li> <li><code>blang/latex:ctanfull</code> (<a href=\"https://github.com/blang/latex-docker/blob/master/Dockerfile.full\">Dockerfile</a>)— CTAN TexLive Scheme-full: Up-to-date, all packages (5.6GB)</li></ul> <p>The more complete versions are obviously quite big images, but as I was only going to be pulling them once locally and running them repeatedly to build, I wasn't particularly worried about that. For simplicity I went with the <code>ctanfull</code> tag which contains the <em>full</em> set of <a href=\"http://mirror.ctan.org/systems/texlive/tlnet/archive\">CTAN packages</a>.</p> <p><a href=\"https://hub.docker.com/r/blang/latex\">The docker hub page</a> describes how you can use these images to build your LaTeX project, but I decided to go with something a bit different. I created two files in the root of my project.</p> <ul><li><code>build.ps1</code>—This script runs (or restarts) the docker <code>blang/latex</code> container.</li> <li><code>build.sh</code>—This simple script runs <em>inside</em> the docker container, and does the latex build.</li></ul> <p>The scrcipts themselves are <em>very</em> simple. First we have the <code>build.ps1</code> script:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># Try to start an existing container, if it exists</span>\ndocker <span class=\"token function\">start</span> <span class=\"token operator\">-</span>a <span class=\"token operator\">-</span>i <span class=\"token string\">\"latex-builder\"</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$LASTEXITCODE</span> <span class=\"token operator\">-ne</span> 0<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\"># The latex-builder image doesn't exist, so run it explicitly</span>\n  <span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\n  docker run <span class=\"token operator\">-</span>it `\n    <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n    <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n    blang/latex:ctanfull <span class=\"token operator\">/</span>bin/bash\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This script attempts to start a docker container using the <code>blang/latex:ctanfull</code> image, using the name <code>latex-builder</code>, and attaches stdin/stdout/stderr. If the container already exists and is stopped, then this just restarts the same image and connects to the container. If the container with the name <code>latex-builder</code> <em>doesn't</em> exist, the script starts a new container, mounts the root directory inside the image at <code>/data</code>, and opens a <code>bash</code> shell.</p> <blockquote> <p>This doesn't <em>strictly</em> work as I would like, as depending on how you later exit a re-started container, the exit code may be non-null, which causes the script to (harmlessly) try to start a new container, fail, and show an error. It's not a big deal, but it's slightly annoying, and I'm sure I'm missing an obvious solution here!</p> </blockquote> <p>Once the container is running, you can build by running <code>.\\build.sh</code> inside the container. The <code>build.sh</code> script is specific to each project and looks something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span>\n\nlualatex <span class=\"token parameter variable\">--jobname</span><span class=\"token operator\">=</span><span class=\"token string\">\"My CV\"</span>  main.tex\n</code></pre> <p>This simple script runs lualatex to render the <code>main.tex</code> LaTeX document as a PDF. Thanks to mounting the directory, this appears on the \"Windows side\" automatically. I keep the docker container running in a window, iterate on the LaTeX files in an editor, and then when I want to see the changes, quickly flick to the terminal and run<code> build.sh</code> in the container. It's exactly the workflow I was hoping for.</p> <blockquote> <p>Note that you could also use <code>pdflatex</code> or <code>latexmk</code> instead of <code>lualatex</code> if you prefer, as described <a href=\"https://hub.docker.com/r/blang/latex\">in the docs</a> for <code>blang/latex</code>.</p> </blockquote> <h2 id=\"why-use-two-separate-files-\" class=\"heading-with-anchor\"><a href=\"#why-use-two-separate-files-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why use two separate files?</a></h2> <p>You might be wondering why I opted to keep the docker image container running, necessitating both a <code>build.ps1</code> <em>and</em> <code>build.sh</code> file? It's true that you <em>could</em> run everything all in one command. For example, you could combine the scripts above as follows:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token variable\">$ROOT_DIR</span>=<span class=\"token string\">\"<span class=\"token variable\">$PSScriptRoot</span>\"</span>\n\ndocker run <span class=\"token operator\">-</span>it <span class=\"token operator\">--</span><span class=\"token function\">rm</span>`\n  <span class=\"token operator\">--</span><span class=\"token function\">mount</span> <span class=\"token string\">\"type=bind,source=<span class=\"token variable\">$ROOT_DIR</span>,target=/data\"</span> `\n  <span class=\"token operator\">--</span>name <span class=\"token string\">\"latex-builder\"</span> `\n  blang/latex:ctanfull `\n  lualatex <span class=\"token operator\">--</span>jobname=<span class=\"token string\">\"My CV\"</span>  main<span class=\"token punctuation\">.</span>tex\n</code></pre> <p>The problem with this approach is that it starts a new container every time. But when you first run <code>luatex</code> (and, I assume <code>pdflatex</code> and others), it performs some one-time setup, similar to the following</p> <pre class=\"language-bash\"><code class=\"language-bash\">root@67d3d81c4129:~<span class=\"token comment\"># ./build.sh</span>\nThis is LuaTeX, Version <span class=\"token number\">1.0</span>.4 <span class=\"token punctuation\">(</span>TeX Live <span class=\"token number\">2017</span><span class=\"token punctuation\">)</span>\n restricted system commands enabled.\n<span class=\"token punctuation\">(</span>./main.tex\nLaTeX2e <span class=\"token operator\">&lt;</span><span class=\"token number\">2017</span>-04-1<span class=\"token operator\"><span class=\"token file-descriptor important\">5</span>&gt;</span>\n<span class=\"token punctuation\">(</span>using cache: /usr/local/texlive/2017/texmf-var/luatex-cache/generic<span class=\"token punctuation\">)</span>\nluaotfload <span class=\"token operator\">|</span> main <span class=\"token builtin class-name\">:</span> initialization completed <span class=\"token keyword\">in</span> <span class=\"token number\">0.362</span> seconds\nBabel <span class=\"token operator\">&lt;</span><span class=\"token number\">3.1</span><span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>&gt;</span> and hyphenation patterns <span class=\"token keyword\">for</span> <span class=\"token number\">1</span> language<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> loaded.\n<span class=\"token punctuation\">(</span>./example.cls\nDocument Class: example <span class=\"token number\">2013</span>/02/09 v1.3.0 example class\n<span class=\"token punctuation\">(</span>/usr/local/texlive/2017/texmf-dist/tex/latex/base/size11.clo\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> Font names database not found, generating new one.\nluaotfload <span class=\"token operator\">|</span> db <span class=\"token builtin class-name\">:</span> This can take several minutes<span class=\"token punctuation\">;</span> please be patient.\n</code></pre> <p>As you can see, on this \"first run\", <code>luatex</code> has to build the font-name database cache. On my old laptop this only takes 5-10s, but it's an annoying extra delay for the \"inner-loop\" experience, where the remainder of the build only takes a couple of seconds. By reusing an existing container we can skip that initialization entirely, and go straight to the build!</p> <p>That said, if you want to also have a build that runs in CI, then the one-shot approach obviously makes sense. This is effectively what the GitHub actions yml file below does, by calling <code>./build.sh</code> directly instead of starting a shell:</p> <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"main\"</span> <span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v4\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> build in docker\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> docker run <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>mount type=bind<span class=\"token punctuation\">,</span>source=\"$<span class=\"token punctuation\">{</span>PWD<span class=\"token punctuation\">}</span>\"<span class=\"token punctuation\">,</span>target=/data $IMAGE /data/build.sh\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">IMAGE</span><span class=\"token punctuation\">:</span> blang/latex<span class=\"token punctuation\">:</span>ctanfull\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@v4.4.3\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> pdf\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'My CV.pdf'</span>\n</code></pre> <p>Overall I find this setup gives me the best of all worlds, but the <em>real</em> win here is not having to worry about managing dependencies or Windows TeX distributions. Instead I lean on people who are more knowledgeable about these things package things neatly in a Docker image for me!</p> <h2 id=\"what-s-in-the-dockerfile-\" class=\"heading-with-anchor\"><a href=\"#what-s-in-the-dockerfile-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What's in the dockerfile?</a></h2> <p>Whenever I'm using random docker images like this, I like to take a look at the Dockerfile to see what's going on under the hood. <a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.basic\">The <code>blang/latex:basic</code> image</a> contains <em>most</em> of the setup:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu:xenial</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DEBIAN_FRONTEND noninteractive</span>\n\n<span class=\"token comment\"># Add the prerequisite packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update -q <span class=\"token operator\">\\</span>\n    &amp;&amp; apt-get install -qy build-essential wget libfontconfig1 <span class=\"token operator\">\\</span>\n    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>\n\n<span class=\"token comment\"># Install TexLive with scheme-basic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> wget http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz; <span class=\"token operator\">\\</span>\n\tmkdir /install-tl-unx; <span class=\"token operator\">\\</span>\n\ttar -xvf install-tl-unx.tar.gz -C /install-tl-unx --strip-components=1; <span class=\"token operator\">\\</span>\n    echo <span class=\"token string\">\"selected_scheme scheme-basic\"</span> &gt;&gt; /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n\t/install-tl-unx/install-tl -profile /install-tl-unx/texlive.profile; <span class=\"token operator\">\\</span>\n    rm -r /install-tl-unx; <span class=\"token operator\">\\</span>\n\trm install-tl-unx.tar.gz</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> PATH=<span class=\"token string\">\"/usr/local/texlive/2017/bin/x86_64-linux:${PATH}\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> HOME /data</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /data</span>\n\n<span class=\"token comment\"># Install latex packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install latexmk</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">VOLUME</span> [<span class=\"token string\">\"/data\"</span>]</span>\n</code></pre> <p>There's not loads going on there: from an Ubuntu <code>16.04</code> base image (which is getting outdated, and probably needs updating soon) the image installs prerequisites like <code>wget</code> and <code>build-essential</code>, and then installs a <code>TexLive</code> distribution, and adds it to the path.</p> <p><a href=\"https://github.com/blang/latex-docker/blob/42d2c532a09a00938331512fd2b539f9944c400c/Dockerfile.full\">The <code>blang/latex:ctanfull</code> image</a> that I use in this post, is based on this image, but uses the \"full\" scheme:</p> <pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> blang/latex:ctanbasic</span>\n<span class=\"token instruction\"><span class=\"token keyword\">MAINTAINER</span> Benedikt Lang &lt;mail@blang.io&gt;</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> tlmgr install scheme-full</span>\n</code></pre> <p>I might think about trying to create updated versions of these images, but honestly, as long as they keep working, I probably won't 🙈</p> <h2 id=\"the-local-editor-experience\" class=\"heading-with-anchor\"><a href=\"#the-local-editor-experience\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The local editor experience</a></h2> <p>For the local editing experience, I've found that VS Code is good enough for me, and I'm obviously very familiar with it. VS Code has LaTeX support built-in, so I simply added <a href=\"https://marketplace.visualstudio.com/items?itemName=mathematic.vscode-pdf\">a PDF Viewer extension</a> so that I can have the rendered result open in on the right side of the Window while editing on the left, and a terminal open at the base. Add in <a href=\"https://marketplace.visualstudio.com/items?itemName=ban.spellright\">a spell-checker</a> and there's not much more I need for local development:</p> <p><img src=\"/content/images/2024/cv.png\" alt=\"An image of my local dev setup using VS Code\"></p> <p>That covers my local development setup, my build process, and the simple CI that I have for projects. It's easy to copy the <code>build.ps1</code>, <code>build.sh</code>, and <code>build.yml</code> files between projects whenever I need to. And if I come back to it 6 months later, it's obvious what I need to do—run the <code>build.*</code> script that makes sense (<code>.ps1</code> for Windows and <code>.sh</code> once running inside the docker container)!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how I render LaTeX projects using the <code>blang/latex</code> docker image, which contains a full LaTeX distribution. I described how and why I start a long-lived docker container for the project, and then repeatedly re-render the project using <code>lualatex</code>. Finally I showed the setup I use with VS Code, a PDF rendering extension, and a spellchecker.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/building-latex-projects-on-windows-easily-with-docker/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/using-the-yamldotnet-source-generator-for-native-aot/",
      "Title": "Using the YamlDotNet source generator for Native AOT",
      "PublishDate": "2024-12-10T10:00:00+00:00",
      "Summary": "In this post I show how you can use the YamlDotNet source generator to do strongly-typed serialization and deserialization, even in Native AOT apps",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/yamldotnet.png\" /><p>In this post I show how you can use the <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> source generator in your .NET 7+ application. This is particularly important if you're planning on using your application with NativeAOT.</p> <h2 id=\"reading-yaml-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#reading-yaml-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading YAML with YamlDotNet</a></h2> <p>Love it or hate it, <a href=\"https://yaml.org/\">YAML</a> is everywhere these days. It's emerged as the markup language of choice for \"cloud native\" configuration, whether that's Kubernetes manifests, docker compose files, or GitHub Action workflows. On the one hand, it's a generally-easy-to-read format, and a strict superset of JSON. On the other hand, the significant whitespace can be a nightmare if you don't have decent tooling 😅</p> <p>Either way, people clearly choose to use it, even if they don't have to. Years ago I wrote a small ASP.NET Core library, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> that reads YAML files in as part of ASP.NET Core's standard <a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration\">configuration system</a>. Judging from the <a href=\"https://nugettrends.com/packages?ids=NetEscapades.Configuration.Yaml&amp;months=72\">NuGet Trends data</a>, YAML is not going away any time soon!</p> <p><img src=\"/content/images/2024/nuget_trends.png\" alt=\"The NuGet downloads for the NetEscapades.Configuration.Yaml library\"></p> <p>Under the hood, <a href=\"https://www.nuget.org/packages/NetEscapades.Configuration.Yaml\">NetEscapades.Configuration.Yaml</a> uses <a href=\"https://www.nuget.org/packages/YamlDotNet/\">YamlDotNet</a> to read the YAML files. <a href=\"https://github.com/aaubry/YamlDotNet\">YamlDotNet</a> is <em>the</em> YAML parser for .NET—with ~245 Million downloads it's effectively the \"Newtonsoft.Json for YAML\".</p> <p>There are several ways to work with YAML files with YamlDotNet. If you need to, you can <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Samples.LoadingAYamlStream\">manipulate a high-level representation of the YAML</a> (e.g. <code>YamlScalarNode</code>, <code>YamlMappingNode</code> etc) if you need to work with the YAML document directly.</p> <p>A more common approach is to serialize your YAML to and from strongly-typed objects, just like you'd do with Newtonsoft.Json or System.Text.Json. For example, the following code shows how to deserialize a YAML document into a strongly-typed <code>Person</code> object using YamlDotNet:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>NamingConventions</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a deserializer, using the builder pattern </span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span> <span class=\"token comment\">// customise conventions</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Can deserialize from a string or TextReader (for example)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> yaml <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    name<span class=\"token punctuation\">:</span> George <span class=\"token class-name\">Washington</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">89</span>\n    height_in_inches<span class=\"token punctuation\">:</span> <span class=\"token number\">5.75</span>\n    addresses<span class=\"token punctuation\">:</span>\n      home<span class=\"token punctuation\">:</span>\n        street<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span> Mockingbird <span class=\"token class-name\">Lane</span>\n        state<span class=\"token punctuation\">:</span> Hawidaho\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can customise the conventions used to read the YAML, override the serialization for certain types or properties, and generally customize things as you need. It's worth checking out <a href=\"https://github.com/aaubry/YamlDotNet/wiki/Serialization.Deserializer\">the GitHub Wiki</a> for details of all the possible customisation you can do.</p> <h2 id=\"the-advantages-and-complexities-of-native-aot\" class=\"heading-with-anchor\"><a href=\"#the-advantages-and-complexities-of-native-aot\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The advantages and complexities of Native AOT</a></h2> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/?tabs=windows%2Cnet8\"><em>Native AOT</em></a> is a new (since .NET 7) deployment mechanism for .NET applications. Normally, when you publish and deploy a .NET application, your application is compiled into Intermediate Language (IL). When the .NET runtime runs your application it uses a Just-In-Time (JIT) compiler to convert your IL into machine-language instructions which can actually be executed by processor.</p> <p>In contrast, Native AOT performs the IL to machine-language conversion during a <code>dotnet publish</code>. It produces a single binary, targeting a single platform (for example <code>x64</code> Windows or <code>arm64</code> Linux), which contains the complete .NET runtime, all the base-class libraries, and your application. To keep the size of this file down, NativeAOT automatically \"trims\" any unused types and members from your application <em>and</em> from the underlying platform.</p> <blockquote> <p>When choosing between IL+JIT or Native AOT there are a number of trade offs to consider. I won't go into those exhaustively here, and instead will just highlight a few.</p> </blockquote> <p>Advantages to using the IL+JIT approach include:</p> <ul><li>The JIT can optimise the machine-language generated for the specific capabilities of the processor currently executing, which may mean it can produce faster code than Native AOT would.</li> <li>You're free to use meta-programming approaches such as reflection (e.g. <code>Assembly.LoadFile</code>) and run-time code generation (e.g. <code>System.Reflection.Emit</code>).</li> <li>You can use any .NET library available; they're all designed to be used in this mode.</li></ul> <p>Whereas Native AOT brings other advantages:</p> <ul><li>Native AOT typically allows significantly faster startup times, as there's no need to load all the types, start the JIT compiler, and generate machine code from IL; the app starts executing almost immediately.</li> <li>The size of a Native AOT app is typically <em>much</em> smaller than the overall footprint of a JIT app (runtime + base class libraries + application), as any unused features are trimmed and removed.</li> <li>Runtime memory usage is typically smaller, as the runtime has to do less work (it doesn't need to run the JIT compiler, load types, have debugger support).</li></ul> <blockquote> <p>Michal Strehovsky gave a great <a href=\"https://www.youtube.com/watch?v=Gmn-4mVSjq4&amp;ab_channel=dotnet\">Deep dive on Native AOT</a> talk at .NET Conf 2024; if you're interested in Native AOT I strongly suggest taking a look at it!</p> </blockquote> <p>The big downside to using Native AOT publishing is that the compiler needs to be able to <em>statically</em> understand which types in your application are <em>actually</em> going to be used. That is particularly difficult for functionality that leans heavily on <em>reflection</em>. And guess what, serialization and deserialization typically does just that.</p> <h2 id=\"source-generation-to-the-rescue-\" class=\"heading-with-anchor\"><a href=\"#source-generation-to-the-rescue-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Source generation to the rescue!</a></h2> <p>Reflection is often problematic for Native AOT, as it can quickly become difficult for the compiler to know which types are <em>actually</em> being used. For example, the following code would (potentially) work fine when you're running with a JIT:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Enter a type to load\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> typeToLoad <span class=\"token operator\">=</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">ReadLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Type<span class=\"token punctuation\">?</span></span> type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>typeToLoad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// dynamically load the type</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Loaded type </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>There's clearly no way for the compiler to know ahead of time what type will be requested, so there's pretty much no way Native AOT is going to work with this sort of pattern.</p> <blockquote> <p>This example is obviously very contrived, but it's actually similar to how some plugin systems work in practice!</p> </blockquote> <p>In other scenarios we use reflection primarily because it was historically the only tool available to us. This is often the case for serialization and deserialization. Serializers commonly use reflection to inspect the properties of objects so they can be created from a given document, whether that's XML, JSON, or YAML.</p> <p>However, with the introduction of source generators, we now have another tool. Instead of inspecting types at <em>runtime</em> to generate the mapping code from documents-to-types, source generators allow us to move that work to <em>compile</em> time. This can give performance improvements (as there's less work to do at runtime), but more importantly (for this case) it also means our code is statically analyzable, and can potentially support Native AOT.</p> <blockquote> <p>I've written a lot about source generators: I have a series on <a href=\"/series/creating-a-source-generator/\">creating an incremental source generator here</a> and have described some of the source generators I've created <a href=\"/recent-updates-for-netescapades-enumgenerators-interceptors/\">here</a> and <a href=\"https://andrewlock.net/updates-to-the-stronglytypedid-library/\">here</a>.</p> </blockquote> <p>It's important to be aware that using source generation for serialization <em>typically</em> requires making code changes. For example, using source generation with System.Text.Json (the built-in JSON serializer) requires</p> <ul><li>Creating a <code>JsonSerializerContract</code>.</li> <li>Applying <code>[JsonSerializable]</code> with the types to generate.</li> <li>Explicitly calling serialization method overloads that use the <code>JsonSerializerContract</code>.</li></ul> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> \n    <span class=\"token string\">\"\"</span>\"\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2019-08-01T00:00:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hot\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token string\">\"\"</span>\"<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> weatherForecast <span class=\"token operator\">=</span> JsonSerializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    json<span class=\"token punctuation\">,</span>\n    SourceGenerationContext<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Explicitly use the context</span>\n\n<span class=\"token comment\">// The data type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">DateTime</span> Date <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> TemperatureCelsius <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">?</span></span> Summary <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// The context - the body of this type is source generated</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">JsonSerializable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SourceGenerationContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">JsonSerializerContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Source generation in System.Text.Json has got progressively better over recent releases, so that many of the gaps and issues that were once there have been resolved. However, I wasn't aware until recently that YamlDotNet has a similar source generator for serializing YAML.</p> <h2 id=\"using-source-generation-with-yamldotnet\" class=\"heading-with-anchor\"><a href=\"#using-source-generation-with-yamldotnet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using source generation with YamlDotNet</a></h2> <p>I was recently working on a project that I wanted to publish using NativeAOT. It involved reading some Markdown files <a href=\"https://github.com/xoofx/markdig\">using Markdig</a>, reading <a href=\"https://github.com/xoofx/markdig/blob/master/src/Markdig.Tests/Specs/YamlSpecs.md\">the YAML frontmatter</a>, and parsing the YAML.</p> <p>Initially, I thought I might have a problem. There's no real mention of Native AOT or source generation that I could see <a href=\"https://github.com/aaubry/YamlDotNet/wiki\">in the YamlDotNet Wiki</a>. However <a href=\"https://github.com/aaubry/YamlDotNet/issues/740\">this issue</a> requesting support for Native AOT was marked complete and there was a sample called <a href=\"https://github.com/aaubry/YamlDotNet/tree/master/YamlDotNet.Core7AoTCompileTest\">YamlDotNet.Core7AoTCompileTest</a>, and sure enough, it was possible!</p> <p>To use the YamlDotNet source generation in your project, you need to do 4 things:</p> <ul><li>Add a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\">Vecc.YamlDotNet.Analyzers.StaticGenerator</a>.</li> <li>Create a class derived from <code>YamlDotNet.Serialization.StaticContext</code>.</li> <li>Annotate this class with the types you wish to use with source generation.</li> <li>Use the <code>StaticDeserializerBuilder</code> instead of <code>DeserializerBuilder</code> to build your <code>IDeserializer</code></li></ul> <p>I'll walk through each of those steps in the following sections.</p> <h3 id=\"1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"heading-with-anchor\"><a href=\"#1-add-a-reference-to-vecc-yamldotnet-analyzers-staticgenerator\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Add a reference to Vecc.YamlDotNet.Analyzers.StaticGenerator</a></h3> <p>The first step, adding a reference to <a href=\"https://www.nuget.org/packages/Vecc.YamlDotNet.Analyzers.StaticGenerator\"><em>Vecc.YamlDotNet.Analyzers.StaticGenerator</em></a> is a somewhat odd one - I get the <em>impression</em> that this is just a temporary measure by the current maintainer, but it's a required step right now. The NuGet is published by the current maintainer of YamlDotNet, and the version numbers match with the YamlDotNet releases.</p> <p>Add both this package and YamlDotNet to your project:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Vecc.YamlDotNet.Analyzers.StaticGenerator\ndotnet <span class=\"token function\">add</span> package YamlDotNet\n</code></pre> <h3 id=\"2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"heading-with-anchor\"><a href=\"#2-create-a-yamldotnet-serialization-staticcontext-type\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create a <code>YamlDotNet.Serialization.StaticContext</code> type</a></h3> <p>Next, create a class that derives from <code>YamlDotNet.Serialization.StaticContext</code>, and add the <code>[YamlStaticContext]</code> attribute to it. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This type is equivalent to the <code>JsonSerializerContext</code> used by System.Text.Json, and serves as the \"target\" of the source generator.</p> <h3 id=\"3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"heading-with-anchor\"><a href=\"#3-add-yamlserializable-attributes-for-each-type-to-serialize\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Add <code>[YamlSerializable]</code> attributes for each type to serialize</a></h3> <p>For each type that you want to serialize or deserialize, decorate your <code>StaticContext</code> class with a <code>[YamlSerializable]</code> attribute. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlStaticContext</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">YamlSerializable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WeatherForecast</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Generate for WeatherForecast type</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YamlStaticContext</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>StaticContext</span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This makes the type available for source generation.</p> <blockquote> <p>Note that you must add <code>[YamlSerializable]</code> for all the non-built-in types that you wish to serialize, whether they're \"top-level\" types, or just referenced by other properties.</p> </blockquote> <p>If you check the generated code, you can see <em>exactly</em> what YamlDotNet is doing. I'm not going to reproduce it all here, but there's a few interesting points to note:</p> <ul><li>By default, when you register a type <code>T</code> using <code>[YamlSerializable]</code>, YamlDotNet will also recognise <code>T[]</code>, <code>IEnumerable&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, and <code>Dictionary&lt;string, T&gt;</code>.</li> <li>The source generator implements an <code>IObjectAccessor</code> for the type.</li></ul> <p>On that latter point, the accessor looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApp_WeatherForecast_379090c0bf12475d92847d8798d5c88f</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">YamlDotNet<span class=\"token punctuation\">.</span>Serialization<span class=\"token punctuation\">.</span>IObjectAccessor</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Date <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>DateTime<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Int32<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">.</span>Summary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">)</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ArgumentOutOfRangeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"propertyName\"</span><span class=\"token punctuation\">,</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">propertyName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> does not exist or is not settable\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> propertyName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span></span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>DemoApp<span class=\"token punctuation\">.</span>WeatherForecast<span class=\"token punctuation\">)</span>target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>propertyName<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Date\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"TemperatureCelsius\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>TemperatureCelsius<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">\"Summary\"</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span>Summary<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Of course, you don't need to worry about any of that. But if you <em>do</em> need to peek behind the curtains, you can often more easily see what's going on when the code is source generated like this!.</p> <p>We're nearly finished, there's just one more change we need for our app to support the generated definitions.</p> <h3 id=\"4-use-the-staticdeserializerbuilder\" class=\"heading-with-anchor\"><a href=\"#4-use-the-staticdeserializerbuilder\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">4. Use the <code>StaticDeserializerBuilder</code></a></h3> <p>The final step is to find where you're currently creating an <code>IDeserializer</code> using a <code>DeserializerBuilder</code>. Replace the <code>DeserializerBuilder</code> with <code>StaticDeserializerBuilder</code> and pass in an instance of your <code>StaticContext</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Replace this ...</span>\n<span class=\"token comment\">// IDeserializer deserializer = new DeserializerBuilder()</span>\n\n<span class=\"token comment\">// With this:</span>\n<span class=\"token comment\">//                              👇 Static builder         👇 Your StaticContext type</span>\n<span class=\"token class-name\">IDeserializer</span> deserializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticDeserializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">WithNamingConvention</span><span class=\"token punctuation\">(</span>UnderscoredNamingConvention<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">WeatherForecast</span> p <span class=\"token operator\">=</span> deserializer<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Deserialize</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>WeatherForecast<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>yaml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>You can still customize your conventions as before, but now when you call <code>Deserialize&lt;T&gt;</code> YamlDotNet uses your <code>StaticContext</code> and generated <code>IObjectAccessors</code> to deserialize the YAML into your strongly typed object. Serializing works in much the same way:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Use the StaticSerializerBuilder and pass in your custom StaticContext</span>\n<span class=\"token class-name\">ISerializer</span> serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StaticSerializerBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YamlStaticContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">EnsureRoundtrip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> forecast <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WeatherForecast</span>\n<span class=\"token punctuation\">{</span>\n    Date <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span>UtcNow<span class=\"token punctuation\">,</span>\n    Summary <span class=\"token operator\">=</span> <span class=\"token string\">\"Sunny\"</span><span class=\"token punctuation\">,</span>\n    TemperatureCelsius <span class=\"token operator\">=</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Serialize the object as normal</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> json <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span><span class=\"token function\">Serialize</span><span class=\"token punctuation\">(</span>forecast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And that's it. You now have NativeAOT compatible YAML serialization and deserialization, all thanks to the good work of the YamlDotNet maintainers!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how you can use the YamlDotNet library to deserialize YAML into a strongly typed object. I then discussed some of the pros and cons of Native AOT, and how source generation can help work around the lack of reflection in Native AOT. Finally, I showed how to enable a source generator for YamlDotNet so that you can make your YAML serialization and deserialization Native AOT-friendly.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/using-the-yamldotnet-source-generator-for-native-aot/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/understanding-security-headers-part-3-cross-origin-embedder-policy/",
      "Title": "Cross-Origin-Embedder-Policy: securing embedded resources: Understanding cross-origin security headers - Part 3",
      "PublishDate": "2024-12-03T09:00:00+00:00",
      "Summary": "In this post I discuss the Cross-Origin-Embedder-Policy, the requirements it places on your resources, and why it's required for some JavaScript APIs",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/coep_banner.png\" /><nav><p>This is the three post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li><a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/\">Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups</a></li><li><a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks</a></li><li>Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources (this post) </li></ol></nav><p>In this post I discuss the <code>Cross-Origin-Embedder-Policy</code> (COEP) header. I describe why you need it, how it protects your site, and how it unlocks additional features as part of the cross-origin isolation requirements. Along the way I describe the difference between <code>cors</code> and <code>no-cors</code> requests when embedding resources in your site, and how the COEP header interacts with the <code>Cross-Origin-Resource-Policy</code> (CORP) header and cross-origin resource sharing (CORS) features.</p> <ul><li><a href=\"#isolating-your-site-with-cross-origin-embedder-policy\">Isolating your site with <code>Cross-Origin-Embedder-Policy</code></a></li> <li><a href=\"#understanding-the-relationship-between-coep-corp-and-cors\">Understanding the relationship between COEP, CORP, and CORS</a></li> <li><a href=\"#accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\">Accessing <code>SharedArrayBuffer</code> by enabling cross-origin isolation</a></li> <li><a href=\"#easier-isolation-with-credentialless\">Easier isolation with <code>credentialless</code></a></li> <li><a href=\"#rolling-out-cross-origin-embedder-policy-safely-with-reporting\">Rolling-out <code>Cross-Origin-Embedder-Policy</code> safely with reporting</a></li></ul> <h2 id=\"isolating-your-site-with-cross-origin-embedder-policy\" class=\"heading-with-anchor\"><a href=\"#isolating-your-site-with-cross-origin-embedder-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Isolating your site with <code>Cross-Origin-Embedder-Policy</code></a></h2> <p>In my previous post on the <code>Cross-Origin-Resource-Policy</code> (CORP) I explained that <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">the same-origin policy</a> doesn't apply to most cases where the requests are made by <em>embedding</em> links in a document. For example browsers will allow cross-origin requests by default for</p> <ul><li>Images linked in <code>&lt;img&gt;</code> elements.</li> <li>Media linked in <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements.</li> <li>JavaScript files referenced in <code>&lt;script src=\"…\"&gt;&lt;/script&gt;</code>.</li> <li>CSS files referenced in <code>&lt;link rel=\"stylesheet\" href=\"…\"&gt;</code> (as long as the stylesheet has the correct MIME type).</li></ul> <p>Malicious sites can use this fact to exploit a class of vulnerabilities termed <a href=\"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/13-Testing_for_Cross_Site_Script_Inclusion\">Cross Site Script Inclusion (XSSI)</a>. XSSI attacks embedded a resource from your site inside an attacker's site, which can then leak sensitive data from your site to the attacker. That's on top of <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a> which rely on cross-origin access.</p> <p>The <code>Cross-Origin-Resource-Policy</code> header protects you in this scenario, as it prevents your resources from being loaded by the attacker website unless you <em>explicitly</em> declare that it's safe to do so.</p> <p>What's more, cross-origin requests like these even include cookies. That means if an attacker manages to force you to embed an <code>&lt;img&gt;</code> to a third-party site (for example), they can make <em>credentialled</em> requests to that site.</p> <p>While CORP protects you from being embedded, the <code>Cross-Origin-Embedder-Policy</code> (COEP) protects your site as the embedder. By adding this header you can declare that your site should <em>only</em> load resources that have <em>explicitly</em> opted-in to being loaded across origins.</p> <p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy\">The <code>Cross-Origin-Embedder-Policy</code> header</a> can be set to one of three values:</p> <ul><li><code>unsafe-none</code>—the default value, doesn't add any additional projections.</li> <li><code>require-corp</code>—the strictest value, requires that all cross-origin requests <em>either</em> include a <code>Cross-Origin-Reousurce-Policy</code> header (for <code>no-cors</code> requests) <em>or</em> a relevant <code>Access-Control-Allow-Origin</code> (ACAO) (for <code>cors</code> requests). More on that later!</li> <li><code>credentialless</code>—a half-way value, <code>no-cors</code> cross-origin requests are sent without cookies and no cookies are saved from the response, but there are no requirements for CORP or ACAO headers.</li></ul> <p>If you're anything like me, then you should be thoroughly confused😅 I've seen the following image (from <a href=\"https://web.dev/articles/why-coop-coep\">https://web.dev/articles/why-coop-coep</a>) used to try to explain COEP, and maybe it will resonate:</p> <p><img src=\"/content/images/2024/how-coep-works.png\" alt=\"How COEP works, taken from https://web.dev/articles/why-coop-coep\"></p> <p>Unfortunately, I think the image is overly simplistic, and assumes a lot of understanding of how Cross Origin Resource Sharing (CORS) and same-origin policy work. In the next section I'll try to be more explicit about the relationship between COEP, CORP, and CORS.</p> <h2 id=\"understanding-the-relationship-between-coep-corp-and-cors\" class=\"heading-with-anchor\"><a href=\"#understanding-the-relationship-between-coep-corp-and-cors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the relationship between COEP, CORP, and CORS</a></h2> <p>The first thing to understand is the difference between <code>cors</code> and <code>no-cors</code> requests. Cross-origin <code>no-cors</code> requests are typically <em>allowed</em> without issue. The examples I described previously, such as links in an <code>&lt;img&gt;</code> element are <code>no-cors</code> requests:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://some-other-comain.com/photo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>If you read my previous post on <a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">the <code>Cross-Origin-Resource-Policy</code> (CORP) header</a>, you may remember that CORP adds extra protection to resources fetched using <code>no-cors</code> requests, by enforcing that only <code>same-origin</code> or <code>same-site</code> resources can be accessed by a document.</p> <p>In contrast, if you're making cross-origin requests using the <code>fetch()</code> API, these will typically be <code>cors</code> requests. These require that the server opts-in to cross-origin access by returning the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin\"><code>Access-Control-Allow-Origin</code> header</a> with an appropriate value. Returning the <code>Access-Control-Allow-Origin</code> header opts the site in to cross origin resource sharing (CORS).</p> <blockquote> <p>There are additional pre-flight requirements for \"complex\" HTTP calls that are anything other than a simple <code>GET</code> or form <code>POST</code>, plus additional requirements if you want to send cookies. I'm not going to go into more details on CORS here; <a href=\"/making-authenticated-cross-origin-requests-with-aspnetcore-identity/\">I've discussed CORS in the past</a> and there's plenty of resources around if you want to learn more!</p> </blockquote> <p>You can also turn a <code>no-cors</code> embedded request into a <code>cors</code> request by adding the <code>crossorigin</code> attribute, for example:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://some-other-comain.com/photo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>The <code>Cross-Origin-Embedder-Policy</code> header ties everything all together. If you set the COEP value to <code>require-corp</code>, then</p> <ul><li><code>no-cors</code> requests <em>must</em> return a <code>Cross-Origin-Resource-Policy</code> header value, and it must indicate that the resource is allowed to be accessed. Based on the CORP header value: <ul><li>If the CORP header is <code>same-origin</code> then the embedded resource can only be loaded if it has the same origin as the COEP document.</li> <li>If the CORP header is <code>same-site</code> then the embedded resource can only be loaded if it has the same <em>site</em> as the COEP document, i.e. it has the same domain (<code>andrewlock.net</code>) and scheme (<code>http</code> or <code>https</code>).</li> <li>If the CORP header is <code>cross-origin</code> then the embedded resource can be loaded in any embedded document.</li></ul> </li> <li><code>cors</code> requests <em>must</em> return an <code>Access-Control-Allow-Origin</code> header (i.e. a CORS header) value that indicates the resource may be accessed.</li></ul> <p>We can alternatively visualize the various paths here as a flow chart:</p> <p><img src=\"/content/images/2024/coep_flow.svg\" alt=\"A flow chart of CORS vs CORP for COEP: require-corp\"></p> <p>An important thing to understand is that returning an <code>Access-Control-Allow-Origin</code> CORS header when the request is a <code>no-cors</code> request is <em>not</em> sufficient to satisfy a COEP header of <code>require-corp</code>. Similarly, a <code>cors</code> request with a CORP header will <em>not</em> satisfy the embedded policy.</p> <p>If we consider <em>just</em> the <code>no-cors</code> case for now, then the following image from <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial\">the chrome developer blog</a> demonstrates that with an embedder policy of <code>require-corp</code>, only responses that include a CORP header value of <code>cross-origin</code> will be allowed through:</p> <p><img src=\"/content/images/2024/coep_no_cors.png\" alt=\"image from https://developer.chrome.com/blog/coep-credentialless-origin-trial\"></p> <p>There's a lot of moving pieces here, so you might well be wondering: why bother?</p> <h2 id=\"accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\" class=\"heading-with-anchor\"><a href=\"#accessing-sharedarraybuffer-by-enabling-cross-origin-isolation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Accessing <code>SharedArrayBuffer</code> by enabling cross-origin isolation</a></h2> <p>I motivated our initial discussion of the CORP and COEP headers by talking about XSSI attacks, as well as <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a>, which rely on cross-origin access. But a concrete reason you may <em>have</em> to consider these headers is if you want to use certain features like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/measureUserAgentSpecificMemory\"><code>performance.measureUserAgentSpecificMemory()</code></a> or <a href=\"https://developer.chrome.com/blog/cross-origin-isolated-hr-timers\">high-precision timers with better resolution</a>.</p> <p>These features are <em>only</em> available when your site is deemed to be in an \"isolated\" state from other origins, to ensure it's not open to side-channel attacks. To enable cross-origin isolation, you must set two response headers:</p> <pre class=\"language-http\"><code class=\"language-http\"><span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Embedder-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">require-corp</span></span>\n<span class=\"token header\"><span class=\"token header-name keyword\">Cross-Origin-Opener-Policy</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">same-origin</span></span>\n</code></pre> <p>In this state, cross-origin isolation is enabled, and you can use features like <code>SharedArrayBuffer</code>. You can check whether your site is correctly isolated by checking the <code>window.crossOriginIsolated</code> property:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myWorker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>crossOriginIsolated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// site is isolated, so can use SharedArrayBuffer</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SharedArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// site is not isolated, cannot use SharedArrayBuffer</span>\n  <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myWorker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Even if you don't want to use any of these capabilities, enabling cross-origin isolation is a good choice for security. The only difficulty is that it can be hard to achieve in practice!</p> <h2 id=\"easier-isolation-with-credentialless\" class=\"heading-with-anchor\"><a href=\"#easier-isolation-with-credentialless\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Easier isolation with <code>credentialless</code></a></h2> <p>When <code>Cross-Origin-Embedder-Policy</code> was originally defined there were only two possible values:</p> <ul><li><code>unsafe-none</code></li> <li><code>require-corp</code></li></ul> <p>However using <code>require-corp</code> is very restrictive. <a href=\"https://web.dev/articles/coop-coep#2_ensure_resources_have_corp_or_cors_enabled\">This article</a> describes the multi-step process for preparing your site to enable COEP. The big problem is that before you can enable COEP on your site, you need to update the response headers for all the embedded resources your site loads. That's fine if <em>you</em> control how those resources are delivered, but it's particularly problematic <em>as you might not control cross-origin resources</em>!</p> <p>The suggested approach for preparing for <code>require-corp</code> is:</p> <ol><li>If <strong>you</strong> control the resource, add a <code>Cross-Origin-Resource-Policy</code> header set to <code>same-origin</code>, <code>same-site</code>, or <code>cross-origin</code> header, depending on your requirements</li> <li>If you <strong>don't</strong> control the resource <ul><li>If the resource is sent with <code>cross-origin</code> CORP header, you're OK.</li> <li>If the resource is not sent with a CORP header, try making a <code>cors</code> request (instead of <code>no-cors</code>) by adding the <code>cross-origin</code> attribute (<a href=\"#understanding-the-relationship-between-coep-corp-and-cors\">as described previously</a>) <ul><li>If the resource is CORS enabled (using <code>Access-Control-Allow-Origin</code>) then you're OK.</li> <li>If not…there's nothing you can do 😢</li></ul> </li></ul> </li></ol> <p>If you end up at the final bullet point, you're completely stuck. There's no way for you to safely enable <code>require-corp</code> on your site unless <em>someone else</em> enabled CORP or CORS for the resource you're embedding.</p> <p>To work around this fundamental problem, <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial\">the <code>Cross-Origin-Embedder-Policy: credentialless</code> value</a> was added. When you use <code>credentialless</code> you get the best of both worlds:</p> <ul><li>Your site is still considered \"cross-origin isolated\", so you can use the additional features like <code>SharedArrayBuffer</code></li> <li><code>no-cors</code> requests <em>don't</em> need to have a <code>Cross-Origin-Resource-Policy</code> to be embedded in your site.</li></ul> <p>Based on that description you would be right to be a little confused: how does <code>credentialless</code> provide any protection?</p> <p>The difference is that when you use <code>credentialless</code>, <code>no-cors</code> requests are sent <em>without</em> any credentials (i.e. cookies in most cases), and any cookies in the response are discarded. By definition, that means the resources you're embedding are available in \"public\", and so should be <em>safe</em> to embed. There's no risk of attackers being able to make the canonical \"request to your bank\" attack, because no credentials will be included!</p> <p>If the embedded resource <em>does</em> return a <code>Cross-Origin-Resource-Policy</code> header, it will still be honoured, but if you use <code>credentialless</code>, then you will no longer be blocked from embedding a resource that <em>doesn't</em> add the CORP header. Compare the following image (from <a href=\"https://developer.chrome.com/blog/coep-credentialless-origin-trial#credentialless_to_the_rescue\">the Chrome developer blog</a>), to the <code>require-corp</code> version I saw previously, and you'll see that the \"nothing\" case is now unblocked!</p> <p><img src=\"/content/images/2024/coep_credentialless.png\" alt=\"image from https://developer.chrome.com/blog/coep-credentialless-origin-trial\"></p> <p>If you compare the following <code>credentialless</code> flow chart to the previous <code>require-corp</code> version, you can see that it's only the <code>no-cors</code> \"CORP missing\" case that has changed:</p> <p><img src=\"/content/images/2024/coep_flow_credentialless.svg\" alt=\"A flow chart of CORS vs CORP for COEP: require-corp\"></p> <p>The <code>credentialless</code> header means you no longer need to ask third-parties to add CORP or CORS headers just so that <em>you</em> can enable COEP, which <em>should</em> make it easier to roll out. The <code>credentialless</code> option has been available for a couple of years now, and has pretty good support, but unfortunately <a href=\"https://caniuse.com/mdn-http_headers_cross-origin-embedder-policy_credentialless\">no support on Safari</a> means that it's not a complete solution😢.</p> <h2 id=\"rolling-out-cross-origin-embedder-policy-safely-with-reporting\" class=\"heading-with-anchor\"><a href=\"#rolling-out-cross-origin-embedder-policy-safely-with-reporting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rolling-out <code>Cross-Origin-Embedder-Policy</code> safely with reporting</a></h2> <p>Even with <code>credentialless</code>, rolling out support for COEP is a <em>potentially</em> dangerous affair. Consequently, it's strongly recommended that you use the <a href=\"https://web.dev/reporting-api\">Reporting API</a> built into browsers to identify any issues.</p> <p>You should also consider running the <code>Cross-Origin-Embedder-Policy</code> header in \"report only\" mode, by using the <code>Cross-Origin-Embedder-Policy-Report-Only</code> header instead. This header \"simulates\" the provided policy, whether it's <code>require-corp</code> or <code>credentialless</code>, and reports violations using the Reporting API.</p> <p>By using this staged approach you can identify and fix any potential cross-origin issues <em>before</em> you start enforcing the embedder policy on your site for real.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described the <code>Cross-Origin-Embedder-Policy</code> header. I explained that it adds additional requirements to <code>no-cors</code> requests that your site makes, such as for the links used in <code>&lt;img&gt;</code> tags. I explained how it interacts with the <code>Cross-Origin-Resource-Policy</code> and CORS headers depending on the request being made, and how you can use the <code>credentialless</code> option to make it easier to deploy the COEP header to your site.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/understanding-security-headers-part-3-cross-origin-embedder-policy/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/",
      "Title": "Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks: Understanding cross-origin security headers - Part 2",
      "PublishDate": "2024-11-26T09:00:00+00:00",
      "Summary": "In this post I describe how to use the Cross-Origin-Resource-Policy to block cross-origin requests that would normally be allowed, such as in <img> tags",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/corp_banner.png\" /><nav><p>This is the two post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li><a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/\">Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups</a></li><li>Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks (this post) </li><li><a href=\"/understanding-security-headers-part-3-cross-origin-embedder-policy/\">Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources</a></li></ol></nav><p>In this post I describe how some cross-origin resources can be loaded without restriction, despite the same-origin policy. This can open your site up to vulnerabilities that leak sensitive data, as well as enable hotlinking to your resources. I show how the <code>Cross-Origin-Resource-Policy</code> can block these cross-origin requests, how each of the available header values behave, and how the header differs from CORS headers.</p> <ul><li><a href=\"#why-do-we-need-the-cross-origin-resource-policy-header-\">Why do we need the <code>Cross-Origin-Resource-Policy</code> header?</a></li> <li><a href=\"#locking-down-cross-origin-requests-with-cross-origin-resource-policy\">Locking down cross-origin requests with <code>Cross-Origin-Resource-Policy</code></a></li> <li><a href=\"#understanding-the-difference-between-same-origin-and-same-site\">Understanding the difference between same-origin and same-site</a></li> <li><a href=\"#testing-out-cross-origin-resource-policy\">Testing out <code>Cross-Origin-Resource-Policy</code></a></li> <li><a href=\"#corp-vs-cors-why-do-we-need-both-\">CORP vs CORS: why do we need both?</a></li> <li><a href=\"#the-relationship-with-cross-origin-embedder-policy\">The relationship with <code>Cross-Origin-Embedder-Policy</code></a></li></ul> <h2 id=\"why-do-we-need-the-cross-origin-resource-policy-header-\" class=\"heading-with-anchor\"><a href=\"#why-do-we-need-the-cross-origin-resource-policy-header-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why do we need the <code>Cross-Origin-Resource-Policy</code> header?</a></h2> <p>One of the first things I thought when first reading about the <code>Cross-Origin-Resource-Policy</code> was: why? We <em>already</em> have <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">the same-origin policy</a> that restricts cross-origin network access, right? Why do we need another header?</p> <p>Well, it turns out, that although the same-origin policy <a href=\"/understanding-security-headers-cross-origin-opener-policy-preventing-attacks-from-popups/#same-origin-policy-restrictions\">applies some pretty strict restrictions</a> when it comes to JavaScript APIs and requests using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\"><code>fetch()</code></a>, the restrictions are much looser when it comes to <em>embedded</em> resources.</p> <p>Embedded resources include things like scripts referenced in a <code>&lt;script&gt;</code> element and images linked in an <code>&lt;img&gt;</code> tag. <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#cross-origin_network_access\">MDN</a> provides a long list of resources which <em>can</em> be accessed cross-origin. In each of these cases, the same-origin policy provides no protection; the browser will happily load them from a cross-origin URL by default. That includes:</p> <ul><li>Images linked in <code>&lt;img&gt;</code> elements.</li> <li>Media linked in <code>&lt;video&gt;</code> and <code>&lt;audio&gt;</code> elements.</li> <li>JavaScript files referenced in <code>&lt;script src=\"…\"&gt;&lt;/script&gt;</code>.</li> <li>CSS files referenced in <code>&lt;link rel=\"stylesheet\" href=\"…\"&gt;</code> (as long as the stylesheet has the correct MIME type).</li></ul> <p>In each of these cases, the same-origin policy doesn't protect you by default on <em>either</em> side. That means if an attacker manages to add an <code>&lt;img&gt;</code> or <code>&lt;script&gt;</code> to your site, they can load links from any origin. The <code>Cross-Origin-Resource-Policy</code> doesn't directly help you in this scenario; you need a <code>Content-Security-Policy</code> or <code>Cross-Origin-Embedder-Policy</code> for that.</p> <p>From the other direction, there's nothing in the same-origin policy to stop people linking to images hosted on <em>your</em> site and displaying them in <em>their</em> site. This is often called <a href=\"https://simple.wikipedia.org/wiki/Hotlinking\">hotlinking</a> and is problematic as it makes it easier to plagiarise content, but also places the egress and server costs on <em>your</em> site, as the host, instead of the embedding site.</p> <p>As well as hotlinking, there's a class of vulnerabilities termed Cross Site Script Inclusion (XSSI), <a href=\"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/13-Testing_for_Cross_Site_Script_Inclusion\">in which a script from your site is embedded inside an attackers site</a>, which can leak sensitive data from your site to the attacker. That's on top of <a href=\"https://spectreattack.com/\">speculative side-channel attacks like Spectre</a> which rely on cross-origin access.</p> <p>The <code>Cross-Origin-Resource-Policy</code> header provides a way to protect you from these attacks and vulnerabilities.</p> <h2 id=\"locking-down-cross-origin-requests-with-cross-origin-resource-policy\" class=\"heading-with-anchor\"><a href=\"#locking-down-cross-origin-requests-with-cross-origin-resource-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Locking down cross-origin requests with <code>Cross-Origin-Resource-Policy</code></a></h2> <p>The <code>Cross-Origin-Resource-Policy</code> (CORP) header is a security header you can return in your responses that signals to the browser whether or not the resource is allowed to be embedded in a document.</p> <blockquote> <p>Note that you might be wondering why you need CORP when we already have <code>Cross-Origin-Resource-Sharing</code> (CORS). I go into more detail later, but the short-answer is that CORP only applies to <code>no-cors</code> scenarios i.e. when CORS <em>doesn't</em> apply.</p> </blockquote> <p>There are currently three possible values for the <code>Cross-Origin-Resource-Policy</code> header:</p> <ul><li><code>same-origin</code>—the browser should <strong>reject</strong> cross-origin responses that are returned with a header with this value.</li> <li><code>same-site</code>—the browser should <strong>reject</strong> cross-site responses that are returned with a header with this value. This is less restrictive than <code>same-origin</code>; I describe the difference between same-site and same-origin in the following section.</li> <li><code>cross-origin</code>—the browser should <strong>allow</strong> cross-origin responses. By default, this behaves similarly to when no CORP header is returned, but it also interacts with the <code>Cross-Origin-Embedder-Policy</code> header, as I describe later.</li></ul> <blockquote> <p>Note that <a href=\"https://crbug.com/1074261\">there's a bug in Chrome</a> where setting <code>Cross-Origin-Resource-Policy</code> can break PDF rendering, preventing you being able to read past the first page of some PDFs.</p> </blockquote> <p>I'll walk through some examples of these shortly, but first I'll clarify the difference between <code>same-origin</code> and <code>same-site</code>.</p> <h2 id=\"understanding-the-difference-between-same-origin-and-same-site\" class=\"heading-with-anchor\"><a href=\"#understanding-the-difference-between-same-origin-and-same-site\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Understanding the difference between same-origin and same-site</a></h2> <p>The CORP header can be set to either <code>same-site</code> or <code>same-origin</code>. Site and origin are two similar concepts, but it's important to understand the differences. Two URLs are considered to be \"same-<strong>site</strong>\" if they:</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li></ul> <p>They <em>don't</em> need to have the same <code>port</code> or <code>subdomain</code>.</p> <p>Two URLs are considered to be \"same-<strong>origin</strong>\" if they</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li> <li>Have the same <em>subdomain</em> i.e. <code>www.</code></li> <li>Have the same <em>port</em> (which may be implicit) i.e. port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code></li></ul> <p>So <code>same-origin</code> is more restrictive than <code>same-site</code>. Note that neither concept cares about the path, querystring, or fragment of the URL.</p> <p>If we use the URL <code>http://www.example.org</code> as an example and compare against variations, you can see the difference more clearly.</p> <table><thead><tr><th>URL</th><th>Description</th><th>same-site</th><th>same-origin</th></tr></thead><tbody><tr><td><code>http://www.example.org</code></td><td>Identical URL</td><td>✅</td><td>✅</td></tr><tr><td><code>http://www.example.org:80</code></td><td>Identical URL (implicit port)</td><td>✅</td><td>✅</td></tr><tr><td><code>http://www.example.org:5000</code></td><td>Different port</td><td>✅</td><td>❌</td></tr><tr><td><code>http://example.org</code></td><td>Different subdomain</td><td>✅</td><td>❌</td></tr><tr><td><code>http://sub.example.org</code></td><td>Different subdomain</td><td>✅</td><td>❌</td></tr><tr><td><code>https://www.example.org</code></td><td>Different scheme</td><td>❌</td><td>❌</td></tr><tr><td><code>http://www.example.evil</code></td><td>Different TLD</td><td>❌</td><td>❌</td></tr></tbody></table> <p>This becomes important when thinking about the <code>Cross-Origin-Resource-Policy</code> header. If you serve resources from a dedicated subdomain, <code>cdn.example.org</code> for example, and you want them to be embedded on <code>example.org</code> or <code>www.example.org</code>, then you will need to make sure the resources are returned with a <code>same-site</code> value. If, however, you only embed resources from the exact same origin, then using <code>same-origin</code> provides greater security.</p> <h2 id=\"testing-out-cross-origin-resource-policy\" class=\"heading-with-anchor\"><a href=\"#testing-out-cross-origin-resource-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing out <code>Cross-Origin-Resource-Policy</code></a></h2> <p>I've described the various possible values for <code>Cross-Origin-Resource-Policy</code>, but I find it helps to see the header in action.</p> <p>To test out the different policy values, I created two ASP.NET Core apps, and used my <a href=\"/major-updates-to-netescapades-aspnetcore-security-headers/#adding-security-headers-to-your-app\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> NuGet package to configure the <code>Cross-Origin-Resource-Policy</code> for each. The Index page loads an image using an <code>&lt;img&gt;</code> tag:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:5005/photo.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Unable to load image<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>By default, without any <code>Cross-Origin-Resource-Policy</code> value, the browser loads the image, even in cross-origin scenarios:</p> <p><img src=\"/content/images/2024/corp_none.webp\" alt=\"Without the CORP header, the image loads in cross-origin scenarios\"></p> <blockquote> <p>This is a cross-origin scenario because the root document is hosted at http://localhost:5011, while the embedded image is hosted on a site at a different port, http://localhost:5005.</p> </blockquote> <p>Similarly, if you use the <code>cross-origin</code> header value, the image still loads:</p> <p><img src=\"/content/images/2024/corp_cross.webp\" alt=\"Without the CORP header, the image loads in cross-origin scenarios\"></p> <p>If, however, the image returns a <code>Cross-Origin-Resource-Policy</code> header with the value <code>same-origin</code>, then the image is blocked:</p> <p><img src=\"/content/images/2024/corp_same.png\" alt=\"Without a same-origin CORP header, the image is blocked in cross-origin scenarios\"></p> <p>If we take a look at the dev tools, we can see that the request was made successfully, and returned a <code>200 OK</code> response, but the browser rejected the content, because it was a cross-origin request with a <code>same-origin</code> CORP header:</p> <p><img src=\"/content/images/2024/corp_same_devtools.png\" alt=\"Without a same-origin CORP header, the image is blocked in cross-origin scenarios\"></p> <p>The dev tools explanation of why the request failed is quite nice here, explaining why the request failed, and possible resolutions. In this scenario, we can switch the resource to use <code>same-site</code> (because the sites only differ in the port number, which is not part of <a href=\"#understanding-the-difference-between-same-origin-and-same-site\">the \"site\" definition</a>). With that change, the image can be embedded once again:</p> <p><img src=\"/content/images/2024/corp_same_site.webp\" alt=\"Without a same-site CORP header, the image is not blocked in same-site scenarios\"></p> <p>The possible values of the <code>Cross-Origin-Resource-Policy</code> header are pretty simple to follow, but it took me a long time to understand why we need the header at all when there are many other security headers that seem to do similar things.</p> <h2 id=\"corp-vs-cors-why-do-we-need-both-\" class=\"heading-with-anchor\"><a href=\"#corp-vs-cors-why-do-we-need-both-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">CORP vs CORS: why do we need both?</a></h2> <p>One of the common questions about the <code>Cross-Origin-Resource-Policy</code> header is: why do we need it, when we already have <code>Cross-Origin-Resource-Sharing</code> (CORS)?</p> <p>CORS is used to <em>allow</em> cross-origin requests that would otherwise be <em>blocked</em> by the existing same-origin policy protections. These requests are termed <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#cors\"><code>cors</code> mode</a> requests. Adding CORS headers to a site <em>reduces</em> its security by <em>allowing</em> more requests.</p> <p>In contrast, the CORP header <em>increases</em> security by <em>blocking</em> requests that would otherwise have been allowed <em>despite</em> the same-origin policy protections. It applies to a different set of requests than CORS, in that it only applies to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/mode#no-cors\"><code>no-cors</code> mode</a> requests.</p> <p>One difficulty is understanding <em>exactly</em> what constitutes a <code>no-cors</code> or <code>cors</code> request can be tricky. For example, in this post I've shown that resources loaded by <code>&lt;img&gt;</code> are typically <code>no-cors</code> requests. CORP applies to these requests, hence the behaviour I showed.</p> <p>However, you can turn an <code>&lt;img&gt;</code> link into a <code>cors</code> request by adding the <code>crossorigin</code> attribute to an <code>&lt;img&gt;</code> tag:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://localhost:5005/photo.jpg<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Unable to load image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">crossorigin</span><span class=\"token punctuation\">/&gt;</span></span>\n</code></pre> <p>With this small edition, the CORP header no longer applies. Even if the CORP header would have allowed the request, the addition of <code>crossorigin</code> turns the request into a <code>cors</code> request, which will be blocked by default:</p> <p><img src=\"/content/images/2024/corp_cors.png\" alt=\"By adding the crossorigin attribute to the img attribute means that CORS applies, not CORP\"></p> <p>To allow the request, you must add CORS headers, returning <code>Access-Control-Allow-Origin</code> of either <code>*</code> or the embedding origin (<code>http://localhost:5011</code>), as in the following image:</p> <p><img src=\"/content/images/2024/corp_cors_allowed.webp\" alt=\"By adding the crossorigin attribute to the img attribute you need to apply CORS headers instead\"></p> <p>As you can see in the above image, in this scenario the CORS header is all that's required; no CORP header is applied and it does not affect the loading of the image.</p> <h2 id=\"the-relationship-with-cross-origin-embedder-policy\" class=\"heading-with-anchor\"><a href=\"#the-relationship-with-cross-origin-embedder-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The relationship with <code>Cross-Origin-Embedder-Policy</code></a></h2> <p>Many security headers have a \"default\" value that is equivalent to not applying the header at all. In many cases the <code>cross-origin</code> value serves this purpose for the <code>Cross-Origin-Resource-Policy</code> header, in that it doesn't block cross-origin requests, which is the same behaviour your see if no header had been applied.</p> <p>The difference is that the <code>cross-origin</code> CORP value <em>explicitly</em> allows cross-origin requests (for <code>no-cors</code> mode requests). This is important when it comes to the <code>Cross-Origin-Embedder-Policy</code> (COEP) which differentiates between responses which have a CORP header and those that don't. The COEP header can be configured to <em>require</em> that a resource returns a CORP header. In the next post we'll look in more detail at the COEP header and how it interacts with both CORP and COEP.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described some scenarios where cross-origin resources can be loaded without restrictions, such as when images or scripts are embedded in a document using <code>&lt;img&gt;</code> or <code>&lt;script&gt;</code> tags. This can open your site to cross-site script inclusion (XSSI) attacks as well as enable others to hotlink to your resources.</p> <p>The <code>Cross-Origin-Resource-Policy</code> (CORP) header enables you to block the browser from loading these resources in cross-origin or cross-site scenarios. For maximum protection, apply a CORP header with the value <code>same-origin</code>. If you expect your resources to be loaded from a different origin, use the <code>same-site</code> value if possible.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/",
      "Title": "Cross-Origin-Opener-Policy: preventing attacks from popups: Understanding cross-origin security headers - Part 1",
      "PublishDate": "2024-11-19T09:00:00+00:00",
      "Summary": "In this post I describe the vulnerabilities in window.opener and window.open() and how to protect yourself with Cross-Origin-Opener-Policy",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/coop_banner.png\" /><nav><p>This is the one post in the series: <a href=\"/series/understanding-cross-origin-security-headers/\">Understanding cross-origin security headers</a>. </p> <ol class=\"list-none\"><li>Part 1 - Cross-Origin-Opener-Policy: preventing attacks from popups (this post) </li><li><a href=\"/understanding-security-headers-part-2-cross-origin-resource-policy-preventing-hotlinking/\">Part 2 - Cross-Origin-Resource-Policy: preventing hotlinking and XSSI attacks</a></li><li><a href=\"/understanding-security-headers-part-3-cross-origin-embedder-policy/\">Part 3 - Cross-Origin-Embedder-Policy: securing embedded resources</a></li></ol></nav><p>In this post I describe the same-origin policy and describe how, despite its protections, your site could leak information via side-channel vectors in the web platform APIs. I then describe how you can use the <code>Cross-Origin-Opener-Policy</code> (COOP) header to mitigate one such vulnerability that is available using the <code>window.open()</code> and <code>window.opener</code> APIs. I describe which values provide isolation in which scenarios, how they differ between opener and popup, and which values you should use depending on your requirements.</p> <ul><li><a href=\"#what-is-an-origin-\">What is an origin?</a></li> <li><a href=\"#same-origin-policy-restrictions\">Same-origin policy restrictions</a></li> <li><a href=\"#leaking-information-across-origins\">Leaking information across origins</a></li> <li><a href=\"#protecting-against-window-open-attacks-using-cross-origin-opener-policy\">Protecting against <code>window.open</code> attacks using <code>Cross-Origin-Opener-Policy</code></a></li> <li><a href=\"#testing-cross-origin-opener-policy-with-multiple-scenarios\">Testing <code>Cross-Origin-Opener-Policy</code> with multiple scenarios</a> <ul><li><a href=\"#the-impact-of-cross-origin-opener-policy-on-same-origin-communication\">The impact of <code>Cross-Origin-Opener-Policy</code> on same-origin communication</a></li> <li><a href=\"#the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\">The impact of <code>Cross-Origin-Opener-Policy</code> on cross-origin communication</a></li></ul> </li> <li><a href=\"#what-cross-origin-opener-policy-value-should-i-use-\">What <code>Cross-Origin-Opener-Policy</code> value should I use?</a></li> <li><a href=\"#rolling-out-cross-origin-opener-policy-safely-with-reporting\">Rolling-out <code>Cross-Origin-Opener-Policy</code> safely with reporting</a></li> <li><a href=\"#a-half-way-house-restrict-properties\">A half-way house: <code>restrict-properties</code></a></li> <li><a href=\"#enabling-additional-features-with-crossoriginisolated\">Enabling additional features with <code>crossOriginIsolated</code></a></li></ul> <h2 id=\"what-is-an-origin-\" class=\"heading-with-anchor\"><a href=\"#what-is-an-origin-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is an origin?</a></h2> <p>Before we can go any further, it's first important to clarify what an \"origin\" is from a browser's point of view. The origin of two URLs are considered to be the same if they</p> <ul><li>Have the same <em>scheme</em> i.e. <code>http</code> or <code>https</code></li> <li>Have the same <em>domain</em> i.e. <code>example.com</code>, <code>andrewlock.net</code> or <code>microsoft.com</code></li> <li>Have the same <em>subdomain</em> i.e. <code>www.</code></li> <li>Have the same <em>port</em> (which may be implicit) i.e. port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code></li></ul> <p>Note that the <em>path</em> of a URL, i.e. <code>/some/path</code> in the URL <code>http://www.example.org/some/path</code> is <em>not</em> part of the origin, neither is the querystring (<code>?key=value</code>) or a fragment (<code>#someid</code>).</p> <p>But essentially, everything before the path in the URL must match for two URLs to be considered \"same-origin\". The only subtlety to that statement is that the port may be implicit (port <code>80</code> for <code>http</code> and <code>443</code> for <code>https</code>) or explicit, and the sites are still considered same-origin.</p> <blockquote> <p>There is a similar, less-strict, concept called \"same-site\" that is used <a href=\"/understanding-samesite-cookies/\">by same-site cookies</a>, among other things.</p> </blockquote> <p>The table below compares URLs to the origin <code>http://www.example.org</code> so you can clearly see the difference between same-origin and cross-origin:</p> <table><thead><tr><th>URL</th><th>Description</th><th>same-origin</th></tr></thead><tbody><tr><td><code>http://www.example.org</code></td><td>Identical URL</td><td>✅</td></tr><tr><td><code>http://www.example.org:80</code></td><td>Identical URL (implicit port)</td><td>✅</td></tr><tr><td><code>http://www.example.org:5000</code></td><td>Different port</td><td>❌</td></tr><tr><td><code>http://example.org</code></td><td>Different subdomain</td><td>❌</td></tr><tr><td><code>http://sub.example.org</code></td><td>Different subdomain</td><td>❌</td></tr><tr><td><code>https://www.example.org</code></td><td>Different scheme</td><td>❌</td></tr><tr><td><code>http://www.example.evil</code></td><td>Different TLD</td><td>❌</td></tr></tbody></table> <p>When two sites have the same origin, they are termed \"same-origin\"; when they have different origins, they are \"cross-origin\".</p> <h2 id=\"same-origin-policy-restrictions\" class=\"heading-with-anchor\"><a href=\"#same-origin-policy-restrictions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Same-origin policy restrictions</a></h2> <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\">same-origin policy</a> is a key security mechanism used by browsers to restrict how resources loaded from one origin can interact with resources loaded from another origin.</p> <p>One of the most common interactions people first run into is when you're <em>sending</em> cross-origin requests, as many of these are blocked unless you enable <a href=\"/making-authenticated-cross-origin-requests-with-aspnetcore-identity/\">Cross Origin Resource Sharing (CORS)</a>. These restrictions come into play when you're making <code>fetch()</code> requests in JavaScript for example.</p> <blockquote> <p>Most of the time, developers interacting with cross-origin documents are trying to do completely legitimate things, and the same-origin policy can seem very restrictive. But the same-origin policy is vital for isolating your site from malicious sites. Without it, your website would be extremely vulnerable!</p> </blockquote> <p>However, there are also cross-origin restrictions at the JavaScript API-level that don't involve <code>fetch()</code>. On the face of it, that might sound a bit confusing—how can you interact with a <em>different</em> document using JavaScript without making requests? There are several APIs that allow you to do this, which generally provide a reference to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\">the <code>Window</code> object</a> for a different document. For example:</p> <ul><li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow\"><code>iframe.contentWindow</code></a> returns the <code>Window</code> object of an iFrame.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/parent\"><code>window.parent</code></a> returns the <code>Window</code> object of the <em>parent</em> window (when called from an iFrame for example).</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/open\"><code>window.open()</code></a> allows you to open a new window, whether in a popup or a new tab, and returns a reference to the <code>Window</code> object of the opened document.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/opener\"><code>window.opener</code></a> provides a reference to the <code>Window</code> object of the document that opened this one. This is available when the current document was opened via a <code>window.open()</code> call, or by clicking a link that has a <code>target</code> attribute.</li></ul> <p>When the documents are same-origin, then you have direct access to the other <code>Window</code> but in cross-origin scenarios, <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#cross-origin-objects\">you can only access a limited number of properties and methods</a>, for example:</p> <ul><li><code>window.close()</code></li> <li><code>window.focus()</code></li> <li><code>window.postMessage()</code></li> <li><code>window.length</code></li> <li><code>window.closed</code> (read-only)</li> <li><code>window.opener</code> (read-only)</li> <li><code>window.frames</code> (read-only)</li></ul> <p>The exact available properties and methods vary by browser, but you can find a more complete list <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#window\">here</a>. Nevertheless, even though cross-origin interactions are limited to this small subset, there are attacks that can use these APIs to leak information across contexts.</p> <h2 id=\"leaking-information-across-origins\" class=\"heading-with-anchor\"><a href=\"#leaking-information-across-origins\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Leaking information across origins</a></h2> <p>One class of vulnerabilities, often called cross-site leaks (aka <a href=\"https://xsleaks.dev/\">XS-Leaks</a>), <a href=\"https://owasp.org/www-pdf-archive/Side_Channel_Vulnerabilities.pdf\">attack the side-channels</a> built into the web platform to infer information about other sites. There have been some high-profile attacks, such as <a href=\"https://spectreattack.com/\">Meltdown and Spectre</a> which leverage hardware bugs, but there are also leaks that come directly from the browser APIs.</p> <p><a href=\"https://xsleaks.dev/docs/attacks/frame-counting/\">One source of information</a> comes via the <code>window.length</code> property which returns the number of frames (<code>iframe</code>s) that are in the document. This seems like a very benign property, but if this number changes based on properties of the user, then that's a source of information that could be abused by an attacker. As a concrete example, Facebook patched such a bug that could be used to leak all sorts of information about the user (<a href=\"https://www.imperva.com/blog/facebook-privacy-bug/\">as described in this post</a>).</p> <p>There are many other possible sources of information leaks (described in detail at <a href=\"https://xsleaks.dev/\">https://xsleaks.dev/</a>), but it's clear that even having mostly-readonly access to a cross-origin document is enough to expose yourself to vulnerabilities. To work around this, browsers introduced the <code>Cross-Origin-Opener-Policy</code> header, to give you additional restrictions.</p> <h2 id=\"protecting-against-window-open-attacks-using-cross-origin-opener-policy\" class=\"heading-with-anchor\"><a href=\"#protecting-against-window-open-attacks-using-cross-origin-opener-policy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Protecting against <code>window.open</code> attacks using <code>Cross-Origin-Opener-Policy</code></a></h2> <p><code>Cross-Origin-Opener-Policy</code> (COOP) is <a href=\"https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/#what-are-security-headers-\">a security header</a> that you can return in your HTTP responses, which enables additional protections for your site when you call <code>window.open</code>, or when a <em>different</em> document calls <code>window.open</code> to open <em>your</em> site.</p> <p>The <code>Cross-Origin-Opener-Policy</code> (COOP) header currently has <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy\">three possible values</a>:</p> <ul><li><code>unsafe-none</code>—the default, unsafe value.</li> <li><code>same-origin</code>—the most safe value</li> <li><code>same-origin-allow-popups</code>—a middle-ground, which provides some protections.</li></ul> <p>I'll describe how each of these headers impact the behaviour of the JavaScript APIs shortly, but a word of warning, the language can get confusing, as we're describing the available interactions between two different sites:</p> <ul><li>The <em>opener</em>—this is the site that called <code>window.open()</code>. This API returns a <code>Window</code> object which references the <em>opened</em> site</li> <li>The <em>opened</em>—this is the site that was opened. It can reference the <code>Window</code> object of the <em>opener</em> using the <code>window.opener</code> property.</li></ul> <p>Both the <em>opener</em> and <em>opened</em> sites could set different values for COOP, and the combination of the two controls whether the two documents are in the same <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Browsing_context\">browsing context</a> or not. When documents are in <em>different</em> browsing contexts, then</p> <ul><li><code>window.opener</code> in the <em>opened</em> document returns <code>null</code>, instead of the <code>Window</code> reference to the <em>opener</em>.</li> <li>In the <em>opener</em>, the value returned by <code>window.open()</code> returns \"default\" values for some of the properties, such as <code>window.closed</code></li></ul> <p>Not that these restrictions are in <em>addition</em> to the same-origin restrictions that also apply.</p> <p>There's a lot of moving pieces here, so the follow sections describe various scenarios.</p> <h2 id=\"testing-cross-origin-opener-policy-with-multiple-scenarios\" class=\"heading-with-anchor\"><a href=\"#testing-cross-origin-opener-policy-with-multiple-scenarios\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Testing <code>Cross-Origin-Opener-Policy</code> with multiple scenarios</a></h2> <p>To test out the impact of the COOP header, I created two simple ASP.NET Core web apps which serve HTML pages.</p> <ul><li>Web app 1, hosted at <code>http://localhost:5011</code>, serves an Index.html document which contains a single button, which runs <code>window.open()</code> to open a popup in web app 2.</li> <li>Web app 2, hosted at <code>http://localhost:5005</code>, serves a Popup.html document, which attempts to read <code>window.opener</code>.</li></ul> <p>The apps are nothing fancy, just basic HTML that shows the value of the <code>Cross-Origin-Opener-Policy</code> used to serve the page and a button to click:</p> <p><img src=\"/content/images/2024/coop_cross_initial.png\" alt=\"The initial opener page\"></p> <p>Each of the apps runs a small amount of JavaScript to test the isolation of the site. In the <em>opener</em>, web app 1 reads the value of <code>window.closed</code>; in the isolated scenario, this will <em>always</em> return <code>true</code>, whereas it will return the \"correct\" value when the documents are in a shared context:</p> <pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Add a button click handler</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open_btn'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Open the popup in a new window</span>\n        <span class=\"token keyword\">const</span> opened <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5005/popup'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'_blank'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'popup=true'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Check whether we have the correct value for opened.closed</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opener_ele'</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Opened window - reference object &lt;code&gt;opened.closed&lt;/code&gt; is '</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>opened<span class=\"token punctuation\">.</span>closed\n                <span class=\"token operator\">?</span> <span class=\"token string\">'&lt;span style=\"color:red\"&gt;TRUE&lt;/span&gt;'</span>\n                <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;span style=\"color:green\"&gt;FALSE&lt;/span&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>On the popup (<em>opened</em>) side, we check the value of <code>window.opener</code>. In the isolated context, this will be <code>null</code>, while in the shared context scenario it will be the standard <code>Window</code> object:</p> <pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'opener_ele'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;code&gt;window.opener&lt;/code&gt; object is '</span> <span class=\"token operator\">+</span>\n        <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>opener\n            <span class=\"token operator\">?</span> <span class=\"token string\">'&lt;span style=\"color:green\"&gt;AVAILABLE&lt;/span&gt;'</span>\n            <span class=\"token operator\">:</span> <span class=\"token string\">'&lt;span style=\"color:red\"&gt;UNAVAILABLE&lt;/span&gt;'</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>For each app I used my <a href=\"/major-updates-to-netescapades-aspnetcore-security-headers/#adding-security-headers-to-your-app\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> NuGet package to configure the <code>Cross-Origin-Opener-Policy</code> for each web app with one of the three possible values. In the following sections we look at how the header impacts the behaviour of the apps.</p> <h3 id=\"the-impact-of-cross-origin-opener-policy-on-same-origin-communication\" class=\"heading-with-anchor\"><a href=\"#the-impact-of-cross-origin-opener-policy-on-same-origin-communication\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The impact of <code>Cross-Origin-Opener-Policy</code> on same-origin communication</a></h3> <p>We'll start with the easy case, when both the opener and opened documents have the same origin, both running on <code>http://localhost:5011</code>. In this scenario, there are <em>no</em> same-origin restrictions, <em>regardless</em> of what <code>Cross-Origin-Opener-Policy</code> you apply to either the opener <em>or</em> the popup.</p> <p>In this scenario, <code>window.closed</code> returns the correct value in the opener (<code>false</code>) and the <code>window.opener</code> value returns the \"real\" <code>Window</code> object to the popup. This happens even with the most-restrictive header value of <code>same-origin</code>:</p> <p><img src=\"/content/images/2024/coop_same_same_origin.png\" alt=\"The initial opener page\"></p> <p>Each page can interact completely unrestricted with the other, because they're both on the same origin. Where things get interesting is when the pages are <em>cross</em> origin.</p> <h3 id=\"the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\" class=\"heading-with-anchor\"><a href=\"#the-impact-of-cross-origin-opener-policy-on-cross-origin-communication\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The impact of <code>Cross-Origin-Opener-Policy</code> on cross-origin communication</a></h3> <p>In this scenario, a website opens a page on a <em>different</em> origin.</p> <p>We'll again start with the easiest scenario, where both sites are using <code>Cross-Origin-Opener-Policy: unsafe-none</code> (or, more likely, not returning the header at all). In this scenario, there are no additional restrictions over the normal same-site restrictions. That means:</p> <ul><li>✔ <code>window.opener</code> is available in the popup</li> <li>✔ <code>opened.closed</code> reflects the correct value in the opener document</li></ul> <p><img src=\"/content/images/2024/coop_cross_unsafe_on_both.png\" alt=\"In cross-origin scenarios where both have unsafe-none, there are no additional restrictions\"></p> <p>This scenario is the least secure one. Remember, if there's a malicious site, it could be <em>either</em> the site doing the opening, or it could be the site being opened in the popup (if your site is tricked into opening it). So although there are still <a href=\"/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/#same-origin-policy-restrictions\">same-origin restrictions for accessing the other site's <code>Window</code> object</a>, the side channel vulnerabilities are unmitigated.</p> <p>At the other end of the scale, if <em>either</em> the opener <em>or</em> the opened/popup document return <code>Cross-Origin-Opener-Policy: same-origin</code>, the result is the same:</p> <ul><li>❌ <code>window.opener</code> is <code>null</code> in the popup</li> <li>❌ <code>opened.closed</code> always returns <code>true</code> in the opener document</li></ul> <p>The image below shows this in action: the <code>opened.closed</code> property returns <code>true</code> even though the popup is clearly open, while in the popup <code>window.opener</code> is <code>null</code>:</p> <p><img src=\"/content/images/2024/coop_cross_same_origin_on_both.png\" alt=\"In cross-origin scenarios where both have unsafe-none, there are no additional restrictions\"></p> <p>Not that you get the same behaviour when <em>either</em> of the sites uses <code>same-origin</code>, <em>regardless</em> of what the other site uses. Whether or not the sites share a browsing context is a binary decision, so if either of the <em>sites</em> opts out of sharing a context, the result is the same.</p> <p>The final option to consider is <code>same-origin-allow-popups</code>, which is more subtle:</p> <ul><li>When returned by the opened/popup site, it behaves exactly like <code>same-origin</code>, i.e. isolated browsing contexts.</li> <li>When returned by the opener, then <em>if</em> the popup returns <code>unsafe-none</code> (or doesn't return a COOP header), they <em>will</em> share browsing context. If the popup returns anything else, then they're isolated.</li></ul> <p>So in the following, the opener has <code>same-origin-allow-popups</code> while the popup has <code>unsafe-none</code>, and you can see they are sharing a context, as the values are correct and available:</p> <p><img src=\"/content/images/2024/coop_cross_allow_popups_unsafe.png\" alt=\"If the opener has same-origin-allow-popups and the popup has unsafe-none, they share a browsing context\"></p> <p>Whereas in the following, the popup does <em>not</em> have <code>unsafe-none</code> (instead it has <code>same-origin-allow-popups</code>), so they don't share a browsing context, and the objects are blocked:</p> <p><img src=\"/content/images/2024/coop_cross_allow_popups_on_both.png\" alt=\"If the opener has same-origin-allow-popups but the popup does not have unsafe-none, they don't share a browsing context\"></p> <p>As a reminder, if the <em>popup</em> has <code>same-origin-allow-popups</code>, this is treated the same as <code>same-origin</code>, so even if the opener has <code>unsafe-none</code>, they do not share a browsing context</p> <p><img src=\"/content/images/2024/coop_cross_unsafe_allow_popups.png\" alt=\"If the opener has unsafe-none and the popup has same-origin-allow-popups, they don't share a browsing context\"></p> <p>I'm not going to lie, I found it all quite confusing trying to understand the matrix of possibilities. However, if you consider just the cross-origin scnario, you can narrow the options down to a 3×3 table of options. In the table below, \"Shared ✔\" means that the <code>window.opener</code> and <code>opened</code> values are available, because the sites share a browsing context. In the \"Isolated ❌\" case, the sites are isolated.</p> <figure> <table class=\"align-middle text-center\"><thead><tr><th></th><th></th><th colspan=\"3\">Opened <code>Cross-Origin-Opener-Policy</code></th></tr><tr><th></th><th></th><th><code>unsafe-none</code> / missing</th><th><code>same-origin-allow-popups</code></th><th><code>same-origin</code></th></tr></thead><tbody><tr><th rowspan=\"3\">Opener<br>COOP</th><td><code>unsafe-none</code> / missing</td><td>Shared ✔</td><td>Isolated ❌</td><td>Isolated ❌</td></tr><tr><td><code>same-origin-allow-popups</code></td><td>Shared ✔</td><td>Isolated ❌</td><td>Isolated ❌</td></tr><tr><td><code>same-origin</code></td><td>Isolated ❌</td><td>Isolated ❌</td><td>Isolated ❌</td></tr></tbody></table><figcaption>The possible states of the browsing context when using the <code>Cross-Origin-Opener-Policy</code> header in a cross-origin scenario </figcaption></figure> <h2 id=\"what-cross-origin-opener-policy-value-should-i-use-\" class=\"heading-with-anchor\"><a href=\"#what-cross-origin-opener-policy-value-should-i-use-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What <code>Cross-Origin-Opener-Policy</code> value should I use?</a></h2> <p>So if you've come this far, maybe you're looking for some advice. Which <code>Cross-Origin-Opener-Policy</code> header value should you use?</p> <p>Luckily, this is relatively easy: if you want to be the most secure, your should use <code>same-origin</code>. This protects you from malicious popups in case you're tricked into calling <code>window.open</code>, but it also protects you if a malicious site opens <em>your</em> site in a popup.</p> <p>Unfortunately, things might not be that simple. Maybe you interact with a payment or authentication site that requires opening in a popup and retrieving a token. If that's the case, you likely won't be able to use <code>same-origin</code>. For this scenario you can use <code>same-origin-allow-popups</code> (and the target authentication/payment site must omit the COOP header or alternatively use <code>unsafe-none</code>).</p> <p>If you do choose to use <code>same-origin-allow-popups</code> for your site then you'll still be protected if a malicious site opens your site in a popup, but you <em>won't</em> be protected from sites that <em>you</em> open with <code>window.open</code>.</p> <h2 id=\"rolling-out-cross-origin-opener-policy-safely-with-reporting\" class=\"heading-with-anchor\"><a href=\"#rolling-out-cross-origin-opener-policy-safely-with-reporting\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Rolling-out <code>Cross-Origin-Opener-Policy</code> safely with reporting</a></h2> <p>Given that returning the <code>Cross-Origin-Opener-Policy</code> header has the potential to break both the opened and opener sites, you obviously need to be careful when rolling it out. It's strongly recommended that you use the <a href=\"https://web.dev/reporting-api\">Reporting API</a> built into browsers to identify any issues in production.</p> <p>Before taking the plunge, you should also consider running the <code>Cross-Origin-Opener-Policy</code> header in \"report only\" mode, by using the <code>Cross-Origin-Opener-Policy-Report-Only</code> header instead. This header \"simulates\" the policy, and sends any violations via the reporting API. This gives you a chance to adjust your site and re-evaluate, before enforcing the policy for real.</p> <h2 id=\"a-half-way-house-restrict-properties\" class=\"heading-with-anchor\"><a href=\"#a-half-way-house-restrict-properties\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">A half-way house: <code>restrict-properties</code></a></h2> <p>Throughout this post I've said there's only three values but Chrome actually <a href=\"https://developer.chrome.com/blog/coop-restrict-properties\">briefly implemented a fourth value</a>, <code>restrict-properties</code>. This was only available for companies <a href=\"https://developer.chrome.com/origintrials/#/view_trial/1827335548805578753\">signing up for a trial</a>, and was explicitly meant to handle the payment/authentication scenario I described previously, but relaxing restrictions from the <em>popup</em>'s point of view. I don't go into more detail here, as it never made it out of the experimental phase as far as I can tell.</p> <h2 id=\"enabling-additional-features-with-crossoriginisolated\" class=\"heading-with-anchor\"><a href=\"#enabling-additional-features-with-crossoriginisolated\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling additional features with <code>crossOriginIsolated</code></a></h2> <p>After the <a href=\"https://spectreattack.com/\">Meltdown and Spectre</a> vulnerabilities were revealed, browser makers removed some of the features they relied on. These were later re-introduced, but were guarded so that they could only be introduced in a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/crossOriginIsolated\">\"cross-origin isolated\" state</a> (exposed as <code>window.crossOriginIsolated</code>).</p> <p>To be in a cross-origin isolated state, your site must:</p> <ul><li>Return the <code>Cross-Origin-Opener-Policy</code> header with the value <code>same-origin</code>.</li> <li>Return the <code>Cross-Origin-Embedder-Policy</code> header with the value <code>require-corp</code> or <code>credentialless</code>. I'll talk more about this header in a separate post.</li></ul> <p>If you meet these requirements then you unlock some additional APIs:</p> <ul><li>You can send <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> via <code>Window.postMessage()</code> calls.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\"><code>Performance.now()</code></a> gives better precision.</li> <li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/measureUserAgentSpecificMemory\"><code>Performance.measureUserAgentSpecificMemory()</code></a> is available.</li></ul> <p>So that's yet another reason to use <code>Cross-Origin-Opener-Policy: same origin</code> for your sites if you can!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed the same-origin policy and how, despite its restrictions, your site could leak information via side-channel vectors in the web platform APIs. I then described how you can use <code>Cross-Origin-Opener-Policy</code> (COOP) to mitigate vulnerabilities that are associated with the <code>window.open()</code> and <code>window.opener</code> APIs.</p> <p>I described which header values provide isolation in which scenarios, how the behaviour differs between opener and popup, and which values you should use based on your requirements. Finally, I described the cross-origin isolated state which enables additional APIs and requires that you use the <code>same-origin</code> value.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/understanding-security-headers-part-1-cross-origin-opener-policy-preventing-attacks-from-popups/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/",
      "Title": "Recent updates for NetEscapades.EnumGenerators: interceptors!",
      "PublishDate": "2024-11-05T09:00:00+00:00",
      "Summary": "In this post I describe the experimental interceptor support in NetEscapades.EnumGenerators that replaces ToString() calls with ToStringFast() automatically",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/enumgenerators_banner.webp\" /><p>In this post I describe a recent update to the <a href=\"https://www.nuget.org/packages/NetEscapades.EnumGenerators/\">NetEscapades.EnumGenerators</a> package. The big new feature introduced in <code>1.0.0-beta11</code> is experimental support for interceptors. Interceptors allow you to replace one method call with a completely different method.</p> <blockquote> <p>This post doesn't discuss <em>how</em> I added support for interceptors; I will describe that in a future post. This post discuss how the feature works in the NuGet package, and how it works in general.</p> </blockquote> <p>I first describe why I created this package, show how to add it to your own project, how to use the basic functionality, and provide some basic benchmarks. Finally I show off the new interceptor feature and discuss what you need to do to enable it.</p> <ul><li><a href=\"#enums-are-often-surprisingly-slow\">Enums are often surprisingly slow</a></li> <li><a href=\"#adding-netescapades-enumgenerators-to-your-project\">Adding NetEscapades.EnumGenerators to your project</a></li> <li><a href=\"#adding-support-for-interceptors\">Adding support for interceptors</a> <ul><li><a href=\"#what-are-interceptors-\">What are interceptors?</a></li> <li><a href=\"#why-would-interceptors-be-useful-for-netescapades-enumgenerators-\">Why would interceptors be useful for NetEscapades.EnumGenerators?</a></li> <li><a href=\"#enabling-interceptor-support-for-netescapades-enumgenerators\">Enabling interceptor support for NetEscapades.EnumGenerators</a></li></ul> </li> <li><a href=\"#disabling-interception-for-specific-enums\">Disabling interception for specific enums</a></li> <li><a href=\"#intercepting-enums-defined-in-other-projects\">Intercepting enums defined in other projects</a></li> <li><a href=\"#caveats-this-won-t-work-everywhere-\">Caveats: this won't work everywhere!</a></li> <li><a href=\"#future-ideas\">Future ideas</a></li></ul> <h2 id=\"enums-are-often-surprisingly-slow\" class=\"heading-with-anchor\"><a href=\"#enums-are-often-surprisingly-slow\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enums are often surprisingly slow</a></h2> <p><a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">NetEscapades.EnumGenerators</a> was one of the first source generators I created using <a href=\"/exploring-dotnet-6-part-9-source-generator-updates-incremental-generators/\">the incremental generator support introduced in .NET 6</a>. I chose to create this package to work around an annoying characteristic of working with enums: some operations are surprisingly slow.</p> <blockquote> <p>Note that while this has <em>historically</em> been true, this fact won't necessarily remain true forever. In fact, .NET 8 provided a bunch of improvements to enum handling in the runtime.</p> </blockquote> <p>As an example, let's say you have the following enum:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>At some point, you want to print the name of a <code>Color</code> variable, so you create this helper method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>While this <em>looks</em> like it should be fast, it's really not. <em>NetEscapades.EnumGenerators</em> works by automatically generating an implementation that <em>is</em> fast. It generates a <code>ToStringFast()</code> method that looks something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColourExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> colour <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            Colour<span class=\"token punctuation\">.</span>Red <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            Colour<span class=\"token punctuation\">.</span>Blue <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Colour<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This simple switch statement checks for each of the known values of <code>Colour</code> and uses <code>nameof</code> to return the textual representation of the <code>enum</code>. If it's an unknown value, then it falls back to the built-in <code>ToString()</code> implementation to ensure correct handling of unknown values (for example this is valid C#: <code>PrintColour((Colour)123)</code>).</p> <p>If we compare these two implementations using <a href=\"https://benchmarkdotnet.org/\">BenchmarkDotNet</a> for a known colour, you can see how much faster <code>ToStringFast()</code> implementation is:</p> <pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token key attr-name\">BenchmarkDotNet</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">v0.13.1, OS=Windows 10.0.19042.1348 (20H2/October2020Update)</span>\nIntel Core i7-7500U CPU 2.70GHz (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\n  DefaultJob : .NET Framework 4.8 (4.8.4420.0), X64 RyuJIT\n<span class=\"token key attr-name\">.NET SDK</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6.0.100</span>\n  DefaultJob : .NET 6.0.0 (6.0.21.52210), X64 RyuJIT\n</code></pre> <table><thead><tr><th>Method</th><th>FX</th><th style=\"text-align:right\">Mean</th><th style=\"text-align:right\">Error</th><th style=\"text-align:right\">StdDev</th><th style=\"text-align:right\">Ratio</th><th style=\"text-align:right\">Gen 0</th><th style=\"text-align:right\">Allocated</th></tr></thead><tbody><tr><td>ToString</td><td><code>net48</code></td><td style=\"text-align:right\">578.276 ns</td><td style=\"text-align:right\">3.3109 ns</td><td style=\"text-align:right\">3.0970 ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0458</td><td style=\"text-align:right\">96 B</td></tr><tr><td>ToStringFast</td><td><code>net48</code></td><td style=\"text-align:right\">3.091 ns</td><td style=\"text-align:right\">0.0567 ns</td><td style=\"text-align:right\">0.0443 ns</td><td style=\"text-align:right\">0.005</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr><tr><td>ToString</td><td><code>net6.0</code></td><td style=\"text-align:right\">17.985 ns</td><td style=\"text-align:right\">0.1230 ns</td><td style=\"text-align:right\">0.1151 ns</td><td style=\"text-align:right\">1.000</td><td style=\"text-align:right\">0.0115</td><td style=\"text-align:right\">24 B</td></tr><tr><td>ToStringFast</td><td><code>net6.0</code></td><td style=\"text-align:right\">0.121 ns</td><td style=\"text-align:right\">0.0225 ns</td><td style=\"text-align:right\">0.0199 ns</td><td style=\"text-align:right\">0.007</td><td style=\"text-align:right\">-</td><td style=\"text-align:right\">-</td></tr></tbody></table> <p>These numbers are a little old now, but the overall pattern hasn't changed: .NET is <em>way</em> faster than .NET Framework, and the <code>ToStringFast()</code> implementation is way faster than the built-in <code>ToString()</code>. Obviously your mileage may vary and the results will depend on the specific enum you're using, but in general, using the source generator should give you a free performance boost.</p> <h2 id=\"adding-netescapades-enumgenerators-to-your-project\" class=\"heading-with-anchor\"><a href=\"#adding-netescapades-enumgenerators-to-your-project\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding NetEscapades.EnumGenerators to your project</a></h2> <p>You can install <em>NetEscapades.EnumGenerators</em> into your own projects using</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.EnumGenerators <span class=\"token parameter variable\">--prerelease</span>\n</code></pre> <blockquote> <p>Note that this NuGet package uses incremental generator APIs introduced in the .NET 7 SDK incremental generator APIs, so you must be using at least the .NET 7 SDK, although you can still <em>target</em> earlier frameworks. If you wish to use the interceptors feature described later in the post, you must use the .NET 8.0.4xx SDK at a minimum.</p> </blockquote> <p>This adds a <code>&lt;PackageReference&gt;</code> to your project. You can additionally mark the package as <code>PrivateAssets=\"all\"</code> and <code>ExcludeAssets=\"runtime\"</code>.</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add the package reference--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-beta11<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ExcludeAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>runtime<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <blockquote> <p>Setting <code>PrivateAssets=\"all\"</code> means any projects referencing this one won't get a reference to the <em>NetEscapades.EnumGenerators</em> package. Setting <code>ExcludeAssets=\"runtime\"</code> ensures the <em>NetEscapades.EnumGenerators.Attributes.dll</em> file is not copied to your build output (it is not required at runtime).</p> </blockquote> <p>Adding the package to your project automatically adds a marker attribute, <code>[EnumExtensions]</code>, to your project. To use the generator, add the <code>[EnumExtensions]</code> attribute to an <code>enum</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This generates various extension methods for your <code>enum</code>, including <code>ToStringFast()</code>. You can use this method anywhere you would ordinarily call <code>ToString()</code> on the enum, and benefit from the performance improvement for known values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You can view the definition of <code>ToStringFast()</code> by navigating to it's definition:</p> <p><img src=\"/content/images/2022/enumgenerators.png\" alt=\"The ToStringFast definition for Colour\"></p> <p>The source generator generates many different extension methods, as described in the project's README. It also adds support for the <code>[DisplayName]</code> and other attributes that enable fast-tracking other common behaviours.</p> <p>What's more, you can even generate these performance-related extensions for <em>external</em> enums, such as those defined in the runtime or in other NuGet packages. For this you need the generic <code>[EnumExtensions&lt;T&gt;]</code> assembly attribute:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>EnumGenerators</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">EnumExtensions&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>After adding the above attribute to a project, the generator produces helper methods similar to the following</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeKindExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToStringFast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">DateTimeKind</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">switch</span>\n        <span class=\"token punctuation\">{</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Local <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Local<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Unspecified <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Unspecified<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            DateTimeKind<span class=\"token punctuation\">.</span>Utc <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>DateTimeKind<span class=\"token punctuation\">.</span>Utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            _ <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>All of this functionality has been available since <code>1.0.0-beta09</code>, but there's a big new feature that was added to the latest version <code>1.0.0-beta11</code>: interceptors.</p> <h2 id=\"adding-support-for-interceptors\" class=\"heading-with-anchor\"><a href=\"#adding-support-for-interceptors\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding support for interceptors</a></h2> <p>Version <code>1.0.0-beta11</code> of <em>NetEscapades.EnumGenerators</em> adds support for interceptors. In this section I'll give a brief overview of interceptors, why you might want them, and how to enable them in your own project.</p> <h3 id=\"what-are-interceptors-\" class=\"heading-with-anchor\"><a href=\"#what-are-interceptors-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are interceptors?</a></h3> <p>Interceptors were an experimental feature originally released in C#12 (with .NET 8) that allow you to replace (or \"intercept\") a method call in your application with a different method. When your app is compiled, the compiler automatically \"swaps out\" the call to the original method with your substitute.</p> <blockquote> <p>If you want to learn more about interceptors I <a href=\"/exploring-the-dotnet-8-preview-changing-method-calls-with-interceptors/\">wrote about them in more detail over a year ago</a>, when I explored how the ASP.NET Core framework is using them for minimal APIs.</p> </blockquote> <p>An obvious question here is why would you want to do that. Why not just call the substitute method directly?</p> <p>The <em>main</em> motivation is ahead-of-time compilation (AOT). Interceptors aren't specifically for AOT, but they are clearly designed with AOT in mind. By using interceptors you could take code which previously wasn't AOT friendly, and replace it with a source-generated version.</p> <p>Customer's don't need to change their code, the source generator just automatically \"upgrades\" the method calls to use the source generated versions. The minimal API and configuration binder AOT support built-in to ASP.NET Core for .NET 8+ uses interceptors to replace the reflection-dependent AOT-unfriendly code with source-generated AOT-friendly equivalents.</p> <blockquote> <p>Another great example from the community is the <a href=\"https://github.com/DapperLib/DapperAOT\">DapperAOT project</a>, which uses a source generator to make <a href=\"https://github.com/DapperLib/Dapper\">the Dapper micro-ORM</a> AOT-compatible.</p> </blockquote> <p>The interceptor API has evolved a little in recent versions of the Roslyn API, but it's still a preview feature as best I can tell. Nevertheless, it presents an interesting possibility for NetEscapades.EnumGenerators!</p> <h3 id=\"why-would-interceptors-be-useful-for-netescapades-enumgenerators-\" class=\"heading-with-anchor\"><a href=\"#why-would-interceptors-be-useful-for-netescapades-enumgenerators-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why would interceptors be useful for NetEscapades.EnumGenerators?</a></h3> <p>One of the \"problems\" of <em>NetEscapades.EnumGenerators</em> is that <code>ToStringFast()</code> is a bit of an ugly name 😅 And you always have to remember to explicitly call the extension instead of the slow built-in <code>ToString()</code> method. Every now and again I get an issue raised asking why I can't \"just\" replace <code>ToString()</code> directly. Unfortunately, there's not been a way to do that in C#…until now!</p> <p>I originally explored the possibility of using interceptors in <em>NetEscapades.EnumGenerators</em> about a year ago, when .NET 8 was first released. <a href=\"/a-failed-experiment-with-interceptors-in-csharp-12-and-dotnet-8/\">You can read all about it in detail here</a>, including <em>why</em> it didn't work, but the short answer is that <a href=\"https://github.com/dotnet/roslyn/issues/70841\">there was a bug in the compiler</a> which <a href=\"https://github.com/dotnet/roslyn/pull/71655\">was fixed</a> in version 8.0.300 of the .NET SDK (which shipped with Visual Studio 17.10).</p> <p>With the fix in place, this opened up the possibility of adding an interceptor to <em>NetEscapades.EnumGenerators</em>. The benefit is that if you enable the interceptors for your project, you don't need to call <code>ToStringFast()</code> in your application; the interceptor will kick in and replace all the <code>ToString()</code> calls on your <code>[EnumExtensions]</code> with calls to <code>ToStringFast()</code>!</p> <p>So once you enable interceptors, this code suddenly gets faster!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">PrintColour</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Colour</span> colour<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The interceptor replaces this       👇 with ToStringFast()</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You chose \"</span><span class=\"token operator\">+</span> colour<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You chose Red</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The end result is the same, but your code suddenly gets faster without you having to do anything!</p> <p>Currently only <code>ToString()</code> and <code>HasFlag(flag)</code> (for <code>[Flags]</code> enums) are supported by the interceptor, and there are also some other caveats as described later, but for the most part, if you're using a supported version of the .NET SDK, it Just Works™.</p> <h3 id=\"enabling-interceptor-support-for-netescapades-enumgenerators\" class=\"heading-with-anchor\"><a href=\"#enabling-interceptor-support-for-netescapades-enumgenerators\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Enabling interceptor support for NetEscapades.EnumGenerators</a></h3> <p>Interceptor support was introduced as part of the <em>NetEscapades.EnumGenerators</em> <code>1.0.0-beta11</code> package. In order to enable intercepting usages of <code>ToString()</code>, you must do two things:</p> <ul><li>Update to version <code>8.0.400</code> or greater of the .NET SDK. <a href=\"https://learn.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs\">This ships with Visual Studio version 17.11</a>, so you will need at least that version or higher. Just to clarify, the .NET 9 SDK works too.</li> <li>Enable the interceptor in your <em>.csproj</em> by setting <code>EnableEnumGeneratorInterceptor</code> to <code>true</code>, as shown below.</li></ul> <p>As shown previously, you can add <em>NetEscapades.EnumGenerators</em> to your project using</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.EnumGenerators <span class=\"token parameter variable\">--prerelease</span>\n</code></pre> <p>You should then update your project file with the <code>EnableEnumGeneratorInterceptor</code> property:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add this property to enable the interceptor in the project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>EnableEnumGeneratorInterceptor</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.EnumGenerators<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-beta11<span class=\"token punctuation\">\"</span></span> \n    <span class=\"token attr-name\">PrivateAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ExcludeAssets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>runtime<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>After making that change you'll \"magically\" have interception! Any enums you decorate with the <code>[EnumExtensions]</code> attribute (and similarly any external enums you generate extensions for using <code>[EnumExtensions&lt;T&gt;]</code>) are automatically opted-in to interception.</p> <p>Unfortunately, by it's nature, it's somewhat difficult to <em>tell</em> that interception is working—none of your code visibly changes after all! Unfortunately, I've found disappointingly few ways to confirm it's working as expected, even in your IDE.</p> <p>The main way I found to check if the interceptors are working, is checking the generated output. The interceptor generator results in an additional source-generated file per enum, adding a file with the <code>_Interceptors.g.cs</code> suffix. If you have set <code>EmitGeneratedFiles</code> to <code>true</code> in your project, then these files are visible in the <em>obj/generated</em> folder, but you can also see them directly in Visual Studio or Rider:</p> <p><img src=\"/content/images/2024/interceptors_in_vs.png\" alt=\"The source-generated interceptors are shown with a file suffix of _Interceptors.g.cs\"></p> <p>In the above image you can see that there are interceptor files for both <code>DateTimeKind</code> and <code>EnumInFoo</code>. You can dig into these files to check that a particular usage of <code>ToString()</code> was intercepted, but it's not very friendly or convenient.</p> <blockquote> <p>Note that the current version of Rider 2024.2.7 <a href=\"https://youtrack.jetbrains.com/issue/RIDER-119320/Source-generators-that-multi-target-Roslyn-SDKs-break-Riders-support\">doesn't handle the new layout of the NuGet package</a>, which causes IntelliSense to fail for the source generated code completely currently. I've filed a bug, and hopefully it'll be fixed in a future version of 2024.3.</p> </blockquote> <p>Given that interception should \"just work\", the somewhat-opaque nature of interceptors <em>shouldn't</em> be a big problem, but given there also some <a href=\"#caveats-this-won-t-work-everywhere-\">caveats around interception</a> I wonder if IDEs will make interceptions sites more visible in the future. Even just having an icon next to interception sites seems like it would be a nice addition.</p> <h2 id=\"disabling-interception-for-specific-enums\" class=\"heading-with-anchor\"><a href=\"#disabling-interception-for-specific-enums\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Disabling interception for specific enums</a></h2> <p>By default, all calls to <code>ToString()</code> and <code>HasFlag()</code> for enums defined in your project are intercepted when you enable interception, but you can also opt enums <em>out</em> of interception, while still generating the extension methods. To disable interception per-enum, set <code>IsInterceptable = false</code> in the <code>[EnumExtensions]</code> attribute:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>IsInterceptable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Similarly you can disable interception for any external enums you choose to generate extensions for in a project:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"> <span class=\"token comment\">// 👇 This _will_ have interceptors</span>\n<span class=\"token punctuation\">[</span>assembly<span class=\"token punctuation\">:</span>EnumExtensions<span class=\"token operator\">&lt;</span>DateTimeKind<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 👇 This _won't_ have interceptors</span>\n<span class=\"token punctuation\">[</span>assembly<span class=\"token punctuation\">:</span><span class=\"token generic-method\"><span class=\"token function\">EnumExtensions</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringComparison<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>IsInterceptable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre> <p>An important point is that interception here <em>only</em> works inside the <em>same</em> project as the original <code>[EnumExtensions]</code> enum was defined (or where the <code>[EnumExtensions&lt;T&gt;]</code> external attribute is declared). If you want interception to occur in projects that <em>reference</em> the enum, you'll need to opt in to that, as described below.</p> <h2 id=\"intercepting-enums-defined-in-other-projects\" class=\"heading-with-anchor\"><a href=\"#intercepting-enums-defined-in-other-projects\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Intercepting enums defined in other projects</a></h2> <p>The interceptor feature currently only runs in the same project as the <code>enum</code> extensions are defined. If you want an enum to also be intercepted in a different project you should add the <code>[Interceptable&lt;T&gt;]</code> assembly attribute to the project where you want interception.</p> <p>For example, if you have the following enum extensions generated in project A:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">EnumExtensions&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>and you want to enable interception in project B (which has a reference to project A) you should add the following in project B:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Interceptable&lt;DateTimeKind&gt;</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">Interceptable&lt;Colour&gt;</span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>With this change, both project A <em>and</em> B will have interceptions enabled 🎉</p> <h2 id=\"caveats-this-won-t-work-everywhere-\" class=\"heading-with-anchor\"><a href=\"#caveats-this-won-t-work-everywhere-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats: this won't work everywhere!</a></h2> <p>The interceptors kick in any time you <em>explicitly</em> call <code>ToString()</code> or <code>HasFlag()</code> on an interceptable enum (assuming you have enabled interception and have a high enough .NET SDK). Unfortunately, there are some cases where interception <em>won't</em> work:</p> <ul><li>When <code>ToString()</code> is called in other source generated code. <ul><li>Source generators can't \"see\" other source generated code, so there's no way to intercept these usages.</li></ul> </li> <li>When <code>ToString()</code> is called in already-compiled code. <ul><li>Interception works at compile-time, so if a <code>ToString()</code> method has already been \"baked in\", then the call can't be intercepted.</li></ul> </li> <li>If the <code>ToString()</code> call is <em>implicit</em>. <ul><li>Only explicit calls to <code>ToString()</code> are intercepted.</li> <li>For example, if you use an enum in an interpolated string, <code>\"The value is {Color.Red}\"</code>, there's no explicit call to <code>ToString()</code>, so it won't be intercepted.</li></ul> </li> <li>If the <code>ToString()</code> call is made on a base type, such as <code>System.Enum</code> or <code>object</code> <ul><li>The compile-time type you're calling <code>ToString()</code> on has to be your interceptable enum.</li></ul> </li> <li>If the <code>ToString()</code> call is made on a generic type. <ul><li>This doesn't work, as you would need to call a different interceptor for each <code>T</code></li></ul> </li></ul> <p>To try and reinforce these rules, the following shows cases that <em>can</em> be intercepted, followed by cases that <em>won't</em> be intercepted:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Colour</span>\n<span class=\"token punctuation\">{</span>\n    Red <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    Blue <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// All the examples in this method CAN be intercepted</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CanIntercept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok1 <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> red <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok2 <span class=\"token operator\">=</span> red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok3 <span class=\"token operator\">=</span> <span class=\"token string\">\"The colour is \"</span> <span class=\"token operator\">+</span> red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ok4 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"The colour is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">red<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CantIntercept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>Enum<span class=\"token punctuation\">)</span>Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Base type</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">)</span>Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Base type</span>\n    \n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad3 <span class=\"token operator\">=</span> <span class=\"token string\">\"The colour is \"</span> <span class=\"token operator\">+</span> red<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ implicit</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bad4 <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"The colour is </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">red</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ implicit</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token generic-method\"><span class=\"token function\">Write</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> val<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Enum</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ generic</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Another important aspect to be aware of is that the <code>ToStringFast()</code> implementation used in the interceptor is aware of the <code>[Description]</code> and <code>[Display]</code> attributes, and will preferentially use the values they provide over the simple name of the enum member. That means <code>ToString</code> and <code>ToStringFast()</code> may give different values in some cases:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EnumExtensions</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Values</span>\n<span class=\"token punctuation\">{</span>\n    First<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Display</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"2nd\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    Second<span class=\"token punctuation\">,</span>\n    Third<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> without <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"Second\" when interception is disabled</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> with <span class=\"token operator\">=</span> Values<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns \"2nd\" when interception is enabled</span>\n</code></pre> <p>So as you can see, on the one hand, interceptors can give you a \"free\" speed boost, without having to add <code>ToStringFast()</code> calls everywhere, but it won't work for <em>all</em> cases by a long shot.</p> <h2 id=\"future-ideas\" class=\"heading-with-anchor\"><a href=\"#future-ideas\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Future ideas</a></h2> <p>I'd like to create a stable version of the package soon, but there are a couple of things I'd like to address first.</p> <p>First of all, I think it was an error adding the extra <code>[Description]</code>/<code>[Display]</code> behaviour to the <em>default</em> <code>ToStringFast()</code> method; that should have been added to overloads only. Depending on feedback one way or another, I may well make a breaking change and change the default behaviour.</p> <p>This would have the benefit of being a \"safer\" drop in replacement for <code>ToString()</code> in the interceptor scenario, and generally just maps better I think.</p> <p>In terms of interceptors, I don't like the fact that there are lots of ways to \"accidentally\" not use the interceptor. I was considering adding an analyzer suggesting that you call <code>ToString()</code> in certain situations. For example</p> <ul><li>When you use an enum in an interpolated string then the <code>ToString()</code> call <em>won't</em> be intercepted.</li> <li>When you pass an enum to any method that takes an <code>object</code> or <code>System.Enum</code> then <em>if</em> the method serializes the enum, the call won't be intercepted.</li></ul> <p>There's going to be trade-offs if I do add an analyzer for these though, so I'm not entirely sure they're worth doing. And I don't enjoy writing analyzers 😅</p> <p>Nevertheless, I'd be interested to see what people thing about the experimental interceptor support, whether there's any obvious concerns with the current implementation (particularly the <code>ToString()</code>/<code>ToStringFast()</code> differences) or if anyone has further ideas. Please raise <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators\">an issue on GitHub</a> if you have any thoughts!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post, I described the new experimental interceptor support added to <em>NetEscapades.EnumGenerators</em> in <code>1.0.0-beta11</code>. You can enable interception for supported enums by setting <code>EnableEnumGeneratorInterceptor=true</code> in your <em>.csproj</em> file.</p> <p>Interception is only enabled in the project where the enum is defined; if you want interception in other projects you need to add the <code>[assembly:Interceptable&lt;T&gt;]</code> attribute in those projects. You can <em>disable</em> interception for a specific enum by setting the <code>IsInterceptable</code> property on the <code>[EnumExtensions]</code> attribute.</p> <p>Please give the new version a try, see what you think, if you have any feedback, <a href=\"https://github.com/andrewlock/NetEscapades.EnumGenerators/issues\">raise an issue on GitHub</a>, thanks!</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/recent-updates-for-netescapades-enumgenerators-interceptors/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/",
      "Title": "Is the result pattern worth it?: Working with the result pattern - Part 4",
      "PublishDate": "2024-10-29T09:00:00+00:00",
      "Summary": "In this post I discuss some of the pros and cons around using the result pattern in .NET, and describe some of the arguments I've heard on either side",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/balance_scales.webp\" /><nav><p>This is the four post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li>Part 4 - Is the result pattern worth it? (this post) </li></ol></nav><p>In this series I've been discussing one particular version of using the result pattern to replace exceptions as flow control, showing how <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">using LINQ's query syntax</a> can dramatically improve the readability of your code.</p> <p>This post serves as somewhat of a conclusion to the series, addressing some of the comments and concerns about the pattern in general, the pattern as I discussed in this post, and the \"solution\" of using LINQ to avoid endless nested lambda methods.</p> <h2 id=\"the-different-types-of-result-pattern\" class=\"heading-with-anchor\"><a href=\"#the-different-types-of-result-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The different types of result pattern</a></h2> <p>Some of the main take-aways I got from the discourse around (and tangential to) this series are:</p> <ul><li>People often mean quite different things when they say \"result pattern\"</li> <li>A <em>lot</em> of people have opinions on the result pattern that <em>they</em> are referring to</li> <li>Those opinions are visceral and strongly held 😅</li></ul> <p>The starting point for this series was <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">Jeremy Miller's tweet</a> in which he expressed a dislike for the result pattern in general.</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. <a href=\"https://t.co/6BGSAF9sVS\">https://t.co/6BGSAF9sVS</a></p>— Jeremy D. Miller (@jeremydmiller) <a href=\"https://twitter.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">July 11, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>His argument (expressed in various threads) is that the result pattern adds a lot of ceremony (and therefore complexity) which is unnecessary. A specific example he gives his where you have Mediator handlers calling <em>other</em> mediator handlers, where each nested handler is a \"step\" in the overall flow, each returning a result that needs to be checked and handled.</p> <p>That's an extremely \"heavy\" version of the result pattern, which is tied to all sorts of infrastructure, likely with onion architecture mechanics layered over it; I can totally see where the aversion comes from.</p> <blockquote> <p>If you're interested in which approach Jeremy <em>does</em> like, you should take a look at his <a href=\"https://wolverinefx.net/\">Wolverine framework</a> which is built around a philosophy of low ceremony and using code generation to fill in the gaps.</p> </blockquote> <p>At the other end of the spectrum, at around the same time, <a href=\"https://x.com/Aaronontheweb\">Aaron Stannard</a> was <a href=\"https://x.com/Aaronontheweb/status/1844456107756134807\">arguing <em>for</em> the result pattern</a>, but in this case a much more lightweight version:</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">I read this thread yesterday <a href=\"https://t.co/o333vEdype\">https://t.co/o333vEdype</a> and was blown away by <br><br>1. How many devs still use exceptions for flow control<br>2. Devs w/ this pattern _use a library_ for it instead of just defining a simple class<br>3. How many devs believe C# needs DUs to make this workable</p>— Aaron Stannard (@Aaronontheweb) <a href=\"https://twitter.com/Aaronontheweb/status/1844456107756134807?ref_src=twsrc%5Etfw\">October 10, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>Personally, what Aaron describes in his post is not what <em>I</em> typically think of when you say \"result pattern\". <a href=\"https://x.com/Aaronontheweb/status/1844458368708272595\">In his example</a> he essentially returns a \"status\" with the return value:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">QueryResponseStatus</span>\n<span class=\"token punctuation\">{</span>\n    Success<span class=\"token punctuation\">,</span>\n    NotFound<span class=\"token punctuation\">,</span>\n    Error<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">record</span> <span class=\"token generic-method\"><span class=\"token function\">QueryResponse</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryResponseStatus</span> Status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> Result<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Message<span class=\"token punctuation\">)</span>\n</code></pre> <p>and then uses C# pattern matching to handle the statuses. Don't get me wrong, this is <em>absolutely</em> how I handle things in <em>most</em> of the code I write. In the vast majority of cases you don't <em>need</em> a framework, and something like this is absolutely good enough, and is arguably what you <em>should</em> be using.</p> <p>An important distinction between Aaron's version of the result pattern and the one I showed in this series is that Aaron uses a <code>Status</code> to describe the error, whereas I used a standard type <code>Result&lt;T&gt;</code> where the \"error\" type was <code>Exception</code>. I naturally took this approach as an obvious progression from \"exceptions as flow control\" (and because it makes the LINQ side easier to demonstrate) but in hindsight, this was probably detrimental to series overall.</p> <blockquote> <p>In my defence, <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/#the-resultt-shown-in-these-posts-is-not-what-you-want\">I did mention several times in this series</a> that the <code>Result&lt;T&gt;</code> I was using is probably not what you would want to use in practice.</p> </blockquote> <p>As several people (me included, in the series) pointed out, using <code>Exception</code> as the error turns this result pattern into more of a glorified try-catch replacement. That's a lot less useful than having a real <em>union</em> of possibilities, as this makes it easier to handle different, non-error, states, as well as including additional information for the error case. Aaron's solution emulates unions, and handles simple cases just as well. But you can't even <em>hint</em> at unions without someone saying \"you should just use F#\".</p> <h2 id=\"why-not-just-use-f-\" class=\"heading-with-anchor\"><a href=\"#why-not-just-use-f-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why not \"just\" use F#?</a></h2> <p>Don't get me wrong, from what little knowledge I have of F#, I like it. I really enjoyed <a href=\"https://pragprog.com/titles/swdddf/domain-modeling-made-functional/\">Domain Modeling Made Functional</a> by Scott Wlaschin, and many of the \"result pattern\" concepts are explicitly described in that book. But suggesting that if you want to use something <em>resembling</em> the result pattern, then you should go and use F# seems somewhat excessive.</p> <p>Integrating <em>any</em> other programming language into your toolchain comes with overhead. There's cognitive overhead for all the C# programmers that now need to know F# to fully understand your app. There's an overhead around local tooling, as you need to learn how to build and debug the new language. There's an overhead around your build pipeline, which now needs to handle both C# and F#. There's an overhead in the interop boundaries between C# and F#; although it's all .NET those boundaries aren't as seamless as we'd like. All of this is likely a lot simpler than if you were trying to integrate a non-.NET language, but it's still a barrier.</p> <p>So without a doubt, F# can more elegantly express some of the patterns we're <em>emulating</em> in C#, but is it really worth throwing the baby out with the bathwater and moving to F#? I think that's going to be a hard sell.</p> <blockquote> <p>A lot of people, including Scott Wlaschin and others I believe, have described having an F# core domain, an area where F# really shines, with a C# outer shell. I do like the idea of this in principle, but I feel like the overhead argument will always mean it's restricted to niche code bases. I'd be interested to hear how many people have tried this and how they got on with it.</p> </blockquote> <p>At the other end of the spectrum we have people joking that C# programmers have finally found <code>Sequence()</code> and <code>Traverse()</code>. And I get it, they're elegant concepts, but the fact that you kind of <em>have</em> to learn about them to remove a bunch of the cruft in the patterns shown in this series is definitely a mark against the whole approach. While they may be standard tools for functional programmers, they're absolutely not for standard C# devs. Instead they're yet another confusingly-named concept to try to grasp.</p> <p>A common complaint people raised in this series is regarding the \"non-standard\" use of LINQ (although that was literally the <em>point</em> of this series 😅). Some of the complaints are valid; some are less so. I'll tackle some of these below.</p> <h2 id=\"addressing-misconceptions-and-misgivings-about-linq\" class=\"heading-with-anchor\"><a href=\"#addressing-misconceptions-and-misgivings-about-linq\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Addressing misconceptions and misgivings about LINQ</a></h2> <p>As a reminder, this post was primarily about showing how you can turn the common, ugly, nested-lambda style \"result pattern\" code into something much more readable. i.e. turning something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n        <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                        <span class=\"token punctuation\">{</span>\n                            <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                <span class=\"token punctuation\">{</span>\n                                    <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>into something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n</code></pre> <p>If you genuinely have code like the former, then I <em>really</em> struggle to see <em>any</em> argument that it is \"better\" than the latter, on virtually any metric 😅 Functionality wise, the above two examples are identical.</p> <p>I think where people get hung up is in thinking that LINQ is used for SQL. Yes, that was obviously the origin, and it was designed to work <em>with</em> SQL, but it's not <em>tied</em> to SQL. So the above code has none of the \"N+1 issues\" or \"deferred evaluation\" that you might <em>associate</em> with LINQ and SQL.</p> <p>What I will absolutely grant, is that this <em>isn't</em> idiomatic C# or LINQ; you don't often see code like this in most code bases. When I first ran into it it I had to ask a teammate what was going on. That's <em>absolutely</em> going to happen, and it's going to happen for virtually <em>every</em> C# developer that runs into it. That's a big negative for it.</p> <p>On the other hand, it's very easy to explain to people who understand railway oriented programming: The LINQ operators \"unpack\" the <code>T</code> from the <code>Result&lt;T&gt;</code> for the success cases, and short-circuit with an error in the failure case. And you essentially read it as:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userAccount <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> userAccount<span class=\"token punctuation\">;</span> <span class=\"token comment\">// or return error if anything above failed</span>\n</code></pre> <p>Sure it requires getting used to, but would you rather go back to the big nested lambdas? I think the best argument is that your answer should be \"I don't want either one\" (which is pretty much what Jeremy and Aaron have said).</p> <h2 id=\"the-big-question-to-resultt-or-not-to-resultt-\" class=\"heading-with-anchor\"><a href=\"#the-big-question-to-resultt-or-not-to-resultt-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The big question: to <code>Result&lt;T&gt;</code> or not to <code>Result&lt;T&gt;</code>?</a></h2> <p>At this point, I think it's worth taking a step back. The code in the previous section demonstrated a simple procedural (or functional, depending on your perspective)-style of method chaining, which I think it's safe to say is easy to read and understand. And more importantly it's easier to read than the nested lambda approach.</p> <p>However, <a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">in my previous post</a>, I showed that if you have anything remotely more complicated, such as <code>async</code>/<code>await</code> or collection of <code>Result&lt;T&gt;</code> to handle, then you end up in a whole world of additional complexity and confusion. The question is: when things start getting more complicated—mixed <code>Result&lt;T&gt;</code> and <code>T</code>, async <code>Task</code> code, <code>IEnumerable&lt;Result&lt;T&gt;&gt;</code> vs <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code>—does the payoff <em>remain</em> worth it?</p> <p>The LINQ query syntax and the \"magic\" it uses undoubtedly simplifies the <em>reading</em> of the method, as everything is very regimented and easy to follow. But there's no denying it can be infuriating to write: errors often manifest as errors inferring types, and consequently the error messages are very often impenetrable, as you've seen:</p> <p><img src=\"/content/images/2024/result_01.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The type arguments for method 'Result ResultExtensions. SelectMany<TSource,TMiddle,TResult>(this Result, Func<TSource,Result>, Func<TSource,TMiddle,TResult>)' cannot be inferred from the query\"></p> <p>That can mean that an apparent simple change to a dependent method, perhaps switching the method from returning a <code>T</code> to <code>Result&lt;T&gt;</code>, or vice versa, can lead you struggling to understand the changes you need to make in the calling LINQ code. Over time you can anticipate and understand the implications of your changes, but is it worth the effort?</p> <p>Fundamentally, I think we're left with the question \"is this code simple?\" I believe the actual LINQ code <em>is</em>, generally, simple. The infrastructure of extension methods and functional concepts (bind vs apply, monadic vs applicative, sequence vs traverse) are, I think, <em>not</em> simple to the average C# developer.</p> <blockquote> <p>Does the average C# developer <em>need</em> to understand these concepts? Maybe not. But it feels like a bad idea to not understand <em>why</em> your code compiles, and if you don't understand them, you're likely going to end up reinventing the wheel somewhere along the line.</p> </blockquote> <p>So where does all this musing leave us? I <em>still</em> think the LINQ code is preferable to the nested lambdas of the result pattern. And I <em>still</em> believe using exceptions as control flow is a bad idea. And I <em>still</em> thing Aaron's basic version of the \"result pattern\" is what you want most of the time.</p> <p>So I guess this series is probably more a musing on the things you <em>can</em> do with LINQ, rather than what you <em>should</em> do. Sorry to everyone that was hoping for something different😳😅</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>The original intention of this series was to attempt to show how you use the result pattern to <em>reduce</em> boilerplate. I still believe that can be the case, but reminding myself of all the edge cases in the LINQ solution, as well as all the alternatives, really reinforced the fact that this doesn't mean you should use this style of result pattern <em>everywhere</em>. For the vast majority of cases, you can get a way with something much simpler!</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/working-with-the-result-pattern-part-3-adding-more-extensions/",
      "Title": "Adding more extensions to Result<T>: Working with the result pattern - Part 3",
      "PublishDate": "2024-10-22T09:00:00+00:00",
      "Summary": "In this post I show how to extend your LINQ-based result pattern code to handle more scenarios, such as Task<Result<T>> and collections of Result<T>",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/confused.png\" /><nav><p>This is the three post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li>Part 3 - Adding more extensions to Result&lt;T&gt; (this post) </li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>In this series I've been showing how you can tidy up code that uses the result pattern <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">by taking advantage of LINQ</a> and related functional concepts. In this post we'll continue to iterate on the example from the last post, using <code>Result&lt;T&gt;</code> in more places, making some functions <code>async</code> and seeing how to handle that without the result code becoming a mess.</p> <blockquote> <p>This post builds directly on the previous posts, so I strongly recommend you read them first before digging in here.</p> </blockquote> <ul><li><a href=\"#background-where-we-left-offlinq-and-resultt\">Background: where we left off—LINQ and <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#1-handling-cases-where-not-every-method-returns-resultt\">1. Handling cases where not every method returns <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#2-converting-listresultt-into-resultlistt-using-sequence-\">2. Converting <code>List&lt;Result&lt;T&gt;&gt;</code> into <code>Result&lt;List&lt;T&gt;&gt;</code> using <code>Sequence()</code></a></li> <li><a href=\"#3-using-async-await-with-linq-query-syntax\">3. Using <code>async</code>/<code>await</code> with LINQ query syntax</a></li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-where-we-left-offlinq-and-resultt\" class=\"heading-with-anchor\"><a href=\"#background-where-we-left-offlinq-and-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: where we left off—LINQ and <code>Result&lt;T&gt;</code></a></h2> <p>By the end of the last post, we had managed to refactor the <code>Result&lt;T&gt;</code>-based code used in <code>UserProvisioningService.ProvisionUser()</code> to the following, which uses <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---query-syntax\">LINQ query syntax</a> to handle errors automatically very tersely:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Each call in the chain will \"shot circuit\" if an error occurs,</span>\n        <span class=\"token comment\">// returning an error to the caller without executing the rest of the method</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Stub methods called by ProvisionUser</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// External service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProvisionUserRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>To achieve that terseness <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/#adding-linq-support-to-resultt\">we simply implemented two extension methods</a> on <code>Result&lt;T&gt;</code>—<code>Select()</code> and <code>SelectMany()</code>—and the LINQ syntax support lit up.</p> <p>I think it's pretty hard to argue with the terseness of this, but things are rarely as simple as the example I've shown above. In the previous example, each of the \"stub\" methods is a synchronous method (there's no <code>async</code>/<code>await</code> here), and they all return <code>Result&lt;T&gt;</code> values. That's \"easy mode\"; for the rest of the post we'll add some complications and look at how to deal with them.</p> <h2 id=\"1-handling-cases-where-not-every-method-returns-resultt\" class=\"heading-with-anchor\"><a href=\"#1-handling-cases-where-not-every-method-returns-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Handling cases where not every method returns <code>Result&lt;T&gt;</code></a></h2> <p>For our first example, let's imagine that returning a <code>Result&lt;T&gt;</code> doesn't make sense for all methods. For example, perhaps there's no \"failure\" path for <code>CreateProvisionUserRequest</code>; that might well be the case if this method is just performing a transform creating a DTO:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token comment\">// 👇 Returns ProvisionUserRequest, not Result&lt;ProvisionUserRequest&gt;</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">ProvisionUserRequest</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Unfortunately, if you make this change, suddenly your LINQ code won't compile:</p> <p><img src=\"/content/images/2024/result_01.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The type arguments for method 'Result ResultExtensions. SelectMany<TSource,TMiddle,TResult>(this Result, Func<TSource,Result>, Func<TSource,TMiddle,TResult>)' cannot be inferred from the query\"></p> <p>As is often the case with failures of this kind, the error is disappointingly opaque. Unless you're used to seeing errors like these, it's unlikely you'll spot the issue. The problem is that the <code>SelectMany()</code> extension method we wrote operates on <code>Result&lt;T&gt;</code>, that's why we can use this <code>from &lt;VAL&gt; in &lt;SOURCE&gt;</code> construct. If <code>&lt;source&gt;</code> is not a <code>Result&lt;T&gt;</code>, the compiler doesn't know what to do!</p> <p>One solution is to make sure that <code>&lt;SOURCE&gt;</code> <em>is</em> a <code>Result&lt;T&gt;</code> type. That doesn't mean the method we invoke has to <em>return</em> a <code>Result&lt;T&gt;</code>, it just means we need to create one. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Explicitly wrap return value from CreateProvisionUserRequest() </span>\n            <span class=\"token comment\">// in a Result&lt;T&gt; object 👇</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> Result<span class=\"token operator\">&lt;</span>ProvisionUserRequest<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That's obviously somewhat ugly, so it's quite common to have an extension method to tidy things up</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">ToResult</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">T</span> source<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>With this simple extension, the code to convert any type to a \"success\" result is simpler:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">//                  Calling ToResult() on the result is shorter and cleaner👇</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>However, in this case, we don't actually <em>need</em> the <code>ToResult()</code>. Instead, you can use a construct built into the LINQ query syntax: <code>let</code>. You can use <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/query-expression-basics#let-clause\">a <code>let</code> clause</a> to store the result of a method call into a new variable which is exactly what we want!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// 👇 Use `let x = y` instead of `from x in y` when the return value is not a Result&lt;T&gt;</span>\n            <span class=\"token keyword\">let</span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The lesson here is that not <em>everything</em> needs to be a <code>Result&lt;T&gt;</code> 😃</p> <h2 id=\"2-converting-listresultt-into-resultlistt-using-sequence-\" class=\"heading-with-anchor\"><a href=\"#2-converting-listresultt-into-resultlistt-using-sequence-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Converting <code>List&lt;Result&lt;T&gt;&gt;</code> into <code>Result&lt;List&lt;T&gt;&gt;</code> using <code>Sequence()</code></a></h2> <p>For our next challenge, we're going to focus on the <code>ValidateClaims()</code> method. Our stub version currently looks like this, for simplicity:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n</code></pre> <p>Lets imagine it's slightly more complicated than that. We'll imagine that this method operates by calling a helper method <code>ValidateClaim()</code>, which returns a <code>Result&lt;ValidatedClaim&gt;</code> object, something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Stub helper method that operates on a single claim</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaim</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim</span> claim<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidatedClaim</span><span class=\"token punctuation\">(</span>claim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The method we need to implement</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... TODO</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I've left the method implementation blank for now. It's clear we need to call <code>ValidateClaim</code> with each of the <code>Claim</code> objects in <code>claims</code>, but <em>then</em> what? If we leverage LINQ again (<a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---method-syntax\">method syntax</a> this time), then we get:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> validationResults <span class=\"token operator\">=</span>\n        claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=&gt;</span> <span class=\"token function\">ValidateClaim</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// ... </span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That gets us something that looks <em>close</em>: it gives us an <code>IEnumerable&lt;Result&lt;T&gt;&gt;</code>, but what we want is a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code>. If we think about how to make that translation, we need to:</p> <ul><li>Initialize an empty collection of <code>ValidatedClaim</code> to hold the results.</li> <li>Iterate through all of the <code>Result&lt;T&gt;</code> in <code>validationResults</code>. <ul><li>If the <code>Result&lt;T&gt;</code> is a <code>Fail</code> result, create a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> from the failure, and return it.</li> <li>If the <code>Result&lt;T&gt;</code> is a success, append it to the collection of results</li></ul> </li> <li>After iterating through everything, you will either have a failed <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> containing the first failure, or a <code>Result&lt;IEnumerable&lt;T&gt;&gt;</code> containing all the valid results.</li></ul> <blockquote> <p>As mentioned previously, I don't want to get into the weeds of functional programming or the differences between <a href=\"https://fsharpforfunandprofit.com//posts/elevated-world-3/#example-validation-using-applicative-style-and-monadic-style\">monadic and applicative styles</a>, so I'm using the same monadic approach we have previously here!</p> </blockquote> <p>At a high level, that functionality is encapsulated by the <code>Linq</code> method <code>Aggregate()</code> (which is an the implementation of the functional concept <a href=\"https://en.wikipedia.org/wiki/Fold_(higher-order_function)\">left fold</a>). We can use <code>Aggregate()</code> (combined with a bit of LINQ query syntax for good measure) to implement our final <code>ValidateClaims()</code> method:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> validationResults <span class=\"token operator\">=</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>ValidateClaim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> zero <span class=\"token operator\">=</span> Result<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>ValidatedClaim<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> validationResults<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>accumulated<span class=\"token punctuation\">,</span> current<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n        <span class=\"token keyword\">from</span> previouslyValidated <span class=\"token keyword\">in</span> accumulated    <span class=\"token comment\">// These ensure we return a failure </span>\n        <span class=\"token keyword\">from</span> claim <span class=\"token keyword\">in</span> current                      <span class=\"token comment\">// if there are any failures so far.</span>\n        <span class=\"token keyword\">select</span> previouslyValidated<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>claim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// If no failures, append to the list</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Personally I find anything that uses <code>Aggregate()</code> is complex to both read and write, so you definitely don't want to be writing this every time you need it. The good news is that we can easily create a generic extension method (<a href=\"https://fsharpforfunandprofit.com/posts/elevated-world-4/#sequence\">called <code>Sequence()</code> for historic reasons</a>) to help with this scenario:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Sequence</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> results<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> zero <span class=\"token operator\">=</span> Result<span class=\"token operator\">&lt;</span>IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>accumulated<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n            <span class=\"token keyword\">from</span> previous <span class=\"token keyword\">in</span> accumulated\n            <span class=\"token keyword\">from</span> next <span class=\"token keyword\">in</span> result\n            <span class=\"token keyword\">select</span> previous<span class=\"token punctuation\">.</span><span class=\"token function\">Append</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You can hopefully recognise that this is essentially the same implementation, just updated to work with <code>T</code> instead of <code>Claim</code>. We can now rewrite the <code>ValidateClaims()</code> method to use this extension directly, so that the implementation becomes:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>ValidatedClaim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>ValidateClaim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That's much better!</p> <h2 id=\"3-using-async-await-with-linq-query-syntax\" class=\"heading-with-anchor\"><a href=\"#3-using-async-await-with-linq-query-syntax\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Using <code>async</code>/<code>await</code> with LINQ query syntax</a></h2> <p>In this section we'll look at a different common scenario: where some or all of the methods are asynchronous and return <code>Task&lt;Result&lt;T&gt;&gt;</code>. For our purposes we'll assume that several of the methods in our LINQ statement are <code>async</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>IEnumerable<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Your first thought may be that you can simply call <code>await</code> inline for the <code>async</code> methods, but unfortunately, that gets you a compiler error:</p> <p><img src=\"/content/images/2024/result_02.png\" alt=\"Example of the LINQ code failing to compile because it can't infer types: The 'await' expression can only be used in a query expression within the first collection expression of the initial 'from' clause or within the collection expression of a 'join' clause\"></p> <p>Instead, we must provide a way for the LINQ statements to work with <code>Task&lt;Result&lt;T&gt;&gt;</code> values, and for that we're back to our old friend <code>SelectMany</code>. In <a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">the previous post</a> I showed how defining a <code>SelectMany()</code> extension method for <code>Result&lt;T&gt;</code> unlocked the LINQ query syntax we've been relying on. The following <code>SelectMany()</code> definition does the same thing for <code>Task&lt;Result&lt;T&gt;&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// await the Task&lt;Result&lt;T&gt;&gt; to get the result</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">await</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">async</span> r <span class=\"token operator\">=&gt;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// we need a second await here</span>\n                    <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token comment\">// The failure path is synchronous, so wrap the failure in a `Task&lt;&gt;`</span>\n                onFailure<span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span>Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre> <p>With that addition, we can now handle <code>Task&lt;Result&lt;T&gt;&gt;</code> in LINQ statements. One caveat is that we need to ensure <em>every</em> <code>from</code> statement returns a <code>Task&lt;Result&lt;T&gt;&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Returns a `Task&lt;Result&lt;T&gt;&gt;`</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> \n        <span class=\"token comment\">// Every statment needs to return a Task, so you need to wrap non-async results with Task.FromResult()</span>\n        <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Wrap the return value in Task&lt;&gt;</span>\n        <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">FromResult</span><span class=\"token punctuation\">(</span><span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Wrap the return value in Task&lt;&gt;</span>\n        <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Returns Task&lt;Result&lt;T&gt;&gt;</span>\n        <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The requirement that every method returns the same \"type\" of value (whether that's a <code>Result&lt;T&gt;</code> or <code>Task&lt;Result&lt;T&gt;&gt;</code>) is just the beginning of where things <em>can</em> start to get mucky. We already have a couple of <code>Task.FromResult()</code> in the code above, and that's because those methods return <code>Result&lt;T&gt;</code>. If they returned <code>Task&lt;T&gt;</code>, things would be much more complicated, and that's where you have to start wondering: <em>is</em> this the right approach?</p> <p>In the next post I'll describe where I've ended up in my attitude to this style of result pattern, and discuss some of the comments and criticisms this series has received from various people.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>This post expands on the previous posts in the series in which I discuss using the result pattern in practice. In the previous post I showed that using LINQ features can dramatically simplify the amount of boilerplate code the result pattern requires by using LINQ. In this post I expanded the LINQ examples to demonstrate how to support async code, different return types, and collections of results.</p> <p>Each of these additional scenarios can be supported by leveraging LINQ features or providing additional extension methods, however it also raises the question as to whether this is worth the effort given the extra complexity this adds. In the next post in the series I'll discuss some of the pros and cons of this style of result pattern usage.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/working-with-the-result-pattern-part-3-adding-more-extensions/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/",
      "Title": "Safety and simplicity with LINQ: Working with the result pattern - Part 2",
      "PublishDate": "2024-10-15T09:00:00+00:00",
      "Summary": "In this post I show how to clean up unreadable Switch()-based result pattern code using LINQ query syntax, giving both readability and safety",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/railway.jpg\" /><nav><p>This is the two post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li><a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Part 1 - Replacing Exceptions-as-flow-control with the result pattern</a></li><li>Part 2 - Safety and simplicity with LINQ (this post) </li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>This post follows directly on from <a href=\"/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">the previous post</a> which demonstrated the first stage of replacing exceptions-as-flow-control with the result pattern, but ended with a very ugly final result based on the <code>Switch()</code> method.</p> <p>In this post we'll start by taking a detour to look at LINQ, before we look at how we can use it with our <code>Result&lt;T&gt;</code>. Finally we'll see how adding a couple of extension methods to our <code>Result&lt;T&gt;</code> type can dramatically improve the ergonomics of using the result pattern.</p> <blockquote> <p>This series was inspired by <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">a tweet from Jeremy Miller</a> in which he was advocating for not using the result pattern. It's important that you don't blindly apply patterns everywhere just because you <em>can</em>, try to understand where they will actually provide value in your code base.</p> </blockquote> <ul><li><a href=\"#background-where-we-left-off\">Background: where we left off</a></li> <li><a href=\"#linq-method-syntax-vs-query-syntax\">LINQ: method syntax vs query syntax</a></li> <li><a href=\"#selectmany-the-monadic-bind-of-c-\"><code>SelectMany()</code>: the monadic bind of C#</a></li> <li><a href=\"#adding-linq-support-to-resultt\">Adding LINQ support to <code>Result&lt;T&gt;</code></a> <ul><li><a href=\"#implementing-resultt-select-\">Implementing <code>Result&lt;T&gt;.Select()</code></a></li> <li><a href=\"#implementing-resultt-selectmany-\">Implementing <code>Result&lt;T&gt;.SelectMany()</code></a></li></ul> </li> <li><a href=\"#creating-readable-resultt-code-with-linq\">Creating readable <code>Result&lt;T&gt;</code> code with LINQ</a></li> <li><a href=\"#caveats-to-the-result-pattern-and-railway-oriented-programming\">Caveats to the result pattern and railway oriented programming</a> <ul><li><a href=\"#don-t-try-to-wrap-all-exceptions-in-a-resultt\">Don't try to wrap all exceptions in a <code>Result&lt;T&gt;</code></a></li> <li><a href=\"#the-resultt-shown-in-these-posts-is-not-what-you-want\">The <code>Result&lt;T&gt;</code> shown in these posts is not what you want</a></li> <li><a href=\"#consider-whether-you-need-resultt-at-all\">Consider whether you need <code>Result&lt;T&gt;</code> at all</a></li></ul> </li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-where-we-left-off\" class=\"heading-with-anchor\"><a href=\"#background-where-we-left-off\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: where we left off</a></h2> <p>In the last post I showed an example of taking a simple method that was using exceptions for flow control, and refactored it to use the result pattern, where the resulting usage was \"safe\" (thanks to the <code>Switch()</code> method and hiding the direct <code>Value</code> or <code>Error</code> accessors), but which was verbose and cumbersome to read.</p> <p>It's our starting point for this post, so I've reproduced the important parts of the <code>Result&lt;T&gt;</code> implementation we ended with below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't expose these publicly</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Exception<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">&gt;</span></span> onSuccess<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Exception<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">&gt;</span></span> onFailure<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> err <span class=\"token operator\">=</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>By encapsulating the <code>_value</code>, <code>_error</code> and <code>IsSuccess</code> values, and only allowing access via the <code>Switch()</code> method, we ensure that callers <em>can't</em> misuse the <code>Result&lt;T&gt;</code> objects. Unfortunately, that can make for some very ugly code when you need to chain multiple method calls that each return a <code>Result&lt;T&gt;</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is clearly some really hard to understand code. If this is what code <em>always</em> looked like with the result pattern it would be <em>very</em> hard to recommend. Luckily there's something we can do to clean this up significantly. But first, we'll take a detour into LINQ.</p> <h2 id=\"linq-method-syntax-vs-query-syntax\" class=\"heading-with-anchor\"><a href=\"#linq-method-syntax-vs-query-syntax\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">LINQ: method syntax vs query syntax</a></h2> <p>When people talk about LINQ, they're typically talking about <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---method-syntax\">method syntax</a>, where you're calling methods like <code>Where()</code> and <code>Select()</code> on <code>IEnumerable&lt;T&gt;</code>, to give code like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetItemCounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    source\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=&gt;</span> <span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span>IsDeleted<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=&gt;</span> line<span class=\"token punctuation\">.</span>Quantity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">OrderLine</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Quantity<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> IsDeleted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>But the original design of LINQ includes another syntax, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/linq/get-started/write-linq-queries#example---query-syntax\">query syntax</a> which was intended to read more like SQL. Query syntax is generally interchangeable with the method syntax, so we could rewrite the above method to be functionally the same using the alternative syntax:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetItemCounts</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n    <span class=\"token keyword\">from</span> line <span class=\"token keyword\">in</span> source\n    <span class=\"token keyword\">where</span> <span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span>IsDeleted\n    <span class=\"token keyword\">select</span> line<span class=\"token punctuation\">.</span>Quantity<span class=\"token punctuation\">;</span>\n</code></pre> <p>This code does the same thing as the previous example, so which you choose is mostly a matter of taste, and people <em>generally</em> gravitate to the method syntax in my experience.</p> <p>But there's something neat about the query syntax; it uses \"duck typing\" to decide which types can be used with it. Technically <em>all</em> you need to provide is a single method with the right format: <code>SelectMany()</code></p> <h2 id=\"selectmany-the-monadic-bind-of-c-\" class=\"heading-with-anchor\"><a href=\"#selectmany-the-monadic-bind-of-c-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>SelectMany()</code>: the monadic bind of C#</a></h2> <p>Depending on your proficiency with LINQ, you may or may not have run into <code>SelectMany()</code>. Either way, for most people <code>SelectMany()</code> is probably \"just\" the method you call to \"flatten\" a collection of elements. For example, if you have a collection of <code>Order</code>, and you want to enumerate through <em>all</em> the <code>OrderLine</code>s across <em>all</em> <code>Order</code> objects, you might have something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetAllLines</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">&gt;</span></span> orders<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> orders<span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">=&gt;</span> order<span class=\"token punctuation\">.</span>Lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>If you were to write this all out as <code>foreach</code> statements, it would look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>OrderLine<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetAllLines</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Order<span class=\"token punctuation\">&gt;</span></span> orders<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token keyword\">in</span> orders<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> line <span class=\"token keyword\">in</span> order<span class=\"token punctuation\">.</span>Lines<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> line<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So <code>SelectMany()</code> might <em>seem</em> like a niche method in your LINQ arsenal. However, in practice, <code>SelectMany()</code> is probably the most important LINQ method of all as it implements the \"Bind\" operation, one of the most important operations in functional programming.</p> <blockquote> <p>No, I'm not going to talk about monads in this post. I'm not even going to talk about functional programming much. If either of those spark your interest, I strongly suggest looking at F#: <a href=\"https://fsharpforfunandprofit.com/\">https://fsharpforfunandprofit.com/</a> is a great place to start.</p> </blockquote> <p>There are lots of different overloads of <code>SelectMany()</code>, but the one we care about has two arguments, a \"collection selector\" and a \"result selector\". The following shows what the method looks like for the <code>IEnumerable&lt;T&gt;</code> extension method version, along with a basic implementation showing how it might be implemented:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TCollection<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">this</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token punctuation\">&lt;</span>TCollection<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span> \n    <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TCollection<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We loop through every element in the original source collection</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TSource</span> ele <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Apply the collectionSelector function to each element,</span>\n        <span class=\"token comment\">// to get the collection value</span>\n        <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>TCollection<span class=\"token punctuation\">&gt;</span></span> collection <span class=\"token operator\">=</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TCollection</span> collectionEle <span class=\"token keyword\">in</span> collection<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// For each element in the selected collection, execute</span>\n            <span class=\"token comment\">// the resultSelector function, and return the result</span>\n            <span class=\"token class-name\">TResult</span> result <span class=\"token operator\">=</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>ele<span class=\"token punctuation\">,</span> collectionEle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The example above is written in terms of <code>IEnumerable&lt;T&gt;</code>, but the <code>SelectMany()</code> pattern actually works for <em>any</em> type that implements a method like the above pattern. So let's see what that looks like for <code>Result&lt;T&gt;</code>.</p> <h2 id=\"adding-linq-support-to-resultt\" class=\"heading-with-anchor\"><a href=\"#adding-linq-support-to-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding LINQ support to <code>Result&lt;T&gt;</code></a></h2> <p>In this section we're going to implement <code>SelectMany()</code> for <code>Result&lt;T&gt;</code>. To simplify some things, we're also going to implement the equivalent of <code>Select()</code> too. Let's start with that.</p> <h3 id=\"implementing-resultt-select-\" class=\"heading-with-anchor\"><a href=\"#implementing-resultt-select-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>Result&lt;T&gt;.Select()</code></a></h3> <p>So first of all we should think what would it even <em>mean</em> to implement <code>Select()</code>.</p> <p>If you have an <code>IEnumerable&lt;T&gt;</code>, then <code>Select()</code> maps from one type, <code>T</code> to another type <code>TResult</code>, based on a <code>Func&lt;T, TResult&gt;</code> selector function. We can achieve something similar for <code>Result&lt;T&gt;</code>:</p> <ul><li>If the <code>Result&lt;T&gt;</code> is a success, run the selector function on the <code>T</code>, and return a new <code>Result&lt;TResult&gt;</code>.</li> <li>If the <code>Result&lt;T&gt;</code> is a failure, return a <code>Result&lt;TResult&gt;</code> using the same original <code>Exception</code>.</li></ul> <p>We can easily implement that functionality using the <code>Switch()</code> method we defined earlier:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Creating these as extension methods to keep the Result&lt;T&gt; type small</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Select</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The target for the extension</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TFrom<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> selector<span class=\"token punctuation\">)</span> <span class=\"token comment\">// The mapping/selector method</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=&gt;</span> <span class=\"token function\">selector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// success -&gt; run the selector and implicitly convert to Result&lt;TResult&gt;</span>\n            onFailure<span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error -&gt; return a failed Result&lt;TResult&gt;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So <code>Select()</code> is a simple mapping of the \"inner\" <code>TFrom</code> type to a <code>TResult</code>, converting a <code>Result&lt;TFrom&gt;</code> into a <code>Result&lt;TResult&gt;</code>. Now lets move on to <code>SelectMany()</code>.</p> <h3 id=\"implementing-resultt-selectmany-\" class=\"heading-with-anchor\"><a href=\"#implementing-resultt-selectmany-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Implementing <code>Result&lt;T&gt;.SelectMany()</code></a></h3> <p>The <code>SelectMany()</code> method I showed earlier is a bit trickier to think about. The functionality we need is:</p> <ul><li>The \"collection selector\" is the function that runs against the <code>T</code> of a <code>Result&lt;T&gt;</code>, and should return a <code>Result&lt;TMiddle&gt;</code>. Note that this is different to the previous <code>Select()</code> case: <ul><li><code>Select()</code> uses a selector like this: <code>Func&lt;T, TMiddle&gt;</code></li> <li><code>SelectMany()</code> uses a selector like this: <code>Func&lt;T, Result&lt;TMiddle&gt;&gt;</code></li></ul> </li> <li>In addition, the overload of <code>SelectMany()</code> that we need to implement takes a select-like \"result selector\" that maps from a <code>T</code> <em>and</em> <code>TMiddle</code> pair to a <code>TResult</code>, to get the final value.</li></ul> <p>Putting all that together, our <code>SelectMany</code> implementation for <code>Result&lt;T&gt;</code> might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// The same extension class, Select() not shown for brevity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ResultExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TResult<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">SelectMany</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">this</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token comment\">// The target for the extension</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span> collectionSelector<span class=\"token punctuation\">,</span> <span class=\"token comment\">// How to map to the Result&lt;TMiddle&gt; type</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>TSource<span class=\"token punctuation\">,</span> TMiddle<span class=\"token punctuation\">,</span> TResult<span class=\"token punctuation\">&gt;</span></span> resultSelector<span class=\"token punctuation\">)</span> <span class=\"token comment\">// How to map a TMiddle to a TResult</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// success -&gt; run the selectors</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// First run the \"collection selector\"</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>TMiddle<span class=\"token punctuation\">&gt;</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">collectionSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">// If result is a success, we run the \"result selector\" to</span>\n                <span class=\"token comment\">// get the final TResult. If it is not a success, then</span>\n                <span class=\"token comment\">// Select() just passes the error through as a failed Result&lt;TResult&gt;</span>\n                <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=&gt;</span> <span class=\"token function\">resultSelector</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> e <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>TResult<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error -&gt; return a failed Result&lt;TResult&gt;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you're struggling to follow all those many generic types, don't worry, it <em>is</em> confusing 😅 The good news is that you only have to implement this once (or rather, preferably, the <em>library</em> you're using implements this for you).</p> <p>The <em>really</em> good news is that this is the last piece we need to get back to improving our nasty <code>Result&lt;T&gt;</code> based <code>ProvisionUser()</code> method!</p> <h2 id=\"creating-readable-resultt-code-with-linq\" class=\"heading-with-anchor\"><a href=\"#creating-readable-resultt-code-with-linq\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating readable <code>Result&lt;T&gt;</code> code with LINQ</a></h2> <p>For maximum effect, lets recap what our gnarly, but <em>safe</em>, <code>Result&lt;T&gt;</code>-based version of <code>ProvisionUser()</code> looks like (this is the same code I showed at the start of this post):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is nearly 30 lines of (very hard to read) code. 🙈</p> <p>But by adding the <code>SelectMany()</code> extension method, we've unlocked a superpower. We can remove all the duplication and verbosity in the above implementation, use the LINQ query expression syntax, and implement the <code>ProvisionUser()</code> method in a fraction of the amount of code.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span>\n            <span class=\"token keyword\">from</span> claims <span class=\"token keyword\">in</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> validatedClaims <span class=\"token keyword\">in</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> tenantId <span class=\"token keyword\">in</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> createRequest <span class=\"token keyword\">in</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">from</span> userAccount <span class=\"token keyword\">in</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount2</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">select</span> userAccount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I think it's <em>really</em> hard to argue with the elegance, simplicity, and readability of this code. It almost reads like the procedural code we wrote way back at the start of the previous post, <em>before</em> we had error handling. But we actually <em>do</em> have error handling; any failure <code>Result&lt;T&gt;</code> returned by <code>GetClaimValues()</code>, <code>ValidateClaims()</code> etc will automatically short-circuit the chain of calls and return the error.</p> <blockquote> <p>This style of error handling is sometimes described as \"Railway Oriented Programming\", a term coined by <a href=\"https://twitter.com/ScottWlaschin\">Scott Wlaschin</a>. You can read more and find links to his various talks on the topic <a href=\"https://fsharpforfunandprofit.com/rop/\">here</a>.</p> </blockquote> <p>Before I close this post, I want to finish with a few warnings about taking this to the extreme.</p> <h2 id=\"caveats-to-the-result-pattern-and-railway-oriented-programming\" class=\"heading-with-anchor\"><a href=\"#caveats-to-the-result-pattern-and-railway-oriented-programming\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats to the result pattern and railway oriented programming</a></h2> <p>Through this series, I've been using a really quite simple scenario, showing how you might add flow control to it \"incorrectly\" before refactoring to use <code>Result&lt;T&gt;</code> with LINQ. But it's easy to take things too far and use <code>Result&lt;T&gt;</code> in ways that you probably shouldn't, so this section describes a few caveats to be aware of (many of which are covered in <a href=\"https://fsharpforfunandprofit.com/posts/against-railway-oriented-programming/\">Scott's post</a>).</p> <h3 id=\"don-t-try-to-wrap-all-exceptions-in-a-resultt\" class=\"heading-with-anchor\"><a href=\"#don-t-try-to-wrap-all-exceptions-in-a-resultt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Don't try to wrap all exceptions in a <code>Result&lt;T&gt;</code></a></h3> <p>When I introduced <code>Result&lt;T&gt;</code> it was as a way to replace the exceptions that were being used for flow control. But it's important to understand that it was <em>only</em> those flow-control exceptions I was trying to replace.</p> <p>Trying to catch <em>every</em> exception and return a <code>Result&lt;T&gt;</code> can end up adding a lot of complexity to your application. <code>Result&lt;T&gt;</code> is great for handling <em>flow control</em>; exceptions should typically be for <em>exceptional</em> situations.</p> <h3 id=\"the-resultt-shown-in-these-posts-is-not-what-you-want\" class=\"heading-with-anchor\"><a href=\"#the-resultt-shown-in-these-posts-is-not-what-you-want\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The <code>Result&lt;T&gt;</code> shown in these posts is not what you want</a></h3> <p>In all the examples I've shown so far, I've used <code>Exception</code> as the error type of the <code>Result&lt;T&gt;</code>, but the reality is that might <em>not</em> what you want to do in practice. <code>Exception</code> in this post was a stand in for \"description of the error\", but it's a pretty indirect way of doing that.</p> <p>Another approach might be to define your result type like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TError<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">TError<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You could then also define a <code>UserProvisioningError</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">UserProvisioningError</span>\n<span class=\"token punctuation\">{</span>\n    InvalidClaims<span class=\"token punctuation\">,</span>\n    MissingTennantId<span class=\"token punctuation\">,</span>\n    UnknownTenantId<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These could provide fine-grained reasons about why the method failed, and the method signature becomes something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">,</span> UserProvisioningError<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n</code></pre> <blockquote> <p>This is another case where F# really handles this more nicely, as you can attach arbitrary additional data to each of the error cases if useful. You <em>can</em> do that with some libraries in C# (such as <a href=\"https://github.com/mcintyre321/OneOf\">OneOf</a> for example) but it's more clunky than having support native to the language.</p> </blockquote> <p>If you're doing <a href=\"https://fsharpforfunandprofit.com/books\">domain modelling</a> then defining all these error cases can be very useful. But it's also easy to go <em>too</em> far with this approach.</p> <h3 id=\"consider-whether-you-need-resultt-at-all\" class=\"heading-with-anchor\"><a href=\"#consider-whether-you-need-resultt-at-all\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Consider whether you need <code>Result&lt;T&gt;</code> at all</a></h3> <p>Having argued throughout this series that we <em>can</em> use <code>Result&lt;T&gt;</code> without making our code horribly gnarly and verbose, I'm now going to ask you to think about whether this is <em>actually</em> better.</p> <p>Initially I was comparing to the case where we're throwing exceptions for flow control, and expecting the caller to handle all the different errors we might throw. I think the <code>Result&lt;T&gt;</code> approach shown here is clearly preferable.</p> <p>But that doesn't mean you need (or want) to use <code>Result&lt;T&gt;</code> <em>everywhere</em>. If you're just wrapping your method calls in <code>try</code>-<code>catch</code> statements and converting that to <code>Result&lt;T&gt;</code> then are you <em>actually</em> adding any value by using <code>Result&lt;T&gt;</code>? You've essentially just re-implemented exception handling!</p> <blockquote> <p>Internalising this is really difficult - when I first started exploring F# and functional programming I tried to make it so that exceptions would <em>never</em> escape a method, which meant <code>Result&lt;T&gt;</code> everywhere… and frankly it kinda sucked 😅</p> </blockquote> <p>On the other hand, if you are using exceptions for handling common situations (which aren't just due to programming-errors), then the result pattern can be very useful for codifying paths through your code.</p> <p>In the next post of this series I show some examples of how to handle some variations on this pattern, such as when the method's you're calling use <code>async</code> and <code>await</code>, or you want to manipulate <code>Result&lt;T&gt;</code> objects <em>without</em> \"unwrapping\" them.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed LINQ, focusing on the <code>Select()</code> and <code>SelectMany()</code> methods, and how they can be used to enable LINQ's query syntax. Next I showed how you could implement these methods for a <code>Result&lt;T&gt;</code> type. Finally I refactored the gnarly result pattern code that used <code>Switch()</code> to use LINQ query syntax, and showed how this dramatically improves readability. Finally I discussed some reasons that you should consider <em>not</em> using the result pattern. In the next post, I show how you can take this LINQ support further, to support more situations.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/",
      "Title": "Replacing Exceptions-as-flow-control with the result pattern: Working with the result pattern - Part 1",
      "PublishDate": "2024-10-08T09:00:00+00:00",
      "Summary": "In this post I discuss why you might want to use the result pattern, demonstrate it with a simple example and show a naïve, ugly, solution",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/no_exceptions.png\" /><nav><p>This is the one post in the series: <a href=\"/series/working-with-the-result-pattern/\">Working with the result pattern</a>. </p> <ol class=\"list-none\"><li>Part 1 - Replacing Exceptions-as-flow-control with the result pattern (this post) </li><li><a href=\"/working-with-the-result-pattern-part-2-safety-and-simplicity-with-linq/\">Part 2 - Safety and simplicity with LINQ</a></li><li><a href=\"/working-with-the-result-pattern-part-3-adding-more-extensions/\">Part 3 - Adding more extensions to Result&lt;T&gt;</a></li><li><a href=\"/working-with-the-result-pattern-part-4-is-the-result-pattern-worth-it/\">Part 4 - Is the result pattern worth it?</a></li></ol></nav><p>In this post I provide a worked example of going from using exceptions for flow-control to using a result pattern to avoid throwing exceptions. There are lots of similar posts out there (such as <a href=\"https://www.milanjovanovic.tech/blog/functional-error-handling-in-dotnet-with-the-result-pattern\">this one from Milan Jovanović</a> or <a href=\"https://medium.com/@wgyxxbf/result-pattern-a01729f42f8c\">this one</a>), but this post is intended primarily as a prelude to the more interesting posts in the series about how to improve working with the result pattern in practice!</p> <ul><li><a href=\"#background-do-we-need-another-post-about-the-result-pattern-\">Background: do we need another post about the result pattern?</a></li> <li><a href=\"#the-starting-point-happy-path-handling-only\">The starting point: happy path handling only</a></li> <li><a href=\"#using-exceptions-for-flow-control\">Using exceptions for flow control</a></li> <li><a href=\"#using-a-basic-result-pattern\">Using a basic result pattern</a></li> <li><a href=\"#making-the-result-pattern-safer\">Making the result pattern safer</a></li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"background-do-we-need-another-post-about-the-result-pattern-\" class=\"heading-with-anchor\"><a href=\"#background-do-we-need-another-post-about-the-result-pattern-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Background: do we need another post about the result pattern?</a></h2> <p>A while back, I saw a tweet from <a href=\"https://x.com/jeremydmiller\">Jeremy Miller</a> describing how he doesn't like the \"<a href=\"https://www.milanjovanovic.tech/blog/functional-error-handling-in-dotnet-with-the-result-pattern\">Result pattern</a>\", and that he has been recommending people remove it from their codebase</p> <blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Funny, I’m recommending a client start to rip this strategy out of their codebase because of the extra complexity, code noise, and overhead it adds. <a href=\"https://t.co/6BGSAF9sVS\">https://t.co/6BGSAF9sVS</a></p>— Jeremy D. Miller (@jeremydmiller) <a href=\"https://twitter.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">July 11, 2024</a></blockquote><script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script><p>Having followed Jeremy for a long time, and knowing his appreciation for minimal code and strong dislike of boilerplate code, I wasn't surprised. I can't deny I was a <em>little</em> disappointed though, as I've seen this pattern used to dramatically <em>simplify</em> code rather than introduce noise.</p> <blockquote> <p>Note that I'm obviously not suggesting that would always be the case, just that it <em>can</em>.</p> </blockquote> <p>Reading through Jeremy's replies there, his biggest gripe appears to be with people trying to thread <code>Result&lt;T&gt;</code> objects back through a mediator handler to then be interpreted by MVC (or similar) at a higher level, potentially adding a lot of additional abstraction and complexity on the way. I can't really comment on that, though I will point out that the <a href=\"https://www.nuget.org/packages/Ardalis.Result\">Ardalis.Result</a> and <a href=\"https://www.nuget.org/packages/Ardalis.Result.AspNetCore\">Ardalis.Result.AspNetCore</a> packages from <a href=\"https://ardalis.com/\">Steve Smith</a> take this approach and are very popular.</p> <p>For me, the main benefits of the result pattern are:</p> <ul><li>You don't need to use exceptions for normal control flow. Exceptions are relatively expensive performance-wise in .NET, so throwing thousands of exceptions is generally Bad™. You can still use exceptions for <em>exceptional</em> cases of course.</li> <li>Using a <code>Result</code> object can make the API failure conditions more explicit, and can therefore sometimes be easier to reason about, and reduce the chance of incorrect usages.</li></ul> <p>The accusation that <code>Result</code> increases verbosity certainly <em>can</em> be true, and until we get <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md#result\">native typed unions support in C#</a> that's probably <em>always</em> going to be true to an extent. But in this series, I'm hoping to show how you can use <code>Result</code> types with LINQ to actually <em>reduce</em> clutter.</p> <h2 id=\"the-starting-point-happy-path-handling-only\" class=\"heading-with-anchor\"><a href=\"#the-starting-point-happy-path-handling-only\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">The starting point: happy path handling only</a></h2> <p>For this post I'm going to slowly refactor a hypothetical simple API which takes a login request from an external provider, validates it, and gets or creates a new user in an application. The details aren't important here, I just wanted to work with a method that performs some significant work, so we can more easily see what's going on.</p> <p>The code below shows the <code>UserProvisioningService</code> which exposes the <code>ProvisionUser()</code> method. This method takes in some details that came from an external login request, and attempts to get or create a user account in the system. There's currently no error handling for now (and all the dependency methods are just stubs) but the method itself is pretty easy to read:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Attempt to fetch the claims associated with the provided info</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// We've retrieved the claims based on the login info, but we can't</span>\n        <span class=\"token comment\">// necessarily trust that, so validate and sanitize the claims</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Now we have the claims, fetch the appropriate tenant ID based on the claims</span>\n        <span class=\"token class-name\">Guid</span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Combine the tenantId and claims to create the provisioning request</span>\n        <span class=\"token class-name\">ProvisionUserRequest</span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Call the service to actually create the account.</span>\n        <span class=\"token comment\">// Maybe this calls a database, or something else </span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identityResult <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Return the user</span>\n        <span class=\"token keyword\">return</span> identityResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Helper methods (just stubs)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Guid</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">ProvisionUserRequest</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Helper types/services</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ExternalLoginInfo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">UserAccount</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CreateUserService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProvisionUserRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>For the <em>most</em> part, this code just assumes everything will be fine, but there's some hidden behaviour in the way of exceptions. What if the <code>ValidateClaims</code> stage can't find any valid claims, should we continue with the process? If not, the only way to \"break out\" of the chain is to return null or throw an exception. Similarly, will <code>createUserService.GetOrCreateAccount()</code> always succeed? Or do we need to handle exceptions there? What do we do in that situation?</p> <h2 id=\"using-exceptions-for-flow-control\" class=\"heading-with-anchor\"><a href=\"#using-exceptions-for-flow-control\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using exceptions for flow control</a></h2> <p>One of the common traps to fall into in this situation is using <code>Exception</code>s for flow control. This is where you throw an exception as a way of \"returning\" from a method but without returning a value, breaking out of the normal method execution.</p> <p>As an example, consider why you might add this to the previous example. What if the <code>validatedClaims</code> are empty, should we continue with the method? Probably not. Similarly, what if we can't retrieve a tenant ID, there's no point continuing right?</p> <blockquote> <p>Using exceptions for flow control can seem attractive because it means you can throw <em>different</em> exceptions for different types of errors, and handle those in the calling method. That differs to the approach of returning <code>null</code> (for example), which tells you that <em>something</em> went wrong, but not <em>what</em> went wrong.</p> </blockquote> <p>The following shows an example of how someone might address these concerns, using exceptions to break out of the normal method flow:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// No longer return UserAccount? as we throw if something is wrong</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">UserAccount</span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">?</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>claims <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Throwing an exception instead of returning null</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The info provided was not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Throwing an exception instead of ignoring the issue</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The claims provided were not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tenantId <span class=\"token operator\">==</span> Guid<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Using custom exceptions to \"describe\" the issue</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> identityResult <span class=\"token operator\">=</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> identityResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Using exceptions for flow control is \"easy\" to some extent:</p> <ul><li>You can throw an exception <em>anywhere</em>, arbitrarily \"deep\" into the method stacks.</li> <li>You can create specialised exceptions to describe the error (e.g. <code>UnknownTenantException</code> in the example above).</li> <li>You don't need to change your method signatures to use them.</li></ul> <p>There are downsides though:</p> <ul><li>Throwing exceptions for \"normal\" scenarios is expensive. When you throw an exception, the runtime has to do quite a lot of work to create the stack trace and to unwind the method stack as appropriate.</li> <li>You need to remember to handle the exceptions in the calling code, but it's not clear from the method signature <em>which</em> types of exceptions you will need to handle.</li> <li>Explicitly checking and throwing exceptions repeatedly is verbose.</li> <li>If you want to provide \"correct\" semantic exceptions (e.g. <code>UnknownTenantException</code>) then you might need to wrap each method call with an exception handler before throwing the correct exception.</li></ul> <p>To expand on that last point, if <code>GetTenantId()</code> could sometimes throw other types of exceptions, you might need to wrap the call something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Guid</span> tenantId<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span>\n<span class=\"token punctuation\">{</span>\n    tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Changing <em>every</em> method call inside <code>ProvisionUser</code> to use that pattern could get very verbose 😅</p> <p>The result pattern is a general solution to the first two issues, by making the error cases explicit in the method signature.</p> <h2 id=\"using-a-basic-result-pattern\" class=\"heading-with-anchor\"><a href=\"#using-a-basic-result-pattern\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using a basic result pattern</a></h2> <p>Ok, in the next section I'm going to show pretty much the most basic version of a result pattern you could implement. Note that I'm <em>not</em> suggesting you roll your own <code>Result&lt;T&gt;</code> class; there's plenty of libraries out there that do this, and the .NET base class library might have <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md\">its own implementation</a> soon. This is purely so that you can see the basics of what it might look like to use the result pattern in place of exceptions.</p> <p>First of all we'll see the <code>Result&lt;T&gt;</code> class. This is a simple type that can be in one of two states:</p> <ul><li><code>IsSuccess: true</code>, in which case <code>Value</code> is defined and has a value, and <code>Error</code> is <code>null</code>.</li> <li><code>IsSuccess: false</code>, in which case <code>Value</code> is undefined and instead <code>Error</code> contains an exception.</li></ul> <p>A basic implementations might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Success constructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        Error <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Failure constructor</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        Value <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n        Error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">T<span class=\"token punctuation\">?</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Exception<span class=\"token punctuation\">?</span></span> Error <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Helper methods for constructing the `Result&lt;T&gt;`</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// Allow converting a T directly into Result&lt;T&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TSuccess<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TSuccess</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Most practical <code>Result&lt;T&gt;</code> types will have <em>way</em> more to them than this, but it's sufficient for showing the basics. The following code shows how you might convert the previous exception-based flow handling to use the above simple result type.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Note 👇 The return type has changed</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Each of the methods returns a `Result&lt;T&gt;` type which we can inspect</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claims <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>claims<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If the method call wasn't successful, we can return a \"failed\" Result&lt;T&gt; </span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The info provided was not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// Using Value to extract the T from the Result&lt;T&gt;      👇</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaims <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validatedClaims<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ValidationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The claims provided were not valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenantId <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>tenantId<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UnknownTenantException</span><span class=\"token punctuation\">(</span>validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> createRequest <span class=\"token operator\">=</span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>createRequest<span class=\"token punctuation\">.</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to create provision user request\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Each of the methods we called return a Result&lt;T&gt; which we check</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Relying on the implicit conversion from T to Result&lt;T&gt;</span>\n</code></pre> <p>The above code shows the basics of how a <code>Result&lt;T&gt;</code> type could replace using exceptions for flow handling, but it's not a great example of the pattern, for many reasons:</p> <ul><li>The overall flow of the code is still hard to follow, with lots of verbose \"check and return\" statements.</li> <li>The \"error\" type is still a generic \"Exception\" which is an unbounded possibility of values.</li> <li>We're checking <code>IsSuccess</code> before accessing <code>Value</code> in the above example, but there's nothing stopping you accessing <code>Value</code> <em>or</em> <code>Error</code> \"incorrectly\", at which point you will likely get a \"real\" <code>NullReferenceException</code>!</li></ul> <p>Frankly, the only real benefit we have here is that callers of <code>ProvisionUser</code> can easily see from the method signature that the method is \"expected\" to fail for some subset of cases, given that it now returns a <code>Result&lt;UserAccount&gt;</code> instead of <code>UserAccount</code>. Is that worth the tradeoff? Maybe, but probably not for this implementation. If this was what the result pattern always looked like, it would be very hard to recommend.</p> <p>But we don't have to stop here. With one small change we can address the final point above, and make our types \"safe\" so you can't accidentally call <code>Value</code> or <code>Error</code>.</p> <h2 id=\"making-the-result-pattern-safer\" class=\"heading-with-anchor\"><a href=\"#making-the-result-pattern-safer\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Making the result pattern safer</a></h2> <p>The <code>Result&lt;T&gt;</code> pattern in the previous section is slightly problematic in that it doesn't stop you trying to access the <code>Value</code> (or <code>Error</code>) property when you shouldn't. As a guard around this, many <code>Result&lt;T&gt;</code> implementations don't expose these properties directly. Instead, you have a <code>Switch()</code> method (sometimes called <code>Match()</code> or various other names).</p> <p>The <code>Switch()</code> method works a bit like a switch statement or switch expression; you provide a method to run in each possible case for a given <code>Result&lt;T&gt;</code> object:</p> <ul><li>If the <code>Result&lt;T&gt;</code> has a value, you provide a <code>Func&lt;T&gt;</code> which is passed the value</li> <li>If the <code>Result&lt;T&gt;</code> has an error, you provide a <code>Func&lt;Exception&gt;</code> which is passed the error.</li></ul> <p>There are also variations where you provide a <code>Func&lt;T, TReturn&gt;</code> and return a value. That's the version I show in the example below (the reason why will become clear soon):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We don't expose these publicly any more</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Exception<span class=\"token punctuation\">?</span></span> _error<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Same constructors</span>\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        _value <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n        _error <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">Result</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        IsSuccess <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        _value <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n        _error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberNotNullWhen</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsSuccess <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This Method takes two Func&lt;T&gt;, one for the success case and one for the error case</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TReturn<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> TReturn<span class=\"token punctuation\">&gt;</span></span> onSuccess<span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>Exception<span class=\"token punctuation\">,</span> Exception<span class=\"token punctuation\">&gt;</span></span> onFailure<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>IsSuccess<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If this result has a value, run the success method,</span>\n            <span class=\"token comment\">// which returns a different value, and then we create a</span>\n            <span class=\"token comment\">// Result&lt;TReturn&gt; from it (implicitly)</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>_value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// If this result is an error, run the error method</span>\n            <span class=\"token comment\">// to allow the user to manipulate/inspect the error.</span>\n            <span class=\"token comment\">// We then create a new Result&lt;TReturn&gt; result object</span>\n            <span class=\"token comment\">// from the error it returns</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> err <span class=\"token operator\">=</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Result<span class=\"token operator\">&lt;</span>TReturn<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Result</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token function\">Success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Ok, we have our \"safe\" <code>Result&lt;T&gt;</code> class, which enforces that we can't access <code>Value</code> if it's not available. But what does it look like to use this in code?</p> <p>Well, the bad news is, it's kind of horrible 😅 I've annotated the below code best I can, but the reality is that even though the code is guaranteed to block certain types of errors by encapsulating the <code>IsSuccess</code> checking, it's just <em>awful</em> to read…</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserProvisioningService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CreateUserService</span> createUserService<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ProvisionUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> info<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1. Try to get the initial claim results</span>\n        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> claimsResult <span class=\"token operator\">=</span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> claimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> claims <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// if the claims we retrieved successfully, run this function</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">// 2. Try to validate the claims</span>\n                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> validatedClaimsResult <span class=\"token operator\">=</span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> validatedClaimsResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> validatedClaims <span class=\"token operator\">=&gt;</span>  <span class=\"token comment\">// validation was successful</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\">// 3. Try to extract the tenant ID</span>\n                        <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> tenantIdResult <span class=\"token operator\">=</span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">return</span> tenantIdResult<span class=\"token punctuation\">.</span><span class=\"token function\">Switch</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> tenantId <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// extracted successfully</span>\n                            <span class=\"token punctuation\">{</span>\n                                <span class=\"token comment\">// 4. Create the ProvisionUserRequest object</span>\n                                <span class=\"token class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> createRequestResult <span class=\"token operator\">=</span>\n                                    <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span>tenantId<span class=\"token punctuation\">,</span> validatedClaims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                <span class=\"token keyword\">return</span> createRequestResult<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Switch</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Result<span class=\"token punctuation\">&lt;</span>UserAccount<span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>\n                                    <span class=\"token named-parameter punctuation\">onSuccess</span><span class=\"token punctuation\">:</span> createRequest <span class=\"token operator\">=&gt;</span> <span class=\"token comment\">// created the request successfully</span>\n                                    <span class=\"token punctuation\">{</span>\n                                        <span class=\"token comment\">// 5. Try to create the account, and return the Result&lt;UserAccount&gt;</span>\n                                        <span class=\"token keyword\">return</span> createUserService<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateAccount</span><span class=\"token punctuation\">(</span>createRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 4 failed, return the error </span>\n                            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 3 failed, return the error </span>\n\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span> Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 2 failed, return the error </span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token named-parameter punctuation\">onFailure</span><span class=\"token punctuation\">:</span> ex <span class=\"token operator\">=&gt;</span>  Result<span class=\"token operator\">&lt;</span>UserAccount<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Fail</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Step 1 failed, return the error </span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetClaimValues</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ExternalLoginInfo</span> loginInfo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">ValidateClaims</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> claims<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>Guid<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetTenantId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Result<span class=\"token punctuation\">&lt;</span>ProvisionUserRequest<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">CreateProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Guid</span> employerId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Claim<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> claims<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ProvisionUserRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This code is <em>really</em> hard to follow. There's the ever increasing indentation (<a href=\"https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)\">the pyramid of doom</a>) caused by (effectively) lots of nested <code>if</code> statements. The error case arguments (<code>onFailure</code>) are a <em>long</em> way from the matching (<code>onSuccess</code>) arguments, which makes it hard to match them up. And what's more, the error cases aren't doing anything other than re-wrapping the exception from a failed <code>Result&lt;T&gt;</code> type into a <code>Result&lt;TReturn&gt;</code>.</p> <blockquote> <p>Note that because they'll be built into the language, <a href=\"https://github.com/dotnet/csharplang/blob/main/proposals/TypeUnions.md\">the type-unions proposal</a> uses <code>switch</code> <em>statements</em> and <em>expressions</em> rather than a <code>Switch</code> method, but functionally it works in the same way.</p> </blockquote> <p>The very repetitive nature of the code above is exactly the sort of boilerplate and cruft that Jeremy Miller often rails against, and is the sort of thing I <em>hope</em> he's referring to in <a href=\"https://x.com/jeremydmiller/status/1811385167765741943?ref_src=twsrc%5Etfw\">his original post</a>. The good news is that we don't have to stop there—in the next post we'll make all that cruft disappear!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I provided a brief motivation for using the result pattern in applications to avoid using exceptions for flow control. I started with a simple implementation without any error checking, then added exceptions to handle error cases. Unfortunately using <code>Exception</code>s for common error cases can be very slow and means the caller has to remember to catch those exceptions.</p> <p>As a \"solution\" to exceptions, I replaced the <code>Exception</code>s with a <code>Result&lt;T&gt;</code> type and the result pattern. For safety, we enforced that you had to use a <code>Switch()</code> method to \"extract\" the result. Unfortunately, this made the final code incredibly cumbersome and verbose, so in the next post we'll see how we can simplify it significantly!</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/",
      "Title": "Major updates to NetEscapades.​AspNetCore.​SecurityHeaders",
      "PublishDate": "2024-10-01T09:00:00+00:00",
      "Summary": "In this post I describe the recent major changes to NetEscapades.AspNetCore.SecurityHeaders, a NuGet package for adding security headers to your apps.",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/securityheaders_banner.png\" /><p>In this post I provide an update on the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> project. I've just released a preview version of <code>1.0.0</code>, which addresses some longstanding requests for extra functionality, updates the supported target frameworks, and more. In this post I provide a quick overview of the library, and then discuss the major changes made in this first preview.</p> <ul><li><a href=\"#what-are-security-headers-\">What are security headers?</a></li> <li><a href=\"#adding-security-headers-to-your-app\">Adding security headers to your app</a></li> <li><a href=\"#major-changes-in-1-0-0-preview-1\">Major changes in <code>1.0.0-preview.1</code></a> <ul><li><a href=\"#changes-to-the-supported-frameworks\">Changes to the supported frameworks</a></li> <li><a href=\"#changes-to-headers\">Changes to headers</a> <ul><li><a href=\"#changes-to-the-default-headers\">Changes to the default headers</a></li> <li><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></li> <li><a href=\"#expect-ct-is-no-longer-recommended\"><code>Expect-CT</code> is no longer recommended</a></li> <li><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></li> <li><a href=\"#new-adddefaultapisecurityheaders-method\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></li> <li><a href=\"#feature-policy-is-marked-obsolete\"><code>Feature-Policy</code> is marked obsolete</a></li></ul> </li> <li><a href=\"#applying-different-headers-to-some-endpoints\">Applying different headers to some endpoints</a></li> <li><a href=\"#customizing-the-headers-completely\">Customizing the headers completely</a></li> <li><a href=\"#document-headers-functionality-has-been-removed\">\"Document headers\" functionality has been removed</a></li> <li><a href=\"#changes-to-nonce-generation\">Changes to nonce generation</a></li></ul> </li> <li><a href=\"#summary\">Summary</a></li></ul> <h2 id=\"what-are-security-headers-\" class=\"heading-with-anchor\"><a href=\"#what-are-security-headers-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are security headers?</a></h2> <p>Security headers are headers that you can return in your HTTP responses which improve the overall security of your application. The headers instruct browsers to activate or disable various features, with the overall goal of hardening your application and reducing your attack surface area.</p> <p>Some of <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\">these headers</a> apply to all HTTP responses, while <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\">others</a> only really make sense for HTML responses. Nevertheless, it <em>can</em> make sense to apply theoretically-HTML-only headers to non-HTML responses as part of a defence-in-depth approach, <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as described by OWASP</a>.</p> <p>The main problem with security headers is that there are <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">a <em>lot</em> of them</a>, and the list is generally growing and evolving, with new headers being introduced and others being retired. What's more, different headers use different patterns for lists—some use <code>;</code> separators, others use <code>,</code>, and others use a space—so it's easy to set them up incorrectly.</p> <p>The <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> package aims to help you set up security headers for your ASP.NET Core app. It provides sensible defaults, with a fluent builder pattern for customizing and configuring the headers for your specific application requirements.</p> <h2 id=\"adding-security-headers-to-your-app\" class=\"heading-with-anchor\"><a href=\"#adding-security-headers-to-your-app\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding security headers to your app</a></h2> <p>In this section I show the quickest was to get started with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> and to start adding security headers to your application.</p> <p>First, add the package to your app:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package NetEscapades.AspNetCore.SecurityHeaders <span class=\"token parameter variable\">--version</span> <span class=\"token number\">1.0</span>.0-preview.1\n</code></pre> <p>Alternatively, add the package to your <em>.csproj</em> directly</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk.Web<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add the package --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>NetEscapades.AspNetCore.SecurityHeaders<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0.0-preview.1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Finally, add the security headers middleware to the start of your middleware pipeline with the <code>UseSecurityHeaders()</code> extension method. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Add the security headers to the start of the pipeline</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The <code>SecurityHeadersMiddleware</code> registers a callback that adds several headers to all responses. By default, the middleware adds the following header to your responses:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>only applied to HTTPS responses</em></li></ul> <p>These headers were chosen based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html#security-headers\">guidance from OWASP</a> to provide security hardening benefits, while being broadly applicable to most applications.</p> <blockquote> <p>These headers don't represent the <em>most</em> secure set you could choose, but rather a \"generally safe\" set for most applications. Ideally you should customise these headers to add a more secure (and more restrictive) set.</p> </blockquote> <p>If you want to change the headers that are applied, you can create an instance of <code>HeaderPolicyCollection</code>, and use the fluent builder interface to customize the added headers. The following shows an example which specifically adds all the default headers independently.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policyCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAgeIncludeSubDomains</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">maxAgeInSeconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// maxage = one year in seconds</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n    <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddCustomHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X-My-Test-Header\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Header value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policyCollection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>For most of the history of <em>NetEscapades.AspNetCore.SecurityHeaders</em>, this was been the only way to configure the security headers for your application. The advantage is that it's <em>simple</em>—there's no services to add, nothing to \"reason\" about—whatever headers you configure, are added.</p> <p>However, some people wanted more control, for example to be able to add different headers to different endpoints in their application, or to customize the headers on a request-by-request basis. That flexibility is largely what the changes in <code>1.0.0</code> are about, but as this is a major version, I took the opportunity to make some other larger changes too.</p> <p>For the rest of this post I'll describe some of the biggest changes in <code>1.0.0-preview.1</code>.</p> <h2 id=\"major-changes-in-1-0-0-preview-1\" class=\"heading-with-anchor\"><a href=\"#major-changes-in-1-0-0-preview-1\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Major changes in <code>1.0.0-preview.1</code></a></h2> <p>The following sections describe the high level changes and features included in <code>1.0.0-preview.1</code>. These aren't guaranteed to make it into the final <code>1.0.0</code> release, so do let me know what you think about them!</p> <p>Before we get started, the first thing to note is that <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues/194\">has a logo</a>:</p> <p><img src=\"/content/images/2024/headers_logo.png\" alt=\"NetEscapades.AspNetCore.SecurityHeaders\"></p> <p>A big thanks to <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social\">Khalid</a> for putting that together <a href=\"https://hachyderm.io/@khalidabuhakmeh@mastodon.social/113205536777140020\">so quickly</a>! Now lets look at the new features and breaking changes.</p> <h3 id=\"changes-to-the-supported-frameworks\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-supported-frameworks\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the supported frameworks</a></h3> <p>I first created <em>NetEscapades.AspNetCore.SecurityHeaders</em> way back in 2016, when ASP.NET Core was just being released. Back then, ASP.NET Core could <em>also</em> be run on .NET Framework. The original thought was that this mode would serve as a migration path from ASP.NET to ASP.NET Core.</p> <p>That path is rarely recommended these days, and instead, <a href=\"https://learn.microsoft.com/en-us/aspnet/core/migration/inc/overview\">a \"strangler fig\" pattern is recommended</a>. ASP.NET Core has not been supported on .NET Framework since version 2.1, and as such <code>1.0.0-preview.1</code> of <em>NetEscapades.AspNetCore.SecurityHeaders</em> finally drops support for .NET Framework too, by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/167\">dropping support for <code>netstandard2.0</code></a> and everything prior to .NET Core 3.1.</p> <p>Given the package still supports .NET Core 3.1+ it's <em>very</em> unlikely you'll be impacted by this change unless you're on a (very) unsupported version of .NET Core. And if you are, I would strongly advise you to update anyway!</p> <h3 id=\"changes-to-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to headers</a></h3> <p>In the next section I describe some of the changes to specific security headers, including changes to default values, new APIs, and deprecated methods.</p> <h4 id=\"changes-to-the-default-headers\" class=\"heading-with-anchor\"><a href=\"#changes-to-the-default-headers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to the default headers</a></h4> <p>When you don't specify a custom <code>HeaderPolicyCollection</code>, <em>NetEscapades.AspNetCore.SecurityHeaders</em> applies a default set of headers, as I described previously. These headers are encapsulated in the <code>AddDefaultSecurityHeaders()</code> extension method, so the following are equivalent:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">app<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This...</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>policies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 ..is equivalent to this.</span>\n</code></pre> <p>In <code>1.0.0-preview.1</code> the headers that are applied have changed slightly:</p> <ul><li><code>Cross-Origin-Opener-Policy=same-origin</code> is now added.</li> <li><code>X-XSS-Protection=1; mode-block</code> is no longer added.</li></ul> <p>The full set of headers added by default are now:</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li><code>Content-Security-Policy: object-src 'none'; form-action 'self'; frame-ancestors 'none'</code></li> <li><code>Cross-Origin-Opener-Policy: same-origin</code></li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>HTTPS responses only</em></li></ul> <p>If you don't want this change, you can simply create a custom <code>HeaderPolicyCollection</code> configured as it was previously:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameOptionsDeny</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddXssProtectionBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This is no longer included by default</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentTypeOptionsNoSniff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddStrictTransportSecurityMaxAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddReferrerPolicyStrictOriginWhenCrossOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">RemoveServerHeader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddContentSecurityPolicy</span><span class=\"token punctuation\">(</span>builder <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddObjectSrc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFormAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Self</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      builder<span class=\"token punctuation\">.</span><span class=\"token function\">AddFrameAncestors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <h4 id=\"x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#x-xss-protection-1-mode-block-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>X-XSS-Protection=1; mode-block</code> is no longer recommended</a></h4> <p>You may wonder why <code>X-XSS-Protection</code> was removed from the default headers. The <code>X-XSS-Protection</code> header is interesting in that it's a security header that <em>used</em> to be recommended to add to your applications to improve security. However these days it's <em>not</em> recommended, because, as described on <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\">MDN</a>:</p> <blockquote> <p>The <code>X-XSS-Protection</code> header \"can create XSS vulnerabilities in otherwise safe websites\"</p> </blockquote> <p>That's clearly not an example of a good header to add by default, so <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/168\">it's been removed</a> from the default set of security headers and <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/191\">marked obsolete</a>. You can still add it to your application if you want to, it's just not recommended unless you understand the risks.</p> <h4 id=\"expect-ct-is-no-longer-recommended\" class=\"heading-with-anchor\"><a href=\"#expect-ct-is-no-longer-recommended\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Expect-CT</code> is no longer recommended</a></h4> <p>The <code>Expect-CT</code> header lets sites opt-in to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Certificate_Transparency\">certificate transparency</a> requirements, but only Chrome and other Chromium-based browsers implemented Expect-CT, On top of that, Chromium deprecated the header in version 107 (Oct 2022), because <a href=\"https://chromestatus.com/feature/6244547273687040\">Chromium now enforces CT by default</a>.</p> <p>Given the header is deprecated and <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT\">no longer recommended</a>, it's <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/197\">now marked obsolete in <em>NetEscapades.AspNetCore.SecurityHeaders</em></a>.</p> <h4 id=\"new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"heading-with-anchor\"><a href=\"#new-permisionspolicybuilder-adddefaultsecuredirectives-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>PermisionsPolicyBuilder.AddDefaultSecureDirectives()</code> method</a></h4> <p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy\"><code>Permissions-Policy</code> header</a> provides a way to allow or deny the browser from using various features, such as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API\">Web Bluetooth API</a> or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/camera\">Camera</a>. Support for <code>Permissions-Policy</code> has been available for some time (with <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/177\">many new policies added recently</a>).</p> <p>One slight annoyance with building up a <code>Permissions-Policy</code> is that there are so <em>many</em> policies. If you're building a JSON API (for example) then you'll likely want to disable <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">essentially all of them</a>, at which point you're calling a <em>lot</em> of methods.</p> <p><code>1.0.0-preview.1</code> adds two new convenience method that add (most) of <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the headers recommended by OWASP for REST endpoints</a>. If you just want to add the default set of directives you can call <code>AddPermissionsPolicyWithDefaultSecureDirectives()</code> directly on <code>HeaderPolicyCollection</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicyWithDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Alternatively, if you want to customize the <code>Permissions-Policy</code>, you can call <code>PermissionsPolicyBuilder.AddDefaultSecureDirectives()</code>, and then add (or override) additional directives:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> policies <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">AddPermissionsPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> \n    <span class=\"token punctuation\">{</span>\n      p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecureDirectives</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Add the default directives</span>\n      p<span class=\"token punctuation\">.</span><span class=\"token function\">AddAttributionReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">None</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Additional customization</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In both cases the default secure directives added are equivalent to:</p> <pre class=\"language-http\"><code class=\"language-http\">accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(),\nencrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(),\nmicrophone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(),\nscreen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()\n</code></pre> <p>Note that this isn't quite the same set of headers <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">as suggested by OWASP</a>, because <em>NetEscapades.AspNetCore.SecurityHeaders</em> doesn't include experimental features (to limit the scope and avoid too many breaking changes), but if you want to replicate those directives, you can always use the <code>AddCustomDirective()</code> helper.</p> <h4 id=\"new-adddefaultapisecurityheaders-method\" class=\"heading-with-anchor\"><a href=\"#new-adddefaultapisecurityheaders-method\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">New <code>AddDefaultApiSecurityHeaders()</code> method</a></h4> <p>The set of security headers added by <code>AddDefaultSecurityHeaders()</code> was chosen to provide a good balance between security and applicability for a basic ASP.NET Core website that's serving HTML. But many apps <em>only</em> serve JSON and are never expected to be loaded directly in the browser. In those scenarios we can apply a more \"aggressive\" set of headers.</p> <p>The new <code>AddDefaultApiSecurityHeaders()</code> extension method is designed for applying to APIs, and is based on <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">the recommendation from OWASP</a>. It adds the following headers (I've also highlighted any differences with <code>AddDefaultSecurityHeaders()</code>):</p> <ul><li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: Deny</code></li> <li><code>Referrer-Policy: no-referrer</code> <ul><li>Compared to <code>strict-origin-when-cross-origin</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Content-Security-Policy: default-src 'none'; frame-ancestors 'none'</code> <ul><li>Compared to <code>object-src 'none'; form-action 'self'; frame-ancestors 'none'</code> for <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Permissions-Policy: accelerometer=(), ambient-light-sensor=(), autoplay=(), camera=(), display-capture=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()</code> <ul><li>Not included in <code>AddDefaultSecurityHeaders()</code></li></ul> </li> <li><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code> - <em>HTTPS responses only</em></li></ul> <p>You can use <code>AddDefaultApiSecurityHeaders()</code> in your application by applying it to a <code>HeaderPolicyCollection</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 Configure to use the API security headers</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>It's worth noting that <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP recommends</a> always adding other non-security headers to API responses, such as <code>Cache-Control: no-store</code> and <code>Content-Type</code>.</p> <h4 id=\"feature-policy-is-marked-obsolete\" class=\"heading-with-anchor\"><a href=\"#feature-policy-is-marked-obsolete\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Feature-Policy</code> is marked obsolete</a></h4> <p><code>Feature-Policy</code> is a now-obsolete name for the <code>Permissions-Policy</code> header. The header has been deprecated, and as such the extension methods for adding <code>Feature-Policy</code> to your header collection have been marked <code>[Obsolete]</code>. You're recommended to switch to using <code>Permissions-Policy</code> instead.</p> <h3 id=\"applying-different-headers-to-some-endpoints\" class=\"heading-with-anchor\"><a href=\"#applying-different-headers-to-some-endpoints\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Applying different headers to some endpoints</a></h3> <p>The biggest feature by far in <code>1.0.0-preview.1</code> is the ability to apply different headers to different endpoints. This can be particularly useful if you want to maximally lock down your site, for example by applying a more restrictive <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\"><code>Content-Security-Policy</code></a> on certain pages, and relaxing it only when necessary.</p> <p>Let's say, for example, that your application contains both HTML and JSON endpoints. Perhaps you're serving HTML via Razor Pages, but you have some API endpoints that are also available. You would want to:</p> <ul><li>Apply the default security headers to all responses by default</li> <li>For the API endpoints, apply the headers added by <code>AddDefaultApiSecurityHeaders()</code></li></ul> <p>Prior to <code>1.0.0-preview.1</code>, that wasn't possible, but now it is! 🎉 To achieve this we need to do 3 things:</p> <ol><li>Configure default and named policies for the application.</li> <li>Add the middleware using <code>UseSecurityHeaders()</code> (as before).</li> <li>Apply custom policies to endpoints.</li></ol> <p>The following example shows all of those steps</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1. 👇 Configure the policies for the application</span>\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 👈 Configure the default policy</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">AddPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 Configure named policies</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 2. 👇 Add the security headers middleware</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseHttpsRedirection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseStaticFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseRouting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseAuthorization</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapRazorPages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">WithSecurityHeadersPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"API\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3. 👈 Apply a named policy to the endpoint</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the example above, the default security headers are applied to all responses <em>except</em> when the <code>/api</code> endpoint is invoked, in which case the named policy <code>\"API\"</code> is applied (which adds the <code>AddDefaultApiSecurityHeaders()</code> headers).</p> <blockquote> <p>If you're working with MVC controllers or Razor Pages, you can apply a named policy to an endpoint using the <code>[SecurityHeadersPolicyAttribute]</code> header.</p> </blockquote> <p>This should cater to the vast majority of cases where you need to apply multiple policies in an application, but if you really need it, you can now completely customise the policy that's applied, as you'll see in the next section.</p> <h3 id=\"customizing-the-headers-completely\" class=\"heading-with-anchor\"><a href=\"#customizing-the-headers-completely\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Customizing the headers completely</a></h3> <p>Applying different policies to different endpoints works well when you have a fixed number of policies to apply. However, in some cases you need to completely customise the headers for a given request. This might be the case if, for example, you are running a multi-tenant application, and the headers need to be matched to the incoming request.</p> <p>In <code>1.0.0-preview.1</code>, you can now completely customize the headers that will be applied by providing a lambda method that is executed just before the headers are applied, and by returning the <code>HeaderPolicyCollection</code> to apply.</p> <p>For example, lets imagine that you want to apply a different set of headers for some requests. You can call the <code>SetPolicySelector()</code> as shown below and provide a function to execute whenever a policy is about to be applied:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PolicySelectorContext</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: anything you need to build the HeaderPolicyCollection</span>\n      <span class=\"token comment\">// e.g. use services from the DI container (if you need to)</span>\n      <span class=\"token class-name\">IServiceProvider</span> services <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>RequestServices<span class=\"token punctuation\">;</span> \n\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> selector <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TenantHeaderPolicyCollectionSelector<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> tenant <span class=\"token operator\">=</span> services<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetService</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ITenant<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\">HeaderPolicyCollection</span> policy <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">GetPolicyForTenant</span><span class=\"token punctuation\">(</span>tenant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> policy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 👈 This is the policy that is applied</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The lambda/method you pass to <code>SetPolicySelector()</code> is provided a <code>PolicySelectorContext</code>, which includes all the information you might need to decide which policy to apply:</p> <ul><li><code>HttpContext HttpContext</code>—The current <code>HttpContext</code> for the request.</li> <li><code>IReadOnlyDictionary&lt;string, IReadOnlyHeaderPolicyCollection&gt; ConfiguredPolicies</code>—The named policies configured for the application.</li> <li><code>IReadOnlyHeaderPolicyCollection DefaultPolicy</code>—The default policy that applies to the request.</li> <li><code>string? EndpointPolicyName</code>—The name of the endpoint policy that applies to the request, if any.</li> <li><code>IReadOnlyHeaderPolicyCollection? EndpointPolicy</code>—The endpoint policy that applies to the request, if any. If no endpoint-specific policy applies to the request, returns <code>null</code>.</li> <li><code>IReadOnlyHeaderPolicyCollection SelectedPolicy</code>—The policy that would be applied to the endpoint by default: equivalent to <code>EndpointPolicy</code> if available, otherwise <code>DefaultPolicy</code>.</li></ul> <p>Your policy selector <em>must</em> return a policy collection. If you don't want to customise the policy for the request, return <code>ctx.SelectedPolicy</code>.</p> <blockquote> <p>Note that you should avoid building a new <code>HeaderPolicyCollection</code> on every request for performance reasons. Where possible, cache and reuse <code>HeaderPolicyCollection</code> instances. If you do need to create a new <code>HeaderPolicyCollection</code> from a <code>IReadOnlyHeaderPolicyCollection</code>, you can call <code>Copy()</code> to return a mutable instance.</p> </blockquote> <p>With the combination of endpoint-specific policies and the customisation available in <code>SetPolicySelector()</code>, I hope that people will now be able to customise their applications more easily, without needing to resort to hacking the internals of the library!</p> <h3 id=\"document-headers-functionality-has-been-removed\" class=\"heading-with-anchor\"><a href=\"#document-headers-functionality-has-been-removed\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">\"Document headers\" functionality has been removed</a></h3> <p>One consequence of the additional customisation possible with <code>SetPolicySelector()</code> and endpoint policies is that <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/pull/186\">the concept of \"document headers\" have been removed</a>. The <code>ApplyDocumentHeadersToContentTypes()</code> and <code>ApplyDocumentHeadersToAllResponses()</code> extension methods have now been marked <code>[Obsolete]</code> and are no-ops.</p> <p>These methods were originally added because some security headers don't really make <em>sense</em> when applied to passive content like JSON responses compared to HTML responses. Consequently, by default, some security headers (such as <code>Content-Security-Policy</code>) would be omitted unless the response was HTML or JavaScript.</p> <p>The only real benefit to this approach was that it reduced the size of the response (by omitting some headers). The down-side was that it added confusion and an additional configuration knob people had to consider. What's more <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/REST_Security_Cheat_Sheet.html#security-headers\">OWASP actually recommends you <em>do</em> send these headers</a> even if you have no intention of returning HTML, as part of a defence-in-depth approach. What's more, some of the headers that were previously considered \"document/HTML only\" actually <em>should</em> be added to all responses to protect against <a href=\"https://www.w3.org/Security/wiki/Clickjacking_Threats#Drag_and_drop_attacks\">drag-and-drop style clickjacking attacks</a>.</p> <p>So in <code>1.0.0-preview.1</code> the concept of a <code>DocumentHeaderPolicy</code> has been removed, and headers are <em>always</em> applied to <em>all</em> requests regardless of the response content type.</p> <blockquote> <p>Mostly…some headers only apply to HTTPS requests for example, or should not be applied to <code>localhost</code> requests. But the \"document header\" concept is no more.</p> </blockquote> <p>If you want to re-instate the \"document header\" functionality for some reason, you can recreate something similar with <code>SetPolicySelector()</code>. There are lots of different ways you could achieve it, but here's one example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> builder <span class=\"token operator\">=</span> WebApplication<span class=\"token punctuation\">.</span><span class=\"token function\">CreateBuilder</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The mime types considered \"documents\"</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> documentTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/javascript\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/javascript\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> documentPolicy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbuilder<span class=\"token punctuation\">.</span>Services<span class=\"token punctuation\">.</span><span class=\"token function\">AddSecurityHeaderPolicies</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetDefaultPolicy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=&gt;</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">AddDefaultApiSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">SetPolicySelector</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=&gt;</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// If the response is one of the \"document\" types...</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>documentTypes<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>HttpContext<span class=\"token punctuation\">.</span>Response<span class=\"token punctuation\">.</span>ContentType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// ... then return the \"document\" policy</span>\n          <span class=\"token keyword\">return</span> documentPolicy<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Otherwise return the original selected policy</span>\n      <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span>SelectedPolicy<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> app <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">UseSecurityHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">MapGet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>As I've already said, I don't recommend you do this, but the point is you <em>can</em> now, which is why I chose to remove the document headers functionality.</p> <h3 id=\"changes-to-nonce-generation\" class=\"heading-with-anchor\"><a href=\"#changes-to-nonce-generation\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changes to nonce generation</a></h3> <p>In previous versions of <em>NetEscapades.AspNetCore.SecurityHeaders</em> a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce\">nonce (number used once)</a> was generated at the start of a request only when required by a <code>Content-Security-Policy</code>. However, with the changes in <code>1.0.0-preview.1</code> it's no longer possible to know ahead of time that a nonce will be required (because the header policies can change later in the request, due to a named endpoint policy for example).</p> <p>As a result, the nonce is no longer generated at the <em>start</em> of the request. Instead, it's generated lazily when you call <code>HttpContext.GetNonce()</code>. The end result is the same as before—a single nonce is generated per-request, and only when it's required. The slight breaking change is the fact that you now <em>must</em> call <code>GetNonce()</code> to retrieve the nonce. Previously you <em>could</em> have retrieved the nonce directly from <code>HttpContext.Items</code> (even though you <em>shouldn't</em>); in <code>1.0.0-preview.1</code> that's no longer possible.</p> <p>That covers the majority of the major changes made between versions <code>0.24.0</code> and <code>1.0.0-preview.1</code>. You can find the <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/compare/v0.24.0...v1.0.0-preview.1\">full diff here</a>, including an API diff (using <a href=\"/preventing-breaking-changes-in-public-apis-with-publicapigenerator/\">the workflow I described in a previous post</a>).</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>Adding <a href=\"https://owasp.org/www-project-secure-headers/\">security-related headers</a> to your HTTP responses is an easy way to harden your application against attacks. <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a> provides an easy way to do this, and has recently been through some major changes that I'm looking for feedback on before releasing the final stable version.</p> <p>In summary, the major changes are:</p> <ul><li>Support for .NET Core 3.1+ only</li> <li>Updates to headers <ul><li>Changes to the default headers</li> <li>New utility methods for adding API-related security headers and a locked-down <code>Permissions-Policy</code> header</li> <li><code>X-XSS-Protection</code>, <code>Expect-CT</code>, and <code>Feature-Policy</code> are now obsolete</li></ul> </li> <li>Support for applying different header policies to different endpoints</li> <li>Support for customizing the header policy per-request</li> <li>Removal of \"document header\" concept</li> <li>Changes to nonce generation.</li></ul> <p>If you can, please give <code>1.0.0-preview.1</code> a try, especially if you're currently relying on workarounds for any of the customisation functionality, and let me know what you think by <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders/issues\">opening an issue on GitHub</a>. Thanks!</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/major-updates-to-netescapades-aspnetcore-security-headers/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/fixing-max_path-issues-in-gitlab/",
      "Title": "Fixing MAX_PATH issues in GitLab",
      "PublishDate": "2024-09-17T09:00:00+00:00",
      "Summary": "In this post I show how you can enable Git's long-path support in a GitLab job to override Window's MAX_PATH limitations which can cause git clone failures",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/old_man_yells_at_max_path.webp\" /><p>This post is a short reminder for my future self, for when I next have to fight with <code>MAX_PATH</code> issues and GitLab.</p> <p>Yes, it's 2024, and I'm still being sabotaged by Window's archaic <code>MAX_PATH</code> restriction.</p> <h2 id=\"window-s-maximum-path-length-limitation-\" class=\"heading-with-anchor\"><a href=\"#window-s-maximum-path-length-limitation-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Window's maximum path length limitation.</a></h2> <p>In the much of the Windows API, <a href=\"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=powershell\">the maximum length for a path is <code>MAX_PATH</code></a>, which is defined as 260 characters. In this day and age that is uncomfortably small, and so in Windows 10, version 1607 most <code>MAX_PATH</code> restrictions were removed from file and directory functions.</p> <p>However, Microsoft are dedicated to backwards compatibility, almost to a fault. So even though the <code>MAX_PATH</code> restriction doesn't need to be there any more, it's <em>still</em> enforced, for back-compat reasons. If you want to create paths with more than 260 characters you'll need to set a value in the registry <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem LongPathsEnabled (Type: REG_DWORD)</code> to <code>1</code>. You can do this using powershell, for example:</p> <pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token function\">New-ItemProperty</span> <span class=\"token operator\">-</span>Path <span class=\"token string\">\"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\"</span> <span class=\"token operator\">-</span>Name <span class=\"token string\">\"LongPathsEnabled\"</span> <span class=\"token operator\">-</span>Value 1 <span class=\"token operator\">-</span>PropertyType DWORD <span class=\"token operator\">-</span>Force\n</code></pre> <p>or it can be enabled through group policy, with the policy <code>Enable Win32 long paths</code>.</p> <p>Of course, even if you do that, you still can't open and edit paths using Windows File Explorer. 8 years after the limitation was removed. That would be too much to ask. Yes, I'm feeling snarky.</p> <h2 id=\"git-s-long-path-support\" class=\"heading-with-anchor\"><a href=\"#git-s-long-path-support\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Git's long-path support</a></h2> <p>I ran into a MAX_PATH error that was happening in our GitLab builds at work recently, after a repository was moved to a different group. Doing so added an additional prefix to the checkout path, and suddenly 💥, GitLab could no longer check-out the repository:</p> <pre class=\"language-bash\"><code class=\"language-bash\">error: unable to create <span class=\"token function\">file</span> tracer/test/snapshots/\nSecurity.AspNetCore5AutoUserEvents.SecurityOff.\n<span class=\"token assign-left variable\">extendedmode.TestUserLoginEvent_eventName</span><span class=\"token operator\">=</span>login.auto.\n<span class=\"token assign-left variable\">failure_bodyString</span><span class=\"token operator\">=</span>Input.UserName<span class=\"token operator\">=</span>NoSuchUser<span class=\"token operator\">&amp;</span>\n<span class=\"token assign-left variable\">Input.Password</span><span class=\"token operator\">=</span>test.verified.txt: Filename too long\n</code></pre> <p>Now, granted, that filename kind of <em>is</em> too long, but that's beside the point 😅</p> <p>Luckily Git <em>does</em> have support for bypassing the <code>MAX_PATH</code> Windows issue. You can enable support for long paths by setting the <code>core.longpaths</code> setting to <code>true</code>. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">git config <span class=\"token operator\">--</span><span class=\"token keyword\">global</span> core<span class=\"token punctuation\">.</span>longpaths <span class=\"token boolean\">true</span>\n</code></pre> <p>Interestingly this works <em>regardless</em> of whether you've set the <code>LongPathsEnabled</code> registry key from the previous section. How can that be?</p> <p>You can see the explanation for how it works <a href=\"https://github.com/git/git/commit/0f634d0ca3ce9345affc6e817a8c057b60d87f0f\">in the commit</a> that introduced the <code>core.longpaths</code> setting:</p> <blockquote> <p>Many Windows wide char APIs support longer than <code>MAX_PATH</code> paths through the file namespace prefix (<code>\\\\?\\</code> or <code>\\\\?\\UNC\\</code>) followed by an absolute path…(We) introduce a function to optionally expand long paths using the <code>\\\\?\\</code> file namespace prefix…Contrary to MSDN docs, the <code>GetFullPathNameW</code> function doesn't seem to be limited to <code>MAX_PATH</code>, so we can use it to do the heavy lifting of the conversion (translate <code>/</code> to <code>\\</code>, eliminate <code>.</code> and <code>..</code>, and make an absolute path).</p> </blockquote> <p>So Git checks the length of any paths when it needs to perform a file operation. If the path is short, it just uses the standard APIs. If the path exceeds the <code>MAX_PATH</code> limitation and the <code>core.longpaths</code> setting is enabled then it converts the (potentially relative path) to an absolute path using <code>GetFullPathNameW()</code> and prepends <code>\\\\?\\</code>. The resulting path can then be used to interact with the Windows APIs. Magic!</p> <p>The really nice part of this is that it means you <em>don't</em> need to have admin access to the machine to checkout a git repo that has long paths. You can simply add the setting and bypass the issue.</p> <h2 id=\"running-scripts-before-git-clone-in-gitlab\" class=\"heading-with-anchor\"><a href=\"#running-scripts-before-git-clone-in-gitlab\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Running scripts before <code>git clone</code> in GitLab</a></h2> <p>Which brings us to the crux of the solution: how to add that setting to a GitLab runner. If you have access to the configuration of the runner itself, that's no problem, you can just add the setting in the runner and your job is done.</p> <p>However, if you <em>don't</em> have access to the runner, you'll need to make sure you add the setting <em>before</em> your repository is cloned.</p> <p>My first thought was to add the setting in the <code>before_script</code> section:</p> <pre class=\"language-diff\"><code class=\"language-diff\">build:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> stage: build\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> tags: [\"windowsversion:1809\"]\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> before_script:\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   - git config --system core.longpaths true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> script:\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   - if (Test-Path build-out) { remove-item -recurse -force build-out }\n</span></span></code></pre> <p>Unfortunately, that doesn't work. <code>before_script</code> runs before the job <code>script</code> executes (obviously) but <a href=\"https://docs.gitlab.com/ee/ci/yaml/#before_script\"><em>after</em> the repository has been cloned and the artifacts have been restored</a>.</p> <p>After a bit more googling, I came across <a href=\"https://archives.docs.gitlab.com/15.11/runner/configuration/advanced-configuration.html#the-runners-section\">the <code>pre_clone_script</code> option</a>: the name sounds pretty promising! Unfortunately, this is configuration that goes in your <em>runner</em> configuration, <em>not</em> in your <code>.gitlab-ci.yml</code>. But there <em>is</em> a way to modify it—if you add a build variable to your <code>.gitlab-ci.yml</code> called <code>CI_PRE_CLONE_SCRIPT</code> you can use that to \"pass through\" to the runner. But that only appears to be on GitLab's SaaS runners, <em>and</em> it's deprecated in version 16. <em>sigh</em>.</p> <p><em>Finally</em> I came to the all important answer <code>hooks:pre_get_sources_script</code>. <a href=\"https://docs.gitlab.com/ee/ci/yaml/#hookspre_get_sources_script\">This hook is exactly what we need</a>:</p> <blockquote> <p>Use <code>hooks:pre_get_sources_script</code> to specify a list of commands to execute on the runner before cloning the Git repository and any submodules.</p> </blockquote> <p>Adjusting our initial attempt to use <code>hooks:pre_get_sources_script</code> looks something like this:</p> <pre class=\"language-diff\"><code class=\"language-diff\">build:\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> stage: build\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> tags: [\"windowsversion:1809\"]\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> hooks:\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   pre_get_sources_script\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     - git config --system core.longpaths true\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> script:\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   - if (Test-Path build-out) { remove-item -recurse -force build-out }\n</span></span></code></pre> <p>And voila, we have success!</p> <pre class=\"language-bash\"><code class=\"language-bash\">Cloning into <span class=\"token string\">'dd-trace-dotnet'</span><span class=\"token punctuation\">..</span>.\nremote: Enumerating objects: <span class=\"token number\">168336</span>, done.\nremote: Counting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">5289</span>/5289<span class=\"token punctuation\">)</span>, done.\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">2112</span>/2112<span class=\"token punctuation\">)</span>, done.\nremote: Total <span class=\"token number\">168336</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">4074</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">4071</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">3152</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">163047</span> <span class=\"token punctuation\">(</span>from <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">168336</span>/168336<span class=\"token punctuation\">)</span>, <span class=\"token number\">133.06</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">24.91</span> MiB/s, done.\nResolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">135723</span>/135723<span class=\"token punctuation\">)</span>, done.\nUpdating files: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">11458</span>/11458<span class=\"token punctuation\">)</span>, done.\n</code></pre> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this short post I gave a brief description of the <code>MAX_PATH</code> limitation in Windows that restricts valid path lengths to 260 characters and showed how you can add support for long paths in Windows by setting a registry key. Git has its own long path support that can be enabled independently by setting <code>core.longpaths=true</code>, by running <code>git config --global core.longpaths true</code> for example.</p> <p>If you're using GitLab, you need to make sure this setting is updated before running Git operations such as cloning the repository. You should use the <code>hooks:pre_get_sources_script</code> for this in GitLab 16+.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/fixing-max_path-issues-in-gitlab/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/preventing-breaking-changes-in-public-apis-with-publicapigenerator/",
      "Title": "Preventing breaking changes in public APIs with PublicApiGenerator",
      "PublishDate": "2024-09-10T09:00:00+00:00",
      "Summary": "In this post I show how you can use the PublicApiGenerator project to document your public API and build a snapshot unit test to prevent breaking changes",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/breaking_changes.jpg\" /><p>In this post I show how to use two open source libraries to keep track of the public API surface of any NuGet libraries (or any other code) you create. The approach shown in this post uses a unit test to enforce that changes to your public API are documented and don't change unexpectedly.</p> <h2 id=\"why-do-you-need-to-track-your-public-api-surface-\" class=\"heading-with-anchor\"><a href=\"#why-do-you-need-to-track-your-public-api-surface-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why do you need to track your public API surface?</a></h2> <p>When you're creating a .NET library for public consumption on NuGet you need to be very careful about what APIs you expose. NuGet libraries generally use <a href=\"https://semver.org/\">semantic versioning</a> which means that breaking/incompatible changes to your public API should only occur in major version bumps.</p> <blockquote> <p>\"What is a breaking change?\" is, unfortunately, rather more nebulous than this rule. Changes to method and type signatures are generally breaking, but <em>behavioural</em> changes could also be breaking, even if the exposed types and methods don't change.</p> </blockquote> <p>The public APIs (types/methods) that your library exposes and which consumers interact with are the most obvious thing that you need to be careful about how you change. Introducing a new <code>public</code> method on a type would <em>generally</em> not be considered a breaking change, whereas <em>removing</em> a method definitely <em>would</em> be a breaking change.</p> <p>The rules of semver are such that you need to really <em>think</em> about the changes to your public API. Unfortunately, if you have a big library, keeping track of what your public API <em>is</em> can be easier said than done.</p> <p>Luckily, there are various tools you can use for tracking your public API, and alerting you to changes, so that you don't change it accidentally.</p> <h2 id=\"using-an-analyzer-to-document-your-public-api\" class=\"heading-with-anchor\"><a href=\"#using-an-analyzer-to-document-your-public-api\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using an analyzer to document your public API</a></h2> <p>Microsoft is the creator of a huge number of public libraries (the base class library in the .NET runtime!) and so need a way of keeping track of these APIs themselves. They therefore have <a href=\"https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md\">an analyzer</a>, which helps document this for you.</p> <p>To use the analyzer, add the <code>Microsoft.CodeAnalysis.PublicApiAnalyzers</code> package to your project, for example by running</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.CodeAnalysis.PublicApiAnalyzers\n</code></pre> <p>After you do this, your whole project will be <em>covered</em> in errors, and your build will be filled with issues:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Error RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'HeaderPolicyCollectionExtensions'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'ContentSecurityPolicyHeaderExtensions'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'HeaderPolicyCollection'</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\nError RS0016 <span class=\"token builtin class-name\">:</span> Symbol <span class=\"token string\">'implicit constructor for '</span>HeaderPolicyCollection<span class=\"token string\">''</span> is not part of the declared public API <span class=\"token punctuation\">(</span>https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">..</span>.\n</code></pre> <p>These errors all indicate that you haven't recorded the public API in the public API document. To do that, create two files in your project:</p> <ul><li><em>PublicAPI.Shipped.txt</em></li> <li><em>PublicAPI.Unshipped.txt</em></li></ul> <p>You can then use the code-fix for the analyzer action on a public API to add it to the documented APIs:</p> <p><img src=\"/content/images/2024/publicapi.png\" alt=\"A public API that needs to be documented in Rider\"></p> <p>If you're using Visual Studio, you can use the \"fix all in solution\" option to move <em>all</em> your current public APIs into the documentation files, but unfortunately <a href=\"https://youtrack.jetbrains.com/issue/RIDER-18372/Roslyn-quick-fix-does-not-provide-an-option-to-fix-the-issue-in-file-solution\">that doesn't work in Rider</a> 🙁. As a workaround (or if you're using the command line) you can run the following, and it will do the same thing.</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">format</span> analyzers <span class=\"token parameter variable\">--diagnostics</span><span class=\"token operator\">=</span>RS0016\n</code></pre> <p>The end result is that <em>PublicAPI.Unshipped.txt</em> will contain a list of all your public APIs, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">abstract</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>HeaderPolicyBase<span class=\"token punctuation\">.</span><span class=\"token function\">GetValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Http<span class=\"token punctuation\">.</span>HttpContext</span> context<span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">string</span>\n<span class=\"token keyword\">abstract</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>HeaderPolicyBase<span class=\"token punctuation\">.</span>Header<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">string</span>\n<span class=\"token keyword\">const</span> NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>StrictTransportSecurityHeader<span class=\"token punctuation\">.</span>OneYearInSeconds <span class=\"token operator\">=</span> <span class=\"token number\">31536000</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">int</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>ContentSecurityPolicyHeaderExtensions\n<span class=\"token return-type class-name\">Microsoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">Credentialless</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token return-type class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>CrossOriginPolicies<span class=\"token punctuation\">.</span>EmbedderPolicy<span class=\"token punctuation\">.</span>CredentiallessDirectiveBuilder</span>\nMicrosoft<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">.</span>CrossOriginEmbedderPolicyBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">CrossOriginEmbedderPolicyBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-&gt;</span> <span class=\"token keyword\">void</span>\n</code></pre> <p>By default, the analyzer adds APIs to <em>PublicAPI.Unshipped.txt</em>. It's the developer's responsibility to move the APIs across to <em>PublicAPI.Shipped.txt</em> when they're actually shipped to customers.</p> <p>I've covered this approach quite briefly because, basically, I don't like it. 😅 I have a variety of gripes with it:</p> <ul><li>I find it tedious that the analyzer breaks the build <em>every</em> time I add a public type, even if I'm just trying something out. I either have to add the API to the documentation file (even if I haven't decided what it should like yet) or I have to explicitly make it internal. <ul><li>There are obviously other workarounds: you could set the diagnostic to be warning or information only when running locally and only break the build in CI but I'm still not a fan of that friction.</li></ul> </li> <li>Having \"Shipped\" and \"Unshipped\" APIs seems completely unnecessary to me, especially when everything is versioned in Git. Maybe this makes sense for a system as complex as the ASP.NET Core libraries, but I just don't see the need, and again, it adds confusion and friction.</li> <li>The format of the API files just bugs me 😅 Why invent a whole new format for APIs? We have C# method signatures, can't we just use them?</li></ul> <p>Obviously the `Microsoft.CodeAnalysis.PublicApiAnalyzers1 package is very popular (despite my grumbling). The fact that it's used by Microsoft directly is a big endorsement, so if you want to learn more, I found <a href=\"https://medium.com/workleap/preventing-breaking-changes-in-net-class-libraries-e61ae93b1b46\">this post</a> about it a good start.</p> <p>For the rest of this post I'm going to describe a different approach, one that I personally prefer.</p> <h2 id=\"using-the-publicapigenerator-package\" class=\"heading-with-anchor\"><a href=\"#using-the-publicapigenerator-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using the PublicApiGenerator package</a></h2> <p>The <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a> library is an open source package that does what it says: it creates a string containing the public API of your library. From there, you can do anything you like with the string, but I like to use <a href=\"https://github.com/VerifyTests/Verify\">Verify</a> (another open source project) to perform snapshot approvals of the generated API.</p> <p>Overall, the process looks a bit like this:</p> <ul><li>Generate the public API for the library using <em>PublicApiGenerator</em> as a <code>string</code>.</li> <li>Use <em>Verify</em> to persist the public API as a file in your test suite.</li> <li>Create a unit test that verifies the public API has not changed.</li></ul> <p>As with all snapshot testing, the test fails if something has changed, and it's up to you to either accept the change (if the public API was <em>supposed</em> to change) or fix your code so as to not change the public API.</p> <p>This addresses all my previous complaints about the analyzer approach:</p> <ul><li>You can run the unit test whenever you like. It doesn't stop you iterating on your APIs until you <em>want</em> it to. You can easily test locally by running the unit test, and CI will catch any issues automatically.</li> <li>There's one set of Public APIs, versioned along with the code directly, so no concept of \"Shipped\" vs \"Unshipped\"</li> <li>The output looks a lot like C#, with methods grouped inside types.</li></ul> <p>To give you more of an idea of how it works, I'll show how I quickly added <em>PublicApiGenerator</em> to one of my open source projects.</p> <h3 id=\"1-add-the-necessary-packages\" class=\"heading-with-anchor\"><a href=\"#1-add-the-necessary-packages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Add the necessary packages</a></h3> <p>First we need to add the required NuGet packages to our test project. <a href=\"https://www.nuget.org/packages/PublicApiGenerator\">The <em>PublicApiGenerator</em> package</a> has very few dependencies, so it probably won't cause you any dependency issues:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package PublicApiGenerator\n</code></pre> <p>I like to use Verify for my snapshot testing, and as we're going to use xunit for testing, we'll add the Verify.Xunit package:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Verify.Xunit\n</code></pre> <blockquote> <p>Depending on what target frameworks your library supports, you may have some issues with dependencies here. Verify has been quite aggressive with updating dependencies and target frameworks, so I often find I need to install an old version to resolve all the conflicts (I'm using 18.4.0 for example, when the latest is 26.3.1!). That said, the Verify usage is entirely optional, you can easily roll-your-own if you need to, <a href=\"https://github.com/DataDog/dd-trace-dotnet/blob/master/tracer/test/Datadog.Trace.TestHelpers/PublicApiTestsBase.cs#L126-L138\">as I have previously</a>.</p> </blockquote> <p>Once we've added the dependencies, our test project <em>.csproj</em> should look something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>net6.0;net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworks</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PublicApiGenerator<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>11.1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Verify.Xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>18.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>xunit.runner.visualstudio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.4.5<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Test.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>15.3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Now we can create the test itself.</p> <h3 id=\"2-create-the-unit-test\" class=\"heading-with-anchor\"><a href=\"#2-create-the-unit-test\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create the unit test</a></h3> <p>The simplest version of our unit test looks something like the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">PublicApiGenerator</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">VerifyXunit</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Xunit</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">UsesVerify</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublicApiTest</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Get the assembly for the library we want to document</span>\n        <span class=\"token class-name\">Assembly</span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyType</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Retreive the public API for all types in the assembly</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Run a snapshot test on the returned string</span>\n        <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This example is hopefully easy to follow. We start with a \"marker\" type as a way of retrieving an instance of the <code>Assembly</code> we want to document. We then call <code>GeneratePublicApi()</code> to retrieve the <code>string</code> representation of the API. Finally, we use Verify to perform a snapshot test of this value.</p> <p>The first time the test runs, Verify creates a file called <em>PublicApiTest.PublicApiHasNotChanged.verified.txt</em>, based on the name of the test. As this is empty, the test fails, but you can <a href=\"https://github.com/VerifyTests/Verify?tab=readme-ov-file#snapshot-management\">use Verify's various tools</a> to update the snapshot. When you re-run the test it will pass.</p> <p>If you open up the <em>PublicApiTest.PublicApiHasNotChanged.verified.txt</em> file, you'll see that it looks a lot like \"normal\" C#, but with all the method bodies stripped out, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>AssemblyMetadata</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"RepositoryUrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">.</span>NeutralResourcesLanguage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Versioning<span class=\"token punctuation\">.</span>TargetFramework</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\".NETCoreApp,Version=v3.0\"</span><span class=\"token punctuation\">,</span> FrameworkDisplayName<span class=\"token operator\">=</span><span class=\"token string\">\".NET Core 3.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseUriDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilder</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BaseUriDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BlockAllMixedContentDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilderBase</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">BlockAllMixedContentDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConnectSourceDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilder</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">ConnectSourceDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CspDirectiveBuilder</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">NetEscapades<span class=\"token punctuation\">.</span>AspNetCore<span class=\"token punctuation\">.</span>SecurityHeaders<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span>ContentSecurityPolicy<span class=\"token punctuation\">.</span>CspDirectiveBuilderBase</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">CspDirectiveBuilder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> directive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> BlockResources <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic<span class=\"token punctuation\">.</span>List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> Sources <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is just part of the public API for <a href=\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"><em>NetEscapades.AspNetCore.SecurityHeaders</em></a>, but as you can see it looks a lot like \"normal\" C#.</p> <p>If you make a change to the public API, then when you run the test Verify will fail, and shows you a diff with exactly what changed:</p> <p><img src=\"/content/images/2024/publicapigenerator_diff.png\" alt=\"An example of a diff of the image when something changes\"></p> <p>That's basically all there is to it. You can use the public API <code>string</code> in any way that makes sense. I like to use it as a sense-check on the changes that I'm making. It doesn't differentiate between breaking or non-breaking changes, but it makes it very apparent if you've removed or changed anything, which is typically good enough (and is the same functionality the analyzer provides).</p> <h2 id=\"customizing-what-counts-as-your-public-api\" class=\"heading-with-anchor\"><a href=\"#customizing-what-counts-as-your-public-api\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Customizing what counts as your public API</a></h2> <p>You may notice at the top of the snapshot in the previous section there's a number of \"standard\" attributes that are <em>technically</em> part of your public API, but which you probably don't think of as such, as they're applied to the assembly:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>AssemblyMetadata</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"RepositoryUrl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"https://github.com/andrewlock/NetEscapades.AspNetCore.SecurityHeaders\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">.</span>NeutralResourcesLanguage</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"en-GB\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.TagHelpers.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>InternalsVisibleTo</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"NetEscapades.AspNetCore.SecurityHeaders.Test\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Versioning<span class=\"token punctuation\">.</span>TargetFramework</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\".NETCoreApp,Version=v3.0\"</span><span class=\"token punctuation\">,</span> FrameworkDisplayName<span class=\"token operator\">=</span><span class=\"token string\">\".NET Core 3.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n</code></pre> <p>The <code>[InternalsVisibleTo]</code> and <code>[TargetFramework]</code> attributes in particular can be annoying. The former tends to change if you want to expose APIs for test purposes to other test projects. The latter is added automatically by the compiler, and means that if you're compiling for multiple TargetFrameworks, then you won't be able to share snapshot files, even if your APIs are otherwise identical.</p> <blockquote> <p>If you intend to have different public APIs for different framework, you'll need to use the <code>UniqueForRuntime()</code> option on Verify, so that each target framework test run gets a different snapshot.</p> </blockquote> <p><em>PublicApiGenerator</em> lets you completely customize which attributes to include or exclude, and even lets you specify exactly which types should be considered as part of your public API. By default, for example, <em>PublicApiGenerator</em> <em>excludes</em> any types declared in your assembly that are in a <code>Microsoft</code> or <code>System</code> namespace.</p> <blockquote> <p>In general you probably shouldn't declare types in <code>Microsoft</code> or <code>System</code> namespaces, but early in ASP.NET Core's lifetime a convention emerged of putting extensions on <code>IServiceCollection</code> or <code>IApplicationBuilder</code>, to improve discoverability. By default, <em>PublicApiGenerator</em> <em>excludes</em> these from your public API.</p> </blockquote> <p>For example, the following code shows how you can remove some of those annoying assembly attributes, and also ensure that <em>all</em> the types in your assembly are included, regardless of the namespace.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApiGeneratorOptions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// These attributes won't be included in the public API</span>\n        ExcludeAttributes <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">InternalsVisibleToAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"System.Runtime.CompilerServices.IsByRefLike\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TargetFrameworkAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// By default types found in Microsoft or System </span>\n        <span class=\"token comment\">// namespaces are not treated as part of the public API.</span>\n        <span class=\"token comment\">// By passing an empty array, we ensure they're all </span>\n        DenyNamespacePrefixes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Another example of a tweak I have made in some cases is where types <em>need</em> to be public for technical reasons, but we don't want them to be visible to consumers of the library. A somewhat crude approach (that nevertheless works well enough) is to decorate the types with <code>[Browsable]</code> and <code>[EditorBrowsable]</code> attributes:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Browsable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">EditorBrowsable</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>EditorBrowsableState<span class=\"token punctuation\">.</span>Never<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublicButHiddenType</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These types won't show up in Intellisense, so for most purposes, they're <em>not</em> public. If you wanted to exclude them from the generated public API, you could do it something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">PublicApiHasNotChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">HeaderPolicyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// get all the types in the assembly, and filter out the hidden items</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> types <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=&gt;</span> <span class=\"token function\">IsVisibleToIntelliSense</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> options <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ApiGeneratorOptions</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// These attributes won't be included in the public API</span>\n        ExcludeAttributes <span class=\"token operator\">=</span>\n        <span class=\"token punctuation\">[</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">InternalsVisibleToAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"System.Runtime.CompilerServices.IsByRefLike\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">TargetFrameworkAttribute</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// Only use these types, but apply filtering from the other</span>\n        <span class=\"token comment\">// options</span>\n        IncludeTypes <span class=\"token operator\">=</span> types\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> publicApi <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GeneratePublicApi</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> Verifier<span class=\"token punctuation\">.</span><span class=\"token function\">Verify</span><span class=\"token punctuation\">(</span>publicApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">IsVisibleToIntelliSense</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> browsable <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCustomAttribute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>BrowsableAttribute<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>browsable <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> browsable<span class=\"token punctuation\">.</span>Browsable<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// It doesn't have the browsable attribute, or it is Browsable == true</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> editorBrowsable <span class=\"token operator\">=</span> type<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCustomAttribute</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>EditorBrowsableAttribute<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>editorBrowsable <span class=\"token keyword\">is</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> editorBrowsable<span class=\"token punctuation\">.</span>State <span class=\"token operator\">!=</span> EditorBrowsableState<span class=\"token punctuation\">.</span>Never<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// It doesn't have the browsable attribute, or it has a visible state</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// The type won't be visible to consumers</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Note that when you set <code>IncludeTypes</code> as above, it defines the initial set of types to consider. Further types may be excluded from this list depending on other options, such as <code>ExcludeAttributes</code> and <code>DenyNamespacePrefixes</code>.</p> <p>And there you have it, two ways to keep track of your public API: you can use Microsoft's analyzer; or you could use my preferred approach, <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a>.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I showed how Microsoft documents their public API using <a href=\"https://github.com/dotnet/roslyn-analyzers/blob/main/src/PublicApiAnalyzers/PublicApiAnalyzers.Help.md\">the Microsoft.CodeAnalysis.PublicApiAnalyzers</a> package, recording the APIs in <em>PublicApi.Shipped.txt</em> and <em>PublicApi.Unshipped.txt</em> files. I then discussed some of the reasons I'm not a big fan of it for small projects.</p> <p>Next I described an approach I prefer, using an open source project called <a href=\"https://github.com/PublicApiGenerator/PublicApiGenerator\"><em>PublicApiGenerator</em></a> to document the public API, and using <a href=\"https://github.com/VerifyTests/Verify\">Verify</a> to create a snapshot test to keep track of when your public API changes. I showed how to create the test, and some of the options you can use to customise what's documented.</p> <p>Neither of these approaches will <em>prevent</em> breaking changes to your API, but they both provide a way for you to document and track what your public API <em>is</em>, which is the first step to avoiding changing it accidentally.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/preventing-breaking-changes-in-public-apis-with-publicapigenerator/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/working-with-tar-files-in-dotnet/",
      "Title": "Working with tar files in .NET 8",
      "PublishDate": "2024-09-03T09:00:00+00:00",
      "Summary": "In this post I show how to create, extract, and list tar files using the built-in tar support introduced in .NET 7, and discuss some of the limitations",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/tar_banner.webp\" /><p>Back in 2022 .NET 7 gained support for natively working with <code>tar</code> files in the base class library. In this post I describe how to perform some basic operations on tar files, how I typically use the <code>tar</code> command-line utility for doing them, and how to instead use the support built-in to .NET. I then discuss the various limitations of the existing support.</p> <ul><li><a href=\"#what-is-a-tar-file-\">What is a tar file?</a></li> <li><a href=\"#creating-a-tar-gz-archive\">Creating a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#creating-a-tar-gz-archive-using-tar\">Creating a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#creating-a-tar-gz-archive-using-net\">Creating a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#extracting-a-tar-gz-archive\">Extracting a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#extracting-a-tar-gz-archive-using-tar\">Extracting a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#extracting-a-tar-gz-archive-using-net\">Extracting a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive\">Extracting a single file from a <code>.tar.gz</code> archive</a> <ul><li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-tar\">Extracting a single file from a <code>.tar.gz</code> archive using <code>tar</code></a></li> <li><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-net\">Extracting a single file from a <code>.tar.gz</code> archive using .NET</a></li></ul> </li> <li><a href=\"#listing-all-the-files-in-a-tar-gz-without-extraction\">Listing all the files in a <code>.tar.gz</code> without extraction</a> <ul><li><a href=\"#listing-all-the-files-in-a-tar-gz-using-tar\">Listing all the files in a <code>.tar.gz</code> using <code>tar</code></a></li> <li><a href=\"#listing-all-the-files-in-a-tar-gz-using-net\">Listing all the files in a <code>.tar.gz</code> using .NET</a></li></ul> </li> <li><a href=\"#caveats-missing-features-and-bugs\">Caveats, missing features, and bugs</a> <ul><li><a href=\"#-net-can-t-create-hardlinks-in-tar-archives\">.NET can't create hardlinks in <code>.tar</code> archives</a></li> <li><a href=\"#-net-can-t-control-ownership-during-extraction\">.NET can't control ownership during extraction</a></li> <li><a href=\"#-net-can-t-handle-absolute-paths\">.NET can't handle absolute paths</a></li></ul> </li></ul> <h2 id=\"what-is-a-tar-file-\" class=\"heading-with-anchor\"><a href=\"#what-is-a-tar-file-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is a tar file?</a></h2> <p><a href=\"https://en.wikipedia.org/wiki/Tar_(computing)\">A <em>tar</em> file</a> (often called a <em>tarball</em>) is a file (typically with the suffix <code>.tar</code>) that combines multiple files into a single file. Tar files are very common in Linux and other *nix based OSs for distributing multiple files or for archiving/backing up files. On Windows it's more common <a href=\"https://en.wikipedia.org/wiki/ZIP_(file_format)\">to see <code>.zip</code> files</a> used for these purposes (though Windows now also has native support for tar files).</p> <p>Unlike <code>.zip</code> files, <code>.tar</code> files don't natively have compression, so it's extremely common to see <code>.tar.gz</code> files. These files are \"normal\" <code>.tar</code> files that have been subsequently compressed using <a href=\"https://en.wikipedia.org/wiki/Gzip\"><code>gzip</code></a> (which is based on the same <a href=\"https://en.wikipedia.org/wiki/DEFLATE\">DEFLATE</a> algorithm as ZIP files).</p> <p>Creating a <code>tar</code> from a directory can preserve many of the attributes of the files on the file system, such as:</p> <ul><li>Directory structure</li> <li>File names (normally relative, but you <em>can</em> create absolute paths)</li> <li>Permissions (<a href=\"https://en.wikipedia.org/wiki/Unix_file_types#Representations\">POSIX-style</a>)</li> <li>Modification date</li> <li>Owner IDs</li> <li><a href=\"https://www.redhat.com/sysadmin/linking-linux-explained\">Symbolic and Hard links</a></li></ul> <p>Working with tar files in .NET prior to .NET 7 had always required a third-party library. There are a bunch of options available on NuGet:</p> <ul><li><a href=\"https://github.com/icsharpcode/SharpZipLib\">SharpZipLib</a> (Open source)</li> <li><a href=\"https://github.com/adamhathcock/sharpcompress\">SharpCompress</a> (Open source)</li> <li><a href=\"https://products.aspose.com/zip/net/\">Aspose.ZIP</a> (Commercial)</li></ul> <p>In .NET 7, basic support for working with tar files was added to the base class library. For the rest of this post I show how to use these APIs to perform common functions on tar files.</p> <blockquote> <p>Note that while the APIs I use in this post all exist in .NET 7 as well, .NET 8 includes a variety of bug fixes and support for more tar file features and formats, and is what I'm using in this post.</p> </blockquote> <p>All the examples of using the <code>tar</code> command-line are shown running on Linux, but the .NET code should work on any OS.</p> <h2 id=\"creating-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive</a></h2> <p>We'll start with the most obvious place, <em>creating</em> a tar file from an existing directory. Lets imagine you have a directory of files in your home directory, in <code>~/my-files</code>, which you want to distribute. This also includes a symbolic link (<code>myapp.so</code>) and a hard link (<code>someother.so</code>):</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-lR</span> ~/my-files\n/home/andrewlock/my-files:\ntotal <span class=\"token number\">1420</span>\ndrwxr-xr-x <span class=\"token number\">2</span> root root    <span class=\"token number\">4096</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">16</span>:00 bin\ndrwxr-xr-x <span class=\"token number\">2</span> root root    <span class=\"token number\">4096</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 docs\nlrwxrwxrwx <span class=\"token number\">1</span> root root      <span class=\"token number\">17</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">16</span>:01 myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\n-rw-r--r-- <span class=\"token number\">2</span> root root <span class=\"token number\">1443232</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:56 someother.so\n\n/home/andrewlock/my-files/bin:\ntotal <span class=\"token number\">3756</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">2399608</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:55 myapp.so\n-rw-r--r-- <span class=\"token number\">2</span> root root <span class=\"token number\">1443232</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:56 someother.so\n\n/home/andrewlock/my-files/docs:\ntotal <span class=\"token number\">5896</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root      <span class=\"token number\">10</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 README\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">6027280</span> Aug <span class=\"token number\">11</span> <span class=\"token number\">15</span>:57 someother.xml\n</code></pre> <h3 id=\"creating-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>A common command to create a tarball of these files called <code>myarchive.tar.gz</code> in the home directory would be:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> ~/my-files \n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czvf</span> ~/myarchive.tar.gz <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>In this example we change the working directory to <code>~/my-files</code> (if we were running from <code>~</code>, <code>tar</code> would include <code>my-files</code> as a prefix to the path names in the tar directory). The flags passed to the <code>tar</code> command mean:</p> <ul><li><code>-c</code> Create a new archive</li> <li><code>-z</code> Compress the resulting <code>tar</code> file with <code>gzip</code></li> <li><code>-v</code> List the files being processed (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>Note that if you omit the <code>-z</code> flag, <code>tar</code> creates a <code>tar</code> file which is <em>not</em> compressed.</p> <h3 id=\"creating-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#creating-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a <code>.tar.gz</code> archive using .NET</a></h3> <p>So how can we achieve this in .NET? .NET 7 added <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile?view=net-8.0\">the <code>TarFile</code> class</a> which includes <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile.createfromdirectory\">static methods for creating a tar archive</a>, so you might think you could do something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceDir <span class=\"token operator\">=</span> <span class=\"token string\">\"./my-files\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outputFile <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// note this _doesn't_ create a valid .tar.gz file</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromDirectory</span><span class=\"token punctuation\">(</span>sourceDir<span class=\"token punctuation\">,</span> outputFile<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">includeBaseDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The problem is that the <code>TarFile</code> utility <em>only</em> handles the <code>tar</code> format, it <em>doesn't</em> include the <code>gzip</code> handling which is so ubiquitous when working with tar files. Luckily, it's not too hard to add support for that using <code>GZipStream</code> and handling the file and stream creation ourselves:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Compression</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceDir <span class=\"token operator\">=</span> <span class=\"token string\">\"./my-files\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> outputFile <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>outputFile<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>CreateNew<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Write<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Compress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromDirectory</span><span class=\"token punctuation\">(</span>sourceDir<span class=\"token punctuation\">,</span> gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">includeBaseDirectory</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>When you run this you'll get a similar gzipped tarball to the one produced by the <code>tar</code> command!</p> <blockquote> <p>Note that the <em>details</em> matter here, so the resulting file may not be the <em>same</em> as the one produced by <code>tar</code>. I discuss more about that at the end of the post.</p> </blockquote> <p>The <code>includeBaseDirectory</code> argument specifies whether you want the paths in the tarball to include initial base segments relative to the current working directory. If it was set to <code>true</code> in the above example, the paths would be prefixed with <code>my-files/</code>.</p> <p>So we can create <code>.tar.gz</code> files using .NET, now lets looks at how to extract them.</p> <h2 id=\"extracting-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive</a></h2> <p>As I mentioned previously, one of the features of <code>tar</code> files is supporting permissions, hard/symbolic links, owners etc. That inevitably means there are a lot of options available to you when you extract an archive, based on what you want to preserve and what you want to ignore for example. For the purposes of this section, I'm only looking at very simple examples.</p> <h3 id=\"extracting-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>To extract an archive into the current working directory with the <code>tar</code> utility, you would use a command something like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz\n</code></pre> <p>where the options mean:</p> <ul><li><code>-x</code> Extract the archive</li> <li><code>-z</code> Decompress the file with <code>gzip</code> before processing</li> <li><code>-v</code> List the files being processed (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>If you want to output the files to a different directory you need to use an additional argument <code>-C &lt;DIR&gt;</code>, for example:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz <span class=\"token parameter variable\">-C</span> /path/to/dir\n</code></pre> <p>Now lets see how we can do this with .NET.</p> <h3 id=\"extracting-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#extracting-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a <code>.tar.gz</code> archive using .NET</a></h3> <p>As before, the <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.formats.tar.tarfile?view=net-8.0\">the <code>TarFile</code> class</a> has a helpful <code>ExtractToDirectory</code> method, but once again it works only with <code>tar</code> files, not <code>tar.gz</code> files that are also compressed. But yet again, we can work around this using the <code>GZipStream</code> class, giving very similar code to before:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> extractTo <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/dir\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nTarFile<span class=\"token punctuation\">.</span><span class=\"token function\">ExtractToDirectory</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> extractTo<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">overwriteFiles</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The only option available in the .NET code here is <code>overwriteFiles</code>; if a file exists during extraction and <code>overwriteFiles</code> is not <code>true</code>, this throws an <code>IOException</code>.</p> <p>The .NET implementation of extraction generally performs similarly to the <code>tar</code> utility, but there are some differences such as <a href=\"https://github.com/dotnet/runtime/issues/74135\">extracting absolute paths</a> and <a href=\"https://github.com/dotnet/runtime/issues/69780\">preserving ownership</a> which I'll discuss later.</p> <h2 id=\"extracting-a-single-file-from-a-tar-gz-archive\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive</a></h2> <p>Sometimes you only want to extract a <em>single</em> file from an archive instead of extracting the whole archive. That's particularly important when you have very large archives that would be difficult or impossible to fully extract.</p> <h3 id=\"extracting-a-single-file-from-a-tar-gz-archive-using-tar\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive using <code>tar</code></a></h3> <p>To extract a single file from an archive using <code>tar</code>, you can just add the path to the file at the end of the command. The following command extracts the file with the path <code>./bin/someother.so</code> <em>inside</em> the archive and writes it to the current directory:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> ~/my_archive.tar.gz ./bin/someother.so\n</code></pre> <p>The options for this are the same as described in the full extraction, so I won't repeat them here.</p> <h3 id=\"extracting-a-single-file-from-a-tar-gz-archive-using-net\" class=\"heading-with-anchor\"><a href=\"#extracting-a-single-file-from-a-tar-gz-archive-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Extracting a single file from a <code>.tar.gz</code> archive using .NET</a></h3> <p>Unfortunately, we don't have any more high-level helpers for .NET to handle this requirement, so we're going to fallback to using the slightly lower APIs of <code>TarReader</code> and <code>TarEntry</code>.</p> <p>In the following code we open an existing <code>.tar.gz</code> file as a <code>FileStream</code> and decompress it using <code>GZipStream</code>, as we have in the previous examples. We then pass this stream to an instance of <code>TarReader</code> and iterate through each <code>TarEntry</code> it finds. When we find an entry with the correct name, we extract the file and exit.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./my_archive.tar.gz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pathInTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./bin/someother.so\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> destination <span class=\"token operator\">=</span> <span class=\"token string\">\"./extractedFile.so\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Open the source tar file, decompress, and pass stream to TarReader</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TarReader</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Loop through all the entries in the tar</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// If the entry matches the required path, extract the file</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> pathInTar<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Found '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">pathInTar</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">', extracting to '</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">destination</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        entry<span class=\"token punctuation\">.</span><span class=\"token function\">ExtractToFile</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">overwrite</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all done</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// If we get here, we didn't find the file</span>\n</code></pre> <p>The <code>ExtractToFile</code> helper can extract both files and directories, but it won't extract symbolic links or hard links; those are only extracted if you extract the <em>whole</em> archive.</p> <h2 id=\"listing-all-the-files-in-a-tar-gz-without-extraction\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-without-extraction\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> without extraction</a></h2> <p>Sometimes you don't actually need to extract anything from the file, you just want to look at the files contained inside. This section shows how to do that both with <code>tar</code> and using .NET.</p> <h3 id=\"listing-all-the-files-in-a-tar-gz-using-tar\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-using-tar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> using <code>tar</code></a></h3> <p>To list all the files in an archive using <code>tar</code>, you can use the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-tzvf</span> ~/myarchive.tar.gz\n</code></pre> <p>Most of these options</p> <ul><li><code>-t</code> List the contents of an archive</li> <li><code>-z</code> Decompress the file with <code>gzip</code> before processing</li> <li><code>-v</code> List the files verbosely (optional)</li> <li><code>-f &lt;FILE&gt;</code> Output the archive to file <code>&lt;FILE&gt;</code></li></ul> <p>The <code>-v</code> option is not required, but adding it outputs additional information about each entry, similar to <code>ls -l</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">drwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:02 ./\nlrwxrwxrwx root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:01 ./myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/\n-rw-r--r-- root/root        <span class=\"token number\">10</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/README\n-rw-r--r-- root/root   <span class=\"token number\">6027280</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:57 ./docs/someother.xml\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 ./bin/\n-rw-r--r-- root/root   <span class=\"token number\">2399608</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:55 ./bin/myapp.so\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n</code></pre> <p>You can read the full spec for <code>ls -l</code> <a href=\"https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ls.html\">here</a> but in summary, this shows:</p> <ul><li>The type of entry (<code>d</code> for directory, <code>-</code> for file, <code>l</code> for symbolic link, <code>h</code> for hard link)</li> <li>The <a href=\"https://en.wikipedia.org/wiki/Unix_file_types#Representations\">permissions</a> for the entry</li> <li>The owner</li> <li>The size of the entry (in bytes)</li> <li>The modification time</li> <li>The path (and link location for symbolic and hard links)</li></ul> <h3 id=\"listing-all-the-files-in-a-tar-gz-using-net\" class=\"heading-with-anchor\"><a href=\"#listing-all-the-files-in-a-tar-gz-using-net\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Listing all the files in a <code>.tar.gz</code> using .NET</a></h3> <p>As you might expect, there's no built-in method helper for printing this information with .NET. Writing one is a little annoying, but not very difficult; all the information contained in the tar entry is exposed on <code>TarEntry</code>.</p> <p>The following code <em>mostly</em> emulates the display format of <code>tar</code>'s <code>-tzvf</code> format shown above:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Formats<span class=\"token punctuation\">.</span>Tar</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Globalization</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>Compression</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> sourceTar <span class=\"token operator\">=</span> <span class=\"token string\">\"./myarchive.tar.gz\"</span>\n\n<span class=\"token comment\">// read the tar and loop through the entries</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">FileStream</span> fs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>sourceTar<span class=\"token punctuation\">,</span> FileMode<span class=\"token punctuation\">.</span>Open<span class=\"token punctuation\">,</span> FileAccess<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">GZipStream</span> gz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">,</span> CompressionMode<span class=\"token punctuation\">.</span>Decompress<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TarReader</span><span class=\"token punctuation\">(</span>gz<span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">leaveOpen</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">GetNextEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">is</span> <span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Get the file descriptor</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">char</span></span> type <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>EntryType <span class=\"token keyword\">switch</span>\n    <span class=\"token punctuation\">{</span>\n        TarEntryType<span class=\"token punctuation\">.</span>Directory <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'d'</span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>HardLink <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'h'</span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>SymbolicLink <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'l'</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Construct the permissions e.g. rwxr-xr-x</span>\n    <span class=\"token comment\">// Moved to a separate function just because it's a bit verbose</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> permissions <span class=\"token operator\">=</span> <span class=\"token function\">GetPermissions</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Display the owner info. 0 is special (root) but .NET doesn't</span>\n    <span class=\"token comment\">// expose the mappings for these IDs natively, so ignoring for now </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ownerUser <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Uid <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>Uid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>CultureInfo<span class=\"token punctuation\">.</span>InvariantCulture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> ownerGroup <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Gid <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"root\"</span> <span class=\"token punctuation\">:</span> entry<span class=\"token punctuation\">.</span>Gid<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span>CultureInfo<span class=\"token punctuation\">.</span>InvariantCulture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The length of the data and the modification date in bytes</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> size <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">DateTimeOffset</span> date <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>ModificationTime<span class=\"token punctuation\">.</span>UtcDateTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Match the display format used by tar -tzvf </span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>EntryType <span class=\"token keyword\">switch</span>\n    <span class=\"token punctuation\">{</span>\n        TarEntryType<span class=\"token punctuation\">.</span>HardLink <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> link to </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>LinkName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        TarEntryType<span class=\"token punctuation\">.</span>SymbolicLink <span class=\"token operator\">=&gt;</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>Name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> -&gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">entry<span class=\"token punctuation\">.</span>LinkName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=&gt;</span> entry<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Write the entry!</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">type</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">permissions</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ownerUser</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ownerGroup</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">size<span class=\"token punctuation\">,</span><span class=\"token number\">9</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">date</span><span class=\"token format-string\"><span class=\"token punctuation\">:</span>yyyy-MM-dd hh:mm</span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">path</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Construct the permissions</span>\n<span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">GetPermissions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TarEntry</span> entry<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>UserExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> groupExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>GroupExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherRead <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'r'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherWrite <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'w'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> otherExecute <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>Mode<span class=\"token punctuation\">.</span><span class=\"token function\">HasFlag</span><span class=\"token punctuation\">(</span>UnixFileMode<span class=\"token punctuation\">.</span>OtherExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token char\">'x'</span> <span class=\"token punctuation\">:</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">userExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">groupExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherRead</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherWrite</span><span class=\"token punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">otherExecute</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>When you run the above, you get pretty much the same output as <code>tar -tzvf</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">drwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:02 ./\nlrwxrwxrwx root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:01 ./myapp.so -<span class=\"token operator\">&gt;</span> ./bin/myapp.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/\n-rw-r--r-- root/root        <span class=\"token number\">10</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/README\n-rw-r--r-- root/root   <span class=\"token number\">6027280</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:57 ./docs/someother.xml\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:00 ./bin/\n-rw-r--r-- root/root   <span class=\"token number\">2399608</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:55 ./bin/myapp.so\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">14</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n</code></pre> <p>Pretty neat 🙂 There's just a couple of things to note here:</p> <ul><li>The owners are stored in the <code>.tar</code> archive as IDs of the current user and group. <code>root</code> is a well known value (<code>0</code>) so we can decode that one easily, but you can't easily get the names of the other users from .NET (you need to invoke <code>id</code> or read the <code>/etc/passwd</code> file for example).</li> <li>The output of <code>tar -tzvf</code> displays modification time in <em>local</em> time, whereas I used UTC because, you know, why not 😄</li></ul> <p>That covers the main operations I want to talk about in this post.</p> <h2 id=\"caveats-missing-features-and-bugs\" class=\"heading-with-anchor\"><a href=\"#caveats-missing-features-and-bugs\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Caveats, missing features, and bugs</a></h2> <p>In the final section of this post I describe some of the limitations and differences from <code>tar</code> that I've run into.</p> <h3 id=\"-net-can-t-create-hardlinks-in-tar-archives\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-create-hardlinks-in-tar-archives\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't create hardlinks in <code>.tar</code> archives</a></h3> <p>One of the biggest problems I ran into (which ended up being a blocker for me to use it) was that .NET currently <em>can't</em> create hardlinks in <code>tar</code> archives, unlike the <code>tar</code> utility.</p> <p><a href=\"https://www.redhat.com/sysadmin/linking-linux-explained\">Hardlinks in Linux</a> are relatively simple: a hard link is the link between the <em>filename</em> and the actual <em>data</em> of the file. Every file you create starts with one hardlink, but you can create additional hard links, so multiple filenames point to the same underlying data.</p> <blockquote> <p>The other type of link is a <em>symbolic</em> link. The advantage of hard links is that they mostly appear like completely normal files to applications, whereas applications need to specifically handle symbolic links.</p> </blockquote> <p>I wanted to use hardlinks to de-duplicate files inside a <code>tar</code> file. The <code>tar</code> utility (and archive format) both handle this perfectly well, preserving the hard link, but .NET currently does not preserve the link when creating an archive. Any hardlinks will be <em>duplicated</em> as additional data in the resulting <code>.tar</code> file, increasing the size of the archive <em>and</em> the size of the expanded data after extraction.</p> <p>You can see this in practice comparing an archive created using <code>tar</code> directly compared to .NET when the directory contains a hard link:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># For the `tar` utility 👇</span>\n$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-vtzf</span> ./myarchive.tar.gz\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:02 ./\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 ./bin/\nhrw-r--r-- root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 ./bin/someother.so <span class=\"token function\">link</span> to ./someother.so\n👆<span class=\"token comment\"># Note the 'h'</span>\n\n<span class=\"token comment\"># For the .NET archive 👇</span>\n$ <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-vtzf</span> ./myarchive.tar.gz\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 someother.so\ndrwxr-xr-x root/root         <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">16</span>:00 bin/\n-rw-r--r-- root/root   <span class=\"token number\">1443232</span> <span class=\"token number\">2024</span>-08-11 <span class=\"token number\">15</span>:56 bin/someother.so\n👆<span class=\"token comment\"># Normal file, not a hardlink</span>\n</code></pre> <blockquote> <p>Note that .NET <em>will</em> preserve any hardlinks in the <code>.tar</code> archive when <em>expanding</em> an archive. It just can't currently <em>create</em> those hardlinks in the <code>.tar</code> archive in the first place.</p> </blockquote> <p>There's already <a href=\"https://github.com/dotnet/runtime/issues/74404\">a two year old issue about the behaviour</a>, but it's not getting much love by the looks of it. Hopefully it does soon 🤞</p> <h3 id=\"-net-can-t-control-ownership-during-extraction\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-control-ownership-during-extraction\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't control ownership during extraction</a></h3> <p>The <code>tar</code> utility has a <em>huge</em> number of options and flags, but one I often use is <code>--same-owner</code> (implicitly, by extracting using <code>sudo</code>) when I want to make sure that files marked as <code>root</code> in the archive <em>remain</em> that way after extraction.</p> <p>Unfortunately there's no way to do this currently in .NET. You <em>might</em> be able to hack around it yourself by \"fixing\" the permissions manually, but it really feels like this should just be an explicit built-in option. Speaking of which, there's <a href=\"https://github.com/dotnet/runtime/issues/69780\">an old issue</a> about adding additional options to the implementation, and controlling the owner/group is one of the explicit missing features mentioned.</p> <h3 id=\"-net-can-t-handle-absolute-paths\" class=\"heading-with-anchor\"><a href=\"#-net-can-t-handle-absolute-paths\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">.NET can't handle absolute paths</a></h3> <p>In general, it's not recommended to use absolute paths in tar files, but you <em>can</em> if you want to. The <code>tar</code> utility automatically converts any absolute paths to relative paths, but also provides an option to extract to the \"real\" path using <code>--absolute-names</code>.</p> <blockquote> <p>You should be very careful extracting with <code>--absolute-names</code> as expanding the tar file could overwrite practically anywhere on your system.</p> </blockquote> <p>Unfortunately .NET flat out refuses to expand a tar that has absolute paths. Instead it throws an <code>IOException</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Unhandled exception. System.IO.IOException: Extracting the Tar entry <span class=\"token string\">'/bin/busybox'</span> would have resulted <span class=\"token keyword\">in</span> a <span class=\"token function\">link</span> target outside the specified destination directory: <span class=\"token string\">'/tmp/extracted-alpine'</span>\n</code></pre> <p>There's <a href=\"https://github.com/dotnet/runtime/issues/74135\">an issue raised</a> about this one too.</p> <p>In general it feels like what's currently available built in to .NET should be good enough for most simple cases, but unfortunately you're likely to run up against the edges once you break outside the 80% common cases.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how to perform some of common operations on <code>.tar.gz</code> files using the built-in .NET support. I show how to compress a directory into a <code>.tar.gz</code> file, how to expand a <code>.tar.gz</code> file into a directory, how to extract a single file from the directory, and how to list the contents of the directory without extracting the files. Finally I discuss some of the limitations in the current .NET implementations.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/working-with-tar-files-in-dotnet/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/using-azure-storage-queues-with-azure-functions-and-queuetrigger/",
      "Title": "Using Azure Storage Queue messages with Azure Functions and [QueueTrigger]",
      "PublishDate": "2024-08-27T09:00:00+00:00",
      "Summary": "In this post I discuss using Azure Storage Queue as a message queue and how you can process Storage Queue messages using an Azure Functions app",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/azure_storage_queue_banner.webp\" /><p>In this post I discuss the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I describe when you might want to choose the simpler Storage Queue.</p> <p>In the second half of the post I show how you can read messages from an Azure Storage Queue using Azure Functions and the <code>[QueueTrigger]</code> queue extension. I describe the various types you can bind to, why I favour <code>QueueMessage</code>, and how to configure a connection string. Finally I describe how the Functions app processes your messages, and how you can customize that behaviour.</p> <p>Before we get to the Azure Functions, we'll start by looking at Azure Storage Queue: what is it, how does it compare to Azure Service Bus, and when should you use it?</p> <h2 id=\"azure-storage-queue-vs-azure-service-bus\" class=\"heading-with-anchor\"><a href=\"#azure-storage-queue-vs-azure-service-bus\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Azure Storage Queue vs. Azure Service Bus</a></h2> <p><a href=\"https://learn.microsoft.com/en-us/azure/storage/queues/storage-queues-introduction\">Azure Storage Queue</a> is an Azure service for storing large number of messages which can then be retrieved and processed by HTTP/HTTPS and processed asynchronously. Azure Storage Queue is focused on storing <em>relatively</em> small messages (a maximum of 64KB) but <em>millions</em> of them (up to 500TB!). You can think of this as a simple queue where senders can write messages, and receivers can compete to pull messages off the queue for processing.</p> <p><img src=\"/content/images/2024/azure_storage_queue.svg\" alt=\"Diagram of Azure Storage Queue\"></p> <p>The main \"competing\" service in Azure that performs a similar role is <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-messaging-overview\">Azure Service Bus</a>, which is an enterprise message broker with message queues (for point-to-point communication, like Azure Storage Queues) and publish-subscribe (pub-sub) topics (for multiple subscribers). The following shows how the pub-sub behaviour works, where each subscriber can see and process all the messages that are sent to a topic:</p> <p><img src=\"/content/images/2024/azure_service_bus.svg\" alt=\"Diagram of Azure Service Bus with topics and subscriptions\"></p> <p>Azure Service Bus also has features such as automatic dead-lettering, duplicate detection, and strict First-In-First-Out (FIFO) ordering guarantees.</p> <blockquote> <p>One of the bug struggles whenever you have a green-field application is deciding which of the many similar services to choose. For example, Azure has <em>many</em> different messaging services—Storage Queues, Service Bus, Event Grid, Event Hubs, the list goes on! Thankfully the Azure documentation does include <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/compare-messaging-services#comparison-of-services\">comparison pages</a> to help you understand the difference between the various options!</p> </blockquote> <p>Azure Storage Queue and Azure Service Bus are the main \"traditional\" message queue products in Azure, so it's worth taking some time to decide which is best for your application. The documentation <a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-azure-and-service-bus-queues-compared-contrasted\">breaks down all the differences</a> between the two services, but that's a 3000 word document to read and try to understand 😅</p> <p>For me, I tried to just consider it from a high level. There are some obvious key differences between the two technologies:</p> <table><thead><tr><th style=\"text-align:left\"></th><th style=\"text-align:center\">Storage Queue</th><th style=\"text-align:center\">Service Bus</th></tr></thead><tbody><tr><td style=\"text-align:left\">Communication</td><td style=\"text-align:center\">HTTP/HTTPS</td><td style=\"text-align:center\"><a href=\"https://learn.microsoft.com/en-us/azure/service-bus-messaging/service-bus-amqp-overview\">AMPQ</a></td></tr><tr><td style=\"text-align:left\">Pub-Sub support</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes (Topics/Subscriptions)</td></tr><tr><td style=\"text-align:left\">Ordering guarantees</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes FIFO</td></tr><tr><td style=\"text-align:left\">Maximum queue size</td><td style=\"text-align:center\">500 TB</td><td style=\"text-align:center\">80GB</td></tr><tr><td style=\"text-align:left\">Atomic multi-message transactions</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes</td></tr><tr><td style=\"text-align:left\">Duplicate detection</td><td style=\"text-align:center\">No</td><td style=\"text-align:center\">Yes</td></tr></tbody></table> <p>Even from this <em>massively</em> simplified comparison, you can tell that Azure Service Bus has <em>many</em> more capabilities than Azure Storage Queue. Atomic transactions (so you can mark a message as handled <em>and</em> send a new message atomically) and pub-sub support stand out to me; if you need those features from your queue, then the choice is obvious.</p> <p>However, if you <em>don't</em> need all those \"message broker\" features, then Azure Storage Queue <em>may</em> be a better option. One thing in Azure Storage Queue's favour is the pricing. For storage queue it's relatively simple (for Azure):</p> <ul><li>You pay for the storage you use (e.g. $0.0462 per GB per month)</li> <li>You pay for the number of API operations you make ($0.04 per million)</li></ul> <p>For Azure Service Bus, you have to opt in to <em>tiers</em> depending on which features you want, and then how you're billed <em>varies</em> per tier. The \"basic\" tier is the most similar to Azure Storage Queue (in that it doesn't support transactions/topics etc), but even that likely works out more expensive generally ($0.05 per million operations). So in that case, you might be better off just using Storage Queues for their simplicity.</p> <h2 id=\"an-obvious-storage-queue-use-case-processing-email-status-messages\" class=\"heading-with-anchor\"><a href=\"#an-obvious-storage-queue-use-case-processing-email-status-messages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">An obvious Storage Queue use case: processing email status messages</a></h2> <p>I had a use case that involved handling and processing email status notifications. The result of an \"email send\" operation would be added to a queue, and I needed my application to process the message and act accordingly (e.g. mark a subscriber as \"unsubscribed\" if the email bounced, was marked as spam, or couldn't be sent).</p> <p>This example seemed like a perfect use case for Azure Storage Queue:</p> <ul><li>The order that the messages are processed doesn't matter.</li> <li>Each message only needs to be processed by a single consumer, so no need for pub-sub features.</li> <li>No specific requirements around TTL or other advanced features.</li></ul> <p>For this use case, the basic features of the Azure Storage Queue are perfectly adequate. Additionally, creating and managing a storage queue is significantly easier and cheaper than Azure Service Bus, so the choice is obvious.</p> <h2 id=\"reading-messages-from-azure-storage-queue-with-azure-functions\" class=\"heading-with-anchor\"><a href=\"#reading-messages-from-azure-storage-queue-with-azure-functions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reading messages from Azure Storage Queue with Azure Functions</a></h2> <p>I've spent a lot of time talking about Azure Storage Queues in general. In this section we'll look at some code for reading messages from a queue using Azure Functions' <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp\">storage queue trigger</a>.</p> <blockquote> <p>All of the examples I show in this post use the <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/dotnet-isolated-process-guide\">isolated-process model</a> instead of the <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-dotnet-class-library\">in-process model</a>, as <a href=\"https://aka.ms/azure-functions-retirements/in-process-model\">support for the in-process model ends in 2026</a>.</p> </blockquote> <p>As with most Azure Functions trigger types, you can register a trigger by creating a function, referencing the required NuGet packages, adding a specific attribute to one of your function parameters, and configuring your connection string.</p> <p>I walk through each of those steps in the following section. I don't discuss creating the Azure Functions project, so if you don't yet have an app, follow the instructions to create one in the documentation <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-create-your-first-function-visual-studio\">using Visual Studio</a>, <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-csharp\">Visual Studio Code</a>, or the<a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-csharp?tabs=windows%2Cazure-cli\"> Azure Functions Core Tools command line</a>.</p> <h3 id=\"1-reference-the-required-nuget-packages\" class=\"heading-with-anchor\"><a href=\"#1-reference-the-required-nuget-packages\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">1. Reference the required NuGet packages</a></h3> <p>To access the queue storage trigger attribute, add a reference to the <em>Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues</em> package, for example using:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues\n</code></pre> <p>This adds the package to your <em>.csproj</em> project file, which should look something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AzureFunctionsVersion</span><span class=\"token punctuation\">&gt;</span></span>v4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AzureFunctionsVersion</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>latest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LangVersion</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Required packages for the isolated-process functions --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.22.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker.Sdk<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.17.2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇Add this to enable storage queue triggers--&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PackageReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5.4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>host.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>local.settings.json<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>PreserveNewest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToPublishDirectory</span><span class=\"token punctuation\">&gt;</span></span>Never<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToPublishDirectory</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre> <p>With this package added, the <code>QueueTrigger</code> attribute becomes available.</p> <h3 id=\"2-create-a-function-and-use-the-queuetrigger-attribute\" class=\"heading-with-anchor\"><a href=\"#2-create-a-function-and-use-the-queuetrigger-attribute\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">2. Create a function and use the <code>[QueueTrigger]</code> attribute</a></h3> <p>Create an Azure Function, and include a parameter with the <code>[QueueTrigger]</code> attribute. The type of that parameter can be one of several different values, and will give you various different aspects of the message:</p> <ul><li><code>string</code>. The message content as a string. Use when the message is simple text.</li> <li><code>byte[]</code>. The raw bytes of the message.</li> <li><code>BinaryData</code>. The raw bytes of the message, wrapped in a helper type.</li> <li><code>QueueMessage</code>. The \"full\" message from the queue, including metadata about the message.</li> <li>Any serializable POCO object. When a queue message contains JSON data, Functions tries to deserialize the JSON data into a plain-old CLR object (POCO) type.</li></ul> <p>Depending on what the message contains and what you want to <em>do</em> with it, the final two options make the most sense to me. I chose to use the high level <code>QueueMessage</code>, as it includes all the additional metadata for the queue message, but more importantly, it gives more control over the deserialization.</p> <blockquote> <p>I found this particularly important, as I had multiple messages being sent to the same queue, so I couldn't use a single POCO object and rely on the framework to deserialize it for me.</p> </blockquote> <p>The following shows an example signature of an Azure Function that receives <code>QueueMessage</code> instances, by decorating the <code>message</code> parameter with the <code>[QueueTrigger]</code> attribute.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Function</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle-email-report\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// 👈 The name of the function</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">HandleEmailReport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">QueueTrigger</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-queue\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">QueueMessage</span> message<span class=\"token punctuation\">)</span>\n                <span class=\"token comment\">//  The name of the queue to read ☝</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In the above example I create an Azure Function called <code>handle-email-report</code>, which reads from the Azure storage queue called <code>my-queue</code> using the \"default\" Azure connection.</p> <h3 id=\"3-configure-the-connection-string\" class=\"heading-with-anchor\"><a href=\"#3-configure-the-connection-string\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">3. Configure the connection string</a></h3> <p>If you use the <code>[QueueTrigger]</code> as I have above, the Functions app tries to read the environment configuration value called <code>AzureWebJobsStorage</code>. Locally, that means it uses the value stored in local.settings.json at <code>Values.AzureWebJobsStorage</code>. For example, for local development you might have this:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"IsEncrypted\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Values\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"AzureWebJobsStorage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UseDevelopmentStorage=true\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you want to use a different connection, you can specify that using the <code>Connection</code> property of the [QueueTrigger]` attribute. For example, if you use this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Function</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"handle-email-report\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">HandleEmailReport</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">QueueTrigger</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-queue\"</span><span class=\"token punctuation\">,</span> Connection <span class=\"token operator\">=</span> <span class=\"token string\">\"MyConnection\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">QueueMessage</span> message<span class=\"token punctuation\">)</span>\n                              <span class=\"token comment\">// ☝ Specify alternative connection</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The functions app will look for a configuration called <code>MyConnection</code> (and <em>also</em> <code>AzureWebJobsMyConnection</code>; I'm not sure what the order of preference is there). For example</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"IsEncrypted\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Values\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"AzureWebJobsStorage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"UseDevelopmentStorage=true\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"MyConnection\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-connection-string\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In recent versions of the Storage Queue extensions NuGet package, you can alternatively use a Microsoft Entra ID instead of storing a connection string in the configuration. Unfortunately, <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp#identity-based-connections\">I've read the documentation about that several times</a> and I still have no idea what it's talking about, so I'll leave someone else to explain that 😅</p> <blockquote> <p>Clearly <a href=\"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-steps\">using RBAC</a> is the \"right\" thing to do rather than storing arbitrary secrets in each of your apps. But my gosh it's <em>so</em> much harder to get working than dropping a connection string into a config variable 🙈</p> </blockquote> <p>Assuming you have configured your connection correctly, your Azure Function should start receiving messages!</p> <h2 id=\"how-does-the-function-process-your-messages-\" class=\"heading-with-anchor\"><a href=\"#how-does-the-function-process-your-messages-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">How does the function process your messages?</a></h2> <p>When it starts up, your Functions app starts polling for and receiving messages, as described <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger#polling-algorithm\">in the polling section</a> of the documentation. The Azure Function checks for messages using an exponential back-off algorithm, ranging from 100ms up to 1 minute.</p> <p>If the Functions app finds multiple messages in the queue, it retrieves a batch of 16 messages, and runs multiple instances of your function concurrently to process them. Once 8 of the functions have completed, the Functions app polls and tries to receive another batch of 16, so a single instance of the app can process up to 24 (16 + 8) messages concurrently.</p> <p>The Functions app uses a \"peek-lock\" pattern to retrieve messages. This automatically marks messages as \"invisible\" when they're retrieved, so they can't be seen by other queue consumers. Then, one of 3 things happens:</p> <ul><li>The function completes successfully. In this case, the message is deleted from the queue.</li> <li>The function execution fails (throws an exception). The message is not deleted, and its visibility is updated to make it visible to consumers again. You can optionally add a delay to this, so that failed messages remain invisible for 30s, for example.</li> <li>The Functions app crashes. The message cannot be updated (because your app crashed!) but the message automatically becomes visible again after 10 minutes. This behaviour is built into Azure Storage Queues and can't be changed by your app.</li></ul> <p>So if the function completes successfully, the message is deemed to have been \"handled\", and is deleted from the queue. If your function throws an exception, the message is made visible in the queue again (with an optional delay). The Functions app will retry processing the message a further 4 times (i.e. 5 attempts in total).</p> <p><a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue-trigger?tabs=python-v2%2Cisolated-process%2Cnodejs-v4%2Cextensionv5&amp;pivots=programming-language-csharp#poison-messages\">If a message fails processing 5 times it's moved to a \"poison messages\" queue</a>, called <code>&lt;queuename&gt;-poison</code>. You can process the messages added to this queue as you would any other queue. You might want to simply log and discard them for example, or you might want to allow moving them back to the original queue after you've fixed bugs in the original function.</p> <h2 id=\"changing-the-configuration-of-the-storage-queue-trigger-with-host-json\" class=\"heading-with-anchor\"><a href=\"#changing-the-configuration-of-the-storage-queue-trigger-with-host-json\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Changing the configuration of the Storage Queue trigger with host.json</a></h2> <p>Some of the behaviour of the Functions app can be customised by changing properties in your app's <em>host.json</em> file, as described <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue?tabs=isolated-process%2Cextensionv5%2Cextensionv3&amp;pivots=programming-language-csharp#host-json\">in the documentation</a>. Not everything can be customised, for example the 10 minute visibility timeout when your app crashes is performed by the storage queue itself, so you can't customise it for your app.</p> <p>The following shows a host.json file that customizes the storage queue trigger. The JSON below shows the default values:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"extensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"queues\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"maxPollingInterval\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"00:01:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"visibilityTimeout\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"00:00:00\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"maxDequeueCount\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"batchSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"newBatchThreshold\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>These values control various aspects of the <code>[QueueTrigger]</code> behaviour:</p> <ul><li><code>maxPollingInterval</code>—The maximum polling interval the Functions app will use. The minimum interval is always 100ms (and <code>maxPollingInterval</code> cannot be shorter than this), but there's no maximum interval.</li> <li><code>visibilityTimeout</code>—Controls how long a message should remain invisible after a failed execution.</li> <li><code>maxDequeueCount</code>—The maximum number of times to try to handle a message before it should be placed on the poison queue.</li> <li><code>batchSize</code>—The maximum number of messages the Functions app should try to retrieve and processes in parallel. The maximum size is 32.</li> <li><code>newBatchThreshold</code>—When the number of remaining messages being processed from a batch reaches this value, a new batch is retrieved.</li></ul> <p>These are all the settings you can change to control how you consume Storage Queue messages, but <a href=\"https://learn.microsoft.com/en-us/azure/azure-functions/functions-host-json\">there are many other settings</a> you can change to control overall execution of your Azure Functions app.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed the differences between the Azure Storage Queue message queue service and how it compares to Azure Service Bus in terms of functionality. After comparing the services, I described an example of processing email bounce notifications as a good candidate for choosing the simpler Storage Queue service.</p> <p>In the second half of the post I showed how to read messages from an Azure Storage Queue using Azure Functions and the <code>[QueueTrigger]</code> queue extension. Finally I described how the Functions app processes your messages, and how you can customize that behaviour.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/using-azure-storage-queues-with-azure-functions-and-queuetrigger/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/avoiding-cdn-supply-chain-attacks-with-subresource-integrity/",
      "Title": "Avoiding CDN supply-chain attacks with Subresource Integrity (SRI)",
      "PublishDate": "2024-08-20T09:00:00+00:00",
      "Summary": "In this post I discus the recent pollyfill.io supply-chain attack and describe how to protect against similar attacks using Subresource Integrity (SRI)",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/pollyfill_banner.webp\" /><p>There's been a lot of tech on the news recently. There was <a href=\"https://en.wikipedia.org/wiki/XZ_Utils_backdoor\">the xz-utils backdoor</a> in March, <a href=\"https://en.,wikipedia.org/wiki/2024_CrowdStrike_incident\">the Crowdstrike outage in July</a>, and in the middle there was <a href=\"https://arstechnica.com/security/2024/07/384000-sites-link-to-code-library-caught-performing-supply-chain-attack/\">the Pollyfill.io supply chain attach</a>. It's the Polyfill.io attack that I'm going to talk about in this post. I'll give a brief explanation of what happened, why it was bad, and what you can do to protect yourself from similar attacks in the future.</p> <h2 id=\"what-was-pollyfill-io-\" class=\"heading-with-anchor\"><a href=\"#what-was-pollyfill-io-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What was Pollyfill.io?</a></h2> <p><a href=\"https://github.com/polyfillpolyfill/polyfill-service\">Polyfill.io</a> <em>was</em> a legitimate open-source project. In its own words:</p> <blockquote> <p>Polyfill.io is a service which makes web development less frustrating by selectively polyfill just what the browser needs. Polyfill.io reads the User-Agent header of each request and returns polyfill that are suitable for the requesting browser.</p> </blockquote> <p>In other words, old browsers (such as Internet Explorer) have far fewer features and APIs available than modern browsers. However, some of these APIs can be <em>emulated</em> (polyfilled) by implementing equivalent functionality in JavaScript, which means you can still code against modern browser APIs. On modern browsers, where the APIs already exist, your app uses the APIs directly, while on older browsers you can rely on the polyfilled versions.</p> <p>This technique was practically a requirement for many years when we had a greater diversity of browser engines, but also questionable adherence to specifications. It's one of the reasons <a href=\"https://jquery.com/\">jQuery</a> became so popular!</p> <blockquote> <p>The need for general-purpose polyfill libraries has reduced significantly these days, with most browsers adopting an \"evergreen\" approach (i.e. automatically updating) and IE usage continually dropping.</p> </blockquote> <p>Polyfill.io operated a Content Delivery Network (CDN) which hosted the polyfill.io code, so you could simply add a <code>&lt;script&gt;</code> tag in your application, and your app would automatically pull the JavaScript and run it. The \"neat\" part of the pollyfill.io service was that it sniffed the User-Agent of the request and returned a different script depending on the requesting browser. As we'll see later, that functionality actually made it very hard to use safely.</p> <h2 id=\"what-happened-\" class=\"heading-with-anchor\"><a href=\"#what-happened-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What happened?</a></h2> <p><a href=\"https://sansec.io/research/polyfill-supply-chain-attack\">A lot has been written</a> about the polyfill supply-chain attack, so I'll just give a quick overview here.</p> <ul><li>The polyfill.io GitHub repository and polyfill.io domain were sold to the Chinese company Funnull.</li> <li>The code hosted on the pollyfill.io CDN was changed to inject malicious behaviour.</li> <li>When executed, the pollyfill.io JavaScript redirected users to gambling and adult websites.</li> <li>The domain was suspended 2 days later, mitigating the issue.</li> <li>However, nearly 400,000 sites were found to still be linking to the malicious domain, including big names such as <ul><li>Warner Bros. (<a href=\"http://www.warnerbros.com\">www.warnerbros.com</a>)</li> <li>Hulu (<a href=\"http://www.hulu.com\">www.hulu.com</a>)</li> <li>Various .gov (government owned) sites</li></ul> </li></ul> <p>So yeah, pretty bad.</p> <p>The thing I found interesting reading about the attack was that this has been a know attack vector for a <em>long</em> time, and we've had protections against this available in browsers for almost 10 years.</p> <h2 id=\"protecting-against-cdn-supply-chain-attacks-with-subresource-integrity\" class=\"heading-with-anchor\"><a href=\"#protecting-against-cdn-supply-chain-attacks-with-subresource-integrity\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Protecting against CDN supply-chain attacks with Subresource Integrity</a></h2> <p>The main protection for this sort of attack is called <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\"><em>Subresource Integrity</em> (SRI)</a>. This was <a href=\"https://frederikbraun.de/using-subresource-integrity.html\">proposed</a> (and implemented) way back in 2015, with the specific intention of protecting against malicious CDNs serving files that are different from the files you expect. Technically it doesn't protect specifically against malicious changes to files, it protects against <em>any</em> changes to files.</p> <p>How it works is pretty simple:</p> <ul><li>In your <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> tags you add an <code>integrity</code> attribute, which contains a hash of the content you expect, encoded using <a href=\"https://en.wikipedia.org/wiki/Base64\">bae64</a>.</li> <li>When the browser receives the file, it calculates a hash of the contents of the received file. <ul><li>If the hash of the file matches the value in the <code>integrity</code> attribute, it's loaded as normal.</li> <li>If the files are different the browser rejects the file, returns an error and does not load the content.</li></ul> </li></ul> <p>It's basically as simple as that. You can choose between multiple hash algorithms (<code>sha256</code>, <code>sha384</code>, and <code>sha512</code>), and you can list multiple hashes if you expect several different files.</p> <p>The result is something that looks like the following, which loads <code>jquery.validation.min.js</code> from <a href=\"https://cdnjs.cloudflare.com/\">the Cloudflare CDN</a>:</p> <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.17.0/jquery.validate.min.js<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anonymous<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">integrity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sha384-rZfj/ogBloos6wzLGpPkkOr/gpkBNLZ6b6yLy4o+ok+t/SAKlL5mvXLr0OXNi1Hp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Note that the <code>integrity</code> attribute includes the hash algorithm as a prefix, <code>sha384</code> in this case. The hash value is everything from <code>rZfj/ogB</code> onwards.</p> <blockquote> <p>The <code>crossorigin=\"anonymous\"</code> attribute is required because the request is a cross-origin request (a request to a different <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Origin\">origin</a>). This enables <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Cross Origin Resource Sharing (CORS)</a>. Without this attribute, the cross-origin request would always fail.</p> </blockquote> <p>If you make a request and the CDN returns a file that does not match the value in the <code>integrity</code> attribute, you'll get an error something like this:</p> <p><img src=\"/content/images/2024/sri_01.png\" alt=\"Failed to find a valid digest in the 'integrity' attribute for resource 'https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.17.0/jquery.validate.min.js' with computed SHA-384 integrity 'rZfj/ogBloos6wzLGpPkkOr/gpkBNLZ6b6yLy4o+ok+t/SAKlL5mvXLr0OXNi1Hp'. The resource has been blocked.\"></p> <p>So if you're serving files from a CDN you should <em>really</em> be pinning to a specific version, and adding the <code>integrity</code> attribute to your <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> tags. If you do, then you know that a malicious CDN <em>won't</em> be able to run malicious JavaScript on your page. Of course, this would likely break your website, but that's better than malicious JavaScript running on your site.</p> <blockquote> <p>If you're running ASP.NET Core and using Razor files, you can use the <code>asp-fallback-src</code> and <code>asp-fallback-test</code> Tag Helpers to provide fallback locations to load from, so that your site doesn't break, as I describe <a href=\"https://andrewlock.net/using-jquery-and-bootstrap-from-a-cdn-with-fallback-scripts-in-asp-net-core-3/\">in a previous post</a>.</p> </blockquote> <p>So given SRI has been in Firefox and Chrome since 2015 (and Edge and Safari since 2018), could the pollyfill.io attack have been largely avoided?</p> <h2 id=\"would-sri-have-avoided-the-pollyfill-io-attack-\" class=\"heading-with-anchor\"><a href=\"#would-sri-have-avoided-the-pollyfill-io-attack-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Would SRI have avoided the pollyfill.io attack?</a></h2> <p>In theory the answer should be obvious—a malicious CDN file is what SRI was designed to protect against. So could SRI have prevented the pollyfill.io attack? Unfortunately, it's somewhat hard to tell.</p> <p>Fundamentally, pollyfill.io acted more as a <em>service</em> than as a simple CDN. CDNs typically serve strictly versioned files, such as <code>1.17.0</code> in the previous example. In contrast, pollyfill.io used major-only versions, for example <code>/v3/polyfill.min.js</code>. That meant that the pollyfill.io service could update the served file at any time, fixing bugs or adding features etc. On the face of it, that might seem like a <em>good</em> thing; who doesn't want bug fixes automatically right?</p> <p>The problem is that if you were including a dependency on pollyfill.io, you had <em>no idea</em> what code it was serving. You couldn't test updates, to make sure newer versions of the polyfill.min.js didn't break your site. And you ultimately had no control or visibility of what the polyfill.io site was returning.</p> <p>What's more, by design, the pollyfill.io service returned <em>different</em> values depending on the browser that was making the request. If you're running Firefox 1.0, Chrome 45, or Safari 18, you'll get completely different responses from the endpoint. That seems quite smart on the face of it; it keeps the response file as small by ensuring it only returns code <em>required</em> by the browser. For modern browsers, the service likely returned essentially nothing.</p> <p><img src=\"/content/images/2024/pollyfill.webp\" alt=\"A rough diagram of how the pollyfill.io service used to work\"></p> <p>Unfortunately, again, this design makes it difficult to understand exactly <em>what</em> your site expects. Fundamentally, every browser expects to receive <em>different</em> JavaScript. That's a problem for securing your software supply chain. But <em>could</em> have SRI worked here?</p> <p>I suspect the answer unfortunately, is: probably not, or at least, not while continuing to support very old browsers.</p> <p>As already described, the SRI <code>integrity</code> attribute allows you to provide multiple valid hashes for a script. So it <em>might</em> be possible to enumerate all the browser versions that you support, and add all the hashes to your site. But given the diversity of browsers out there that you <em>might</em> want to support that seems like it would be problematic.</p> <p>Additionally, the fact that the pollyfill.io service might suddenly change (due to the major-only references) is a fundamental problem for SRI. If you add <code>integrity</code> attributes, and pollyfill.min.js suddenly changes, then your site is (potentially) going to immediately break, as the file is rejected.</p> <blockquote> <p>This will likely vary depending on the site, and the browser; if the pollyfill.min.js was essentially a no-op because it was called with a modern browser, then potentially there would be no adverse impact on the site. On the other hand, old browsers are likely going to break.</p> </blockquote> <p>So it seems like it really wasn't practical to use SRI for the pollyfill.io service due to its design. Unfortunately, that means that the pollyfill.io was inherently an <a href=\"https://owasp.org/www-community/attacks/xss/\">Cross Site Scripting (XSS)</a> attack waiting to happen, and we know how that turned out 😬 That's part of the reason <a href=\"https://blog.cloudflare.com/polyfill-io-now-available-on-cdnjs-reduce-your-supply-chain-risk\">Cloudflare started running their own instance of pollyfill.io</a> at <a href=\"https://cdnjs.cloudflare.com/polyfill/\">https://cdnjs.cloudflare.com/polyfill/</a> back in February!</p> <h2 id=\"are-cdns-worth-it-\" class=\"heading-with-anchor\"><a href=\"#are-cdns-worth-it-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Are CDNs worth it?</a></h2> <p>I've seen some discourse online decrying the use of CDNs in their entirety. The argument is you just shouldn't host files that are critical to your app on \"someone else's server\". That's fair enough, but it's ignoring the fact there's a <em>reason</em> CDNs exist; it's not just developers being reckless. But technology moves on, so it's worth examining the reasons that we used CDNs in the first place, and whether those reasons are still applicable.</p> <p>Historically, there were a variety of reasons to use a CDN:</p> <ol><li><strong>Reduced latency</strong>. CDNs are typically globally distributed, so can give very low latencies for downloading files, wherever in the world your users are. That can make a big difference if your application is only hosted in one region, and users are sending requests from the other side of the world!</li> <li><strong>Reduce bandwidth</strong>. The CDN offloads network traffic from your servers, reducing the load on your server, and reducing your outbound traffic, which may also have monetary benefits when hosting in the cloud.</li> <li><strong>Shared loading</strong>. Other applications may have already downloaded common libraries from the CDN. If the file is already cached by the browser, it <em>may</em> not need to make a request at all, significantly speeding up your application.</li> <li><strong>Fewer connections</strong>. By sending requests for client-side assets to a CDN, you may see higher overall network throughput for your application. Browsers <a href=\"https://docs.diffusiondata.com/cloud/latest/manual/html/designguide/solution/support/connection_limitations.html\">limit the number of simultaneous connections they make to a server</a> (commonly 6). If you host your files on a CDN, the connections to the CDN don't count towards your server limit, leaving more connections to download in parallel from your app.</li></ol> <p>So the question is, do these still apply?</p> <p>I believe 1. and 2. are still clearly applicable. It's still common for CDNs to be more widely distributed than your core app, so you will likely benefit from improved latencies for delivering these files to your users. Similarly, any file that a CDN serves is one less hit on your server. And often more importantly, you're not paying egress bandwidth costs from your server.</p> <p>Reason 3 is no longer a benefit. The original idea was that if everyone loads jQuery from the official CDN, then browsers will likely have the library cached when users hit your site. However, back in 2020, <a href=\"https://developer.chrome.com/blog/http-cache-partitioning\">Google Chrome started partitioning caches</a> by taking the <em>requesting</em> domain into account for privacy reasons. <a href=\"https://bugs.webkit.org/show_bug.cgi?id=110269\">Safari made a similar change back in 2013</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning#network_partitioning\">Firefox in 2021</a>.</p> <p>With cache partitioning, reason 3 no longer applies at all. Even if site A downloads jQuery from the CDN and caches it, site B can't use that cached data and must re-download it.</p> <p>Reason 4 still <em>technically</em> applies, but with HTTP/2, it has become much less relevant. With HTTP/2, multiple requests can be made in parallel, multiplexed over a single connection. This reduces the benefit of CDNs as a way of increasing the number of parallel requests.</p> <p>The main downsides with CDNs (which remain unchanged) are:</p> <ul><li>You need to trust the CDN to deliver the files you request. You can (and obviously should) enforce this with <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">a good Content Security Policy (CSP)</a> and with SRI <code>integrity</code> attributes.</li> <li>If you don't want your site to break if/when a CDN is unavailable or is compromised, then you need to provide alternative hosting for the files (on your server for example), and <a href=\"https://andrewlock.net/using-jquery-and-bootstrap-from-a-cdn-with-fallback-scripts-in-asp-net-core-3/\">add fallback code</a> to detect this situation.</li></ul> <p>So, with that all in mind, are CDNs worth it? The answer is almost certainly \"it depends\". Some of the benefits still remain, but there's much less of a value proposition than there used to be, so bear that in mind when making your decision.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post, I discussed the recent pollyfill.io supply-chain attack that resulted in malicious JavaScript running on vulnerable sites. I then described how you could protect against similar attacks using the Subresource Integrity (SRI) feature by adding the <code>integrity</code> attribute, which contains a hash of the expected file data. Finally I examined whether SRI would have worked in the pollyfill.io case, and whether CDNs are still worth using these days.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/avoiding-cdn-supply-chain-attacks-with-subresource-integrity/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/combining-multiple-docker-images-into-a-multi-arch-image/",
      "Title": "Combining multiple docker images into a multi-arch image",
      "PublishDate": "2024-08-13T10:00:00+00:00",
      "Summary": "In this post I show two ways to combine multiple docker images into a single multi-arch image, discuss manifests and manifest lists, and why they matter",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/alpine_clang_banner.png\" /><p>In this post I show how you can create multi-arch docker images by combining separate x64 and arm46 images into a single docker image. I described an easy way to create multi-arch images <a href=\"/creating-multi-arch-docker-images-for-arm64-from-windows/\">in a previous post</a>. This post takes a slightly different approach, in that it supports the multi-arch images being created on different machines, and optionally from completely different dockerfiles.</p> <h2 id=\"what-is-a-multi-arch-docker-image-\" class=\"heading-with-anchor\"><a href=\"#what-is-a-multi-arch-docker-image-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What is a multi-arch docker image?</a></h2> <p>Docker has the concept of multi-architecture images, which means that a single Docker image tag can support multiple architectures. Typically different OS/processor architectures require different Docker images. With multi-arch images you specify a single image, and Docker will pull the appropriate architecture for your processor and platform.</p> <p>For example, if you specify <a href=\"https://hub.docker.com/_/microsoft-dotnet-sdk/\">the .NET SDK docker image</a> in your Dockerfile:</p> <pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/dotnet/sdk:5.0</span>\n<span class=\"token comment\">#...</span>\n</code></pre> <p>This docker image is a multi-arch image, so it actually contains a list of different docker images, one for each supported processor architecture. When you pull the image, docker pulls the appropriate x64, arm64, or arm32 image, based on your host architecture.</p> <p>With the rise of arm64 machines, the need for creating multi-arch images is only increasing. Luckily docker includes an easy way to build multi-arch images.</p> <h2 id=\"creating-multi-arch-docker-images-the-easy-way\" class=\"heading-with-anchor\"><a href=\"#creating-multi-arch-docker-images-the-easy-way\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating multi-arch docker images the easy way</a></h2> <p>In <a href=\"/creating-multi-arch-docker-images-for-arm64-from-windows/\">a previous post</a>, I described the \"easy\" way to build multi-arch images using docker's <code>buildx</code> command. This requires a small amount of setup, but once it's working, compiling a dockerfile for multiple platforms is trivial by using the <code>--platform</code> option.</p> <p>For example, by running the following command, I was able to compile my dockerfile for 8 different platforms and push the resulting multi-arch image to docker hub:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlock/wait-for-dependencies:latest\n  <span class=\"token parameter variable\">--push</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v7,linux/arm/v6 <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>As you can see, <a href=\"https://hub.docker.com/r/andrewlock/wait-for-dependencies/tags\">the published image</a> has support for all those different architectures:</p> <p><img src=\"/content/images/2021/multi_arch.png\" alt=\"Multi-arch support for a docker image on Docker Hub\"></p> <p>This works really well, but it doesn't work as well for some scenarios.</p> <h2 id=\"sometimes-the-easy-way-isn-t-so-easy\" class=\"heading-with-anchor\"><a href=\"#sometimes-the-easy-way-isn-t-so-easy\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Sometimes the easy way isn't so easy</a></h2> <p>When you use the <code>--platform</code> tag with <code>buildx</code>, docker uses <a href=\"https://www.qemu.org/\">QEMU</a> to <em>emulate</em> the architectures that don't match your host architecture. So if I'm on an x64 machine, and I'm trying to build for arm64 using <code>--platform linux/arm64</code> then docker uses QEMU's software emulation to run any necessary binaries during your image build. This is frankly kind of magical, and is why it's so easy to build for all the other architectures.</p> <p>Unfortunately, emulation is inherently <em>much</em> slower than using the host architecture. If you're just copying files around or doing relatively light tasks, then that's probably not a big problem. But if you're trying to do something compute-heavy like compilation, then you may find that the emulation is just too slow. If that's the case, you'll likely want to restrict building only for host architecture platforms, and using a different machine (with the appropriate architecture) for each target platform.</p> <p>Another scenario where the simple <code>buildx</code> scenario may not work, is if you want to use fundamentally different dockerfiles for certain architectures. If you can't use a single dockerfile for your build, then you won't be able to use the multi-arch <code>buildx</code> approach described in the previous problem.</p> <blockquote> <p>If the difference between your dockerfiles is small, you <em>may</em> be able to combine them into a single dockerfile by adding <code>ARG TARGETPLATFORM</code> to your file, <a href=\"https://docs.docker.com/engine/reference/builder/#automatic-platform-args-in-the-global-scope\">relying on <code>buildx</code> to fill this variable</a>, and adding checks in your dockerfile, <a href=\"https://nielscautaerts.xyz/making-dockerfiles-architecture-independent.html#:%7E:text=A%20better%20solution%20using%20TARGETPLATFORM\">as described in this post</a>.</p> </blockquote> <p>If you find yourself in either of these situations then you'll probably need to build each platform image separately and them <em>combine</em> them into a single multi-arch image. In the next section I'll show how to do that</p> <h2 id=\"creating-multi-arch-images-using-docker-manifest\" class=\"heading-with-anchor\"><a href=\"#creating-multi-arch-images-using-docker-manifest\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating multi-arch images using <code>docker manifest</code></a></h2> <p>In this section I'll show how we can create a multi-arch image from two independently built images. We're going to take the following steps:</p> <ol><li>Build and push the single-architecture images using <code>docker buildx</code></li> <li>Confirm the images were pushed successfully</li> <li>Use <code>docker manifest</code> to create and push a multi-arch image</li> <li>Confirm the multi-arch image was pushed successfully</li></ol> <p>Finally, we'll discuss some of the limitations used in this approach.</p> <h3 id=\"building-the-single-architecture-images\" class=\"heading-with-anchor\"><a href=\"#building-the-single-architecture-images\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building the single-architecture images</a></h3> <p>The first step is to build the single-platform images. For the images which have the same architecture as your host architecture you could use the \"normal\" <code>build</code> and <code>push</code> commands, for example:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> myimage:latest-x64 <span class=\"token parameter variable\">-f</span> myimage.dockerfile <span class=\"token builtin class-name\">.</span>\n<span class=\"token function\">docker</span> push myimage:latest-x64\n</code></pre> <p>This approach is fine if you're building on the same underlying architecture, but it's generally recommended to use the <code>buildx</code> commands instead these days, so that's what I show below.</p> <p>In the example below, I'm building the <code>andrewlock/alpine-clang</code> image. I'm using two different dockerfiles for the different architectures—<em>alpine.build.dockerfile</em> on x64 (amd64) and <em>alpine.build.arm64.dockerfile</em> on arm64—and running <code>buildx build</code> with a single platform passed to <code>--platform</code>.</p> <p>First we have the command to build and push the x64 image:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> alpine.build.dockerfile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/amd64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--provenance</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> push-by-digest<span class=\"token operator\">=</span>true,type<span class=\"token operator\">=</span>image,push<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>This builds the x64 image and pushes it directly to docker hub.</p> <blockquote> <p>Don't worry about the <code>--provenance</code> and <code>--output</code> parameters for now, we'll come back to them shortly</p> </blockquote> <p>The command to build the arm64 image is essentially identical:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> alpine.build.arm64.dockerfile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/arm64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--provenance</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> push-by-digest<span class=\"token operator\">=</span>true,type<span class=\"token operator\">=</span>image,push<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>The build output from these commands looks something like the following:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>+<span class=\"token punctuation\">]</span> Building <span class=\"token number\">3613</span>.7s <span class=\"token punctuation\">(</span><span class=\"token number\">14</span>/15<span class=\"token punctuation\">)</span>                                                              docker-container:mybuilder\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>internal<span class=\"token punctuation\">]</span> load build definition from alpine.build.dockerfile                                               <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> transferring dockerfile: <span class=\"token number\">1</span>.46kB                                                                          <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> resolve image config <span class=\"token keyword\">for</span> docker-image://docker.io/docker/dockerfile:1.6                                     <span class=\"token number\">1</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>auth<span class=\"token punctuation\">]</span> docker/dockerfile:pull token <span class=\"token keyword\">for</span> registry-1.docker.io                                                <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> CACHED docker-image://docker.io/docker/dockerfile:1.6@sha256:ac85f380a63b13dfcefa89046420e1781752bab202122  <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> resolve docker.io/docker/dockerfile:1.6@sha256:ac85f380a63b13dfcefa89046420e1781752bab202122f8f50032edf  <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>internal<span class=\"token punctuation\">]</span> load metadata <span class=\"token keyword\">for</span> docker.io/library/alpine:3.14                                                  <span class=\"token number\">0</span>.5s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>auth<span class=\"token punctuation\">]</span> library/alpine:pull token <span class=\"token keyword\">for</span> registry-1.docker.io                                                   <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>internal<span class=\"token punctuation\">]</span> load .dockerignore                                                                               <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> transferring context: 55B                                                                                <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>internal<span class=\"token punctuation\">]</span> load build context                                                                               <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> transferring context: 54B                                                                                <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>base <span class=\"token number\">1</span>/2<span class=\"token punctuation\">]</span> FROM docker.io/library/alpine:3.14@sha256:0f2d5c38dd7a4f4f733e688e3a6733cb5ab1ac6e3cb4603a5dd56  <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> resolve docker.io/library/alpine:3.14@sha256:0f2d5c38dd7a4f4f733e688e3a6733cb5ab1ac6e3cb4603a5dd564e5bf  <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> CACHED <span class=\"token punctuation\">[</span>base <span class=\"token number\">2</span>/2<span class=\"token punctuation\">]</span> RUN apk update         <span class=\"token operator\">&amp;&amp;</span> apk upgrade         <span class=\"token operator\">&amp;&amp;</span> apk <span class=\"token function\">add</span> --no-cache         cmake         <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> CACHED <span class=\"token punctuation\">[</span>build-llvm-clang <span class=\"token number\">1</span>/2<span class=\"token punctuation\">]</span> COPY alpine_build_patch_llvm_clang.sh alpine_build_patch_llvm_clang.sh        <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>build-llvm-clang <span class=\"token number\">2</span>/2<span class=\"token punctuation\">]</span> RUN <span class=\"token function\">git</span> clone <span class=\"token parameter variable\">--depth</span> <span class=\"token number\">1</span> <span class=\"token parameter variable\">--branch</span> llvmorg-16.0.6 https://github.com/llvm/llvm-pro  <span class=\"token number\">3151</span>.6s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>final <span class=\"token number\">1</span>/1<span class=\"token punctuation\">]</span> RUN <span class=\"token parameter variable\">--mount</span><span class=\"token operator\">=</span>target<span class=\"token operator\">=</span>/llvm-project,from<span class=\"token operator\">=</span>build-llvm-clang,source<span class=\"token operator\">=</span>llvm-project,rw <span class=\"token builtin class-name\">cd</span> /llvm-projec  <span class=\"token number\">25</span>.3s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting to image                                                                                        <span class=\"token number\">395</span>.6s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting layers                                                                                       <span class=\"token number\">145</span>.4s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest sha256:9df972530f876295787deea7424db90cbd14d5a8fa602b2a3bce82977aa1025e               <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting config sha256:957c30684ee6d3d5defb646d5b2c19c7a57ebce4a485b1a47743afbc503e2d98                 <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing layers                                                                                         <span class=\"token number\">250</span>.2s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">[</span>auth<span class=\"token punctuation\">]</span> andrewlockdd/alpine-clang:pull,push token <span class=\"token keyword\">for</span> registry-1.docker.io                                   <span class=\"token number\">0</span>.0s\n</code></pre> <p>Most of this output isn't particularly interesting, the one thing we're looking for is the <code>sha256</code> <em>digest</em> for our image, which in the block above is <code>sha256:9df972530f876295787deea7424db90cbd14d5a8fa602b2a3bce82977aa1025e</code>. The important section of the arm64 image looks like this:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>+<span class=\"token punctuation\">]</span> Building <span class=\"token number\">3</span>.0s <span class=\"token punctuation\">(</span><span class=\"token number\">11</span>/11<span class=\"token punctuation\">)</span> FINISHED                                                        docker-container:mybuilder\n <span class=\"token punctuation\">..</span>.\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting to image                                                                                          <span class=\"token number\">0</span>.9s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting layers                                                                                         <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest sha256:038adbc4d6dc2e28f0818d5ae0fc1cae6cc42b854bd809f236435bed33f6ea63               <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting config sha256:36d2ae374bbe2d18a4ea8e275224be28d8d834b74fe24aec60a61be11f143e74                 <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing layers                                                                                           <span class=\"token number\">0</span>.8s\n</code></pre> <p>If you go to <a href=\"https://hub.docker.com/r/andrewlockdd/alpine-clang/tags\">hub.docker.com</a> at this point and look at the tags, you might be surprised to see that it's empty 😬</p> <p><img src=\"/content/images/2024/alpine_clang_empty.png\" alt=\"Image of the docker hub UI andrewlockdd/alpine-clang showing there are no tags\"></p> <p>So what's going on here, did the build work or not? 🤔</p> <h3 id=\"where-are-the-images-\" class=\"heading-with-anchor\"><a href=\"#where-are-the-images-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Where are the images?</a></h3> <p>There's no need to worry, the images were built and pushed to the image repository, just as the logs suggest. However, instead of being <em>tagged</em> (e.g. with <code>:latest</code> or <code>:v1.0</code>), they were pushed using their <em>digest</em> directly. We achieved that by adding the <code>push-by-digest=true</code> option to the <code>--output</code> parameter in the <code>buildx</code> command.</p> <p>You might be wondering <em>why</em> we took that approach, instead of pushing with a tag like \"normal\". The answer is specifically to give the behaviour you've just seen: we don't <em>want</em> the \"single architecture\" images to be accessed as \"normal\".</p> <p>If you don't want this approach, you could certainly give each architecture image a different tag, <code>1.0-x64</code> and <code>1.0-arm64</code> for example, and push these single-architecture images to the repository. These images would then show up as separate tags in your docker repository:</p> <p><img src=\"/content/images/2024/alpine_clang_arm64.png\" alt=\"A single architecture tagged image\"></p> <p>and we could later combine these into a single image (as we'll do in the next section). Personally I prefer the \"digest\" approach I showed originally, as it avoids cluttering up the tag list.</p> <p>If you want some evidence that the image <em>was</em> pushed successfully, you can always inspect the <em>manifest</em> of the docker image, using the digest to reference the image. For example, the following pulls the manifest for the arm64 image we pushed previously:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> manifest inspect andrewlockdd/alpine-clang@sha256:038adbc4d6dc2e28f0818d5ae0fc1cae6cc42b854bd809f236435bed33f6ea63\n</code></pre> <blockquote> <p>Note that to refer to a specific digest you use the <code>@</code> separator, i.e. <code>IMAGE@sha256:DIGEST</code> whereas for tags you use the <code>:</code> separator: <code>IMAGE:TAG</code></p> </blockquote> <p>This returns the JSON manifest for the image, which describes the layers in the image and the configuration of the image.</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"schemaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.container.image.v1+json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:36d2ae374bbe2d18a4ea8e275224be28d8d834b74fe24aec60a61be11f143e74\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1103</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"layers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:4983c3fe2029a430985943e6d87b35248366efd28cee655acc3ebff5daf703fa\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3339494</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.image.rootfs.diff.tar.gzip\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:ac6a4ede3e9444fba78ba2e47affc65870c27dd687f8b8ac494cc09bae09746c\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">253664375</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So our single-arch images have been built, now we just need to combine them into a single multi-arch image.</p> <h3 id=\"combining-single-arch-images-into-a-single-multi-arch-image\" class=\"heading-with-anchor\"><a href=\"#combining-single-arch-images-into-a-single-multi-arch-image\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Combining single-arch images into a single multi-arch image</a></h3> <p>Before I show you the commands, it's worth understanding what a multi-arch image actually <em>is</em>. The <code>docker manifest inspect</code> command in the previous section shows how the docker image is a collection of layers of gzipped tar files, along with some configuration, all described and linked to by the <em>manifest</em> file.</p> <p>A multi-arch image is described by <a href=\"https://github.com/openshift/docker-distribution/blob/master/docs/spec/manifest-v2-2.md\">a <em>manifest list</em> file</a>. At it's heart, this is essentially a <em>collection</em> of manifests. So to create a multi-arch image, we need to create a manifest list that contains a pointer to each of the single-arch image manifests.</p> <p>Luckily there's a built-in docker command for doing that, <code>docker manifest create</code>. The following command shows how we can create a multi-arch image (called <code>andrewlockdd/alpine-clang:1.0</code>) by pointing to each of our single-arch images using their digests:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> manifest create andrewlockdd/alpine-clang:1.0 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--amend</span> andrewlockdd/alpine-clang@sha256:038adbc4d6dc2e28f0818d5ae0fc1cae6cc42b854bd809f236435bed33f6ea63 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--amend</span> andrewlockdd/alpine-clang@sha256:9df972530f876295787deea7424db90cbd14d5a8fa602b2a3bce82977aa1025e\n</code></pre> <blockquote> <p>If you opted for the \"tags\" approach using <code>1.0-arm64</code> etc, you can replace the digest references with the tags, i.e. instead of <code>andrewlockdd/alpine-clang@sha256:038adbc4...</code> use <code>andrewlockdd/alpine-clang:1.0-x64</code>.</p> </blockquote> <p>If all went well, this prints <code>Created manifest list docker.io/andrewlockdd/alpine-clang:1.0</code> and we can push the manifest list to docker hub:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> manifest push andrewlockdd/alpine-clang:1.0\nsha256:b27a1e358b1158c3e750dbbffc8ef93c5f17bfb4db6754d284953bab00e8f54a\n</code></pre> <p>And that's it, we have just created our multi-arch image! If we look on docker hub, we can see that the image has been created, and it supports both <code>linux/amd64</code> <em>and</em> <code>linux/arm64</code>:</p> <p><img src=\"/content/images/2024/alpine_clang_final.png\" alt=\"Image of the multi-arch image on docker hub\"></p> <p>For completeness, lets check what the manifest looks like for our new multi-arch image by running</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> manifest inspect andrewlockdd/alpine-clang:1.0\n</code></pre> <p>The resulting JSON looks <em>similar</em> to the previous JSON, but this has a media type ending in <code>manifest.list.v2+json</code> (instead of <code>manifest.v2+json</code>), and it contains an array of <code>manifests</code>, because this is a <em>manifest list</em> document, not a <em>manifest</em> document:</p> <pre class=\"language-json\"><code class=\"language-json\"> <span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"schemaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.distribution.manifest.list.v2+json\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"manifests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n         <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">703</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:038adbc4d6dc2e28f0818d5ae0fc1cae6cc42b854bd809f236435bed33f6ea63\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arm64\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n         <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.docker.distribution.manifest.v2+json\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">904</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:9df972530f876295787deea7424db90cbd14d5a8fa602b2a3bce82977aa1025e\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"amd64\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span>\n         <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>So there we have it, a multi-arch image, built up from two individually built single-arch images.</p> <p>There's one thing I haven't explained yet though: why did we set <code>--provenance false</code> when building the original images?</p> <h2 id=\"what-about-my-provenance-\" class=\"heading-with-anchor\"><a href=\"#what-about-my-provenance-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What about my <code>--provenance</code>?</a></h2> <p><a href=\"https://docs.docker.com/build/attestations/slsa-provenance/\">Provenance attestations</a> are a relatively new feature for docker. They include details such as:</p> <ul><li>Build timestamps</li> <li>Build parameters and environment</li> <li>Version control metadata</li> <li>Source code details</li> <li>Materials (files, scripts) consumed during the build</li></ul> <p>and can be used as part of documenting/securing your software supply chain. By default, in the latest versions of docker (and hence <code>buildx</code>), provenance attestation is enabled by default.</p> <p>In general, this seems like a good idea, right? Absolutely, but unfortunately it messes with the process I described above 😅</p> <p>The problem is that if you run <code>docker buildx build</code> and <em>don't</em> set <code>--provenance false</code>:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang:1.0-arm64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> alpine.build.arm64.dockerfile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/arm64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--push</span>\n  <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>and we check the manifest produced using</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> manifest inspect andrewlockdd/alpine-clang:1.0-arm64\n</code></pre> <p>Then we can see that the manifest is <em>already</em> a manifest list, or rather, it's an <a href=\"https://github.com/opencontainers/image-spec/blob/main/image-index.md\"><em>OCI image index</em></a>:</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"schemaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.index.v1+json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"manifests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">675</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:680c4e5a622100dd2b79d3f9da0a6434a150bd250714efcc1f109bce1bdd54e6\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arm64\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">566</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:b512226b9d375d0616afa5cbf55405182746af3f8ed4aed6f22899ebc8c02417\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This is effectively the same as Docker's manifest list, but if you try to combine the resulting docker image using <code>docker manifest create</code>, you'll get an error:</p> <pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> manifest create andrewlockdd/alpine-clang:1.0 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--amend</span> andrewlockdd/alpine-clang:1.0-arm64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--amend</span> andrewlockdd/alpine-clang:1.0-x64\n\ndocker.io/andrewlockdd/alpine-clang:1.0-arm64 is a manifest list\n</code></pre> <p>Given what we've seen, that makes sense, but it's not a very useful error, as it doesn't explain how to resolve it.</p> <p>You've already seen one \"fix\" is to just disable provenance, and fallback to the older docker manifest. The obvious downside is that you lose the provenance attestations!</p> <h2 id=\"building-multi-arch-images-while-preserving-provenance\" class=\"heading-with-anchor\"><a href=\"#building-multi-arch-images-while-preserving-provenance\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building multi-arch images while preserving provenance</a></h2> <p>Luckily, there's a way to both have your cake and eat it. You can leave provenance enabled <em>and</em> you can combine the images by using the <code>docker buildx imagetools</code> command.</p> <p>For completeness, the following shows the whole process:</p> <ul><li>Build and push the single-arch images using digests (and including provenance)</li> <li>Merge the images using <code>docker buildx imagetools</code></li> <li>View the final manifest (and provenance)</li></ul> <p>First we create the single-arch images. These are the same commands <a href=\"#building-the-single-architecture-images\">we used previously</a>, but without the <code>--provenance false</code> argument:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Build and push the x64 image</span>\n<span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> alpine.build.dockerfile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/amd64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> push-by-digest<span class=\"token operator\">=</span>true,type<span class=\"token operator\">=</span>image,push<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">.</span>\n\n<span class=\"token comment\"># Build and push the arm64 image</span>\n<span class=\"token function\">docker</span> buildx build <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-f</span> alpine.build.arm64.dockerfile <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--platform</span> linux/arm64 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">--output</span> push-by-digest<span class=\"token operator\">=</span>true,type<span class=\"token operator\">=</span>image,push<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">.</span>\n</code></pre> <p>The important final output shows the digests we need:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting to image                                                                                                     <span class=\"token number\">2</span>.5s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting layers                                                                                                    <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest sha256:baf6ac2adae703a67dd950db4ea643c43adebe0170bf7ce6757cd9738b970b29                          <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting config sha256:957c30684ee6d3d5defb646d5b2c19c7a57ebce4a485b1a47743afbc503e2d98                            <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting attestation manifest sha256:c1320b886d705acfb178ed5fd913c88e0b03e455b5cd7d7d46f9859cdeb9dd6c              <span class=\"token number\">0</span>.1s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest list sha256:43e7b94e3c40edb95a4d0519c6e58f592f43a7ccf604b0524f2df5ac888c11bc                     <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing layers                                                                                                      <span class=\"token number\">1</span>.5s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing manifest <span class=\"token keyword\">for</span> docker.io/andrewlockdd/alpine-clang                                                            <span class=\"token number\">0</span>.8s\n</code></pre> <p>and</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting to image                                                                                                     <span class=\"token number\">2</span>.6s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting layers                                                                                                    <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest sha256:680c4e5a622100dd2b79d3f9da0a6434a150bd250714efcc1f109bce1bdd54e6                          <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting config sha256:36d2ae374bbe2d18a4ea8e275224be28d8d834b74fe24aec60a61be11f143e74                            <span class=\"token number\">0</span>.0s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting attestation manifest sha256:3778285b90c1da66e6489deff990d3eb36a1fd142ab03fcd29441d212371478a              <span class=\"token number\">0</span>.1s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> exporting manifest list sha256:bf6ebf7b395a92a6c71c052dc443bf0ce90981687b475111327b5195ff3945cb                     <span class=\"token number\">0</span>.1s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing layers                                                                                                      <span class=\"token number\">1</span>.4s\n <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> pushing manifest <span class=\"token keyword\">for</span> docker.io/andrewlockdd/alpine-clang                                                            <span class=\"token number\">1</span>.0s\n</code></pre> <p>There's a lot of <code>sha256</code> listed here 😅 The ones we need are for the <code>manifest list</code>, which includes both the image manifest and the attestation manifest. We finally use <code>imagetools</code> to create the combined multi-arch manifest:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx imagetools create <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-t</span> andrewlockdd/alpine-clang:1.0 <span class=\"token punctuation\">\\</span>\n  andrewlockdd/alpine-clang@sha256:bf6ebf7b395a92a6c71c052dc443bf0ce90981687b475111327b5195ff3945cb <span class=\"token punctuation\">\\</span>\n  andrewlockdd/alpine-clang@sha256:43e7b94e3c40edb95a4d0519c6e58f592f43a7ccf604b0524f2df5ac888c11bc\n</code></pre> <p>If we inspect the new generated manifest using <code>manifest inspect</code>, we can see that it's a manifest list using the OCI Image Index format, and it includes <em>four</em> manifests: 2 for each image (an image manifest and an attestation manifest):</p> <pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"schemaVersion\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.index.v1+json\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"manifests\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">675</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:680c4e5a622100dd2b79d3f9da0a6434a150bd250714efcc1f109bce1bdd54e6\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arm64\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">566</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:3778285b90c1da66e6489deff990d3eb36a1fd142ab03fcd29441d212371478a\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">870</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:baf6ac2adae703a67dd950db4ea643c43adebe0170bf7ce6757cd9738b970b29\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"amd64\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"linux\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"mediaType\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/vnd.oci.image.manifest.v1+json\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">566</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"digest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sha256:c1320b886d705acfb178ed5fd913c88e0b03e455b5cd7d7d46f9859cdeb9dd6c\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"platform\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"architecture\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"os\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"unknown\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It's also worth noting that <code>buildx imagetools</code> has <a href=\"https://docs.docker.com/reference/cli/docker/buildx/imagetools/inspect/\">its own <code>inspect</code> command</a>, which provides a more compact and readable description of the manifest. For example, if you run</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> buildx imagetools inspect andrewlockdd/alpine-clang:1.0\n</code></pre> <p>The output is generally easier to read, and explicitly calls out the attestation manifests:</p> <pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>      docker.io/andrewlockdd/alpine<span class=\"token punctuation\">-</span>clang<span class=\"token punctuation\">:</span><span class=\"token number\">1.0</span>\n<span class=\"token key atrule\">MediaType</span><span class=\"token punctuation\">:</span> application/vnd.oci.image.index.v1+json\n<span class=\"token key atrule\">Digest</span><span class=\"token punctuation\">:</span>    sha256<span class=\"token punctuation\">:</span>cb350dbbe9b9faac570357461e2db806c54f8535451829cf6827b5ab0c2d2d53\n\n<span class=\"token key atrule\">Manifests</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>        docker.io/andrewlockdd/alpine<span class=\"token punctuation\">-</span>clang<span class=\"token punctuation\">:</span>1.0@sha256<span class=\"token punctuation\">:</span>680c4e5a622100dd2b79d3f9da0a6434a150bd250714efcc1f109bce1bdd54e6\n  <span class=\"token key atrule\">MediaType</span><span class=\"token punctuation\">:</span>   application/vnd.oci.image.manifest.v1+json\n  <span class=\"token key atrule\">Platform</span><span class=\"token punctuation\">:</span>    linux/arm64\n\n  <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>        docker.io/andrewlockdd/alpine<span class=\"token punctuation\">-</span>clang<span class=\"token punctuation\">:</span>1.0@sha256<span class=\"token punctuation\">:</span>3778285b90c1da66e6489deff990d3eb36a1fd142ab03fcd29441d212371478a\n  <span class=\"token key atrule\">MediaType</span><span class=\"token punctuation\">:</span>   application/vnd.oci.image.manifest.v1+json\n  <span class=\"token key atrule\">Platform</span><span class=\"token punctuation\">:</span>    unknown/unknown\n  <span class=\"token key atrule\">Annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">vnd.docker.reference.digest</span><span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>680c4e5a622100dd2b79d3f9da0a6434a150bd250714efcc1f109bce1bdd54e6\n    <span class=\"token key atrule\">vnd.docker.reference.type</span><span class=\"token punctuation\">:</span>   attestation<span class=\"token punctuation\">-</span>manifest\n\n  <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>        docker.io/andrewlockdd/alpine<span class=\"token punctuation\">-</span>clang<span class=\"token punctuation\">:</span>1.0@sha256<span class=\"token punctuation\">:</span>baf6ac2adae703a67dd950db4ea643c43adebe0170bf7ce6757cd9738b970b29\n  <span class=\"token key atrule\">MediaType</span><span class=\"token punctuation\">:</span>   application/vnd.oci.image.manifest.v1+json\n  <span class=\"token key atrule\">Platform</span><span class=\"token punctuation\">:</span>    linux/amd64\n\n  <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span>        docker.io/andrewlockdd/alpine<span class=\"token punctuation\">-</span>clang<span class=\"token punctuation\">:</span>1.0@sha256<span class=\"token punctuation\">:</span>c1320b886d705acfb178ed5fd913c88e0b03e455b5cd7d7d46f9859cdeb9dd6c\n  <span class=\"token key atrule\">MediaType</span><span class=\"token punctuation\">:</span>   application/vnd.oci.image.manifest.v1+json\n  <span class=\"token key atrule\">Platform</span><span class=\"token punctuation\">:</span>    unknown/unknown\n  <span class=\"token key atrule\">Annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">vnd.docker.reference.digest</span><span class=\"token punctuation\">:</span> sha256<span class=\"token punctuation\">:</span>baf6ac2adae703a67dd950db4ea643c43adebe0170bf7ce6757cd9738b970b29\n    <span class=\"token key atrule\">vnd.docker.reference.type</span><span class=\"token punctuation\">:</span>   attestation<span class=\"token punctuation\">-</span>manifest\n</code></pre> <p>Things still look essentially the same on docker hub, so as long as whatever is using your docker image supports the newer OCI image format, then it probably makes sense to include the attestation parameters.</p> <p><img src=\"/content/images/2024/alpine_clang_final.png\" alt=\"Image of the multi-arch image on docker hub\"></p> <p>This post showed one way to build your multi-arch images, but <code>buildx</code> itself also supports <a href=\"https://docs.docker.com/build/building/multi-platform/#multiple-native-nodes\">farming out building to various native nodes</a> if that's something you are interested in. If you're building your images in GitHub Actions, then it's worth looking at <a href=\"https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners\">this documentation</a> which shows to easily automate the above steps.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I briefly described the easy approach to building multi-arch images using <code>buildx</code> and <code>--platforms</code>, which I described <a href=\"/creating-multi-arch-docker-images-for-arm64-from-windows/\">in a previous post</a>. Unfortunately, it's not always possible to use this approach, so you may need to build and push your single-arch images, and then combine the resulting images into a single multi-arch image.</p> <p>In this post I showed how to build single-arch images using <code>buildx</code> with <code>--provenance</code> disabled so that you generate a single manifest per image. I then showed how to combine these images using <code>docker manifest create</code> to create a manifest list, which is a multi-arch image.</p> <p>Finally, I showed how you can preserve the provenance attestation (which creates OCI Image Lists for each single-arch image) and then combine these using <code>buildx imagetools create</code> to create the final multi-arch image.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/combining-multiple-docker-images-into-a-multi-arch-image/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/simplifying-theory-test-data-with-xunit-combinatorial/",
      "Title": "Simplifying [Theory] test data with Xunit.Combinatorial",
      "PublishDate": "2024-08-06T09:00:00+00:00",
      "Summary": "In this post I show how you can simplify your xUnit [Theory] tests using the Xunit.Combinatorial package to auto-generate your test parameters",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/xunit_combinatorial_banner.png\" /><p>In this post I show how you can simplify your xUnit <code>[Theory]</code> tests using the <a href=\"https://github.com/AArnott/Xunit.Combinatorial\">Xunit.Combinatorial</a> package. This package has a bunch of features that can make it easier to generate the test data you need; you can auto-generate parameters, generate all parameter combinations, or randomly generate values.</p> <h2 id=\"creating-parameterised-tests-in-xunit-with-inlinedata-classdata-and-memberdata-\" class=\"heading-with-anchor\"><a href=\"#creating-parameterised-tests-in-xunit-with-inlinedata-classdata-and-memberdata-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating parameterised tests in xUnit with <code>[InlineData]</code>, <code>[ClassData]</code>, and <code>[MemberData]</code></a></h2> <p>Before we dig into Xunit.Combinatorial, I'll give a quick overview of the two different types of test in xunit, and the main approaches for supplying the test data to those tests.</p> <blockquote> <p>To this day, one of the most popular posts I've written is <a href=\"/creating-parameterised-tests-in-xunit-with-inlinedata-classdata-and-memberdata/\">\"Creating parameterised tests in xUnit with <code>[InlineData]</code>, <code>[ClassData]</code>, and <code>[MemberData]</code>\"</a>. If you're new to xUnit you might want to read that and its follow up post \"<a href=\"/creating-strongly-typed-xunit-theory-test-data-with-theorydata/\">Creating strongly typed xUnit theory test data with <code>TheoryData</code></a>\".</p> </blockquote> <p>There are two types of test in xUnit:</p> <ul><li><code>[Fact]</code> tests are parameterless methods.</li> <li><code>[Theory]</code> tests are parameterised methods.</li></ul> <p>Applying one of the above attributes to a method turns it into an xUnit test. For <code>[Theory]</code> tests, you also need to provide a data source, so that xUnit knows what parameters to pass to the method when it calls it.</p> <p>There are three built-in approaches to doing this:</p> <ul><li><code>[InlineData]</code>—multiple <code>[InlineData]</code> attributes are applied to the method, providing the full set of parameters for a single execution of the method.</li> <li><code>[MemberData]</code>—reference to a static method or parameter to invoke which returns an <code>IEnumerable&lt;object[]&gt;</code>, where each element is the full set of parameters for a single execution of the method. <a href=\"/creating-strongly-typed-xunit-theory-test-data-with-theorydata/\">The member can alternatively return a <code>TheoryData</code> instance</a>.</li> <li><code>[ClassData]</code>—reference to a class which implements <code>IEnumerable&lt;object[]&gt;</code>, where each element is the full set of parameters for a single execution of the method. <a href=\"/creating-strongly-typed-xunit-theory-test-data-with-theorydata/\">The class can alternatively be derived from <code>TheoryData</code></a>.</li></ul> <p>The following example shows the first two approaches for supplying all the possible values to a <code>[Theory]</code> test, where the test has two <code>bool</code> values.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// Each instance specifies the values for all parameters</span>\n    <span class=\"token punctuation\">[</span><span class=\"token function\">InlineData</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyInlineDataTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Generate the data - we could have listed out all the values</span>\n    <span class=\"token comment\">// but I often have code like the following when I want to </span>\n    <span class=\"token comment\">// test all the combinations of various cases</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span> MyData\n        <span class=\"token operator\">=&gt;</span>  <span class=\"token keyword\">from</span> val1 <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">from</span> val2 <span class=\"token keyword\">in</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">select</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> val1<span class=\"token punctuation\">,</span> val2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemberData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyMemberDataTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>As you can see in the above code, whether we want to list out all the values manually (as in <code>[InlineData]</code>, but we could have done it for <code>[MemberData]</code> too) or generate the values (as I did in this case for <code>[MemberData]</code>) it's quite a lot of code dedicated to just generating some <code>bool</code> values.</p> <p>This is where Xunit.Combinatorial shines…</p> <h2 id=\"using-xunit-combinatorial-to-auto-generate-values\" class=\"heading-with-anchor\"><a href=\"#using-xunit-combinatorial-to-auto-generate-values\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using Xunit.Combinatorial to auto-generate values</a></h2> <p>Test parameters like the ones I've shown above are the bread and butter of <a href=\"https://github.com/AArnott/Xunit.Combinatorial\">Xunit.Combinatorial</a> a project from <a href=\"https://github.com/AArnott\">Andrew Arnott</a> on the Visual Studio Platform team. For the rest of this post I walk through some of the features it provides.</p> <p>Add Xunit.Combinatorial to your project by running:</p> <pre class=\"language-bash\"><code class=\"language-bash\">dotnet <span class=\"token function\">add</span> package Xunit.Combinatorial\n</code></pre> <p>At the time of writing, this adds version 1.6.24 to the project. We can now simplify the <code>MyTests</code> class to use the <code>[CombinatorialData]</code> attribute instead of <code>[InlineData]</code> or <code>MemberData</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyInlineDataTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyMemberDataTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val1<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That's it! The net result is exactly the same; we run all 4 permutations for <code>val1</code> and <code>val2</code> for both tests, but we've gone from 22 lines down to 12 lines!</p> <p><img src=\"/content/images/2024/xunit_combinatorial_01.png\" alt=\"The result of executing the test class above is that each test is executed with the same data as before\"></p> <p>Ok, ok, I cheated a bit by putting the attributes on the same line, but that's something you feasibly <em>can</em> do now without things getting long and ugly!</p> <p>Lets dig in a bit further. Generating all the <code>bool</code> values is obviously easy and feasible, but what about other data? The short answer is that <a href=\"https://github.com/AArnott/Xunit.Combinatorial/blob/42d2eb537c5d08b40879bd94cc121920b0c1a76f/src/Xunit.Combinatorial/ValuesUtilities.cs#L62\">there are only 5 main types that are supported by Xunit.Combinatorial</a> in this \"automatic\" mode:</p> <ul><li><code>bool</code>—As you've already seen, this generates data for <code>true</code> and <code>false</code>.</li> <li><code>bool?</code>—This includes <code>null</code> as a value, giving <code>null</code>, <code>true</code>, <code>false</code>.</li> <li><code>int</code>—There's obviously a lot of potential <code>int</code>s, so only <code>0</code> and <code>1</code> are used.</li> <li><code>int?</code>—As for <code>bool?</code>, this adds <code>null</code> as a value, giving <code>null</code>, <code>0</code>, <code>1</code>.</li> <li><code>Enum</code>—If you use an <code>enum</code> all the values returned by <code>Enum.GetNames&lt;T&gt;</code>() are used.</li></ul> <blockquote> <p>If you try to use a parameter that is not one of these Xunit.Combinatorial throws a <code>NotSupportedException</code>, which will likely break your test execution. This part of the library could do with a bit more love really - it would be nice for the error to say <em>why</em> it's not supported, and/or including an analyzer to point it out.</p> </blockquote> <p>This may seem quite limiting up front. What if I want to test more than <code>0</code> and <code>1</code> with my <code>int</code> parameter? Or I have <code>double</code> or <code>string</code> parameters? Do I have to fall back to the built in attributes? Luckily, no, Xunit.Combinatorial provides a way to specify all the values for a given parameter.</p> <h2 id=\"using-custom-defined-values-and-ranges\" class=\"heading-with-anchor\"><a href=\"#using-custom-defined-values-and-ranges\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using custom defined values and ranges</a></h2> <p>The following example shows how to use a combination of the auto-generated <code>bool</code> parameter, specific non-default values for the <code>int</code> parameter, and an otherwise-unsupported <code>double</code> parameter:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> val1<span class=\"token punctuation\">,</span> <span class=\"token comment\">// use all the automatic values (true, false)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">CombinatorialValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> val2<span class=\"token punctuation\">,</span> <span class=\"token comment\">// use the provided int values</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">CombinatorialValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> val3<span class=\"token punctuation\">)</span> <span class=\"token comment\">// use the provided double values</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p><code>[CombinatorialData]</code> combines all these values to execute the test a total of 12 times:</p> <ul><li><code>val1: False</code>, <code>val2: -1</code>, <code>val3: -1.2</code></li> <li><code>val1: False</code>, <code>val2: -1</code>, <code>val3: 0</code></li> <li><code>val1: False</code>, <code>val2: -1</code>, <code>val3: 2.5</code></li> <li><code>val1: False</code>, <code>val2: 1</code>, <code>val3: -1.2</code></li> <li><code>val1: False</code>, <code>val2: 1</code>, <code>val3: 0</code></li> <li><code>val1: False</code>, <code>val2: 1</code>, <code>val3: 2.5</code></li> <li><code>val1: True</code>, <code>val2: -1</code>, <code>val3: -1.2</code></li> <li><code>val1: True</code>, <code>val2: -1</code>, <code>val3: 0</code></li> <li><code>val1: True</code>, <code>val2: -1</code>, <code>val3: 2.5</code></li> <li><code>val1: True</code>, <code>val2: 1</code>, <code>val3: -1.2</code></li> <li><code>val1: True</code>, <code>val2: 1</code>, <code>val3: 0</code></li> <li><code>val1: True</code>, <code>val2: 1</code>, <code>val3: 2.5</code></li></ul> <p>Tests like this, where the large number of parameters means a large numbers of combinations are where <code>[CombinatorialData]</code> really shines.</p> <p>If you want to test a range of <code>int</code>s you can use the <code>[CombinatorialRange]</code> attribute. This takes a <code>from</code> parameter (the first value) and a <code>count</code> (the number of values to generate), for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialRange</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">from</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">count</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> val1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// val1: 10</span>\n        <span class=\"token comment\">// val1: 11</span>\n        <span class=\"token comment\">// val1: 12</span>\n        <span class=\"token comment\">// val1: 13</span>\n        <span class=\"token comment\">// val1: 14</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Alternatively you can provide <code>from</code>, <code>to</code>, and <code>step</code>, in which case the <code>from</code> value is generated and incremented by <code>step</code> until it is greater than <code>to</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialRange</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">from</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">to</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">step</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> val1<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// val1: 10</span>\n        <span class=\"token comment\">// val1: 13</span>\n        <span class=\"token comment\">// val1: 16</span>\n        <span class=\"token comment\">// val1: 19</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <blockquote> <p>Personally I'm not a fan of the design choice to use <code>count</code> in one case and <code>to</code> in the other. Consistency, which ever was chosen, would have been preferable in my opinion. For that reason, I recommend explicitly using the parameter names as I have in the examples above, to avoid ambiguity.</p> </blockquote> <p><code>[CombinatorialValues]</code> and <code>[CombinatorialRange]</code> work well when you only have a small number of values, but as the number of values get larger, you may think that <code>[MemberData]</code> is looking more appealing. Fear not, Xunit.Combinatorial has you covered!</p> <h2 id=\"using-combinatorialmemberdata-to-generate-values-for-a-single-parameter\" class=\"heading-with-anchor\"><a href=\"#using-combinatorialmemberdata-to-generate-values-for-a-single-parameter\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using <code>[CombinatorialMemberData]</code> to generate values for a single parameter</a></h2> <p>In some cases, placing all the values for a parameter inline in an attribute may not be desirable, while in other cases it may not even be possible. For these situations, Xunit.Combinatorial has a similar method to xunit's built-in <code>[MemberData]</code>: <code>[CombinatorialMemberData]</code>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Members must be static methods, properties, or fields</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>Uri<span class=\"token punctuation\">&gt;</span></span> GetUris\n        <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://localhost\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialMemberData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>GetUris<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">Uri</span> uri<span class=\"token punctuation\">,</span> <span class=\"token comment\">// reference the member as a string</span>\n        <span class=\"token punctuation\">[</span><span class=\"token function\">CombinatorialValues</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8081</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> port<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// uri: http://localhost/, port: 8080</span>\n        <span class=\"token comment\">// uri: http://localhost/, port: 8081</span>\n        <span class=\"token comment\">// uri: https://localhost/, port: 8080</span>\n        <span class=\"token comment\">// uri: https://localhost/, port: 8081</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p><code>[CombinatorialMemberData]</code> is used in <em>almost</em> the same way as <code>[MemberData]</code>, except instead of being applied to a test <em>method</em> and returning <code>IEnumerable&lt;object[]&gt;</code> with <em>all</em> the values for a test run, <code>[CombinatorialMemberData]</code> is applied to a single test parameter, and specifies all the possible values of the parameter. Xunit.Combinatorial then combines this with each of the other parameter values to generate the complete set of test data.</p> <blockquote> <p>One thing to bear in mind is that the <code>CombinatorialMemberData</code> member is invoked once per test method. When you have multiple parameters in your tests, that means the same object will be used in multiple test runs. More concretely, in the example above, there are 4 executions of the test, but only 2 unique <code>Uri</code> instances.</p> </blockquote> <p>Just like <code>[MemberData]</code>, <code>[CombinatorialMemberData]</code> allows you to specify that a member is on a different type:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// Use Method 👇         on type 👇</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialMemberData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Data<span class=\"token punctuation\">.</span>GetPrimes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> MemberType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> prime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Data</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> GetPrimes <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It also lets you provide arguments that should be passed to the member when retrieving the values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Data generation function</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetPrimes</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> include1<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">=&gt;</span> include1 <span class=\"token punctuation\">?</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest2</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialMemberData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>GetPrimes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> prime<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>                <span class=\"token comment\">// Method to call ☝ passing in ☝</span>\n        <span class=\"token comment\">// prime: 1 // 👈 include1 was true, so we have this value</span>\n        <span class=\"token comment\">// prime: 2</span>\n        <span class=\"token comment\">// prime: 3</span>\n        <span class=\"token comment\">// prime: 5</span>\n        <span class=\"token comment\">// prime: 7</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>With all these attributes, you should be able to specify any combination you like.</p> <h2 id=\"generating-random-data-with-combinatorialrandomdata-\" class=\"heading-with-anchor\"><a href=\"#generating-random-data-with-combinatorialrandomdata-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Generating random data with <code>[CombinatorialRandomData]</code></a></h2> <p>Sometimes you just want to test some random values. In those cases you <em>could</em> use <code>[CombinatorialMemberData]</code> and use <code>Random.Shared.Next()</code> to generate the values, or you could use the built-in support of <code>[CombinatorialRandomData]</code>. This attribute has 4 properties, each of which is optional:</p> <ul><li><code>Count</code>—The number of values to generate. Defaults to <code>5</code></li> <li><code>Minimum</code>—The minimum value (inclusive) that can be generated. Defaults to <code>0</code></li> <li><code>Maximum</code>—The maximum value (inclusive) that can be generated. Defaults to <code>int.MaxValue - 1</code>.</li> <li><code>Seed</code>—The seed to use for random number generation. Defaults to not providing a seed, so different values are generated each time.</li></ul> <p>You can specify as many or as few of these values as you like, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyCombinatorialTest2</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CombinatorialRandomData</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Minimum <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> Maximum <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// value: 10</span>\n        <span class=\"token comment\">// value: 12</span>\n        <span class=\"token comment\">// value: 14</span>\n        <span class=\"token comment\">// value: 18</span>\n        <span class=\"token comment\">// value: 19</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The values are always unique, but be aware if you specify a very narrow range of possible values, <a href=\"https://github.com/AArnott/Xunit.Combinatorial/blob/42d2eb537c5d08b40879bd94cc121920b0c1a76f/src/Xunit.Combinatorial/CombinatorialRandomDataAttribute.cs#L71\">the generator may throw an exception trying to satisfy the constraints</a>.</p> <h2 id=\"reducing-the-number-of-combinations\" class=\"heading-with-anchor\"><a href=\"#reducing-the-number-of-combinations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reducing the number of combinations</a></h2> <p>The final feature I'd like to look at is the \"pairwise\" support, which is a way to reduce your test matrix, while still exploring important points in the test parameter space. This is based on several observations:</p> <ul><li>As the number of parameters increases, the number of test cases increases dramatically if testing all combinations.</li> <li>Exhaustive testing of all combinations often isn't necessary to reveal bugs.</li> <li>Many bugs in tests are triggered based on a combination of two values.</li></ul> <p>Lets take a concrete example. The following test has 4 <code>bool</code> parameters. The full combinatorial matrix consists of <math display=\"inline\" title=\"2^4=16\"><msup><mn>2</mn><mn>4</mn></msup><mo>=</mo><mn>16</mn></math> values, as shown below:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CombinatorialData</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isSecure<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isRemote<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isNew<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isReturn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: False, isNew: False, isReturn: False</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: False, isNew: False, isReturn: True</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: False, isNew: True,  isReturn: False</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: False, isNew: True,  isReturn: True</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: True,  isNew: False, isReturn: False</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: True,  isNew: False, isReturn: True</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: True,  isNew: True,  isReturn: False</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: True,  isNew: True,  isReturn: True</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: False, isReturn: False</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: False, isReturn: True</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: True,  isReturn: False</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: True,  isReturn: True</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: False, isReturn: False</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: False, isReturn: True</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: True,  isReturn: False</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: True,  isReturn: True</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>However, if we switch from <code>CombinatorialData</code> to <code>PairwiseData</code> instead, we can dramatically reduce the number of tests we execute:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Theory</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">PairwiseData</span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 👈 Using pairwise instead of [CombinatorialData]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">MyTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isSecure<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isRemote<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isNew<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isReturn<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: False, isNew: True,  isReturn: True)</span>\n        <span class=\"token comment\">// isSecure: False, isRemote: True,  isNew: False, isReturn: False)</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: False, isReturn: True)</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: False, isNew: True,  isReturn: False)</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: False, isReturn: True)</span>\n        <span class=\"token comment\">// isSecure: True,  isRemote: True,  isNew: True,  isReturn: True)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p><a href=\"https://github.com/AArnott/Xunit.Combinatorial/blob/42d2eb537c5d08b40879bd94cc121920b0c1a76f/src/Xunit.Combinatorial/PairwiseStrategy.cs\">This strategy</a> <em>dramatically</em> reduces the number of test cases from <code>16</code> down to <code>6</code>. However, if you look at each <em>pair</em> of parameters, <code>isSecure</code> and <code>isRemote</code> for example, you can see that we're still testing all 4 possible combinations.</p> <p>If your tests are long-running then using <code>[PairwiseData]</code> to reduce your overall execution time while ensuring you're testing important cases may be a good trade off. On the other hand, if your tests are fast unit tests, then you may be better off sticking with <code>[CombinatorialData]</code> as it may be easier to understand exactly which parameters are causing the issues when you get failures.</p> <h2 id=\"limitations\" class=\"heading-with-anchor\"><a href=\"#limitations\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Limitations</a></h2> <p>I'm really looking forward to trying out Xunit.Combinatorial in <a href=\"https://github.com/DataDog/dd-trace-dotnet\">the Datadog .NET repository</a>, as I think there's a bunch of places it would tidy things up and reduce verbosity. Nevertheless, there's a few limitations that I'll need to bear in mind:</p> <ul><li>As mentioned previously, you can't control the lifetime of parameters created using <code>[CombinatorialMemberData]</code>, they will always be shared across test runs if you have multiple parameters in a test. To avoid flakiness, it's important not to <em>mutate</em> the parameters in the test.</li> <li>There's currently no mechanism to <a href=\"https://github.com/AArnott/Xunit.Combinatorial/issues/3\"><em>exclude</em> specific combinations</a>. Currently if you explicitly <em>don't</em> want to test certain combinations, you won't be able to use Xunit.Combinatorial, or else you'll have to use some other mechanism to skip the combination.</li> <li><code>[CombinatorialRange]</code> can only be used with <code>int</code> and <code>uint</code>. If you want to use it with <code>double</code>/<code>float</code>/<code>long</code> or some other value, you're out of luck.</li></ul> <p>These seem like relatively easy limitations to live with, I'm looking forward to trying it out!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I show how you can simplify your xUnit <code>[Theory]</code> tests using the <a href=\"https://github.com/AArnott/Xunit.Combinatorial\">Xunit.Combinatorial</a> package. The built in <code>[InlineData]</code> and <code>[MemberData]</code> attributes require that you specify all the parameters for a test run. If you want to specify all the permutations for a set of parameters, that may be a lot of data to specify. In contrast, <code>[CombinatorialData]</code> has you specify all the possible values for each parameter separately, and generates all the test runs for you. In many cases, particularly <code>[Theory]</code> tests with many parameters, this can significantly simplify for your test definition code.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/simplifying-theory-test-data-with-xunit-combinatorial/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/creating-source-only-nuget-packages/",
      "Title": "Creating source-only NuGet packages",
      "PublishDate": "2024-07-30T09:00:00+00:00",
      "Summary": "In this post I show how you can create a NuGet package that contains source code (instead of dlls) which is then compiled into  the target project",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/source_only_banner.png\" /><p>In this post I describe how to create a source-only NuGet package. I discuss what source-only NuGet packages are, why you might want to create one, and how to build a project as a source-only package.</p> <h2 id=\"what-are-source-only-nuget-packages-\" class=\"heading-with-anchor\"><a href=\"#what-are-source-only-nuget-packages-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">What are source-only NuGet packages?</a></h2> <p>NuGet packages are the standard packaging mechanism for .NET. NuGet packages typically contain one or more dlls, MSBuild-related files (_.props, <em>.targets</em>), as well as various other files. Each NuGet package is just a <em>.zip</em> file, with files stored in specific well-defined folders that the .NET CLI/Visual Studio/MSBuild use to build your app.</p> <blockquote> <p>If you download a NuGet file you can easily \"see\" inside the file by renaming it from <em>.nupkg</em> to <em>.zip</em> and opening the file as you would a normal zip file. Alternatively, open the file using the excellent <a href=\"https://apps.microsoft.com/detail/9wzdncrdmdm3?hl=en-US&amp;gl=US\">NuGet Package Explorer</a>!</p> </blockquote> <p><em>Source-only</em> packages aren't an \"official\" thing. Rather they're a name sometimes used to describe NuGet packages that <em>don't</em> contain any pre-compiled dll dependencies, but rather include one or more source code files (typically <em>.cs</em> files) instead. Instead of depending on a dll, a project referencing the package includes the contained source code files when you build the project, directly compiling the source-only package <em>into</em> your own code.</p> <h2 id=\"why-might-you-want-to-create-a-source-only-package-\" class=\"heading-with-anchor\"><a href=\"#why-might-you-want-to-create-a-source-only-package-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Why might you want to create a source-only package?</a></h2> <p>In most cases, when you're referencing NuGet dependencies, you <em>want</em> a compiled binary. You don't want (or need) to be able to compile your dependencies. This is the standard use case for NuGet dependencies.</p> <p>Similarly, by using pre-compiled dependencies, you can exchange data with <em>other</em> dependencies. For example, maybe your app and a logging library both reference <em>System.Text.Json</em>; that means your app and the library can easily communicate between each other using types that are defined in the <em>System.Text.Json</em> assembly. Without a shared, pre-compiled dependency, this would not really be possible.</p> <p>One of the main use-cases for source-only packages is when you <em>don't</em> want that dependency. By design, NuGet/MsBuild only allows a <em>single</em> version of a dependency to be referenced in the complete package graph of your application. If multiple libraries in your app depend on <em>different</em> versions of a given dependency you can run into dependency resolution problems. Using a source-only package side-steps that by compiling a specific version of the dependency <em>into</em> each library.</p> <blockquote> <p>A classic example of this was <a href=\"https://github.com/damianh/LibLog\">the LibLog package</a>. In the days before <em>Microsoft.Extensions.Logging</em> and .NET Core, this was a way for libraries to write logs to <em>whatever logging framework the app used</em> but <em>without</em> taking any hard dependencies on logging frameworks. <a href=\"https://github.com/damianh/LibLog/wiki\">The design as a source only package</a> meant you could avoid any versioning issues.</p> </blockquote> <p>Another, more recent, example of where source-only packages shine is for \"lighting up\" new C# features. Many features in recent versions of C# require specific C# types for the feature to work, which are only present in \"recent\" versions of C#.</p> <p>Some concrete examples of this are the nullability attributes like <code>[NotNull]</code> and <code>[NotNullWhen]</code> which are used as part of the <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/nullable-analysis\">nullable reference type feature</a> introduced in C# 8.0. These attributes are only available in .NET Core 3.0+, so you might think you can't use them if you're targeting a .NET Standard 2.0 library, but that's not the case…</p> <p>All the compiler cares about is that the <code>[NotNull]</code> attribute exists, has the correct shape, and is in the <em>System.Diagnostics.CodeAnalysis</em> namespace. The compiler specifically <em>doesn't</em> care which assembly the attribute can be found in. That means you can define your <em>own</em> version of <code>[NotNull]</code> in your <code>netstandard2.0</code> assembly, use it just as you would the \"real\" version, and the compiler will happily use it with the nullable reference type feature!</p> <p>There are a huge number of C# features that can be \"lit-up\" like this in down-version target frameworks. As long as the version of the compiler (i.e. the .NET SDK) supports the C# version, you can often just add some extra attributes to your library to enable the features.</p> <blockquote> <p>Note that this isn't <em>always</em> the case; if the C# feature requires <em>runtime</em> support (for example <a href=\"/understanding-default-interface-methods/\">default interface methods</a>), then there's no way of using it in down-version target frameworks.</p> </blockquote> <p>All of this means that source-only packages are a great way to easily add these C# compiler attributes to earlier target frameworks. These packages <em>conditionally</em> define the attributes for earlier target frameworks:</p> <ul><li><a href=\"https://github.com/SimonCropp/Polyfill\">Polyfill</a>—My personal favourite, provides conditional attributes for a vast number of C# features! See <a href=\"https://github.com/SimonCropp/Polyfill\">the GitHub project</a> for the latest list.</li> <li><a href=\"https://github.com/manuelroemer/IsExternalInit\">IsExternalInit</a>—Adds <code>init</code> and <code>record</code> support to &lt; .NET 5.</li> <li><a href=\"https://github.com/manuelroemer/Nullable\">Nullable</a>—Adds support for nullable reference types to &lt; .NET Core 3.0.</li> <li><a href=\"https://github.com/bgrainger/IndexRange\">IndexRange</a>—Adds support for the C# Index and Range features in &lt; .NET Core 3.0.</li></ul> <p>When you add one of these packages to your app, a bunch of additional C# files are added to your application and included in the compilation, lighting up all the additional C# features.</p> <p>We've covered some of the reasons why you might want a source-only package, so for the rest of the post we'll look at how you can create your own.</p> <h2 id=\"creating-a-source-only-nuget-package\" class=\"heading-with-anchor\"><a href=\"#creating-a-source-only-nuget-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating a source-only NuGet package</a></h2> <p>For this example I'm going to create an incredibly simple library which exposes a single method, <code>SayHello()</code>. I'll then package it as a source-only NuGet package and show it in action.</p> <h3 id=\"creating-the-basic-library\" class=\"heading-with-anchor\"><a href=\"#creating-the-basic-library\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating the basic library</a></h3> <p>We're going to create a very simple library called <code>SourceOnlyExample</code> (original, I know). First we create a basic library project:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> SourceOnlyExample\n<span class=\"token builtin class-name\">cd</span> SourceOnlyExample\ndotnet new classlib\n</code></pre> <p>Next we replace the initial <code>Class1</code> class with the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Helpers</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>There's a couple of things to note about this:</p> <ul><li>I'm generally <em>not</em> using recent C# features. For maximum compatibility with early .NET SDK versions, I'm not using file-scoped namespaces for example. How far you want (or need) to go with this largely depends on which versions of the <em>compiler</em> you want to support, rather than which target frameworks you want to support.</li> <li>I'm using the <em>full</em> type names for built-in types, including the <code>global::</code> namespace alias, to avoid any potential ambiguity. You can read more about namespace aliases <a href=\"/disambiguating-types-with-the-same-name-with-extern-alias/\">in my previous post</a>.</li></ul> <p>Finally, I've disabled \"<a href=\"https://devblogs.microsoft.com/dotnet/welcome-to-csharp-10/\">implicit global usings</a>\" in the .csproj file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>disable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Disabling implicit usings is a good idea in source-only packages. You don't know whether the target application will have this feature enabled, and if it <em>doesn't</em> and your .cs files rely on them, the target project will get type resolution errors.</p> <p>At this point, if we pack this project into a NuGet file (by running <code>dotnet pack</code>) we'll get a \"standard\" NuGet package containing a <em>SourceOnlyExample.dll</em> file. In the next step we'll add a .nuspec file and create our source-only package.</p> <h3 id=\"a-minimal-nuspec-to-create-a-source-only-package\" class=\"heading-with-anchor\"><a href=\"#a-minimal-nuspec-to-create-a-source-only-package\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">A minimal nuspec to create a source-only package</a></h3> <p>The <a href=\"https://learn.microsoft.com/en-us/nuget/reference/nuspec\">.nuspec file format</a> is the historical way of defining how a project should be packaged as a NuGet package using the NuGet.exe tool. With the advent of the .NET CLI and the new SDK-style csproj files, they have largely become obsolete, but there's some situations in which you may need to fall back to them: source-only packages is one such case.</p> <p>The nuspec file is an XML file in which you declare all the metadata for your NuGet package, as well as define the <em>contents</em> of the package. The following annotated nuspec file includes various basic metadata values,</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 This is the ID of the package in NuGet --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>SourceOnlyExample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Indicates the package is only used at build time, not deploy time --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authors</span><span class=\"token punctuation\">&gt;</span></span>Andrew Lock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authors</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expression<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>MIT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>https://andrewlock.net/creating-source-only-nuget-packages/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>An example source-code only package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tags</span><span class=\"token punctuation\">&gt;</span></span>source compiletime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tags</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!-- 👇 Package all .cs files in the project, and place them in the contentFiles folder --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentFiles/cs/netstandard2.0/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>The <code>&lt;metadata&gt;</code> node is relatively self explanatory and specifies a whole load of values used by <a href=\"https://nuget.org\">nuget.org</a> and Visual Studio etc to show a description of your package. The really important node is <code>&lt;files&gt;</code> which defines what should be packed into the NuGet package.</p> <p>The <code>&lt;file&gt;</code> node shown above ensures that all the .cs files in the root folder are packaged under the <code>contentFiles/cs/netstandard2.0/SourceOnlyExample</code> path. Let's break down that path:</p> <ul><li><code>contentFiles</code>—any files which should be included in the target project</li> <li><code>cs</code>—indicates the files should only be included in C# projects</li> <li><code>netstandard2.0</code>—any project which targets <code>netstandard2.0</code>+ will get the files</li> <li><code>SourceOnlyExample</code>—the files will be nested in the target folder under a folder called <code>SourceOnlyExample</code>. This isn't <em>necessary</em> but is common, and avoids conflicts between multiple NuGet packages.</li></ul> <p>Note that the target for the files includes the <code>netstandard2.0</code> path, but if you multi-target your project (using <code>&lt;TargetFrameworks&gt;net461;netstandard2.0&lt;/TargetFrameworks&gt;</code> for example) you could include multiple <code>&lt;file&gt;</code> elements and include different files for each each if you wish, something like this:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.net461.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentFiles/cs/net461/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.netstandard.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentFiles/cs/netstandard2.0/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>With the nuspec created, we'll update the csproj file to reference it:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>netstandard2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>disable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ImplicitUsings</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>disable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Nullable</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Add this line --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>NuSpecFile</span><span class=\"token punctuation\">&gt;</span></span>SourceOnlyExample.nuspec<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>NuSpecFile</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>After this change we can call <code>dotnet pack</code> on the project:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">&gt;</span> dotnet pack\nMSBuild version <span class=\"token number\">17.9</span>.8+b34f75857 <span class=\"token keyword\">for</span> .NET\nDetermining projects to restore<span class=\"token punctuation\">..</span>.\nAll projects are up-to-date <span class=\"token keyword\">for</span> restore.\nSourceOnlyExample -<span class=\"token operator\">&gt;</span> C:<span class=\"token punctuation\">\\</span>repos<span class=\"token punctuation\">\\</span>temp<span class=\"token punctuation\">\\</span>temp47<span class=\"token punctuation\">\\</span>SourceOnlyExample<span class=\"token punctuation\">\\</span>bin<span class=\"token punctuation\">\\</span>Release<span class=\"token punctuation\">\\</span>netstandard2.0<span class=\"token punctuation\">\\</span>SourceOnlyExample.dll\nSuccessfully created package <span class=\"token string\">'C:\\repos\\temp\\temp47\\SourceOnlyExample\\bin\\Release\\SourceOnlyExample.1.0.0.nupkg'</span><span class=\"token builtin class-name\">.</span>\n</code></pre> <p>And there we have it, our first source-only package! If we open the package in NuGet Package Explorer then we can see, sure enough, package contains only our .cs file:</p> <p><img src=\"/content/images/2024/source_only_package_00.png\" alt=\"The source only-package\"></p> <p>What's more, if we add this NuGet package to a test project, we can see the Class1.cs file listed in the solution explorer:</p> <p><img src=\"/content/images/2024/source_only_package_01.png\" alt=\"Using the source only-package in Visual Studio\"></p> <p>And we can use the <code>SayHello()</code> method in our app!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Helpers<span class=\"token punctuation\">.</span>Class1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This may be as much as you <em>need</em> to do, but I'll show a couple of tweaks you can make to improve your source-only package.</p> <h3 id=\"hiding-the-files-in-visual-studio\" class=\"heading-with-anchor\"><a href=\"#hiding-the-files-in-visual-studio\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Hiding the files in Visual Studio</a></h3> <p>In the previous screenshot I showed that the .cs files in the <code>SourceOnlyExample</code> package show up in Visual Studio's Solution Explorer. You typically <em>don't</em> want that behaviour as it adds noise, so <a href=\"https://til.cazzulino.com/dotnet/nuget/hide-contentfiles-from-your-nuget-packages\">it's a common practice</a> to hide these files by default.</p> <p>To hide the files you need to customise the MSBuild properties associated with the added files. You can do this by creating a <code>props</code> file with the same name as your NuGet package, <em>SourceOnlyExample.props</em> in my case, with the following content:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token comment\">&lt;!--\n    Hide content files from Visual Studio solution explorer. Adapted from:\n   --&gt;</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Compile</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@(Compile)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!-- 👇 Replace 'SourceOnlyExample' with your own package name below --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Visible</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>%(NuGetItemType)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>Compile<span class=\"token punctuation\">'</span> and <span class=\"token punctuation\">'</span>%(NuGetPackageId)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>SourceOnlyExample<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Visible</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Compile</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>You then need to package this file inside the <code>build</code> folder of the NuGet package. Update your nuspec files as follows:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>SourceOnlyExample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authors</span><span class=\"token punctuation\">&gt;</span></span>Andrew Lock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authors</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expression<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>MIT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>https://andrewlock.net/creating-source-only-nuget-packages/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>An example source-code only package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tags</span><span class=\"token punctuation\">&gt;</span></span>source compiletime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tags</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentFiles/cs/netstandard2.0/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n\n      <span class=\"token comment\">&lt;!-- 👇 Hide content files from Visual Studio solution explorer  --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceOnlyExample.props<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build/SourceOnlyExample.props<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>Now after you create the NuGet package and add it an application the .cs files are hidden from Solution Explorer, but you can see that they're still included in the application (because the app still compiles).</p> <p><img src=\"/content/images/2024/source_only_package_02.png\" alt=\"The source only-package with files hidden from solution explorer\"></p> <p>If you're only building modern .NET apps, then that should be pretty much all you need to be able to create source-only packages. Unfortunately, not everyone is that lucky.</p> <h3 id=\"supporting-packages-config-as-well-as-packagereference\" class=\"heading-with-anchor\"><a href=\"#supporting-packages-config-as-well-as-packagereference\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Supporting packages.config as well as PackageReference</a></h3> <p>The <code>contentfiles</code> folder is used by projects using <code>&lt;PackageReference&gt;</code> to manage their NuGet dependencies. However the legacy approach, using a <em>packages.config</em> file requires that the files are included in a <em>different</em> folder: <code>content</code>. If you want your source-only package to support both approaches, you'll need to include both in your nusepc file:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>SourceOnlyExample<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>developmentDependency</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>authors</span><span class=\"token punctuation\">&gt;</span></span>Andrew Lock<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>authors</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>license</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>expression<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>MIT<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>license</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>requireLicenseAcceptance</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>https://andrewlock.net/creating-source-only-nuget-packages/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>projectUrl</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">&gt;</span></span>An example source-code only package<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tags</span><span class=\"token punctuation\">&gt;</span></span>source compiletime<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tags</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token comment\">&lt;!--\n      The files are included twice:\n        As contentFiles (for PackageReferences)\n        As content (for packages.config).\n      --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>contentFiles/cs/netstandard2.0/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*.cs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content/cs/netstandard2.0/SourceOnlyExample/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n\n      <span class=\"token comment\">&lt;!-- Hide content files from Visual Studio solution explorer  --&gt;</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>file</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceOnlyExample.props<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>build/SourceOnlyExample.props<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>files</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>package</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>With this change your source-only package will have much wider support!</p> <p>Before you upload your package to nuget.org you may want to make a few improvements to aid users of your package like <a href=\"https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/#add-a-readme-to-your-package\">adding a README</a> or <a href=\"https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5048#solution\">embedding an icon file</a>, but functionality wise, your package is ready!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I discussed source-only packages, what they are, and why you might want to use them. For the remainder of the post I showed how to create your own source-only Nuget package using a nuspec file and the <code>&lt;NuSpecFile&gt;</code> property. I then showed how to use a <em>.props</em> file to hide the source files in Solution Explorer in Visual Studio, and finally showed how to support <em>packages.config files</em> in addition to <code>&lt;PackageReference&gt;</code>.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/creating-source-only-nuget-packages/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/disambiguating-types-with-the-same-name-with-extern-alias/",
      "Title": "Disambiguating types with the same name with extern alias",
      "PublishDate": "2024-07-16T09:00:00+00:00",
      "Summary": "In this post I describe how to solve Error CS0433, where you have two types with the exact same name and namespace coming from two different packages",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/externalias_banner.png\" /><p>In this post I describe a relatively niche scenario, in which you have references to two libraries that <em>both</em> define a given type. This type has the same name in both libraries (the same type name <em>and</em> namespace), so how does the compiler know which one to use? Well, it doesn't, so you get a compile time error:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Error</span> CS0433 <span class=\"token punctuation\">:</span> The type 'Class1' exists <span class=\"token keyword\">in</span> both 'Library1<span class=\"token punctuation\">,</span> Version<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> Culture<span class=\"token operator\">=</span>neutral<span class=\"token punctuation\">,</span> PublicKeyToken<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>' <span class=\"token keyword\">and</span> 'Library2<span class=\"token punctuation\">,</span> Version<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> Culture<span class=\"token operator\">=</span>neutral<span class=\"token punctuation\">,</span> PublicKeyToken<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>'\n</code></pre> <p>And an error in the IDE:</p> <p><img src=\"/content/images/2024/externalias.png\" alt=\"JetBrains Rider showing an error for the ambigous match\"></p> <p>In this short post I show how you can resolve the issue using a piece of little know C# syntax: <code>extern alias</code>.</p> <h2 id=\"reproducing-the-scenario-duplicate-type-definitions\" class=\"heading-with-anchor\"><a href=\"#reproducing-the-scenario-duplicate-type-definitions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Reproducing the scenario: duplicate type definitions</a></h2> <p>Just to make sure we're all on the same page, I'll create a quick demo solution that reproduces the issues. The solution contains 3 projects:</p> <ul><li><code>Library1</code>—a class library.</li> <li><code>Library2</code>—a class library.</li> <li><code>MyApp</code>—a console app.</li></ul> <p>The <code>MyApp</code> project contains a reference to both of the library projects</p> <blockquote> <p>I'm using the .NET 8 SDK here but this all works way back, even in .NET Framework.</p> </blockquote> <p>We can scafold the solution using the .NET CLI:</p> <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Create a folder containing the Library1 class library project</span>\n<span class=\"token function\">mkdir</span> Library1\n<span class=\"token builtin class-name\">cd</span> Library1\ndotnet new classlib\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span> \n\n<span class=\"token comment\"># Create a folder containing the Library2 class library project</span>\n<span class=\"token function\">mkdir</span> Library2\n<span class=\"token builtin class-name\">cd</span> Library2\ndotnet new classlib\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n\n<span class=\"token comment\"># Create a folder containing the MyApp console project</span>\n<span class=\"token function\">mkdir</span> MyApp\n<span class=\"token builtin class-name\">cd</span> MyApp\ndotnet new console\n<span class=\"token comment\"># Add a reference to both the library projects</span>\ndotnet <span class=\"token function\">add</span> reference <span class=\"token punctuation\">..</span>/Library1\ndotnet <span class=\"token function\">add</span> reference <span class=\"token punctuation\">..</span>/Library2\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n\n<span class=\"token comment\"># Create a solution containing all three projects</span>\ndotnet new sln\ndotnet sln <span class=\"token function\">add</span> Library1\ndotnet sln <span class=\"token function\">add</span> Library2\ndotnet sln <span class=\"token function\">add</span> MyApp\n</code></pre> <p>Next we update the scaffolded <em>Library1/Class1.cs</em> file to the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CommonNamespace</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Library 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Similarly we update the <em>Library1/Class2.cs</em> file to something very similar. Note that they don't <em>have</em> to look the same, we just need to both have the same <em>name</em> (<code>Class1</code>) and <em>namespace</em> (<code>CommonNamespace</code>).</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CommonNamespace</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Class1</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Library 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>If you compile your app now, there's no problems. The two <code>Class1</code> definitions live in dfferent assemblies, but they're not used directly by <code>MyApp</code>, so there's ambiguity. The <em>problem</em> arises if you try to reference <code>Class1</code> in <code>MyApp</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">CommonNamespace</span><span class=\"token punctuation\">;</span>\n\nClass1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This gives IDE errors (the IDE doesn't give IntelliSense for <em>either</em> <code>Class1</code> or <code>Class2</code> because it doesn't know which to call):</p> <p><img src=\"/content/images/2024/externalias.png\" alt=\"JetBrains Rider showing an error for the ambigous match\"></p> <p>and the build fails with an error:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">Program<span class=\"token punctuation\">.</span><span class=\"token function\">cs</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">Error</span> CS0433 <span class=\"token punctuation\">:</span> The type 'Class1' exists <span class=\"token keyword\">in</span> both 'Library1<span class=\"token punctuation\">,</span> Version<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> Culture<span class=\"token operator\">=</span>neutral<span class=\"token punctuation\">,</span> PublicKeyToken<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>' <span class=\"token keyword\">and</span> 'Library2<span class=\"token punctuation\">,</span> Version<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> Culture<span class=\"token operator\">=</span>neutral<span class=\"token punctuation\">,</span> PublicKeyToken<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>'\n</code></pre> <p>In our case it would be an easy fix to just change one of the type names or namespaces. But what if you <em>can't</em>? What if those types are in a different package? Or if they <em>intentionally</em> are kept the same?</p> <h2 id=\"namespace-aliases-global-and-friends\" class=\"heading-with-anchor\"><a href=\"#namespace-aliases-global-and-friends\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Namespace aliases: <code>global::</code> and friends</a></h2> <p>One feature of C# that you typically don't need to worry about is that the types and namespaces are all defined within the <code>global</code> <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/namespace-alias-qualifier\">namespace alias</a>. In general, <em>all</em> types you create and use will be in the <code>global</code> namespaces alias, so you generally don't have to worry about it. Nevertheless, you might see it pop up if you look at generated code from source generators (for example). So you might see something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EfCoreValueConverter</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Microsoft<span class=\"token punctuation\">.</span>EntityFrameworkCore<span class=\"token punctuation\">.</span>Storage<span class=\"token punctuation\">.</span>ValueConversion<span class=\"token punctuation\">.</span>ValueConverter<span class=\"token operator\">&lt;</span>MyId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>System<span class=\"token punctuation\">.</span>Guid<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span><span class=\"token return-type class-name\">System<span class=\"token punctuation\">.</span>Guid</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>In the code above you can see that the namespaces are included explictly, and that they're all prefixed with <code>global::</code>. This is saying to the compiler \"use the <code>System.Guid</code> type defined in the <code>global</code> namespace alias\".</p> <p>Given there's a <code>global</code> namespace alias, you probably won't be surprised to learn that you can create <em>other</em> named namespace aliases, and that they're going to be the solution to our ambiguity problem!</p> <h2 id=\"assigning-a-namespace-alias-to-a-packge-\" class=\"heading-with-anchor\"><a href=\"#assigning-a-namespace-alias-to-a-packge-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Assigning a namespace alias to a packge.</a></h2> <p>You can reference a project or package in your <em>.csproj</em> file using <code>&lt;PackageReference&gt;</code> for NuGet package references or <code>&lt;ProjectReference&gt;</code> for project references:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- 👇 Referencing a project --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Library1\\Library1.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Library2\\Library2.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>By default, all the types defined in the referenced project are loaded into the <code>global</code> namespace alias. But you can change that, by adding the <code>Aliases</code> property!</p> <p>We can solve the ambiguity problem by loading one (or both) of the referenced projects into a named namespace alias. The example below shows how we can assign the named alias <code>library1</code> to the Library1 project:</p> <pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">Sdk</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Microsoft.NET.Sdk<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>Exe<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>net8.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFramework</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">&gt;</span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token comment\">&lt;!-- Assigning an alias to Library1 so that it's loaded in the library1 namespace --&gt;</span>\n    <span class=\"token comment\">&lt;!--                                                     👇                       --&gt;</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Library1\\Library1.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Aliases</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>library1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectReference</span> <span class=\"token attr-name\">Include</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\Library2\\Library2.csproj<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre> <p>With this simple change, suddenly we have IntelliSense, and our simple program compiles and runs!</p> <p><img src=\"/content/images/2024/externalias2.png\" alt=\"JetBrains Rider showing the code now compiles\"></p> <p>When we run our app, it outputs:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Hello from Library <span class=\"token number\">2</span>\n</code></pre> <p>So we know that the <code>Class1.SayHello()</code> call in our <em>Program.cs</em> is referencing the <code>Class1</code> type in <code>Library2</code>. That makes sense—the code in library2 is loaded into the <code>global</code> namespace alias, and that's the alias C# uses by default, so that's the code we reference.</p> <blockquote> <p>You can also create named namespace aliases in code with a <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/using-directive\">using alias directive</a>, but I'm not going to talk about those in this post.</p> </blockquote> <p>But what if you want to reference <code>Class1</code> in <code>Library1</code>? How do you access named namespace aliases?</p> <h2 id=\"referencing-named-namespace-aliases-with-extern-alias\" class=\"heading-with-anchor\"><a href=\"#referencing-named-namespace-aliases-with-extern-alias\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Referencing named namespace aliases with <code>extern alias</code></a></h2> <p>You might think that you can reference the named alias directly in your <code>using</code> statements, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ✅ Referencing the global namespace works</span>\n<span class=\"token keyword\">using</span> library1<span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Referencing named namespace fails</span>\n\n<span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">.</span>Class1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// ✅ This works too</span>\nlibrary1<span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">.</span>Class1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ This still fails</span>\n</code></pre> <p>Unfortunately, <code>library1::</code> does not compile.</p> <p><img src=\"/content/images/2024/externalias3.png\" alt=\"JetBrains Rider showing the code fails to compile again\"></p> <p>It fails to build with the error:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Program.cs<span class=\"token punctuation\">(</span><span class=\"token number\">2,7</span><span class=\"token punctuation\">)</span>: Error CS0432 <span class=\"token builtin class-name\">:</span> Alias <span class=\"token string\">'library1'</span> not found\n</code></pre> <p>To make the <code>library1</code> namespace alias available, you need to add <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/extern-alias\">an <code>extern alias</code> declaration</a> to the top of the file:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">alias</span> library1<span class=\"token punctuation\">;</span>\n</code></pre> <p>So the whole <em>Program.cs</em> file becomes:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">alias</span> library1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Make the library1 alias available</span>\n\n<span class=\"token keyword\">using</span> library1<span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reference the namespace alias</span>\n\nClass1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>If we run this code we now get:</p> <pre class=\"language-bash\"><code class=\"language-bash\">Hello from Library <span class=\"token number\">1</span>\n</code></pre> <p>Showing that we're correctly referencing the <code>Class1</code> instance from <code>Library1</code>, hooray! Note that you could add <em>both</em> libraries to different named aliases if you wish, so <em>neither</em> is in the <code>global</code> namespace, if that makes sense for your case.</p> <h2 id=\"a-couple-of-tips-and-tricks\" class=\"heading-with-anchor\"><a href=\"#a-couple-of-tips-and-tricks\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">A couple of tips and tricks</a></h2> <p>Needless to say, the \"overlapping types\" problem I'm describing here is <em>generally</em> something you should <em>really</em> try to avoid. It's still cumbersome to use <code>extern alias</code>, and it's still difficult to be <em>sure</em> which type you're referencing without fully checking all the namespaces <em>and</em> namespace aliases.</p> <p>For example, take the following code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">alias</span> library1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">CommonNamespace</span><span class=\"token punctuation\">;</span>\n\nClass1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This does <em>not</em> use <code>Class1</code> from <code>Library1</code>, even though we've correctly imported the <code>library1</code> alias. That's because the <code>using CommonNamespace</code> is referring to the <code>global</code> namespace (by default).</p> <p>One way I like to get around these things is to use type aliases in these codefiles, to make it very obvious which type we're referring to. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">alias</span> library1<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">Library1Class1</span> <span class=\"token operator\">=</span> library1<span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">.</span>Class1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// define type aliases</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">Library2Class1</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>CommonNamespace<span class=\"token punctuation\">.</span>Class1<span class=\"token punctuation\">;</span>\n\nLibrary1Class1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from Library 1</span>\nLibrary2Class1<span class=\"token punctuation\">.</span><span class=\"token function\">SayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hello from Library 2</span>\n</code></pre> <p>It's still ugly, but at least it's more explicit!</p> <p>Another thing to watch out for is typos in the <code>extern alias</code> declaration. There's no type checking for the name here, so if you find your named alias still isn't available, make sure it matches the value provided in the <code>Aliases</code> property of your <em>.csproj</em>.</p> <p>That's pretty much all there is to cover here, so the last thing to say is: don't use <code>extern alias</code> unless you <em>really</em> need to. You'll know it when you need it, because there will be no other way to solve the problem. If you're not at that stage, don't touch it!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described a scenario where a project references a type from two different assemblies, but which have the same namespace and type name. C# loads the referenced assemblies into the <code>global</code> namespace alias by default, so it's impossible to tell them apart.</p> <p>To solve the problem, you can add the <code>Aliases=\"MyAlias\"</code> property to the <code>&lt;PackageReference&gt;</code> or <code>&lt;ProjectReference&gt;</code> in your <em>csproj</em>, and then add <code>extern alias MyAlias;</code> to the top of the file in which you need to reference the type. Finally, use the <code>MyAlias::</code> qualifier on namespace references, for example <code>MyAlias::MyNamespace.MyType</code>.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/disambiguating-types-with-the-same-name-with-extern-alias/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/",
      "Title": "Adding support for collection expressions to your own types: Behind the scenes of collection expressions - Part 5",
      "PublishDate": "2024-07-09T09:00:00+00:00",
      "Summary": "In this final post of the series I show how to add support for collection expressions to your own types that don't support them automatically",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/collectionbuilder.png\" /><nav><p>This is the five post in the series: <a href=\"/series/behind-the-scenes-of-collection-expressions/\">Behind the scenes of collection expressions</a>. </p> <ol class=\"list-none\"><li><a href=\"/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/\">Part 1 - Introducing collection expressions in C#12</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">Part 2 - Exploring the generated code: List&lt;T&gt; and fallback cases</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">Part 3 - Exploring the generated code: T[], Span&lt;T&gt;, and Immutable collections</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/\">Part 4 - Exploring the generated code: the spread element</a></li><li>Part 5 - Adding support for collection expressions to your own types (this post) </li></ol></nav><p>I started this series by providing an introduction to collection expressions. Over the next 3 posts I showed the code that's generated by the compiler when you use collection expressions. In this final post in the series, I show how you can make your own types compatible with collection expressions, and tie up a few loose ends.</p> <ul><li><a href=\"#adding-collection-expression-support-by-supporting-collection-initializers\">Adding collection expression support by supporting collection initializers</a></li> <li><a href=\"#using-collectionbuilder-to-create-collections\">Using <code>[CollectionBuilder]</code> to create collections</a></li> <li><a href=\"#handling-generic-collections-with-collectionbuilder-\">Handling generic collections with <code>[CollectionBuilder]</code></a></li> <li><a href=\"#adding-collectionbuilder-to-interfaces\">Adding <code>[CollectionBuilder]</code> to interfaces</a></li> <li><a href=\"#using-collectionbuilder-in-earlier-framework-versions\">Using <code>[CollectionBuilder]</code> in earlier framework versions</a></li> <li><a href=\"#when-things-don-t-work-quite-right\">When things don't work quite right…</a></li> <li><a href=\"#built-in-types-that-don-t-support-collection-expressions\">Built-in types that don't support collection expressions</a></li></ul> <h2 id=\"adding-collection-expression-support-by-supporting-collection-initializers\" class=\"heading-with-anchor\"><a href=\"#adding-collection-expression-support-by-supporting-collection-initializers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding collection expression support by supporting collection initializers</a></h2> <p>I've already discussed in this series that collection expressions are automatically compatible with any concrete type that supports collection <em>initializers</em>. For example, there's no special code in Roslyn to support <code>HashSet&lt;T&gt;</code>, but you can use it with collection expressions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n</code></pre> <p>behind the scenes, the collection expression generates code that looks a bit like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Which is the same code as gets generated by the collection <em>initializer</em> version:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n</code></pre> <p>This applies to <em>any</em> type that supports a collection <em>initializer</em> and has a public parameterless constructor—the type automatically supports collection <em>expressions</em> too.</p> <blockquote> <p>Note that I'm only talking about \"list-style\" collection initializers here; collection expressions don't support dictionary-style collections yet</p> </blockquote> <p>The minimum requirements to support collection initializers are that you implement <code>IEnumerable</code>, have a public parameterless constructor, and have a public <code>Add(T value)</code> instance method where <code>T</code> is the correct type (or can be generically typed as such).</p> <p>For example, the following shows a minimum implementation of a custom collection which can be used with collection initializers:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable</span></span> <span class=\"token comment\">// Implementing the non-generic IEnumerable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Backing collection that contains the data</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> _list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Implement the required member of IEnumerable</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _list<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// The required Add() method for collection initializers</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _list<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n</code></pre> <blockquote> <p>Note that I implemented the non-generic <code>IEnumerable</code> (instead of <code>IEnumerable&lt;T&gt;</code> or <code>IEnumerable&lt;int&gt;</code> for example) but that's only because it's the minimum required; you certainly <em>can</em> (and arguably <em>should</em>) implement the generic version.</p> </blockquote> <p>With the code above, you can now create collections using the collection initializer syntax:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> myCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Which means you can now <em>also</em> use collection expressions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> myCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That's pretty neat, but there are some trade-offs here. For example, even though with collection expressions we know ahead of time how many elements there are, there's no way for the compiler (or the <code>MyCollection</code> type) to <em>use</em> that information to optimize the code. Instead you have to call <code>Add()</code> repeatedly.</p> <p>Also, using a collection initializers means you're <em>forced</em> to use a mutable type, because the type is created using <code>new()</code> and then <em>mutated</em> by calling <code>Add</code> repeatedly. It would be nice if you had the option to <em>not</em> do that.</p> <p>Unfortunately, for collection initializers, you're stuck, there's no way to satisfy the required API to meet these requirements. But for collection expressions we have a chance!</p> <h2 id=\"using-collectionbuilder-to-create-collections\" class=\"heading-with-anchor\"><a href=\"#using-collectionbuilder-to-create-collections\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using <code>[CollectionBuilder]</code> to create collections</a></h2> <p>The <code>[CollectionBuilder]</code> attribute was introduced as part of <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions#collection-builder\">the C#12 collection expressions feature</a> and provides an efficient mechanism for supporting collection expressions in your types. It's easiest to show a minimal implemention of a collection builder and then discuss the limitations, requirements, and ways we can extend it.</p> <p>The simplest implementation of <code>MyCollection</code>, updated to support <code>[CollectionBuilder]</code>, might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Decorate the type with the [CollectionBuilder] type, pointing to </span>\n<span class=\"token comment\">// a method that the collection expression should call to create the type</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">CollectionBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 👇 This is the method the collection expression calls</span>\n    <span class=\"token comment\">// It must take a ReadOnlySpan&lt;&gt; of the values and return an instance</span>\n    <span class=\"token comment\">// of the collection</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Because all the values are provided in the constructor, we can</span>\n        <span class=\"token comment\">// use an array backing type instead of a list, which is more efficient</span>\n        <span class=\"token comment\">// to create, and doesn't need to expose a mutation Add() method</span>\n        _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Must have a GetEnumerator() method that returns an IEnumerator implementation</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _values<span class=\"token punctuation\">.</span><span class=\"token function\">AsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>There's several important points here:</p> <ul><li>The <code>[CollectionBuilder]</code> attribute points to a <code>Type</code> and a named method that will be invoked to create the decorated collection.</li> <li>The collection must be an \"iteration type\", i.e. it should have a <code>GetEnumerator()</code> method that returns an <code>IEnumerator</code> (or <code>IEnumerator&lt;T&gt;</code>). <ul><li><em>Normally</em> you would satisfy this by implementation <code>IEnumerable&lt;T&gt;</code>, but I went for the minimal example above!</li> <li>The type <code>T</code> of the <code>IEnumerator&lt;T&gt;</code> returned by <code>GetEnumerator()</code> defines the \"element type\" for the collection type.</li> <li>If you return a non-generic <code>IEnumerator</code>, the \"element type\" is <code>object</code></li></ul> </li> <li>The method pointed to by the <code>[CollectionBuilder]</code> attribute must be <code>static</code>, accessible (e.g. <code>public</code> or <code>internal</code>) and take a single parameter of type <code>ReadOnlySpan&lt;T&gt;</code>, where <code>T</code> is the \"element type\" of the collection.</li></ul> <p>By following these rules and adding a <code>[CollectionBuilder]</code>, the collection can likely be created much more efficiently. We saw in <a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">a previous post</a> that the compiler is able to significantly optimize collection expressions when you're creating a <code>ReadOnlySpan&lt;T&gt;</code>, and ultimately that's what happens here.</p> <p>To see it in action, if we create a new instance of our newly implemented collection:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> myCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Then <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkx3yIGEB7AGyYFMBjAFygZgGcqWPAQAsgmgUIAlAK4xuYVoUZgADlDYAnAMqtNANyjtWAzJgCyAT0YsO3XrjDXmbLjxi4AvLgDaKADS4SIEAzIEiALqCmD42rvYwAEIyGgAmegAUnJaqrAwAZhlWcXbuAJSBMBCKBRl0mqwQnKxlZRHUIfhIuMUupbwZUo2pAPIwTJbaqhAwADywnAB8uPoQTDImZZgA3pi4+7iqmlCrzbgNEKm8E7gLPhG4APqr6yZeK2sbfIQAKgwAgppNBBLBkyoIDvhOgBJACiMBkimBnAYmnm8mWAHFWJx4Yi9E1UWCvMtnp8TIR/nw8UiIMA2GDCNjcQjaSjNGDohhIQhOgQAGw9Zy2NwOeqNZqDYZjCZTGbopYfV58Mok3AwVgAdwyLy+4MwAF9MEA==\">the generated code</a> is <em>much</em> more efficient than when we had with the collection initializer version.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> myCollection <span class=\"token operator\">=</span> MyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Explicit<span class=\"token punctuation\">,</span> Pack <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> Size <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__StaticArrayInitTypeSize</span><span class=\"token operator\">=</span>16_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> __StaticArrayInitTypeSize<span class=\"token operator\">=</span>16_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span> CF97ADEEDB59E05BFD73A2B4C2A8885708C4F4F70C84C64B27120E72AB733B724<span class=\"token comment\">/* Not supported: data(01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00) */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I'm not going to go into the details in this post, as I discussed it in depth <a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/#creating-readonlyspant-collection-expressions\">in my previous posts</a>, but ultimately this is <em>very</em> efficient compared to what we had previously. And on top of that we didn't need to expose an <code>Add()</code> mutation method (if we don't want to), and instead we're given all the elements when the type is constructed.</p> <h2 id=\"handling-generic-collections-with-collectionbuilder-\" class=\"heading-with-anchor\"><a href=\"#handling-generic-collections-with-collectionbuilder-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Handling generic collections with <code>[CollectionBuilder]</code></a></h2> <p>The <code>MyCollection</code> example I've shown above is a bit contrived as it only supports creating collections of <code>int</code>. Most of the collections we use these days are generic, with a <code>T</code> type parameter. If the collection you want to decorate with <code>[CollectionBuilder]</code> is generic, there's a few changes you need to make.</p> <ul><li>Move the <code>Create()</code> method to a separate, non-generic type. The type referenced in <code>[CollectionBuilder]</code> must not be generic.</li> <li>Update the <code>Create()</code> method to be a generic method that takes a <code>ReadOnlySpan&lt;T&gt;</code>.</li> <li>Update the <code>GetEnumerator()</code> call to return <code>IEnumerator&lt;T&gt;</code> (or better yet, implement <code>IEnumerable&lt;T&gt;</code>)</li></ul> <p>The resulting updated minimal code might look something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollectionBuilder</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The builder method must be generic, </span>\n    <span class=\"token comment\">// but must _not_ be in a generic type</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Update [CollectionBuilder] to point to the other type</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">CollectionBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollectionBuilder</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyCollectionBuilder<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token generic-method\"><span class=\"token function\">MyCollection</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token comment\">// It's a generic type now</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Initializing the generic T[] using primary constructors for brevity</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Returning IEnumerator&lt;T&gt;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _values<span class=\"token punctuation\">.</span><span class=\"token function\">AsEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Usage-wise, the code looks roughly the same, we have just changed the type to be generic, so we've moved from <code>MyCollection</code> to <code>MyCollection&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> myCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkx3yIGEB7AGyYFMBjAFygZgGcqWPAQAsgmgUIAlAK4xuYVoUZgADlDYAnAMqtNANyjtWAzJgCyAT0YsO3XgB5YnAHy4w15my48YuALy4ANooADS4SOEAzOEiALqCmEE23vYwAEIyGgAmegAUnJaqrAwAZnlWKXa+mTl6AJThMBCKZRWetj68tUy5msqarBCcrPX1cdRR+Ei4lV7VjgAqLnlSQ9kA8jBMltqqEDAOy7j6EEwyJvWYAN6YuPe4qppQpyO4gxDZvDu4i0FxuAA+qdziYAiczhc+IRFgwAIKaTQQSx5eqCB74KYASQAojAZIokZwGJojm4AOKsTh4gl6YYk1EBNzAyEmQhwvg0wkQYBsVGESnU/Hc4maVGJDAAXzMWCmBAAbNNZh1UjUsr09Dc7g8EHKUIq5p00mTcHQPiMyat1lsdnsDiaQVD6kzcDBWAB3PKOy6CSVAA=\">generated code</a> is essentially identical to the previous non-generic implementation, but now the type works with any element type!</p> <h2 id=\"adding-collectionbuilder-to-interfaces\" class=\"heading-with-anchor\"><a href=\"#adding-collectionbuilder-to-interfaces\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Adding <code>[CollectionBuilder]</code> to interfaces</a></h2> <p>So far we've looked at adding <code>[CollectionBuilder]</code> to concrete types, but one of the nice features of collection expressions is that you can <em>also</em> use them with interfaces, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">IList<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nICollection<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Well you can also do the same thing with your own interfaces if you apply the <code>[CollectionBuilder]</code> attribute to them! Lets extend the previous example to use an interface too. First we'll make our <code>MyCollection</code> type implement an interface <code>IMyCollection&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CollectionBuilder</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IMyCollection<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span> <span class=\"token comment\">// implement an interface</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... as before</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>I've made the interface generic in this case, but it doesn't <em>need</em> to be. The definition of the interface is shown below. It's just a marker interface for now, the only requirements are:</p> <ul><li>It's decorated with a <code>[CollectionBuilder]</code> attribute that points to a valid constructor method (where the return type of the method is an <code>IMyCollection</code>).</li> <li>It implements <code>IEnumerable&lt;T&gt;</code> (giving an element type of <code>T</code>) or <code>IEnumerable</code> (giving an element type of <code>object</code>).</li></ul> <p>So adding support to the <code>IMyCollection&lt;T&gt;</code> type, is as simple as this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CollectionBuilder</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollectionBuilder</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>MyCollectionBuilder<span class=\"token punctuation\">.</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMyCollection</span><span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Now you can use collection expressions with the interface type, just as you would the concrete type!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IMyCollection</span> myCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <h2 id=\"using-collectionbuilder-in-earlier-framework-versions\" class=\"heading-with-anchor\"><a href=\"#using-collectionbuilder-in-earlier-framework-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using <code>[CollectionBuilder]</code> in earlier framework versions</a></h2> <p>The <code>CollectionBuilderAttribute</code> type was added in C#12 along with .NET 8, but what if you're targeting an earlier version of .NET, or you're multi-targeting multiple runtimes? Well the good news is that you can just create your <em>own</em> version of the <code>CollectionBuilderAttribute</code> in your project, and that's good enough to satisfy the compiler!</p> <blockquote> <p>Lots of C# features that depend on types can be <em>pollyfilled</em> in this way. I typically like to use Simon Cropp's <a href=\"https://github.com/SimonCropp/Polyfill\">Polyfill</a> library to handle all this for me automatically!</p> </blockquote> <p>Simply add the following file to your project, and suddenly your collection expressions will work in earlier versions of .NET, even in .NET Framework!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> !NET8_OR_GREATER</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CollectionBuilderAttribute</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Attribute</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">CollectionBuilderAttribute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> builderType<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> methodName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        BuilderType <span class=\"token operator\">=</span> builderType<span class=\"token punctuation\">;</span>\n        MethodName <span class=\"token operator\">=</span> methodName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Type</span> BuilderType <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> MethodName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n</code></pre> <blockquote> <p>Note that if you're targeting old versions of .NET Framework, you'll also need to <a href=\"https://www.nuget.org/packages/System.Memory\">add a reference to System.Memory</a> so that you can use <code>ReadOnlySpan&lt;T&gt;</code>.</p> </blockquote> <p>And that pretty much covers everything about creating your own collection expressions, but before we go we'll take a short trip of the errors you might encounter while trying to implement a collection builder.</p> <h2 id=\"when-things-don-t-work-quite-right\" class=\"heading-with-anchor\"><a href=\"#when-things-don-t-work-quite-right\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">When things don't work quite right…</a></h2> <p>When I was initially exploring the minimal requirements for collection expressions, I got myself into a bit of a mess. I was exploring the minimal (non-generic) version, but I could <em>not</em> get my code to compile. In case it's useful for other people, I'll walk through all the ways I got it wrong initially! 😅</p> <p>This is the code I started with:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create the collection</span>\n<span class=\"token class-name\">MyCollection</span> myCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// The definition</span>\n<span class=\"token punctuation\">[</span><span class=\"token function\">CollectionBuilder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The builder method</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// intialize from primary constructor</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>but I was getting the error</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">error</span> CS9188<span class=\"token punctuation\">:</span> 'MyCollection' has a CollectionBuilderAttribute but no element type<span class=\"token punctuation\">.</span>\n</code></pre> <p>I started digging around on <code>CollectionBuilderAttribute</code> trying to find an <code>element</code> parameter I could pass or something, but there was nothing🤷‍♂️ <em>Hopefully</em> after reading the previous section, the answer will be apparent. I found a hint towards <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/array-declaration-errors#invalid-collection-builder\">the answer after searching for the error here</a>:</p> <blockquote> <p>The collection type must have an iteration type. In other words, you can <code>foreach</code> the type as a collection.</p> </blockquote> <p>I knew that <code>foreach</code> works using duck-typing for the <code>GetEnumerator()</code> method (as opposed to <em>requiring</em> that you implement a specific method) so I tried adding the <code>GetEnumerator()</code> to the type (I'll omit the <code>using</code> and invocations now for brevity):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CollectionBuilder</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Make the type an \"iteration type\" so it can be used in a foreach</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _values<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This solved the <code>CS9188</code> type, but now I was getting a <em>new</em> error:</p> <pre><code>error CS9187: Could not find an accessible 'Create' method with the expected signature: a static method with a single parameter of type 'ReadOnlySpan&lt;object&gt;' and return type 'MyCollection'.\n</code></pre> <p>This one confused me initially, why was it insisting that <code>Create()</code> take a <code>ReadOnlySpan&lt;object&gt;</code> instead of a <code>ReadOnlySpan&lt;int&gt;</code>?</p> <p>I got there eventually—it's because I was returning the non-generic <code>IEnumerator</code> instead of an <code>IEnumerator&lt;int&gt;</code>, so the compiler was treating the \"element type\" as <code>object</code> instead of <code>int</code>.</p> <p>To solve this one, I decided to just implement <code>IEnumerable&lt;int&gt;</code> so that I didn't get anything else wrong:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CollectionBuilder</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">// implement IEnumerable&lt;T&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Implement IEnumerable&lt;T&gt;</span>\n    <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator</span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _values<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>But this <em>still</em> didn't work 🤦‍♂️ I was <em>still</em> getting the same <code>CS9187</code> error requiring <code>ReadOnlySpan&lt;object&gt;</code> 😕</p> <p>After a lot of staring, I finally realised what I'd done. <code>IEnumerable&lt;T&gt;</code> also implements <code>IEnumerable</code>, so you have to implement <em>two</em> <code>GetEnumerator()</code> methods:</p> <ul><li><code>IEnumerator GetEnumerator()</code> is required by the <code>IEnumerable</code> interface</li> <li><code>IEnumerator&lt;T&gt; GetEnumerator()</code> is required by the <code>IEnumerable&lt;T&gt;</code> interface</li></ul> <p>As both methods have the same signature, you have to <em>explicitly</em> implement at least one of them in your type. In my code I had explicitly implemented the <code>IEnumerable&lt;int&gt;</code> interface, which is the <em>opposite</em> of what you'd typically do. By doing so, the collection expression was only \"discovering\" the <code>IEnumerable</code> version and setting the element type as <code>object</code>. To fix it, I just needed to flip which is explicitly implemented:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CollectionBuilder</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyCollection</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nameof</span><span class=\"token punctuation\">(</span>Create<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token comment\">// implement IEnumerable&lt;T&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">MyCollection</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _values <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 👇 Need to implicitly implement the IEnumerable&lt;T&gt; implementation...</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 👇 ... and explicitly implement the IEnumerable implementation</span>\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _values<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>After making that change, finally my code compiled! 🎉 It's also worth noting that the following two options would <em>also</em> have worked:</p> <ul><li>Explicitly implementing <em>both</em> the <code>IEnumerable</code> and <code>IEnumerable&lt;T&gt;</code> methods. The collection expression automatically chooses the more specific <code>IEnumerable&lt;T&gt;</code> version to determine the element type in this case</li> <li>Implement the <code>IEnumerator&lt;int&gt; GetEnumerator()</code> method <em>without</em> implementing <code>IEnumerable&lt;T&gt;</code> at all, as I showed in the minimal example in the previous section.</li></ul> <p>You might be interested to know that the <code>[CollectionBuilder]</code> attribute is also how the <em>runtime</em> adds support for collection expressions to some built-in types like the <code>Immutable*</code> types such as <code>ImmutableArray</code> and <code>ImmutableList</code>.</p> <p>But not <em>all</em> collections have been given this love. As I was researching this series I found a number of collections which <em>don't</em> work with collection expressions. In the final section of this series I'll briefly discuss the collections I found that <em>don't</em> work:</p> <h2 id=\"built-in-types-that-don-t-support-collection-expressions\" class=\"heading-with-anchor\"><a href=\"#built-in-types-that-don-t-support-collection-expressions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Built-in types that don't support collection expressions</a></h2> <p>The most obvious collections that don't support collection expressions are dictionaries, even though these support collection initializers. The good news is that <a href=\"https://github.com/dotnet/csharplang/issues/7822\">these will hopefully arrive in a future version of C#</a>, it's mostly a question of deciding on syntax.</p> <p>So as of now, all the various dictionary types <code>Dictionary&lt;,&gt;</code>, <code>ImmutableDictionary&lt;,&gt;</code>, <code>SortedDictionary&lt;,&gt;</code> etc don't support collection expressions. However, there are also a bunch of other types that you <em>might</em> expect to support collection expressions, but which don't compile.</p> <ul><li><code>ISet&lt;T&gt;</code>—Many interface types like <code>IList&lt;T&gt;</code> and <code>IReadOnlyCollection&lt;T&gt;</code> can be used directly with collection expressions, but you can't use <code>ISet&lt;T&gt;</code>. I haven't dug into whether there's a specific reason why!</li> <li><code>FrozenSet&lt;T&gt;</code>—<code>ImmutableSet&lt;T&gt;</code> works with collection expressions, so why doesn't <code>FrozenSet&lt;T&gt;</code>? <a href=\"https://github.com/dotnet/runtime/issues/92190\">Well in .NET 9, it does!</a>.</li> <li><code>SortedList&lt;TKey, TValue&gt;</code>—This one is a bit of an odd one, in that while it <em>is</em> a list, it's <em>effectively</em> initialised like a dictionary, with two generic parameters, and an <code>Add(key, value)</code> instead of <code>value</code>. So we may get this in .NET 9 when we get dictionary expressions.</li> <li><code>PriorityQueue&lt;TElement, TPriority&gt;</code>—<a href=\"/an-introduction-to-the-heap-data-structure-and-dotnets-priority-queue/\">I discussed priority queues</a> in a recent series, and showed that these behave rather differently to \"standard\" lists. They also don't support collection initializers so I'm not entirely surprised they don't support collection expressions.</li> <li><code>ConcurrentQueue&lt;T&gt;</code>—I have to say, I <em>expected</em> this to work with collection expressions, especially because <code>ConcurrentBag&lt;T&gt;</code> supports them. But <code>ConcurrentQueue&lt;T&gt;</code> also <em>doesn't</em> support the collection initializer syntax, because it doesn't have an <code>Add()</code> method (just an <code>Enqueue()</code> method). So the \"default\" collection expression mode of falling back to collection initializers means the code doesn't compile.</li> <li><code>ConcurrentStack&lt;T&gt;</code>—Just like <code>ConcurrentQueue&lt;T&gt;</code>, <code>ConcurrentStack&lt;T&gt;</code> doesn't have an <code>Add()</code> method (it has <code>Push()</code>), so it doesn't support collection initializers, and hence also doesn't support collection expressions.</li></ul> <p>The final three types there <code>PriorityQueue&lt;&gt;</code>, <code>ConcurrentQueue&lt;&gt;</code> and <code>ConcurrentStack&lt;&gt;</code> don't support collection initializers but they certainly feel like they <em>could</em> if they used <code>[CollectionBuilder]</code>. So who knows, maybe they'll get support in the future if the demand is high enough!</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I described how to add support for collection expressions to your own types using the <code>[CollectionBuilder]</code> attribute. I showed how to implement the type for both non-generic and generic types, for interfaces, and for earlier versions of .NET, including .NET Framework. Finally, I described some of the collections available in .NET which <em>don't</em> support collection expressions.</p> <p>That's the end of this series on collection expressions. I hope you've enjoyed this peek behind the curtains to see how collection expressions work, and why you should use them wherever possible in your applications!</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/",
      "Title": "Exploring the generated code: the spread element: Behind the scenes of collection expressions - Part 4",
      "PublishDate": "2024-07-02T09:00:00+00:00",
      "Summary": "In this post I show what the compiler generates when you use collection expressions with the spread element and how it depends on the collections used",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/collection_expressions_spreading.png\" /><nav><p>This is the four post in the series: <a href=\"/series/behind-the-scenes-of-collection-expressions/\">Behind the scenes of collection expressions</a>. </p> <ol class=\"list-none\"><li><a href=\"/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/\">Part 1 - Introducing collection expressions in C#12</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">Part 2 - Exploring the generated code: List&lt;T&gt; and fallback cases</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">Part 3 - Exploring the generated code: T[], Span&lt;T&gt;, and Immutable collections</a></li><li>Part 4 - Exploring the generated code: the spread element (this post) </li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/\">Part 5 - Adding support for collection expressions to your own types</a></li></ol></nav><p>This series take an in-depth look at collection expressions, which were introduced with C#12. <a href=\"/behind-the-scenes-of-collection-expressions-part-1-an-introduction-to-collection-expressions-in-csharp12/\">In the first post</a> I provided an introduction to collection expressions, and in the <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">second</a> and <a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">third</a> posts we looked at the code generated when you use collection expressions to create <code>List&lt;T&gt;</code>, <code>T[]</code>, and <code>Span&lt;T&gt;</code> collections, among others.</p> <p>In each of the previous posts we only looked at simple cases, where you're creating a collection directly from a fixed set of elements, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In this post we look at what the compiler generates when you use collection expressions with <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions#spread-element\">the spread element</a> and how it changes based on the source and destination collections.</p> <blockquote> <p>Note that <em>by design</em> the code produced by the compiler may change in future versions of .NET and C#. The generated code shown here represents a point-in time view of the situation. If new C# features, types, or mechanisms are introduced, the compiler can switch to using them behind-the-scenes, and your compiled code gets faster without you having to change anything! In fact, changes in <a href=\"https://github.com/dotnet/roslyn\">the compiler</a> meant by the time I finished this series, the first examples were already out of date!</p> </blockquote> <p>We'll start with a quick recap on the spread element, and then we'll look at how the compiler generates code for collection expressions that use spreading. As always, you don't <em>need</em> to know what this code looks like, and it might change in the future. This whole series is mostly an attempt to satisfy my own curiosity!</p> <ul><li><a href=\"#creating-collections-using-the-spread-element\">Creating collections using the spread element</a></li> <li><a href=\"#creating-listt-using-spread-elements\">Creating <code>List&lt;T&gt;</code> using spread elements</a> <ul><li><a href=\"#creating-listt-from-t-\">Creating <code>List&lt;T&gt;</code> from <code>T[]</code></a></li> <li><a href=\"#creating-listt-from-ienumerablet\">Creating <code>List&lt;T&gt;</code> from <code>IEnumerable&lt;T&gt;</code></a></li> <li><a href=\"#creating-listt-from-icollectiont-and-friends\">Creating <code>List&lt;T&gt;</code> from <code>ICollection&lt;T&gt;</code> and friends</a></li> <li><a href=\"#multiple-spread-and-fixed-elements\">Multiple spread and fixed elements</a></li></ul> </li> <li><a href=\"#creating-ienumerablet-using-spread-elements\">Creating <code>IEnumerable&lt;T&gt;</code> using spread elements</a> <ul><li><a href=\"#creating-ienumerablet-from-a-listt-spant-and-t-\">Creating <code>IEnumerable&lt;T&gt;</code> From a <code>List&lt;T&gt;</code>, <code>Span&lt;T&gt;</code>, and <code>T[]</code></a></li> <li><a href=\"#creating-ienumerablet-from-another-ienumerablet\">Creating <code>IEnumerable&lt;T&gt;</code> from another <code>IEnumerable&lt;T&gt;</code></a></li> <li><a href=\"#creating-ienumerablet-from-another-icollectiont-and-similar\">Creating <code>IEnumerable&lt;T&gt;</code> from another <code>ICollection&lt;T&gt;</code> and similar</a></li></ul> </li> <li><a href=\"#creating-t-using-spread-elements\">Creating <code>T[]</code> using spread elements</a></li> <li><a href=\"#creating-readonlyspanint-using-spread-elements\">Creating <code>ReadOnlySpan&lt;int&gt;</code> using spread elements</a></li></ul> <h2 id=\"creating-collections-using-the-spread-element\" class=\"heading-with-anchor\"><a href=\"#creating-collections-using-the-spread-element\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating collections using the spread element</a></h2> <p>The spread element <code>..</code> was introduced with collection expressions and lets you combine collections together into new collections.</p> <p>For example the following function creates a <code>List&lt;int&gt;</code> that contains all the same elements as the <code>int[]</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token range operator\">..</span>array <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// list contains 1, 2, 3, 4, 5</span>\n</code></pre> <p>You can use the spread element to combine multiple collections into one, and mix and match with fixed values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> start <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The source list can be any IEnumerable collection</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> end <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// regardless of how it was created</span>\n\n<span class=\"token comment\">// You can combine single elements and spread elements however you</span>\n<span class=\"token comment\">// like in the collection expression</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> all <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>start<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token range operator\">..</span>end<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2, 3, 4, 5, 6, 7, 8</span>\n</code></pre> <p>That's pretty much all there is to the spread element in terms of syntax. It's pretty simple, but combining collections is such a common requirement, and the previous syntax was so cumbersome that this is an incredibly valuable feature.</p> <p>And as an added bonus, it's <em>declarative</em> about what you want the final collection should look like, as opposed to imperatively describing which methods to call to build the collection. That means the compiler is free to do whatever it thinks is best to optimise the code, as we'll explore in this post.</p> <p>Collection expressions and the spread element work with almost any collection type, so in this post I've broken down the sections based on the <em>destination</em> type, and then looked at a variety of different source collections. We'll start with <code>List&lt;T&gt;</code>, as one of the most common collection types in .NET.</p> <h2 id=\"creating-listt-using-spread-elements\" class=\"heading-with-anchor\"><a href=\"#creating-listt-using-spread-elements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>List&lt;T&gt;</code> using spread elements</a></h2> <p><code>List&lt;T&gt;</code> is one of the most common collection types, and is a good general purpose choice. You can use <code>List&lt;T&gt;</code> to add an arbitrary number of elements to it, but if you <em>know</em> how many elements you need, you can improve performance, <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/#optimizing-listt\">as we saw in a previous post</a>.</p> <h3 id=\"creating-listt-from-t-\" class=\"heading-with-anchor\"><a href=\"#creating-listt-from-t-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>List&lt;T&gt;</code> from <code>T[]</code></a></h3> <p>We'll start with the example where the source collection is a <code>T[]</code> and we're creating a <code>List&lt;T&gt;</code> by spreading all the elements into it.</p> <blockquote> <p>I've used <code>int</code> for simplicity in all the collections in this post. Unlike when constructing the original collection expressions, the element type has less of an effect when you're spreading collections into one another.</p> </blockquote> <p>We can write a simple program to demonstrate the spread element in action:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// T[] source</span>\n</code></pre> <blockquote> <p>I've separated the \"source collection\" creation and \"destination collection\" creation into separate methods to make it easier to follow the sharplab.io generated code, to make it clear that only the code inside the <code>MyFunc()</code> method is related to the spread element.</p> </blockquote> <p>To make the generated code easier to follow in this post, I'm only showing the literal \"spreading\" code where the return <code>List&lt;T&gt;</code> is constructed in the <code>MyFunc()</code> method. The following annotated code is based on the <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0PwBkoAZwAuAHljCAfClISy7FIID2AVwBOAYwCmnFAF5pZAHRHl67ex5A==\">generated code in sharplab.io</a>. It shows that when the source array is a <code>T[]</code>, the list can be constructed quite efficiently:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Create a new List&lt;T&gt;, which will be the final returned value.</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Force the destination Count to match the source length</span>\nCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Retrieve the T[] backing field in List&lt;T&gt; as a Span&lt;T&gt;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> CollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 👆 Everything up to here was all \"normal\" for creating a list with a known, fixed length.</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token comment\">// Wrap the _source_ array as a ReadOnlySpan&lt;T&gt;</span>\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readOnlySpan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Copy the source Span to the destination Span</span>\nreadOnlySpan<span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> readOnlySpan<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The slice isn't actually necessary here </span>\nnum <span class=\"token operator\">+=</span> readOnlySpan<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not necessary, an artifact left over, we'll come to it later</span>\n</code></pre> <p>As you can see, the <code>List&lt;T&gt;</code> is efficiently constructed, using <code>SetCount</code> to set the size of the underlying array, and retrieving the backing field as a <code>Span&lt;T&gt;</code>. The source <code>T[]</code> is then wrapped in a <code>Span&lt;T&gt;</code> as well, and copied directly into the destination list. And that's it!</p> <p>You get <em>roughly</em> the same code for all the following source types:</p> <ul><li><code>T[]</code>—The code shown above.</li> <li><code>Span&lt;T&gt;</code>—Identical, except the source is <em>already</em> a <code>Span&lt;T&gt;</code> so no need to wrap it.</li> <li><code>ReadOnlySpan&lt;T&gt;</code>—As for <code>Span&lt;T&gt;</code>, the source can be directly copied to the destination</li> <li><code>List&lt;T&gt;</code>—If the source is a <code>List&lt;T&gt;</code>, the backing array is directly accessed using <code>CollectionsMarshal.AsSpan()</code> (if available) and then copied to the destination span.</li></ul> <p>These examples all behave roughly the same, because we can get a <code>Span&lt;T&gt;</code> of the source data. But what if we can't, and we don't even know how many elements are in the collection?</p> <h3 id=\"creating-listt-from-ienumerablet\" class=\"heading-with-anchor\"><a href=\"#creating-listt-from-ienumerablet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>List&lt;T&gt;</code> from <code>IEnumerable&lt;T&gt;</code></a></h3> <p>Spreading <code>Span&lt;T&gt;</code>, <code>List&lt;T&gt;</code>, or <code>T[]</code> are pretty much a best case for collection expressions. In contrast, the worst case is <code>IEnumerable&lt;T&gt;</code>, where you have no idea how many elements are in the source collection:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// IEnumerable&lt;T&gt; source</span>\n</code></pre> <p>How does the <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYAMlADOAFwA8scQD5cVAi2kw5uUQHsArgCcAxgFNeuALzzqAOgubdh7gKA===\">generated collection expression spread code</a> handle this situation?</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In this case, the best the compiler can do is fallback on <code>AddRange()</code>. There's no optimisation here, because we can't really do any—we don't know how many elements the <code>IEnumerable&lt;T&gt;</code> contains, so we can't optimise the initial list capacity to avoid resizes.</p> <p>Incidentally, if you're targeting earlier runtimes prior to the introduction of <code>CollectionsMarshal.SetCount()</code>, the generated code <em>also</em> uses <code>AddRange()</code> for <code>T[]</code> etc, but the list capacity is pre-set to avoid resizes, e.g.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// setting the capacity if it's known</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <h3 id=\"creating-listt-from-icollectiont-and-friends\" class=\"heading-with-anchor\"><a href=\"#creating-listt-from-icollectiont-and-friends\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>List&lt;T&gt;</code> from <code>ICollection&lt;T&gt;</code> and friends</a></h3> <p>The final scenario we'll look at is when the source is <code>ICollection&lt;T&gt;</code> or a similar interface:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ICollection&lt;T&gt; source</span>\n</code></pre> <p>The <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0PwBkoAZwAuAHljCAfClIBJAMIB7ADbKApgGNhURTHEwpKQYoCuAJw1rOKALzSyAOgfHzl9tiA=\">generated code</a> in this case <em>looks</em> relatively complicated, but you can see from <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5Md8UA6AJQFcYAXKMAU0oElGWAnAewAcAyjwBuUAMYsAzqQyYAggAoA2rhQAaXEk0BmTYU0BWALoBKWZgAyUKQwA8sBgD5cS9gGFeAGy8txTXhgHRhcpXlpuSVNcAF4XZUpKMIjJYwsMa1tg51wAIUUPb19/KEDs0PDIllNMAG9MXEbcTPtHFy8bBljcGBYAd2bO8sVzBqbPHz8AmCkAWQhuKQALCC9KYQZPegZFDttNZKrKLcZRjCbcQX4IILbcKWuYboni6bmF5dXKeSkrm93OmcLo4erQwN1sLILgAzXjcFgQcRLRQiBa4cQReGMXCwe6VKJjRr1c4XJoPG7KGBg4zdDHcLEMKGkxpUsAAajZTMaAF9CfgAOy4PaMzDcoA\">this example</a> that it's the same generated code as a <code>foreach</code> loop, so it's equivalent to something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Create the destination list</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Initialize the backing array to the size of the collection</span>\nCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get the underlying array</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> CollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set each element in the source in the destination span</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> current <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    span<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You might wonder why the generated code doesn't just use <code>AddRange()</code> again (and for earlier runtimes, that's exactly what happens), but the generated code that writes directly to the <code>Span&lt;T&gt;</code> is (presumably) more efficient, as it bypasses the overhead of <code>Add()</code> and <code>AddRange()</code>.</p> <h3 id=\"multiple-spread-and-fixed-elements\" class=\"heading-with-anchor\"><a href=\"#multiple-spread-and-fixed-elements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Multiple spread and fixed elements</a></h3> <p>For simplicity I'm mostly showing single collection sources in this post, but you can also mix spread collections with fixed elements, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In this example, the additional elements <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYAMlADOAFwA8scQD5cVAMoAHCDGkw5uUQHsArgCcAxgFNeuALzzq2RgDo7uw6cYA2RgHZuxIA\">don't really change anything</a>, as the compiler can account for the additional elements and calculate the final required capacity:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> source<span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> span<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Calculate the total length</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create the final list</span>\nCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// set the final size</span>\n\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span2 <span class=\"token operator\">=</span> CollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Grab the list backing-array</span>\n\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nspan2<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set the first fixed element</span>\nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span>span2<span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> span<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Copy the source to the destination</span>\nindex <span class=\"token operator\">+=</span> span<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\nspan2<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Copy the remaining fixed elements</span>\nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan2<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The code changes for other collection types in a similar way, so I won't repeat things here. Where things get interesting is when there are <em>multiple</em> spread elements. For example the following example spreads two <code>ICollection&lt;T&gt;</code> intance:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source2<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Given the final required size of the list is known, I <em>expected</em> the generated code would take that into account, <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdR2hpq3ZduASlIZMAGSgBnAC4AeWPIB8uKgEkAwgHsANvoCmAY3lRdMZTDW5ZugK4AnE0cY6Dxsxasr1951ckUUxcMNwAXnVqbEYAOjiAlzdcADZGAHZ4xMdkpG5iIA\">but it uses much simpler code</a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>I suspect this is a case of not bothering to optimise the less-common cases, so maybe it's something that will be improved later on?</p> <p>I think we've looked enough at creating <code>List&lt;T&gt;</code>, so now we'll look at the other end of the spectrum, creating an <code>IEnumerable&lt;T&gt;</code> from other collections.</p> <h2 id=\"creating-ienumerablet-using-spread-elements\" class=\"heading-with-anchor\"><a href=\"#creating-ienumerablet-using-spread-elements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>IEnumerable&lt;T&gt;</code> using spread elements</a></h2> <p>Creating an <code>IEnumerable&lt;T&gt;</code> from multiple existing collections is again, <em>possible</em> to do without using collection expressions, but it's either not very efficient, or very clunky.</p> <p>For example, imagine you're trying to combine two collections with some fixed elements, something like the previous example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source2<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><em>Without</em> collection expressions you could use the <code>yield</code> keyword to produce the same result:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token keyword\">in</span> source2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>But that <em>requires</em> that you do the concatenation in a separate function and is very verbose. Alternatively you could fallback on using Linq:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source2<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>source2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This is <em>almost</em> nice, but adding the fixed values is ugly and relatively inefficient. Collection expressions are just so much nicer here! But what does the compiler actually generate?</p> <h3 id=\"creating-ienumerablet-from-a-listt-spant-and-t-\" class=\"heading-with-anchor\"><a href=\"#creating-ienumerablet-from-a-listt-spant-and-t-\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>IEnumerable&lt;T&gt;</code> From a <code>List&lt;T&gt;</code>, <code>Span&lt;T&gt;</code>, and <code>T[]</code></a></h3> <p>We'll go back to single collections for simplicity here, and we'll start with a <code>List&lt;T&gt;</code> source:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0PwwYA8sAC4A+FKQAyUAM7ChMMShkB7AK4AnAMYBTTigC84sgDoTqzbvbYgA===\">generated code</a> in this case is incredibly simple, it calls <code>List&lt;T&gt;.ToArray()</code> to get a copy of the backing array, and then wraps the result in the generated <code>ReadOnlyArray</code> type (<a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/#ienumerablet-ireadonlycollectiont-ireadonlylistt\">which I discussed in my previous post</a>)</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token generic-method\"><span class=\"token function\">z__ReadOnlyArray</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Interestingly, replacing the <code>List&lt;T&gt;</code> with <code>Span&lt;T&gt;</code> or <code>ReadOnlySpan&lt;T&gt;</code> <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYCLADywALgD5cVAEoBTCABMA8jAA2ATwDKABwgwxMKbgDOAewCuAJwDG83rgC806gDo3Fm/e7EgA=\">generates exactly the same code</a>, as they also provide a <code>ToArray()</code> method. And <code>T[]</code> <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYCLADywALgD5cVCdW64AzgHsArgCcAxgFNeuALzTqAOmMqNO7sSA=\">is <em>almost</em> the same</a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token generic-method\"><span class=\"token function\">z__ReadOnlyArray</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The only difference here is that the generated code wraps the <code>T[]</code> in a <code>ReadOnlySpan&lt;T&gt;</code> first before calling <code>ToArray()</code>. Interestingly this is presumably either cheaper to perform than a direct <code>Array.Copy()</code> or is just a nicer API to use, I haven't looked into which is the answer!</p> <h3 id=\"creating-ienumerablet-from-another-ienumerablet\" class=\"heading-with-anchor\"><a href=\"#creating-ienumerablet-from-another-ienumerablet\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>IEnumerable&lt;T&gt;</code> from another <code>IEnumerable&lt;T&gt;</code></a></h3> <p>Moving away from known-length types like <code>List&lt;T&gt;</code> and <code>T[]</code> we can move to the other end of the spectrum, creating <code>IEnumerable&lt;T&gt;</code> from another <code>IEnumerable&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In this case the <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0PwwYA8sAC4A+FKX5CYYlAGcA9gFcATgGMAppxQBecWQB0Bxas3tsQA\">generated code</a> uses a <code>List&lt;T&gt;</code> as the \"backing\" type for the returned object, adding the source to the list using <code>List&lt;T&gt;.AddRange()</code>, and then wrapping that in another generated type <code>&lt;&gt;z__ReadOnlyList</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token generic-method\"><span class=\"token function\">z__ReadOnlyList</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Just like <code>&lt;&gt;z__ReadOnlyArray</code>, the <code>&lt;&gt;z__ReadOnlyList</code> type is a compiler-generated type. It looks something like the following, with all the interfaces implemented explicitly:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>z__ReadOnlyList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">:</span> IEnumerable<span class=\"token punctuation\">,</span> ICollection<span class=\"token punctuation\">,</span> IList<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IReadOnlyCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IReadOnlyList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> _items<span class=\"token punctuation\">;</span> <span class=\"token comment\">// The backing list containing the items</span>\n\n    <span class=\"token comment\">// The interfaces are explicitly implemented and delegate to the backing list</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ICollection<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">;</span> \n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IList<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Mutation methods throw</span>\n    \n    <span class=\"token comment\">// ... etc</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>All of the members that are implemented delegate to the underlying <code>List&lt;T&gt; _items</code>, and all of the members that would mutate the list throw a <code>NotSupportedException()</code>.</p> <h3 id=\"creating-ienumerablet-from-another-icollectiont-and-similar\" class=\"heading-with-anchor\"><a href=\"#creating-ienumerablet-from-another-icollectiont-and-similar\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>IEnumerable&lt;T&gt;</code> from another <code>ICollection&lt;T&gt;</code> and similar</a></h3> <p>The final case we'll look at is creating an <code>IEnumerable&lt;T&gt;</code> from <code>ICollection&lt;T&gt;</code> and other similar interfaces:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>As always, this case is somewhat between the <code>int[]</code> and <code>IEnumerable&lt;T&gt;</code> cases; we're not guaranteed to have contiguous memory, but we <em>do</em> know the size of the collection, so we can <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0PwwYA8sAC4A+FKQCSAYQD2AG3kBTAMbCosmEJhiUAZ1kBXAE4qlnFAF5xZAHS2DJs+2xA=\">pre-allocate a collection with the correct size</a>.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> current <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token generic-method\"><span class=\"token function\">z__ReadOnlyArray</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In this case the compiler creates a <code>T[]</code> of the correct final size. It then enumerates all of the elements in the <code>ICollection&lt;T&gt;</code> and assigns them to the array elements. Finally, it wraps the array in the compiler-generated <code>&lt;&gt;z__ReadOnlyArray</code> type.</p> <h2 id=\"creating-t-using-spread-elements\" class=\"heading-with-anchor\"><a href=\"#creating-t-using-spread-elements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>T[]</code> using spread elements</a></h2> <p>This post is getting very long, so we're going to pick up the pace now! 😄</p> <p>Creating a <code>T[]</code> from a spread collection is one of the easiest options. As we've seen repeatedly, a <code>T[]</code> is often the chosen \"backing\" collection for types where possible, so in most cases, the solution is trivial. For example, spreading a list into an array</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0P1gBcy7FKQAyUAM78APAIB8KCQHsArgCcAxgFNOKALwKyAOiPL129tiA==\">is simply</a></p> <pre class=\"language-csharp\"><code class=\"language-csharp\">source<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Similarly, spreading an array into another array:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0P1gBcy7FKQFCUAZwD2AVwBOAYwCmnFAF4AfCjIA6HdPnL22IA=\">uses the <code>ReadOnlySpan&lt;T&gt;.ToArray()</code> trick we saw earlier</a></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Meanwhile, spreading an <code>IEnumerable&lt;T&gt;</code> into a <code>T[]</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">MyFunc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>source<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQAwAIEEYAsBuAsAKAIEEAKAbRXQBoUAmGgZhsxoFYBdASj0P1gBcy7FKQwMAPAIB8KAM4B7AK4AnAMYBTTigC8MsgDp9ClRvbYgA=\">uses a <code>List&lt;T&gt;</code></a>, adds the elements with <code>AddRange()</code>, and then calls <code>ToArray()</code> to get the contents as an array:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Finally, <code>ICollection&lt;T&gt;</code> and similar interfaces where the collection length is known use a foreach to write the array elements, exactly <a href=\"#creating-ienumerablet-from-another-icollectiont-and-similar\">as shown in the previous section</a> when returning an <code>IEnumerable&lt;T&gt;</code>.</p> <h2 id=\"creating-readonlyspanint-using-spread-elements\" class=\"heading-with-anchor\"><a href=\"#creating-readonlyspanint-using-spread-elements\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>ReadOnlySpan&lt;int&gt;</code> using spread elements</a></h2> <p>For the most part, creating a <code>ReadOnlySpan&lt;T&gt;</code> from spread collections is identical to the <code>T[]</code> case, so we'll gloss over them a bit.</p> <blockquote> <p>In the following examples you'll notice there are multiple methods in the sharplab.io source code. That's to stop the compiler eliding the <code>ReadOnlySpan&lt;T&gt;</code> creation entirely!</p> </blockquote> <p>Going through the simple cases again, <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYEhXFQAyUAM4AXADyxpAPlySA9gFcATgGMApr1wBeZQEkA5jFWbdAWV00AdA7Va9fAcNznL1u5QBKuhAAJgDyMAA2AJ4AygAOEDDyMEoqGjr6RqYWVrb21E4uGe5AA===\">creating a <code>ReadOnlySpan&lt;T&gt;</code> from a <code>List&lt;T&gt;</code></a> creates an array from the <code>List&lt;T&gt;</code> and wraps it directly:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source <span class=\"token operator\">=</span> <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>Similarly, <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYEhXFVgAXat1wBnAPYBXAE4BjAKa9cAXgB8uAJIBzGHKVqAsmpoA6a/OXq+A4QeOmLVgEpqIAEwDyMAA2AJ4AygAOEDAAPBJ69qoa2npGJmaWNnaKSU5AA===\">creating a <code>ReadOnlySpan&lt;T&gt;</code> from a <code>T[]</code></a> creates a copy of the source array by wrapping it in a <code>ReadOnlySpan&lt;T&gt;</code> and then calling <code>ToArray()</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> source <span class=\"token operator\">=</span> <span class=\"token comment\">//...</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre> <p>Using an <code>IEnumerable&lt;T&gt;</code> source <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYEhXFQIsAPLAAuAPlwBnAPYBXAE4BjAKa9cAXnkBJAOYwlarQFktNAHS3l67XwHDcJsxeuUASlogAJgDyMAA2AJ4AygAOEDBSMHKKqpo6+kam5lY21PaOqS5AA===\">uses the <code>List&lt;T&gt;</code> trick to create an array</a>, and then wraps that with <code>ReadOnlySpan&lt;T&gt;</code></p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source <span class=\"token operator\">=</span> <span class=\"token comment\">//...</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>and finally, <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYEhXFQCSAYQD2AGxkBTAMYAXKFJgAeWMoB8uAM5SArgCdF83rgC8esQHMYUk/ICy8mgDoPh0+b4DhXHtHZzdKACV5CAATAHkYGQBPAGUABwhNbT0fMwtrWwcnV3dqLxy/fiA=\"><code>ICollection&lt;T&gt;</code> uses an array with a <code>foreach</code></a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> source <span class=\"token operator\">=</span> <span class=\"token comment\">// ...</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> current <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span>\n    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>For the final finale, we'll briefly consider the case where you're creating a <code>ReadOnlySpan&lt;T&gt;</code> from a mixture of fixed elements and a spread array, something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> source <span class=\"token operator\">=</span> <span class=\"token comment\">//</span>\nReadOnlySpan<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>source<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The compiler still knows the final required length of the <code>ReadOnlySpan&lt;T&gt;</code> so it can preallocate an array of the right size, but <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAFgG5NMBBACgG1cUAaXJRgZkcMYFYBdASlIyYEhXFVgAXat1wBnAPYBXAE4BjAKa9cAXgB8uAJIBzGHKVqAsmpoNcAOlvzl6xgDZGAdj4DhB46YtWAEpqEAAmAPIwADYAngDKAA4QMAA8EnqOqhraekYmZpY09pnqXkA=\">the generated code</a> is kind of interesting for showing how <code>Span&lt;T&gt;</code> really makes it easier to copy blocks of data around:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> element0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// The value to store in element 0.</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Element index</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> source<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// calculate the final array size</span>\n\n<span class=\"token comment\">//set the first element and increment indexer</span>\narray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> element0<span class=\"token punctuation\">;</span> \nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Wrap a ReadOnlySpan&lt;T&gt; around the source array</span>\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readOnlySpan <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 👇 This is the meat of the spread. It</span>\n<span class=\"token comment\">// - Wraps a Span&lt;T&gt; around the destination array</span>\n<span class=\"token comment\">// - Slices the array to the correct size, returning a Span&lt;T&gt; of the correct size</span>\n<span class=\"token comment\">// - Copies the source Span&lt;T&gt; into the destination sliced Span&lt;T&gt;, which </span>\n<span class=\"token comment\">//   writes the data to the underlying array</span>\n<span class=\"token comment\">// - Increment the indexer by the number of elements written</span>\nspan<span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Slice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> span<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nindex <span class=\"token operator\">+=</span> span<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set the remaining fixed elements</span>\narray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\nindex<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Wrap a ReadOnlySpan&lt;T&gt; around the destination array</span>\n<span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>It's nothing particularly complex as long as you've taken the time to understand <code>Span&lt;T&gt;</code>, but it's nice to think that this is about as efficient as it could be <em>and you didn't have to write it</em>. That won't always be the case, particularly if you're spreading multiple collections, but as new versions of .NET are released, the compiler can continue to improve, and your code just gets faster.</p> <p>We've covered a lot in this deep dive behind the scenes of collection expressions. In the final post of this series I'll how how you can add support for collection expressions to your own types, even if they don't support collection initializers in general.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>One of the big features of C#12 collection expressions is the <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions#spread-element\"><em>spread element</em></a>, which lets you use all the elements of an existing collection when creating a new one. In this post we looked at examples of the code the compiler generates when you use the spread element. The generated code varies based on both the source collection type and the destination type, but in general the compiler performs the copying as efficiently as it can.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/",
      "Title": "Exploring the generated code: T[], Span<T>, and Immutable collections: Behind the scenes of collection expressions - Part 3",
      "PublishDate": "2024-06-25T09:00:00+00:00",
      "Summary": "In this post I look at the code generated when you use collection expressions with T[], ReadOnlySpan<T>, Span<T>, and immutable collections",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/collection_expressions_banner_3.png\" /><nav><p>This is the three post in the series: <a href=\"/series/behind-the-scenes-of-collection-expressions/\">Behind the scenes of collection expressions</a>. </p> <ol class=\"list-none\"><li><a href=\"/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/\">Part 1 - Introducing collection expressions in C#12</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">Part 2 - Exploring the generated code: List&lt;T&gt; and fallback cases</a></li><li>Part 3 - Exploring the generated code: T[], Span&lt;T&gt;, and Immutable collections (this post) </li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/\">Part 4 - Exploring the generated code: the spread element</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/\">Part 5 - Adding support for collection expressions to your own types</a></li></ol></nav><p>This series take an in-depth look at collection expressions, which were introduced with C#12. <a href=\"/behind-the-scenes-of-collection-expressions-part-1-an-introduction-to-collection-expressions-in-csharp12/\">In the first post</a> I provided an introduction to collection expressions, and in <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">the previous post</a> we looked at the code generated when you use <code>List&lt;T&gt;</code> with collection expressions, In this post we look at the code that collection expressions generate for arrays, <code>ReadOnlySpan&lt;T&gt;</code>/<code>Span&lt;T&gt;</code>, and immutable collections.</p> <blockquote> <p>Note that <em>by design</em> the code produced by the compiler may change in future versions of .NET and C#. Also, in many situations the compiler-generated code uses low-level APIs that you <em>shouldn't</em> need to use in general, so don't worry if it all looks a bit complicated. That's kind of the point—the compiler is doing all this work so you don't have to!</p> </blockquote> <ul><li><a href=\"#optimized-collection-expressions-for-arrays\">Optimized collection expressions for arrays</a></li> <li><a href=\"#ienumerablet-ireadonlycollectiont-ireadonlylistt\"><code>IEnumerable&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code>, <code>IReadOnlyList&lt;T&gt;</code></a></li> <li><a href=\"#creating-readonlyspant-collection-expressions\">Creating <code>ReadonlySpan&lt;T&gt;</code> collection expressions</a></li> <li><a href=\"#spant-inline-arrays-all-the-way\"><code>Span&lt;T&gt;</code>: inline arrays all the way</a></li> <li><a href=\"#immutablelistt-immutablearrayt-immutable\"><code>ImmutableList&lt;T&gt;</code>, <code>ImmutableArray&lt;T&gt;</code>, <code>Immutable</code>…</a></li></ul> <h2 id=\"optimized-collection-expressions-for-arrays\" class=\"heading-with-anchor\"><a href=\"#optimized-collection-expressions-for-arrays\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Optimized collection expressions for arrays</a></h2> <p>Arrays are where we start to see some big differences in the generated code, depending on what types you're using. For most reference types, the collection expression code for arrays will be pretty much what you'd expect. For example, if you have this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>then <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQIwAYDaBdABBATriATywF4s0sAiJSgGioCY6qBmZygFnYFZKsMA3EA===\">the generated code</a> is the same as <a href=\"https://sharplab.io/#v2:EYLgtghglgdgPgAQIwAYDaBdABBATriATywF4sYBTAdy0wG8sAiJRgGiYCY2mBmbxgCz8ArIywBfANxA\">that generated using traditional array initializers</a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Things get more interesting if <code>T</code> is a simple primitive type like an <code>int</code>, <code>double</code>, or <code>bool</code>, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Suddenly <a href=\"https://sharplab.io/#v2:D4SwdgLg2gugBAQwE5IQTzgXjlAjAGjgCZCBmQgFkIFYYBuIA===\">the generated code</a> looks <em>significantly</em> different:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">InitializeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Explicit<span class=\"token punctuation\">,</span> Pack <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__StaticArrayInitTypeSize</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> __StaticArrayInitTypeSize<span class=\"token operator\">=</span><span class=\"token number\">20</span> 4F6ADDC9659D6FB90FE94B6688A79F2A1FA8D36EC43F8F3E1D9B6528C448A384<span class=\"token comment\">/* Not supported: data(01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00) */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>You'll notice all the \"not supported\" commets in there—that's because the generated code is valid IL, but it <em>isn't</em> valid C#, so sharplab is just doing it's best here. You might be able to infer what's going on though:</p> <ul><li>The representation of the final array is converted to a series of bytes and stored as a static readonly field in a class called <code>&lt;PrivateImplementationDetails&gt;</code></li> <li><a href=\"https://github.com/dotnet/runtime/blob/11ffb5c6181df36ff5887ed4f4a23e65abefc919/src/coreclr/System.Private.CoreLib/src/System/Runtime/CompilerServices/RuntimeHelpers.CoreCLR.cs#L19\">The <code>RuntimeHelpers.InitializeArray()</code> method</a> takes an array and a reference to a field, and directly overwrites the contents of the array with the field.</li></ul> <p>That's very powerful; there's no iterating through each element of the array, it's literally copying memory from a static field (embedded in the assembly) to another memory location (the array).</p> <blockquote> <p><code>&lt;PrivateImplementationDetails&gt;</code> is a class the C# compiler emits with compiler-generated helpers which is used by other generated code.</p> </blockquote> <p>If you squint at the <code>data()</code> comment on the <code>4F6ADDC9659D6...</code> field, and remember that each <code>int</code> is 4 bytes, you can see that this looks like the <code>1, 2, 3, 4, 5</code> of the array. Play with the number of values in the collection and you'll see the <code>StructLayout.Size</code> and <code>__StaticArrayInitTypeSize</code> values changing accordingly.</p> <p>You can also try with other primitive types like <code>double</code> and <code>bool</code> and see that you get the same behaviour. You need to use arrays where 3 or more elements have their non-<code>default</code> value; no matter the size of the array, if only two or less values are non-default, the <a href=\"https://sharplab.io/#v2:D4Iw9mA2DaC6AEYB2kCeAVA7mALgJwFcBTAZ3gF55p9iAaeGo+gMwENISn42OufOW7AdyFF4sANwBYAFCzwUOAwAWeIkXSFSFKo3p6RvQUcPD+XRuIlA\">compiler switches to simply assigning the elements directly</a>.</p> <p>I feel it would be slightly remis if I didn't show the IL that's actually generated for the direct-field assignment case, so I've added the IL generated for the 5-element array collection expression shown previously:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">IL_0000<span class=\"token punctuation\">:</span> ldc<span class=\"token punctuation\">.</span>i4<span class=\"token punctuation\">.</span><span class=\"token number\">5</span> <span class=\"token comment\">// Push '5' onto the stack as an int32</span>\nIL_0001<span class=\"token punctuation\">:</span> newarr <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">]</span>System<span class=\"token punctuation\">.</span>Int32 <span class=\"token comment\">// create an int[5]</span>\nIL_0006<span class=\"token punctuation\">:</span> dup <span class=\"token comment\">// duplicate the reference (it will be \"consumed\" by a later call)</span>\n<span class=\"token comment\">// 👇 Converts a referenced metadata token to a `RuntimeHandle`</span>\nIL_0007<span class=\"token punctuation\">:</span> ldtoken field valuetype '<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token char\">'/'</span>__StaticArrayInitTypeSize<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token char\">' '</span><span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>'<span class=\"token punctuation\">::</span>4F6ADDC9659D6FB90FE94B6688A79F2A1FA8D36EC43F8F3E1D9B6528C448A384\n<span class=\"token comment\">// 👇 Call RuntimeHelpers::InitializeArray, passing in the array and the RuntimeHandle reference</span>\nIL_000c<span class=\"token punctuation\">:</span> call <span class=\"token keyword\">void</span> <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">]</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>CompilerServices<span class=\"token punctuation\">.</span>RuntimeHelpers<span class=\"token punctuation\">::</span><span class=\"token function\">InitializeArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">]</span>System<span class=\"token punctuation\">.</span>Array<span class=\"token punctuation\">,</span> valuetype <span class=\"token punctuation\">[</span>System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">]</span>System<span class=\"token punctuation\">.</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span>\n</code></pre> <p>There's still some hand waving around the <code>ldtoken</code> etc but conceptually it hopefully makes sense: we're copying a fixed, compile-time chunk of memory into the raw array memory. So it's <em>fast</em>. 😃</p> <h2 id=\"ienumerablet-ireadonlycollectiont-ireadonlylistt\" class=\"heading-with-anchor\"><a href=\"#ienumerablet-ireadonlycollectiont-ireadonlylistt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>IEnumerable&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code>, <code>IReadOnlyList&lt;T&gt;</code></a></h2> <p><code>IEnumerable&lt;T&gt;</code>, <code>IReadOnlyCollection&lt;T&gt;</code>, and <code>IReadOnlyList&lt;T&gt;</code> typed collection expressions are backed by a <code>T[]</code> and <em>mostly</em> behave like the array equivalents. So for primitive blittable types like <code>int</code> you get the optimised <code>InitializeArray()</code> code, whereas for other types you get the \"naïve\" initialization of each element.</p> <blockquote> <p><a href=\"https://learn.microsoft.com/en-us/dotnet/framework/interop/blittable-and-non-blittable-types\">\"Blittable\" technically refers to whether a type has the same representation in managed and unmanaged memory</a>, and includes (among others) primitive types like <code>int</code>, <code>long</code>, and <code>double</code>. Types like <code>string</code> and <code>bool</code>(perhaps surprisingly) are <em>not</em> blittable.</p> <p>However, for the purposes of this post I'm slightly abusing the term blittable to mean any type which the compiler can store the array of values in a field as a contiguous block of memory.</p> </blockquote> <p>However, interestingly, the interface implementations aren't as straightforward as the <code>List&lt;T&gt;</code>/<code>IList&lt;T&gt;</code> case we saw in <a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">the previous post</a>, where creating an <code>IList&lt;T&gt;</code> collection expression returns a <code>List&lt;&gt;</code> behind the scenes. That becomes apparent if we use each of the array interfaces with collection expressions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> enumerable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IReadOnlyList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>enumerable <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// False</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>collection <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// False</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>list <span class=\"token keyword\">is</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// False</span>\n</code></pre> <p>As you can see, the <code>IEnumerable&lt;T&gt;</code> etc are <em>not</em> simply implemented by <code>int[]</code>. Let's take a look at the generated code, taking the non-blittable version for example (as the generated code is easier to read):</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCg9GmBmAPASwDsAXAPggEMAnS8gTwgF4IBtaAGggCYOsPYBdJMmw4AsrQAqtAA4BTMlRr0mzArIDuACmgBKDmq2c9EA5qzHTsCxs0BWHYJQpKsgMYB7SgBMI4qXM1CIggANXIAGwBXWR14IA==\">The generated code</a> for this example shows that we're <em>wrapping</em> the array in another type.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token generic-method\"><span class=\"token function\">z__ReadOnlyArray</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The unpronounceable type <code>&lt;&gt;z__ReadOnlyArray&lt;T&gt;</code> is another compiler-emitted type, and it behaves pretty much as you might expect. It's a simple wrapper around a <code>T[]</code>, implementing many of the same interfaces as arrays, but as a <em>truly</em> readonly version:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>z__ReadOnlyArray<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">:</span> IEnumerable<span class=\"token punctuation\">,</span> IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IReadOnlyCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IReadOnlyList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _items<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token function\">z__ReadOnlyArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> items<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _items <span class=\"token operator\">=</span> items<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> IReadOnlyCollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">T</span> IReadOnlyList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>Count <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span>IsReadOnly <span class=\"token operator\">=&gt;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\">T</span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">get</span> <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">set</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IEnumerable<span class=\"token punctuation\">)</span>_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">&gt;</span></span> IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IEnumerable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> arrayIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">CopyTo</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> arrayIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">)</span>_items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">IndexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> ICollection<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">Insert</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IList<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Interestingly, <code>&lt;&gt;z__ReadOnlyArray&lt;T&gt;</code> only <em>partially</em> implements the non-readonly collections, and throws if you try to invoke any of the mutation methods. I'm not entirely sure the logic of that approach, it seems a little dangerous to me but 🤷‍♂️ My assumption is that it enables other optimisations in the compiler thanks to the presence of <code>ICollection&lt;T&gt;.CopyTo()</code> etc.</p> <h2 id=\"creating-readonlyspant-collection-expressions\" class=\"heading-with-anchor\"><a href=\"#creating-readonlyspant-collection-expressions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Creating <code>ReadonlySpan&lt;T&gt;</code> collection expressions</a></h2> <p>For <code>ReadOnlySpan&lt;T&gt;</code> we have to think about two different implementations again, the blittable values like <code>int</code> and other types; we'll start with the <code>int</code> version. The code samples have to \"use\" the collection in some way, otherwise the compiler might omit it completely, as creating a <code>ReadOnlySpan&lt;T&gt;</code> is side-effect free:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This <a href=\"https://sharplab.io/#v2:D4AQTAjAsAULBKBTAhgEwPIDsA2BPAygA7KYA8AlpgC4B8ABAIIAUAlLAN6x3d1JpZ4iJCtXrIATuOS46AXjoBtCABo6YVQGZVAFlUBWALoBuLjxAB2OhKm4TMAL6wgA\">generates code that looks like the following</a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">return</span> RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Explicit<span class=\"token punctuation\">,</span> Pack <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> Size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__StaticArrayInitTypeSize</span><span class=\"token operator\">=</span>20_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> __StaticArrayInitTypeSize<span class=\"token operator\">=</span>20_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span> 4F6ADDC9659D6FB90FE94B6688A79F2A1FA8D36EC43F8F3E1D9B6528C448A3844<span class=\"token comment\">/* Not supported: data(01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00) */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>That looks remarkably familiar! It's almost identical to the <code>int[]</code> code, but instead of calling <code>RuntimeHelpers.InitializeArray()</code> it's <a href=\"https://github.com/dotnet/runtime/blob/11ffb5c6181df36ff5887ed4f4a23e65abefc919/src/libraries/System.Private.CoreLib/src/System/Runtime/CompilerServices/RuntimeHelpers.cs#L118\">calling <code>RuntimeHelpers.CreateSpan()</code></a>, which in turn <a href=\"https://github.com/dotnet/runtime/blob/11ffb5c6181df36ff5887ed4f4a23e65abefc919/src/coreclr/System.Private.CoreLib/src/System/Runtime/CompilerServices/RuntimeHelpers.CoreCLR.cs#L19\">calls <code>RuntimeHelpers.GetSpanDataFrom()</code></a>. As Stephen Toub describes in his epic <a href=\"https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-8/#initialization\">performance improvements in .NET 8 post</a>:</p> <blockquote> <p>It blits the data for the array into the assembly, and then constructing the span isn’t via an array allocation, but rather just wrapping the span around a pointer directly into the assembly’s data. This not only avoids the startup overhead and the extra object on the heap, it also better enables various JIT optimizations, especially when the JIT is able to see what offset is being accessed.</p> </blockquote> <p>So that covers the <code>int</code> case. If you remember, <code>int[]</code> had similar optimisations to these, but for <code>string[]</code> the compiler fell back to \"basic\" initialization of each of the elements. So what happens for <code>ReadOnlySpan&lt;string&gt;</code>?</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:D4WAUAAgTAjO4CUCmBDAJgeQHYBsCeAygA4pYA8EMADAHwAEKAToynnQLx0DadARDLwA0fKEL4BmMbwAsUgKy86AXQDcQA==\">The generated code</a> is <em>definitely</em> not a naïve implementation!</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token class-name\">y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayAsReadOnlySpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">&gt;</span>y__InlineArray5<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayAsReadOnlySpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">In</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">IsReadOnly</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> MemoryMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">CreateReadOnlySpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">AsRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">ref</span> <span class=\"token return-type class-name\">TElement</span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineArray</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> _element0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>It's kind of hard to follow all the unspeakable names in the above example, so we'll break it down piece by piece. We'll start with <code>&lt;&gt;y__InlineArray5&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineArray</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> _element0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>This defines a new <code>struct</code> type as an <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/struct#inline-arrays\">inline array</a>. The syntax for inline arrays is rather unintuitive, but you can think of it as a way of creating a <code>T[]</code> but <em>without</em> having to allocate a new array on the heap; instead the elements are embedded <em>directly</em> in the <code>&lt;&gt;y__InlineArray5&lt;T&gt;</code> struct instance.</p> <blockquote> <p>That's a very vague description, and I may well write a dedicated post about them at a later date. In the meantime I recommend reading <a href=\"https://blog.ladeak.net/posts/exploring-inline-arrays\">this great explainer</a> by <a href=\"https://www.linkedin.com/in/ladeak\">Lazlo</a>.</p> </blockquote> <p>Next we have the <code>&lt;PrivateImplementationDetails&gt;.InlineArrayElementRef&lt;TBuffer, TElement&gt;()</code> implementation. This takes the reference to an inline array, and returns a reference to a given index into the array:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">ref</span> <span class=\"token return-type class-name\">TElement</span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Finally, we have the <code>&lt;PrivateImplementationDetails&gt;.InlineArrayAsReadOnlySpan&lt;TBuffer, TElement&gt;()</code> method which does what it says on the tin: it takes an inline array as a parameter, and returns a <code>ReadOnlySpan&lt;TElement&gt;</code> reference to the inline array contents:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayAsReadOnlySpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">In</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">IsReadOnly</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> MemoryMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">CreateReadOnlySpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">AsRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre> <p>Now we can put it all together to understand the code the collection expression generates. To make it a <em>little</em> easier to read, I've simplified the unspeakable names by essentially providing type aliases</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// simplify some names</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">Private</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">StringInlineArray</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create an instance of the inline array</span>\n<span class=\"token class-name\">StringInlineArray</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">StringInlineArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set each of the elements of the inline array</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> MyType<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Wrap the contents of the inline array in a ReadOnlySpan&lt;MyType&gt;</span>\nPrivate<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">InlineArrayAsReadOnlySpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>By using inline arrays, the compiler is able to avoid allocating a whole new array (<code>string[]</code>) which would always be allocated on the heap. Inline arrays are a <code>struct</code> so can be allocated on the stack or directly embedded into other types, which can reduce allocations (depending on the details, as always!)</p> <blockquote> <p>Note that only the <em>array</em> itself is \"inline\" and embedded. Each of the <code>string</code> instances would be allocated as normal, and each array element contains a reference to such an instance.</p> </blockquote> <p>After <code>ReadOnlySpan&lt;T&gt;</code> the next obvious choice to consider is <code>Span&lt;T&gt;</code>.</p> <h2 id=\"spant-inline-arrays-all-the-way\" class=\"heading-with-anchor\"><a href=\"#spant-inline-arrays-all-the-way\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>Span&lt;T&gt;</code>: inline arrays all the way</a></h2> <p>In the previous section we saw that the collection expression implementation for <code>ReadOnlySpan&lt;T&gt;</code> when <code>T</code> is blittable (e.g. <code>int</code>) is heavily optimised by storing a <code>static readonly</code> field in the assembly, and then \"wrapping\" a <code>ReadOnlySpan&lt;T&gt;</code> around this area of memory.</p> <p>Unfortunately, <code>Span&lt;T&gt;</code> requires that you can <em>mutate</em> the elements it wraps, so that optimized approach won't work here. However, the non-blittable approach which uses inline arrays <em>is</em> possible. In fact <code>Span&lt;T&gt;</code> collection expressions use the same inline array implementation <em>whatever</em> the <code>T</code>. This code uses both blittable and non-blittable arrays:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> array2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:D4AQTAjAsAULDKAHAhgOwDwggBgHwAJkAnI5AT3wF58BtfAIgnoBoGwWGBmD+gFh4Cs9fAF0A3AhQYAlqgAuBYqTJgqtfBFZhWnVr1YDRYoA\">The generated code</a> looks a little like the following (I added type aliases for readability again), and shows that the implementations are essentially the same in both cases:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// simplify some names</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">Private</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">StringInlineArray</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">IntInlineArray</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Span&lt;string&gt; array = [ \"1\", \"2\", \"3\", \"4\", \"5\" ];</span>\n<span class=\"token class-name\">StringInlineArray</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">StringInlineArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayAsSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>StringInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Span&lt;int&gt; array2 = [1, 2, 3, 4, 5];</span>\n<span class=\"token class-name\">IntInlineArray</span> buffer2 <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IntInlineArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token generic-method\"><span class=\"token function\">PrivateInlineArrayAsSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IntInlineArray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer2<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Span<span class=\"token punctuation\">&lt;</span>TElement<span class=\"token punctuation\">&gt;</span></span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayAsSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> length<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> MemoryMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">CreateSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">ref</span> <span class=\"token return-type class-name\">TElement</span> <span class=\"token generic-method\"><span class=\"token function\">InlineArrayElementRef</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> <span class=\"token class-name\">TBuffer</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> index<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TBuffer<span class=\"token punctuation\">,</span> TElement<span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Auto<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">InlineArray</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">struct</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span>y__InlineArray5<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">CompilerGenerated</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> _element0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Note that it's the same <code>&lt;&gt;y__InlineArray5&lt;T&gt;</code> being reused in both cases here, just with a different <code>T</code>. If we had a 5-element <code>ReadOnlySpan&lt;T&gt;</code> it would <em>also</em> re-use this implementation. Similarly, the <code>InlineArrayElementRef()</code> implementation is the same as for <code>ReadOnlySpan&lt;T&gt;</code>, while <code>InlineArrayAsSpan()</code> is directly analogous to the <code>InlineArrayAsReadOnlySpan</code> version.</p> <h2 id=\"immutablelistt-immutablearrayt-immutable\" class=\"heading-with-anchor\"><a href=\"#immutablelistt-immutablearrayt-immutable\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>ImmutableList&lt;T&gt;</code>, <code>ImmutableArray&lt;T&gt;</code>, <code>Immutable</code>…</a></h2> <p>We've almost finished this extensive look at all the types you can use with collection expressions. Our final set of types are:</p> <ul><li><code>ImmutableArray&lt;T&gt;</code></li> <li><code>ImmutableList&lt;T&gt;</code>/<code>IImmutableList&lt;T&gt;</code></li> <li><code>ImmutableQueue&lt;T&gt;</code>/<code>IImmutableQueue&lt;T&gt;</code></li> <li><code>ImmutableStack&lt;T&gt;</code>/<code>IImmutableStack&lt;T&gt;</code></li> <li><code>ImmutableHashSet&lt;T&gt;</code>/<code>IImmutableSet&lt;T&gt;</code></li> <li><code>ImmutableSortedSet&lt;T&gt;</code></li></ul> <p>We'll start with <code>ImmutableArray&lt;T&gt;</code>, as the generated code there is slightly different to the other immutable collections. Taking a simple <code>int</code> example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Immutable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p><a href=\"https://sharplab.io/#v2:D4AQDABCCMB0DCB7ANsgpgYwC4EtEDsBnWASQFsyBXLAQwCN0BuAWACg3yraG0BBAJ340AngB4c+LAD4INQSIgBeCAG1oAGggAmTQGZNAFk0BWALotWQA===\">The generated code</a> has two steps:</p> <ul><li>Initialize an array</li> <li>Call <code>ImmutableCollectionsMarshal.AsImmutableArray(array)</code> to create the <code>ImmutableArray</code></li></ul> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nRuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token function\">InitializeArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nImmutableCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsImmutableArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>If you remember back to the previous <code>int[]</code> analysis, you'll see that this is literally using the same collection-expression-generated-code for creating an array, and then converting the array to the immutable array type.</p> <p><a href=\"https://github.com/dotnet/runtime/blob/main/src/libraries/System.Collections.Immutable/src/System/Runtime.InteropServices/ImmutableCollectionsMarshal.cs#L31\">The <code>ImmutableCollectionsMarshal.AsImmutableArray()</code> implementation</a> simply returns an <code>ImmutableArray</code> that wraps the provided instance. This is faster (and has fewer allocations) than calling <code>ImmutableArray.Create(array)</code>, which would be the usual approach but which creates a copy of the array for safety. The compiler can safely use <code>ImmutableCollectionsMarshal</code> here, because it knows noone else can have a reference to the generated <code>array</code>.</p> <blockquote> <p><a href=\"https://sharplab.io/#v2:D4AQDABCCMB0DCB7ANsgpgYwC4EtEDsBnWASQFsyBXLAQwCN0BuAWACg3yraG0BBAJ340AngB4YYAHwQagkRAC8EANoQARNDUAadQCZt6gMwG1AFhMBWNRAC6LVkA===\">The generated code</a> is essentially the same if you're using a non-blittable type like <code>string</code>. It still creates a <code>T[]</code> and then calls <code>ImmutableCollectionsMarshal.AsImmutableArray()</code>. The only difference is that the generated code uses the \"simple\" initialization code for the <code>T[]</code> for non-blittable types.</p> </blockquote> <p>The remaining immutable implementations all use essentially the same implementation. They each create a <code>ReadOnlySpan&lt;T&gt;</code> (using whichever generated code is appropriate for a given <code>T</code>) and then call their respective <code>Create()</code> methods. So for the following code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Immutable</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IImmutableList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ilist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> queue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IImmutableQueue<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> iqueue <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableStack<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IImmutableStack<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> istack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableHashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IImmutableSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> iset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ImmutableSortedSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> sortedSet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>we end up with <a href=\"https://sharplab.io/#v2:D4AQDABCCMB0DCB7ANsgpgYwC4EtEDsBnWASQFsyBXLAQwCN0BuAWACg3yraG0AZHQlgA8OfFgB8EZAKwQAvBADa0ADQQATGoDMagCxqArAF0WrEp2r10/QSLGSc0wfKWqN2vYZNsOFSzwBFSjRguwkIAEdg4JdlNU0IHQh9CGNTcz9udCCQtDCHKNzYtwSklLSfM0yrNABlWgwAa3yIQRom4viPZK90iyy6hubRcJl2xs73RM9U73YqrhqACRpCAAtatGERyUItydKZirN+ms3t+wgBfYU4qbLeytOeWsQAJyw0ABNzlsJ3z4/G6uLrTHqzUxsIA===\">the following generated code</a>. I've included the <code>&lt;PrivateImplementationDetails&gt;</code> code in this case as it shows that each call to <code>RuntimeHelpers.CreateSpan()</code> can wrap the <em>same</em> constant data in memory, because it creates a <code>ReadOnlySpan&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">ImmutableList<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nImmutableList<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nImmutableQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nImmutableQueue<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nImmutableStack<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nImmutableStack<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nImmutableHashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nImmutableHashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nImmutableSortedSet<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>RuntimeHelpers<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">CreateSpan</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>RuntimeFieldHandle<span class=\"token punctuation\">)</span><span class=\"token comment\">/*OpCode not supported: LdMemberToken*/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span>PrivateImplementationDetails<span class=\"token operator\">&gt;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">StructLayout</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>LayoutKind<span class=\"token punctuation\">.</span>Explicit<span class=\"token punctuation\">,</span> Pack <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> Size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">__StaticArrayInitTypeSize</span><span class=\"token operator\">=</span>20_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span>\n    <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> __StaticArrayInitTypeSize<span class=\"token operator\">=</span>20_Align<span class=\"token operator\">=</span><span class=\"token number\">4</span> 4F6ADDC9659D6FB90FE94B6688A79F2A1FA8D36EC43F8F3E1D9B6528C448A3844<span class=\"token comment\">/* Not supported: data(01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 05 00 00 00) */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>And with that we've covered all the built-in types that I'm going to look into in this series. In the next post we'll look at how the generated code changes when you use the spread element <code>..</code> in your collection expressions.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I looked at the code generated for collection expressions when you're generating arrays, <code>Span&lt;T&gt;</code>, <code>ReadOnlySpan&lt;T&gt;</code>, and immutable collections. I showed that the array code is highly optimised when the data is a primitive like <code>int</code> or <code>double</code>, as the whole array can be copied from a <code>static readonly</code> field. Similarly, I showed that a <code>ReadOnlySpan&lt;T&gt;</code> can be created <em>directly</em> from that field. <code>Span&lt;T&gt;</code> uses inline arrays as the main optimization, while the immutable types build on top of the <code>ReadOnlySpan&lt;T&gt;</code> implementation</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/",
      "Title": "Exploring the generated code: List<T> and fallback cases: Behind the scenes of collection expressions - Part 2",
      "PublishDate": "2024-06-18T09:00:00+00:00",
      "Summary": "In this post I look at the code generated when you use collection expressions with List<T> or with types that can be used with collection initializers",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/collection_expressions_banner_2.png\" /><nav><p>This is the two post in the series: <a href=\"/series/behind-the-scenes-of-collection-expressions/\">Behind the scenes of collection expressions</a>. </p> <ol class=\"list-none\"><li><a href=\"/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/\">Part 1 - Introducing collection expressions in C#12</a></li><li>Part 2 - Exploring the generated code: List&lt;T&gt; and fallback cases (this post) </li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">Part 3 - Exploring the generated code: T[], Span&lt;T&gt;, and Immutable collections</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/\">Part 4 - Exploring the generated code: the spread element</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/\">Part 5 - Adding support for collection expressions to your own types</a></li></ol></nav><p>This series take an in-depth look at collection expressions, which were introduced with C#12. <a href=\"/behind-the-scenes-of-collection-expressions-part-1-an-introduction-to-collection-expressions-in-csharp12/\">In the first post</a> I provided an introduction to collection expressions, so if you're not familiar with how they work, I strongly suggest reading that one first.</p> <p>In this post, we look at what the compiler generates when you use collection expressions with some of the built-in types. This post looks at many of the simple cases, where the generated code is easy to understand. In the next post we look at many more collections, where things get more interesting (and complicated!)</p> <blockquote> <p>Note that <em>by design</em> the code produced by the compiler may change in future versions of .NET and C#. The generated code shown here represents a point-in time view of the situation. If new C# features, types, or mechanisms are introduced, the compiler can switch to using them behind-the-scenes, and your compiled code gets faster without you having to change anything!</p> </blockquote> <p>When you use collection expressions in your code, the compiler has quite a lot of freedom to create the collection in any way it likes, so it tries to be efficient as possible. Depending on the details of the types, that's not <em>always</em> possible; this post looks predominantly at those cases.</p> <ul><li><a href=\"#collection-initializers-hashsett-concurrentbagt-and-sortedsett\">Collection initializers: <code>HashSet&lt;T&gt;</code>, <code>ConcurrentBag&lt;T&gt;</code>, and <code>SortedSet&lt;T&gt;</code></a></li> <li><a href=\"#using-collection-expressions-with-custom-types\">Using collection expressions with custom types</a></li> <li><a href=\"#optimizing-listt\">Optimizing <code>List&lt;T&gt;</code></a></li> <li><a href=\"#listt-when-targeting-earlier-versions\"><code>List&lt;T&gt;</code> when targeting earlier versions</a></li> <li><a href=\"#interfaces-backed-by-listt-ilistt-and-icollectiont\">Interfaces backed by <code>List&lt;T&gt;</code>: <code>IList&lt;T&gt;</code> and <code>ICollection&lt;T&gt;</code></a></li></ul> <h2 id=\"collection-initializers-hashsett-concurrentbagt-and-sortedsett\" class=\"heading-with-anchor\"><a href=\"#collection-initializers-hashsett-concurrentbagt-and-sortedsett\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Collection initializers: <code>HashSet&lt;T&gt;</code>, <code>ConcurrentBag&lt;T&gt;</code>, and <code>SortedSet&lt;T&gt;</code></a></h2> <p>It might seem like an odd place to start, but I've started with <code>HashSet&lt;T&gt;</code> because the compiler-generated code is very simple and easy to understand. If you write code like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> hashset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>then <a href=\"https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCgEgQwM4AsDKApgC4A8AlgHZEB8EO2OWxEAvBANrQA0EATDwGYesALrwgA\">the compiler generates code</a> that looks a bit like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> hashSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhashSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>which is <em>exactly</em> the same code as if you'd used an old collection initializer instead of a collection expression:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Similarly, the <code>HashSet&lt;T&gt;</code> empty collection initializer <code>[]</code> simply calls <code>new HashSet&lt;T&gt;()</code>.</p> <p>So why is the code so basic and unoptimized here? The simple answer is that the compiler <em>doesn't</em> include any special-case handling for <code>HashSet&lt;T&gt;</code>, so it uses the same fallback path as custom collections: the collection initializer syntax.</p> <p>The same is true for other collections that can be used with collection initializers, for example <code>ConcurrentBag&lt;T&gt;</code> and <code>SortedSet&lt;T&gt;</code>.</p> <blockquote> <p>I hesitate to mention <code>ConcurrentBag&lt;T&gt;</code> at all, given <a href=\"https://minidump.net/performance-best-practices-in-c-b85a47bdd93a/#concurrentbagt\">Kevin's advice of \"Never use <code>ConcurrentBag&lt;T&gt;</code> without benchmarking\"</a>, but what can I say, I'm a sucker for completeness.</p> </blockquote> <p>If you use a collection expression to create the collection:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Concurrent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ConcurrentBag<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> bag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>then, as expected, <a href=\"https://sharplab.io/#v2:D4AQDABCCMB0DCB7ANsgpgYwC4EtEDsBnBAjAVwCcK18sBuAWAChml9yqasAhAQwHMAPDloA+CACMBEALwQA2tAA0EAEwqAzCoAsKgKwBdOkA===\">the generated code</a> is the same as the collection initializer version, calling <code>Add()</code> for each entry.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">ConcurrentBag<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> bag <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConcurrentBag<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconcurrentBag<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconcurrentBag<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconcurrentBag<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconcurrentBag<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconcurrentBag<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And yes, as I'm sure you've guessed, the <code>SortedSet&lt;T&gt;</code> implementation is the same, with <a href=\"https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCgygewE4BcCmAJmnjgDwCWAdjgHwQDOJEAvBANrQA0EATNwMwBdeEA\">the generated code</a> looking the same as the collection initializer version</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">SortedSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> sortedSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SortedSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsortedSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsortedSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsortedSet<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>I promise we'll look at something more interesting than collection initializers soon, but before we do, it's worth showing that this doesn't just apply to built-in collections, you can use collection expressions with your own types too.</p> <h2 id=\"using-collection-expressions-with-custom-types\" class=\"heading-with-anchor\"><a href=\"#using-collection-expressions-with-custom-types\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Using collection expressions with custom types</a></h2> <p>You may not be aware but you can use the collection <em>initializer</em> syntax with any type that implements <code>IEnumerable</code> and exposes an <code>Add()</code> method (or an equivalent extension method).</p> <p>For example, you can create a collection like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCollection</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> _items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IEnumerator<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">IEnumerator</span> IEnumerable<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> _items<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnumerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _items<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>and then you can use it in a collection initializer like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> mycollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <blockquote> <p>I implemented <code>IEnumerable&lt;T&gt;</code> in this case, but you could also implement <code>IEnumerable</code>, or simply expose a <code>GetEnumerator()</code> method without exposing an interface.</p> </blockquote> <p>The generated code for a collection initializer simply calls <code>Add()</code> for each element:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> myCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Collection expressions have essentially the same requirement for the type as collection initializers do—if you can use it in a collection initializer, you can likely use a collection expression:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> mycollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And as you can probably guess, the generated code is exactly the same:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MyCollection</span> myCollection <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyCollection<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>One thing to note is that collection expressions <em>require</em> a public parameterless constructor, because the constructor is called implicitly in the generated code. That contrasts with collection initializers where you can have any public constructor, because you call it directly.</p> <p>OK, we're finally done with the fallback path of collection initializers, it's time to look at something more interesting!</p> <h2 id=\"optimizing-listt\" class=\"heading-with-anchor\"><a href=\"#optimizing-listt\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Optimizing <code>List&lt;T&gt;</code></a></h2> <p><code>HashSet&lt;T&gt;</code> wasn't very interesting, but with <code>List&lt;T&gt;</code> things start to get more complicated. If we first consider the old collection initializer syntax:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>then <a href=\"https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCgMgSwM4BcA8GAdjgHwQA22OEAvBIQKYDuEAFAJQQDe0ANBACZ+AZn6x+AVgC+8IA=\">the generated code</a> would look very similar to the <code>HashSet&lt;T&gt;</code> code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>This code is fine but it's doing more work than it needs to. <a href=\"https://github.com/dotnet/runtime/blob/24562bcabefaea5e03c74d01e4df8fc7c112a13a/src/libraries/System.Private.CoreLib/src/System/Collections/Generic/List.cs#L196\">Every call to <code>Add()</code></a> has to check whether the underlying <code>int[]</code> (which stores the actual values in the <code>List&lt;int&gt;</code>) needs to be resized. Even with just 5 elements, we end up needing to do a resize in the code above, because the default capacity is 4 elements.</p> <p>So instead of collection initializers, we should use collection expressions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>With collection expressions, the compiler has more freedom to use the fact that it <em>knows</em> there's going to be 5 elements to create the underlying array with the correct size directly. That, coupled with some unsafe methods in <code>CollectionsMarshal</code> makes <a href=\"https://sharplab.io/#v2:D4AQDABCCMAsDcBYAUCgMgSwM4BcA8GAdjgHwQA22OEAvBANrQA0EATCwMwuwsCsAuvCA===\">the initialization much more efficient</a>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Force the list to support the final number of entries</span>\nCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Get access to the underlying array as a Span&lt;T&gt; array, so you can mutate the values</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> CollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set each of the values</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The generated code uses the <code>CollectionsMarshal.SetCount()</code> method that was <a href=\"https://github.com/dotnet/runtime/pull/82146\">introduced in .NET 8</a> to grow the list's underlying array to accommodate the final number of elements. It then uses the <code>CollectionsMarshal.AsSpan()</code> method that was <a href=\"https://github.com/dotnet/runtime/issues/27061\">introduced in .NET 5</a> to update the array elements directly.</p> <blockquote> <p>Note that this method has <a href=\"https://github.com/dotnet/runtime/issues/55217\">some \"unsafe\" behaviour</a> so you need to be careful with using it in general. The example shown above is perfectly safe when used by the compiler as part of collection expressions of course.</p> </blockquote> <p>The generated code does <em>much</em> less work than calling <code>Add()</code> 5 times, but the end result is the same. This is one of the big selling points of collection expressions: the compiler can take advantage of updates to the language or runtime to make your code faster, without needing to change anything!</p> <h2 id=\"listt-when-targeting-earlier-versions\" class=\"heading-with-anchor\"><a href=\"#listt-when-targeting-earlier-versions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\"><code>List&lt;T&gt;</code> when targeting earlier versions</a></h2> <p>Collection expressions were introduced in C#12 with .NET 8, but you can also target earlier versions of .NET while still using C#12. I'm a bit hazy on what the <em>official</em> support for earlier TFMs looks like, given some C# features won't work in earlier versions of .NET (like default interface methods), but <em>in general</em> it's safe to assume you can use newer C# features like collection expressions unless the compiler tells you otherwise!</p> <p>However, I mentioned that the optimised code for <code>List&lt;T&gt;</code> uses an API that was introduced in .NET 8: <code>CollectionsMarshal.SetCount()</code>. If you're targeting an earlier version of .NET, that API isn't available, and so the compiler has to do something else. In this case it falls back to the simple collection initializer code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So for this specific example, earlier TFMs don't benefit from performance improvements by using collection expressions, though that won't be true for all collection expression usages or for all collection types.</p> <h2 id=\"interfaces-backed-by-listt-ilistt-and-icollectiont\" class=\"heading-with-anchor\"><a href=\"#interfaces-backed-by-listt-ilistt-and-icollectiont\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Interfaces backed by <code>List&lt;T&gt;</code>: <code>IList&lt;T&gt;</code> and <code>ICollection&lt;T&gt;</code></a></h2> <p>The examples I've focused on so far have been concrete types, but collection expressions also work with some interface types. <code>IList&lt;T&gt;</code> and <code>ICollection&lt;T&gt;</code> in particular generate <code>List&lt;T&gt;</code> instances as the backing type.</p> <p>So for this code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">IList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ilist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> collection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>ilist <span class=\"token keyword\">is</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// True</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>collection <span class=\"token keyword\">is</span> <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// True</span>\n</code></pre> <p>Then you can see that <a href=\"https://sharplab.io/#v2:D4AQTAjAsAUCAMACEEAsBuWsCSAZAlgM4AuAPPgHbEB8i+ANkcYgLyIDaEANImDwMyIAuphjYAwgHt69AKYBjYvkkVyVWvOlzFyiqw59EqHgDYRWOBACcACgZM6hRARJqaASnSIA9N8QAVACcAV1lYFFtNGQUlFUdnJjdqTx8/INCgA=\">the compiler generates</a> the exact same <code>List&lt;T&gt;</code> initialization code you would expect if each variable was declared as a <code>List&lt;T&gt;</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">SetCount</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> CollectionsMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">AsSpan</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\nspan<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\nnum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>In the next post we'll look at more collection types like <code>T[]</code> and <code>ReadOnlySpan&lt;T&gt;</code> to see how they're heavily optimized when used with collection expressions.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post, I showed how collection expressions can always fallback to collection initializers for types that support them. I also showed how to create your own types to support collection initializers and expressions by implementing <code>IEnumerable</code> and adding an <code>Add()</code> method. Finally I showed how <code>List&lt;T&gt;</code> is optimized for collection expressions by using the .NET 8 API <code>CollectionsMarshal.SetCount()</code>, and how this falls back to collection expressions if you're targeting earlier framework versions. In the next post we'll at more collection types to see how they work with collection expressions.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/"
    },
    {
      "FeedId": "https://andrewlock.net/rss/",
      "ItemId": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/",
      "Title": "Introducing collection expressions in C#12: Behind the scenes of collection expressions - Part 1",
      "PublishDate": "2024-06-11T09:00:00+00:00",
      "Summary": "In this post I introduce C#12 collection expressions, discuss the benefits of the unified syntax for refactoring, and show how to use the spread element",
      "Content": "<img src=\"https://andrewlock.net/content/images/2024/collection_expressions_banner.png\" /><nav><p>This is the one post in the series: <a href=\"/series/behind-the-scenes-of-collection-expressions/\">Behind the scenes of collection expressions</a>. </p> <ol class=\"list-none\"><li>Part 1 - Introducing collection expressions in C#12 (this post) </li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-2-exploring-the-generated-code-list-and-fallback-cases/\">Part 2 - Exploring the generated code: List&lt;T&gt; and fallback cases</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-3-arrays-span-of-t-and-immutable-collections/\">Part 3 - Exploring the generated code: T[], Span&lt;T&gt;, and Immutable collections</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-4-the-spread-element/\">Part 4 - Exploring the generated code: the spread element</a></li><li><a href=\"/behind-the-scenes-of-collection-expressions-part-5-adding-support-for-collection-expressions-to-your-own-types/\">Part 5 - Adding support for collection expressions to your own types</a></li></ol></nav><p>This series take an in-depth look at collection expressions, which were introduced with C#12. This series looks primarily at the code that's generated when you use collection expressions in your application, to understand how collection expressions work behind the scenes.</p> <p>In this first post, I provide an introduction to C#12 collection expressions. There's already plenty of good introductions to collection expressions around the internet, including a post <a href=\"https://devblogs.microsoft.com/dotnet/refactor-your-code-with-collection-expressions/\">on the .NET blog</a>, but one more can't hurt!</p> <h2 id=\"classic-collection-initializers\" class=\"heading-with-anchor\"><a href=\"#classic-collection-initializers\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Classic collection initializers</a></h2> <p>We've had \"collection initializers\" in C# since C# 3.0. These use the <code>{}</code> pattern to initialize any <code>IEnumerable</code> implementation that has an <code>Add()</code> method. For example, this creates a new <code>List&lt;int&gt;</code> and initializes it with 5 values:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Behind the scenes, the compiler emits code that looks a bit like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> values <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalues<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Array initialization in C# is special, in that you can initialize them in even more ways than other collections, though they look <em>similar</em> to standard collection initializers:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> values1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> values2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>These work differently to collection initializers; there's no <code>Add()</code> method that's being called here. Instead, the compiler generates the same initialization code that you would if you had to do everything by hand:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">;</span>\n</code></pre> <blockquote> <p>I intentionally didn't use a primitive type like <code>int</code> in the example above. If you create and <code>int[]</code> using an array initializers, the compiler loads the data of the array directly from a constant series of bytes, which is more efficient. We'll look in more detail at this mechanism in subsequent posts.</p> </blockquote> <p>So we've looked at collection initializers for general collections (like <code>List&lt;T&gt;</code>) and arrays, but there's also <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/stackalloc#c-language-specification\"><code>stackalloc</code> expressions</a>, which have become much more useful in the world of <code>Span&lt;T&gt;</code>, as you don't need to use <code>unsafe</code> code:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <blockquote> <p>A <code>stackalloc</code> expression allocates a memory on the stack, in contrast to a standard <code>new int[]</code> which allocates memory on the heap. A stack-allocated memory block created in a method is automatically discarded when the method returns, so it does not add any pressure on the garbage collector. However, use with caution: if you <code>stackalloc</code> too much you'll cause a <code>StackOverflowException</code> and crash your application!</p> </blockquote> <p>Behind the scenes, the compiler turns this <code>stackalloc</code> initializer into some <code>unsafe</code> code such as the following:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">unsafe</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">byte</span><span class=\"token operator\">*</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>num <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nint<span class=\"token punctuation\">)</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nint<span class=\"token punctuation\">)</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>nint<span class=\"token punctuation\">)</span><span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nint<span class=\"token punctuation\">)</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>The code above is creating an array on the stack, and then moving through each element (using some pointer arithmetic), setting each value.</p> <h2 id=\"unifying-syntax-with-collection-expressions\" class=\"heading-with-anchor\"><a href=\"#unifying-syntax-with-collection-expressions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Unifying syntax with collection expressions</a></h2> <p>So we've seen that there's at least three distinct scenarios where we're initializing collections:</p> <ul><li>Arrays</li> <li>Collections like <code>List&lt;T&gt;</code></li> <li><code>ReadOnlySpan&lt;T&gt;</code> with <code>stackalloc</code></li></ul> <p>Each of these requires a <em>slightly</em> different syntax for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// One of several options!</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> hashset <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>That's all a bit messy and annoying. <em>Collection expressions</em>, introduced in C#12, provide a simplified, <em>unified</em>, syntax across all these different collection types. For example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> hashset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The consistency of collection expressions across all the collection types is a real boon, but it's not the <em>only</em> advantage. Collection expressions can give performance benefits (which we'll look at in later posts) as well as additional features compared to collection initializers.</p> <blockquote> <p>To reiterate, collection and array <em>initializers</em> use the \"old\" syntax <code>new [] {}</code>/<code>new () {}</code>, while collection <em>expressions</em> use the \"new\" syntax <code>[ ]</code>.</p> </blockquote> <p>We'll start by looking at an area where collection expressions can be used where collection initializers just can't.</p> <h2 id=\"inferring-interface-types-with-collection-expressions\" class=\"heading-with-anchor\"><a href=\"#inferring-interface-types-with-collection-expressions\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Inferring interface types with collection expressions</a></h2> <p>Imagine you want to create a collection, but all you care about is that it implements <code>IEnumerable&lt;int&gt;</code>. You have to decide for yourself which backing type to use:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>So which should you use? Does it matter? If <em>all</em> you need to do is enumerate the list, then it probably <em>shouldn't</em> matter which type you choose, right? So what's the correct option?</p> <blockquote> <p>It's also somewhat annoyingly verbose, as you have to write <em>both</em> the collection type <em>and</em> the <code>IEnumerable&lt;int&gt;</code> variable type you want.</p> </blockquote> <p>With collection expressions, you can defer the choice to the compiler instead. Instead of explicitly specifying the backing type, you can leave it up to the compiler. And an added bonus is the extra terseness of collection expressions:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ienumerable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ilist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> icollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Behind the scenes, the compiler creates a collection that implements the required interface completely transparently, so you don't need to think about it.</p> <blockquote> <p>Of course you might <em>wonder</em> what the collection is that's created behind the scenes, as I did. Stay tuned for the rest of the series, because the answer to that is \"it depends\"!</p> </blockquote> <p>It's worth pointing out that while the compiler will automatically choose a concrete type for an interface collection, you do need to specify <em>some</em> type. You can't, for example, use <code>var</code>:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ Does not compile, CS9176: There is no target type for the collection expression</span>\n<span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ✅ This is fine</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>The problem is that the way the C# compiler works, it can't infer that the type for <code>values</code> should be <code>IEnumerable&lt;int&gt;</code>, so it throws an error. It's <em>possible</em> that this could change in a future version of C#, but it would likely be solved by, for example, always choosing <code>int[]</code> in this situation, which isn't necessarily optimal, so I wouldn't hold your breath.</p> <h2 id=\"efficient-automatic-stackalloc-for-readonlyspan\" class=\"heading-with-anchor\"><a href=\"#efficient-automatic-stackalloc-for-readonlyspan\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Efficient automatic stackalloc for ReadOnlySpan<t></t></a></h2> <p>It's a similar story for <code>ReadOnlySpan&lt;T&gt;</code> and <code>Span&lt;T&gt;</code> instances too if you are only using collection initializers. If you just need some data in a <code>Span&lt;T&gt;</code> or <code>ReadOnlySpan&lt;T&gt;</code>, then with collection initializers you need to decide where to put that data and then grab the <code>Span&lt;T&gt;</code> from it:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> spans2 <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// stackalloc an array</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> spans3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allocate on the heap</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> spans4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// can't use stackalloc in this case</span>\n</code></pre> <p>It's not a <em>big</em> decision to make in this case, as there's probably only 2 sensible options, but it's still something extra to think about. Plus you can't <code>stackalloc</code> the <code>string[]</code> without jumping through a bunch of <code>InlineArray</code> hoops.</p> <p>With collection expressions you can, again, delegate the decision to the compiler, and it will do the Right Thing™.</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readonlyspans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">&gt;</span></span> spans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Later in the series you'll see that these cases of collection expressions in particular are <em>heavily</em> optimised!</p> <h2 id=\"collection-expressions-make-refactoring-simpler\" class=\"heading-with-anchor\"><a href=\"#collection-expressions-make-refactoring-simpler\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Collection expressions make refactoring simpler</a></h2> <p>The examples I've shown so far have all been assigning collection expressions to variables, but you can use collection expressions directly as method arguments too, so you can do things like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create a method that takes an IEnumerable</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Call the method using collection expressions</span>\n<span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>A nice benefit of this pattern in particular is that if I change the signature of <code>Sum()</code>, I don't need to change the call-site. Contrast that for a moment with if you were using collection initializers:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// if the method takes an array... </span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sum1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Sum1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...you have to use array syntax (one of several syntaxes!)</span>\n\n<span class=\"token comment\">// if the method takes an IEnumerable&lt;T&gt;... </span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sum2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Sum2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...you have to use an explicit type e.g. List&lt;T&gt; or similar</span>\n\n<span class=\"token comment\">// if the method takes a ReadOnlySpan&lt;T&gt;... </span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">Sum3</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> values<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// You can use foreach with IReadOnlySpan&lt;T&gt;</span>\n    <span class=\"token comment\">// but it doesn't implement IEnumerable&lt;T&gt;, so can't</span>\n    <span class=\"token comment\">// use the Linq convenience methods here!</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">value</span> <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        total <span class=\"token operator\">+=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">Sum3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...you have to choose between a standard array, </span>\n<span class=\"token function\">Sum3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">stackalloc</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ... or use a stackalloc'd array (for example)</span>\n</code></pre> <p>If we use collection expressions instead, then we can use the exact same syntax to call all three <code>Sum()</code> implementations:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token function\">Sum1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Sum2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">Sum3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And the compiler will use the most efficient implementation it can to create a collection of the required type.</p> <p>That may seem like a small thing, and to an extent it <em>is</em>, but it's all these little convenience aspects that make collection expressions such a neat feature overall!</p> <h2 id=\"empty-collections\" class=\"heading-with-anchor\"><a href=\"#empty-collections\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Empty collections</a></h2> <p>Another feature of collection expressions is that the compiler explicitly recognizes the <em>empty</em> collection syntax, so instead of writing something like this:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> empty <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// You should generally never do this...</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> empty <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Empty</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ...instead, prefer this!</span>\n</code></pre> <p>you can now use <code>[]</code> to generate an appropriate <em>empty</em> version of the collection:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> empty <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>Collection expressions, again, have two main benefits over explicit initializers:</p> <ul><li>The compiler can choose the most efficient way to create the empty collection, choosing <code>Array.Empty&lt;int&gt;()</code> for example (or equivalent).</li> <li>You can use a consistent syntax for all collection types.</li></ul> <p>The following shows a whole bunch of collection types, and how you can use <code>[]</code> to create an empty version of all of them. The comment for each line shows the code that the compiler generates for the specific type:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Array.Empty&lt;int&gt;()</span>\n\n<span class=\"token class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> hashset <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new HashSet&lt;int&gt;()</span>\n<span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new List&lt;int&gt;()</span>\n\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ienumerable <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Array.Empty&lt;int&gt;()</span>\n<span class=\"token class-name\">ICollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> icollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new List&lt;int&gt;()</span>\n<span class=\"token class-name\">IList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> ilist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new List&lt;int&gt;()</span>\n\n<span class=\"token class-name\">IReadOnlyCollection<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readonlycollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Array.Empty&lt;int&gt;()</span>\n<span class=\"token class-name\">IReadOnlyList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readonlyList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Array.Empty&lt;int&gt;()</span>\n\n<span class=\"token class-name\">Span<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> span <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default(Span&lt;int&gt;)</span>\n<span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> readonlyspan <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// default(ReadOnlySpan&lt;int&gt;)</span>\n\n<span class=\"token class-name\">ImmutableArray<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> immutablearray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ImmutableCollectionsMarshal.AsImmutableArray(Array.Empty&lt;int&gt;())</span>\n<span class=\"token class-name\">ImmutableList<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> immutablelist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ImmutableList.Create(default(ReadOnlySpan&lt;int&gt;));</span>\n</code></pre> <p>As you can see, the compiler is as efficient as it can be; if the type is mutable, such as a <code>HashSet&lt;T&gt;</code> or <code>List&lt;T&gt;</code> then it has no option than to create a new instance of the type, but if it can get away with using a non-allocating version, such as <code>Array.Empty&lt;int&gt;()</code>, then it will!</p> <h2 id=\"building-collections-from-others-with-the-spread-element\" class=\"heading-with-anchor\"><a href=\"#building-collections-from-others-with-the-spread-element\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Building collections from others with the spread element</a></h2> <p>So far we've seen two benefits of collection expressions:</p> <ul><li>Consistent syntax</li> <li>Efficient compiler-generated implementations</li></ul> <p>The other <em>big</em> feature in collection expressions is <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/collection-expressions#spread-element\">the <em>spread element</em>, <code>..</code></a>. This gives you the ability to more easily create collections from <em>other</em> collection instances.</p> <blockquote> <p>The spread functionality (sometimes also called \"splat\") has been in other languages like Python, JavaScript, and Ruby for a long time, so it's nice to see it arrive in C# finally.</p> </blockquote> <p>As a concrete example, lets say you have two <code>IEnumerable&lt;T&gt;</code> collections, and you want to concatenate them as an array. That's pretty easy to do with LINQ, as there's extension methods for doing exactly that:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ConcatAsArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> first<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Great, but what if you now need want to work with <code>ReadOnlySpan&lt;T&gt;</code> instead of <code>IEnumerable&lt;T&gt;</code>? Unfortunately, as we discussed before, <code>ReadOnlySpan&lt;T&gt;</code> doesn't implement <code>IEnumerable&lt;T&gt;</code>, so we might do something like this instead:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ConcatAsArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> second<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">+</span> second<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">AddRange</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre> <p>Which isn't <em>terrible</em>, but it's still annoying to have to think about for each different collection type. With collection expressions we get a nice short cut, that can be used with all supported collection types by using the spread operator. Both of the above overloads could be implemented in the same way:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ConcatAsArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> second<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>first<span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token return-type class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token function\">ConcatAsArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> first<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReadOnlySpan<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> second<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>first<span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre> <p>And again, the consistency of collection expressions means that if you change the parameters <em>or</em> the return type of <code>ConcatAsArray()</code>, you don't need to change the collection expression at all, it just works!</p> <p>The <code>..</code> element means \"write all the values from the collection\", so to give another example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">&gt;</span></span> oddValues <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>IsOddInteger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 3</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> evenValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>IsEvenInteger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2, 4 in array (using spread)</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> allValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token range operator\">..</span>oddValues<span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>evenValues<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1, 3, 2, 4</span>\n</code></pre> <p>The code above uses the spread element several times, but in each case it means \"write all the elements of the collection\". So in the final step, <code>allValues</code> contains all the elements from <code>oddValues</code> followed by all the values from <code>evenValues</code>.</p> <p>You can also mix single values and spread collections together in your collection expression, for example:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> myValues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 1, 2, 3, 4, 5, 6</span>\n</code></pre> <p>and the final result is the combination as though you had iterated through <code>arr</code> and added each value.</p> <p>Note that the spread element <code>..</code> is <em>different</em> to <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/ranges#systemrange\">the <em>range operator</em></a> (e.g. <code>..</code> in <code>1..3</code> or <code>2..^</code>) which is used to <em>index</em> into an array. However, you <em>can</em> combine them, using a <em>range</em> to select a subset of elements, and then <em>spreading</em> them into a collection expression:</p> <pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> primes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> some <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token range operator\">..</span>primes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token range operator\">..</span><span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, 2, 3, 5, 7, 9</span>\n</code></pre> <p>This code takes the 1st to N-1th element of the <code>primes</code> array (i.e. <code>2, 3, 4, 5, 7, 9</code>) using the <code>1..^1</code> range operator, and then uses spread <code>..</code> in the collection expression.</p> <p>Collection expressions add a nice symmetry to creating collections (which can be particularly useful when refactoring from one collection to another), and they make combining collections much simpler with the spread element. But collection expressions aren't <em>just</em> about syntax. An important part is that collection expressions give the option for the compiler to optimize the code it generates. In the next post we'll take a look at how that works.</p> <h2 id=\"summary\" class=\"heading-with-anchor\"><a href=\"#summary\" class=\"relative text-zinc-800 dark:text-white no-underline hover:underline\">Summary</a></h2> <p>In this post I provided an introduction to collection expressions, contrasting them with collection initializers, array initializers and <code>stackalloc</code> initialization. I showed how having a single unified collection expression syntax makes refactoring your code easier and allows the compiler to generate optimised, specialised, code. Finally I showed how the spread element <code>..</code> can be used in collection expressions to more easily build new collections from existing collections.</p> <p>In the next post we look behind the scenes at the code the compiler actually generates when you use collection expressions in your code.</p> ",
      "Language": null,
      "Link": "https://andrewlock.net/behind-the-scenes-of-collection-expressions-part-1-introducing-collection-expressions-in-csharp12/"
    }
  ]
}
