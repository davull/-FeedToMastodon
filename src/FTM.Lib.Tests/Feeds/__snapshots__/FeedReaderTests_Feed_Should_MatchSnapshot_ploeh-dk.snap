{
  "Id": "https://blog.ploeh.dk",
  "Website": "https://blog.ploeh.dk",
  "Title": "ploeh blog",
  "LastUpdatedTime": "2025-01-01T10:55:38+01:00",
  "Description": "danish software design",
  "Language": "en-us",
  "Items": [
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/12/30/pytest-is-fast",
      "Title": "Pytest is fast",
      "PublishDate": "2024-12-30T16:01:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>One major attraction of Python. A recent realization.</em>\n    </p>\n    <p>\n        Ever since I became aware of the distinction between statically and dynamically typed languages, I've struggled to understand the attraction of dynamically typed languages. As regular readers may have noticed, this is <a href=\"/2021/08/09/am-i-stuck-in-a-local-maximum\">a bias that doesn't sit well with me</a>. Clearly, there are advantages to dynamic languages that I fail to notice. Is it <a href=\"/2024/12/09/implementation-and-usage-mindsets\">a question of mindset</a>? Or is it a combination of several small advantages?\n    </p>\n    <p>\n        In this article, I'll discuss another potential benefit of at least one dynamically typed language, <a href=\"https://www.python.org/\">Python</a>.\n    </p>\n    <h3 id=\"c9d1927a5f6e4df0bdb1e71766f37d1f\">\n        Fast feedback <a href=\"#c9d1927a5f6e4df0bdb1e71766f37d1f\">#</a>\n    </h3>\n    <p>\n        Rapid feedback is a cornerstone of <a href=\"/ref/modern-software-engineering\">modern software engineering</a>. I've always considered the <a href=\"/2011/04/29/Feedbackmechanismsandtradeoffs\">feedback from the compiler an important mechanism</a>, but I've recently begun to realize that it comes with a price. While a good type system keeps you honest, compilation takes time, too.\n    </p>\n    <p>\n        Since I've been so entrenched in the camp of statically typed languages (C#, <a href=\"https://fsharp.org/\">F#</a>, <a href=\"https://www.haskell.org/\">Haskell</a>), I've tended to regard compilation as a mandatory step. And since the compiler needs to run anyway, you might as well take advantage of it. Use the type system to <a href=\"https://blog.janestreet.com/effective-ml-video/\">make illegal states unrepresentable</a>, and all that.\n    </p>\n    <p>\n        Even so, I've noticed that compilation time isn't a fixed size. This observation surely borders on the banal, but with sufficient cognitive bias, it can, apparently, take years to come to even such a trivial conclusion. After initial years with various programming languages, my formative years as a programmer were spent with C#. As it turns out, the C# compiler is relatively fast.\n    </p>\n    <p>\n        This is probably a combination of factors. Since C# is a one of the most popular languages, it has a big and skilled engineering team, and it's my impression that much effort goes into making it as fast and efficient as possible.\n    </p>\n    <p>\n        I also speculate that, since the C# type system isn't as powerful as F#'s or Haskell's, there's simply work that it can't do. When you can't expression certain constraints or relationships with the type system, the compiler can't check them, either.\n    </p>\n    <p>\n        That said, the C# compiler seems to have become slower over the years. This could be a consequence of all the extra language features that accumulate.\n    </p>\n    <p>\n        The F# compiler, in comparison, has always taken longer than the C# compiler. Again, this may be due to a combination of a smaller engineering team and that it actually <em>can</em> check more things at compile time, since the type system is more expressive.\n    </p>\n    <p>\n        This, at least, seems to fit with the observation that the Haskell compiler is even slower than F#. The language is incredibly expressive. There's a lot of constraints and relationships that you can model with the type system. Clearly, the compiler has to perform extra work to check that your types line up.\n    </p>\n    <p>\n        You're often left with the impression that <em>if it compiles, it works</em>. The drawback is that getting Haskell code to compile may be a non-trivial undertaking.\n    </p>\n    <p>\n        One thing is that you'll have to wait for the compiler. Another is that if you practice test-driven development (TDD), you'll have to compile the test code, too. Only once the tests are compiled can you run them. And <a href=\"/2012/05/24/TDDtestsuitesshouldrunin10secondsorless\">TDD test suites should run in 10 seconds or less</a>.\n    </p>\n    <h3 id=\"c156a0786a0940a29d37d9982881d5d5\">\n        Skipping compilation with pytest <a href=\"#c156a0786a0940a29d37d9982881d5d5\">#</a>\n    </h3>\n    <p>\n        A few years ago I had to learn a bit of Python, so I decided to try <a href=\"https://adventofcode.com/2022\">Advent of Code 2022</a> in Python. As the puzzles got harder, I added unit tests with <a href=\"https://pytest.org/\">pytest</a>. When I ran them, I was taken aback at how fast they ran.\n    </p>\n    <p>\n        There's no compilation step, so the test suite runs immediately. Obviously, if you've made a mistake that a compiler would have caught, the test fails, but if the code makes sense to the interpreter, it just runs.\n    </p>\n    <p>\n        For various reasons, I ran out of steam, as one does with Advent of Code, but I managed to write a good little test suite. Until day 17, it ran in 0.15-0.20 seconds on my little laptop. To be honest, though, once I added tests for day 17, feedback time jumped to just under two seconds. This is clearly because I'd written some inefficient code for my System Under Test.\n    </p>\n    <p>\n        I can't really blame a test framework for being slow, when it's really my own code that slows it down.\n    </p>\n    <p>\n        A counter-argument is that a compiled language is much faster than an interpreted one. Thus, one might think that a faster language would counter poor implementations. Not so.\n    </p>\n    <h3 id=\"c97e1f3c539a4ef78d2a07f25e9c6b0c\">\n        TDD with Haskell <a href=\"#c97e1f3c539a4ef78d2a07f25e9c6b0c\">#</a>\n    </h3>\n    <p>\n        As I've already outlined, the Haskell compiler takes more time than C#, and obviously it takes more time than a language that isn't compiled at all. On the other hand, Haskell compiles to native machine code. My experience with it is that once you've compiled your program, it's <em>fast</em>.\n    </p>\n    <p>\n        In order to compare the two styles, I decided to record compilation and test times while doing <a href=\"https://adventofcode.com/\">Advent of Code 2024</a> in Haskell. I set up a Haskell code base with <a href=\"https://haskellstack.org/\">Stack</a> and <a href=\"https://hackage.haskell.org/package/HUnit\">HUnit</a>, as <a href=\"/2018/05/07/inlined-hunit-test-lists\">I usually do</a>. As I worked through the puzzles, I'd be adding and running tests. Every time I recorded the time it took, using the <a href=\"https://en.wikipedia.org/wiki/Time_(Unix)\">time</a> command to measure the time it took for <code>stack test</code> to run.\n    </p>\n    <p>\n        I've plotted the observations in this chart:\n    </p>\n    <p>\n        <img src=\"/content/binary/haskell-compile-and-test-times.png\" alt=\"Scatter plot of more than a thousand compile-and-test times, measured in seconds.\">\n    </p>\n    <p>\n        The chart shows more than a thousand observations, with the first to the left, and the latest to the right. The times recorded are the entire time it took from I started a test run until I had an answer. For this, I used the time command's <em>real</em> time measurement, rather than <em>user</em> or <em>sys</em> time. What matters is the feedback time; not the CPU time.\n    </p>\n    <p>\n        Each measurement is in seconds. The dashed orange line indicates the linear trend.\n    </p>\n    <p>\n        It's not the first time I've written Haskell code, so I knew what to expect. While you get the occasional fast turnaround time, it easily takes around ten seconds to compile even an empty code base. It seems that there's a constant overhead of that size. While there's an upward trend line as I added more and more code, and more tests, actually running the tests takes almost no time. The initial 'average' feedback time was around eight seconds, and 1100 observations later, the trends sits around 11.5 seconds. At this time, I had more than 200 test cases.\n    </p>\n    <p>\n        You may also notice that the observations vary quite a bit. You occasionally see sub-second times, but also turnaround times over thirty seconds. There's an explanation for both.\n    </p>\n    <p>\n        The sub-second times usually happen if I run the test suite twice without changing any code. In that case, the Haskell Stack correctly skips recompiling the code and instead just reruns the tests. This only highlights that I'm not waiting for the tests to execute. The tests are fast. It's the compiler that causes over 90% of the delay.\n    </p>\n    <p>\n        (Why would I rerun a test suite without changing any code? This mostly happens when I take a break from programming, or if I get distracted by another task. In such cases, when I return to the code, I usually run the test suite in order to remind myself of the state in which I left it. Sometimes, it turns out, I'd left the code in a state were the last thing I did was to run all tests.)\n    </p>\n    <p>\n        The other extremes have a different explanation.\n    </p>\n    <h3 id=\"8fa24383e06349718fca6cb70f95c98f\">\n        IDE woes <a href=\"#8fa24383e06349718fca6cb70f95c98f\">#</a>\n    </h3>\n    <p>\n        Why do I have to suffer through those turnaround times over twenty seconds? A few times over thirty?\n    </p>\n    <p>\n        The short answer is that these represent complete rebuilds. Most of these are caused by problems with the <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a>. For Haskell development, I use <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=haskell.haskell\">Haskell extension</a>.\n    </p>\n    <p>\n        Perhaps it's only my setup that's messed up, but whenever I change a function in the System Under Test (SUT), I can. not. make. VS Code pick up that the API changed. Even if I correct my tests so that they still compile and run successfully from the command line, VS Code will keep insisting that the code is wrong.\n    </p>\n    <p>\n        This is, of course, annoying. One of the major selling points of statically type languages is that a good IDE can tell you if you made mistakes. Well, if it operates on an outdated view of what the SUT looks like, this no longer works.\n    </p>\n    <p>\n        I've tried restarting the Haskell Language Server, but that doesn't work. The only thing that works, as far as I've been able to discover, is to close VS Code, delete <code>.stack-work</code>, recompile, and reopen VS Code. Yes, that takes a minute or two, so not something I like doing too often.\n    </p>\n    <p>\n        Deleting <code>.stack-work</code> does trigger a full rebuild, which is why we see those long build times.\n    </p>\n    <h3 id=\"81ef3b41740145af98094e9335a130eb\">\n        Striking a good balance <a href=\"#81ef3b41740145af98094e9335a130eb\">#</a>\n    </h3>\n    <p>\n        What bothers me about dynamic languages is that I find discoverability and encapsulation so hard. I can't just look at the type of an operation and deduce what inputs it might take, or what the output might look like.\n    </p>\n    <p>\n        To be honest, if you give me a plain text file with F# or Haskell, I can't do that either. A static type system doesn't magically surface that kind of information. Instead, you may rely on an IDE to provide such information at your fingertips. The Haskell extension, for example, gives you a little automatic type annotation above your functions, as discussed in the article <a href=\"/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default\">Pendulum swing: no Haskell type annotation by default</a>, and shown in a figure reprinted here for your convenience:\n    </p>\n    <p>\n        <img src=\"/content/binary/haskell-code-with-inferred-type-displayed-by-vs-code.png\" alt=\"Screen shot of a Haskell function in Visual Studio Code with the function's type automatically displayed above it by the Haskell extension.\">\n    </p>\n    <p>\n        If this is to work well, this information must be immediate and responsive. On my system it isn't.\n    </p>\n    <p>\n        It may, again, be that there's some problem with my particular tool chain setup. Or perhaps a four-year-old Lenovo X1 Carbon is just too puny a machine to effectively run such a tool.\n    </p>\n    <p>\n        On the other hand, I don't have similar issues with C# in Visual Studio (not VS Code). When I make changes, the IDE quickly responds and tells me if I've made a mistake. To be honest, even here, I feel that <a href=\"/2023/07/24/is-software-getting-worse\">it was faster and more responsive a decade ago</a>, but compared to Haskell programming, the feedback I get with C# is close to immediate.\n    </p>\n    <p>\n        My experience with F# is somewhere in between. Visual Studio is quicker to pick up changes in F# code than VS Code is to reflect changes in Haskell, but it's not as fast as C#.\n    </p>\n    <p>\n        With Python, what little IDE integration is available is usually not trustworthy. Essentially, when suggesting callable operations, the IDE is mostly guessing, based on what it's already seen.\n    </p>\n    <p>\n        But, good Lord! The tests run fast.\n    </p>\n    <h3 id=\"4ea6dd100fbf4cc1b9c2941520a051bf\">\n        Conclusion <a href=\"#4ea6dd100fbf4cc1b9c2941520a051bf\">#</a>\n    </h3>\n    <p>\n        My recent experiences with both Haskell and Python programming is giving me a better understanding of the balances and trade-offs involved with picking a language. While I still favour statically typed languages, I'm beginning to see some attractive qualities on the other side.\n    </p>\n    <p>\n        Particularly, if you buy the argument that TDD suites should run in 10 seconds or less, this effectively means that I can't do TDD in Haskell. Not with the hardware I'm running. Python, on the other hand, seems eminently well-suited for TDD.\n    </p>\n    <p>\n        That doesn't sit too well with me, but on the other hand, I'm glad. I've learned about a benefit of a dynamically typed language. While you may consider all of this ordinary and trite, it feels like a small breakthrough to me. I've been trying hard to see past my own limitations, and it finally feels as though I've found a few chinks in the armour of my biases.\n    </p>\n    <p>\n        I'll keep pushing those envelopes to see what else I may learn.\n    </p>\n</div>\n\n<div id=\"comments\">\n    <hr>\n    <h2 id=\"comments-header\">\n        Comments\n    </h2>\n\n    <div class=\"comment\" id=\"b760e53201c74532a33f1ae4a10407f9\">\n        <div class=\"comment-author\">Daniel Tartaglia <a href=\"#b760e53201c74532a33f1ae4a10407f9\">#</a></div>\n        <div class=\"commentt-content\">\n            <p>An interesting insight, but if you consider that the compiler is effectively an additional test suit that is verifying the types are being used correctly, that extra compilation time is really just a whole suite of tests that you didn't have to write. I can't help but wonder how long it would take to manually implement all the tests that would be required to satisfy those checks in Python, and how much slower the Python test suite would then be.</p>\n            <p>Like you, I have a strong bias for typesafe languages (or at least moderately typesafe ones). The way I've always explained it is as follows: Developers tend to work faster when writing with dynamic typed languages because they don't have to explain as much to a compiler. This literally means less code to write. However, because the developer <i>hasen't</i> fully explained themself, any follow-on developer does not have as much context to work with.</p>\n            <p>After all, whether the language requires it or not, the developers need to define and consider types. The only question is, do they have to <i>write it down</i></p>\n        </div>\n        <div class=\"comment-date\">2025-01-01 01:26 UTC</div>\n    </div>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/12/30/pytest-is-fast/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/12/23/implementing-rod-cutting",
      "Title": "Implementing rod-cutting",
      "PublishDate": "2024-12-23T08:53:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>From pseudocode to implementation in three languages.</em>\n    </p>\n    <p>\n        This article picks up where <a href=\"/2024/12/09/implementation-and-usage-mindsets\">Implementation and usage mindsets</a> left off, examining how <a href=\"https://www.infoq.com/presentations/Simple-Made-Easy/\">easy</a> it is to implement an algorithm in three different programming languages.\n    </p>\n    <p>\n        As an example, I'll use the bottom-up rod-cutting algorithm from <a href=\"/ref/clrs\">Introduction to Algorithms</a>.\n    </p>\n    <h3 id=\"0a09280df48e48c7b5257346dc98eab3\">\n        Rod-cutting <a href=\"#0a09280df48e48c7b5257346dc98eab3\">#</a>\n    </h3>\n    <p>\n        The problem is simple:\n    </p>\n    <blockquote>\n        <p>\n            \"Serling Enterprises buys long steel rods and cuts them into shorter rods, which it then sells. Each cut is free. The management of Serling Enterprises wants to know the best way to cut up the rods.\"\n        </p>\n        <footer><cite><a href=\"/ref/clrs\">Introduction to Algorithms. Fourth edition</a>, ch. 14.1</cite></footer>\n    </blockquote>\n    <p>\n        You're given an array of prices, or rather revenues, that each size is worth. The example from the book is given as a table:\n    </p>\n    <table>\n        <tbody>\n            <tr>\n                <td>length <em>i</em></td>\n                <td>1</td>\n                <td>2</td>\n                <td>3</td>\n                <td>4</td>\n                <td>5</td>\n                <td>6</td>\n                <td>7</td>\n                <td>8</td>\n                <td>9</td>\n                <td>10</td>\n            </tr>\n            <tr>\n                <td>price <em>p<sub>i</sub></em></td>\n                <td>1</td>\n                <td>5</td>\n                <td>8</td>\n                <td>9</td>\n                <td>10</td>\n                <td>17</td>\n                <td>17</td>\n                <td>20</td>\n                <td>24</td>\n                <td>30</td>\n            </tr>\n        </tbody>\n    </table>\n    <p>\n        Notice that while this implies an array like <code>[1, 5, 8, 9, 10, 17, 17, 20, 24, 30]</code>, the array is understood to be one-indexed, as is the most common case in the book. Most languages, including all three languages in this article, have zero-indexed arrays, but it turns out that we can get around the issue by adding a leading zero to the array: <code>[0, 1, 5, 8, 9, 10, 17, 17, 20, 24, 30]</code>.\n    </p>\n    <p>\n        Thus, given that price array, the best you can do with a rod of length <em>10</em> is to leave it uncut, yielding a revenue of <em>30</em>.\n    </p>\n    <p>\n        <img src=\"/content/binary/rod-size-10-no-cut.png\" alt=\"A rod divided into 10 segments, left uncut, with the number 30 above it.\" width=\"400\">\n    </p>\n    <p>\n        On the other hand, if you have a rod of length <em>7</em>, you can cut it into two rods of lengths <em>1</em> and <em>6</em>.\n    </p>\n    <p>\n        <img src=\"/content/binary/rod-size-7-cut-into-2.png\" alt=\"Two rods, one of a single segment, and one made from six segments. Above the single segment is the number 1, and above the six segments is the number 17.\" width=\"320\">\n    </p>\n    <p>\n        Another solution for a rod of length <em>7</em> is to cut it into three rods of sizes <em>2</em>, <em>2</em>, and <em>3</em>. Both solutions yield a total revenue of <em>18</em>. Thus, while more than one optimal solution exists, the algorithm given here only identifies one of them.\n    </p>\n    <p>\n        <pre>Extended-Bottom-Up-Cut-Rod(p, n)\n 1 let r[0:n] and s[1:n] be new arrays\n 2 r[0] = 0\n 3 for j = 1 to n                // for increasing rod length j\n 4     q = -∞\n 5     for i = 1 to j            // i is the position of the first cut\n 6         if q &lt; p[i] + r[j - i]\n 7             q = p[i] + r[j - i]\n 8             s[j] = i         // best cut location so far for length j\n 9     r[j] = q                 // remember the solution value for length j\n10 return r and s</pre>\n    </p>\n    <p>\n        Which programming language is this? It's no particular language, but rather pseudocode.\n    </p>\n    <p>\n        The reason that the function is called <code>Extended-Bottom-Up-Cut-Rod</code> is that the book pedagogically goes through a few other algorithms before arriving at this one. Going forward, I don't intend to keep that rather verbose name, but instead just call the function <code>cut_rod</code>, <code>cutRod</code>, or <code>Rod.cut</code>.\n    </p>\n    <p>\n        The <code>p</code> parameter is a one-indexed price (or revenue) array, as explained above, and <code>n</code> is a rod size (e.g. <code>10</code> or <code>7</code>, reflecting the above examples).\n    </p>\n    <p>\n        Given the above price array and <code>n = 10</code>, the algorithm returns two arrays, <code>r</code> for maximum possible revenue for a given cut, and <code>s</code> for the size of the maximizing cut.\n    </p>\n    <table>\n        <thead>\n            <tr>\n                <td><em>i</em></td>\n                <td>0</td>\n                <td>1</td>\n                <td>2</td>\n                <td>3</td>\n                <td>4</td>\n                <td>5</td>\n                <td>6</td>\n                <td>7</td>\n                <td>8</td>\n                <td>9</td>\n                <td>10</td>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><em>r</em>[<em>i</em>]</td>\n                <td>0</td>\n                <td>1</td>\n                <td>5</td>\n                <td>8</td>\n                <td>10</td>\n                <td>13</td>\n                <td>17</td>\n                <td>18</td>\n                <td>22</td>\n                <td>25</td>\n                <td>30</td>\n            </tr>\n            <tr>\n                <td><em>s</em>[<em>i</em>]</td>\n                <td></td>\n                <td>1</td>\n                <td>2</td>\n                <td>3</td>\n                <td>2</td>\n                <td>2</td>\n                <td>6</td>\n                <td>1</td>\n                <td>2</td>\n                <td>3</td>\n                <td>10</td>\n            </tr>\n        </tbody>\n    </table>\n    <p>\n        Such output doesn't really give a <em>solution</em>, but rather the raw data to find a solution. For example, for <code>n = 10</code> (= <em>i</em>), you consult the table for (one-indexed) index <em>10</em>, and see that you can get the revenue <em>30</em> from making a cut at position <em>10</em> (which effectively means no cut). For <code>n = 7</code>, you consult the table for index 7 and observe that you can get the total revenue <em>18</em> by making a cut at position <em>1</em>. This leaves you with two rods, and you again consult the table. For <code>n = 1</code>, you can get the revenue <em>1</em> by making a cut at position <em>1</em>; i.e. no further cut. For <code>n = 7 - 1 = 6</code> you consult the table and observe that you can get the revenue <em>17</em> by making a cut at position <em>6</em>, again indicating that no further cut is necessary.\n    </p>\n    <p>\n        Another procedure prints the solution, using the above process:\n    </p>\n    <p>\n        <pre>Print-Cut-Rod-Solution(p, n)\n 1 (r, s) = Extended-Bottom-Up-Cut-Rod(p, n)\n 2 while n &gt; 0\n 3     print s[n]    // cut location for length n\n 4     n = n - s[n]  // length of the remainder of the rod</pre>\n    </p>\n    <p>\n        Again, the procedure is given as pseudocode.\n    </p>\n    <p>\n        How easy is it translate this algorithm into code in a real programming language? Not surprisingly, this depends on the language.\n    </p>\n    <h3 id=\"36447b3aa2a14becbb895fd70fdd9d4a\">\n        Translation to Python <a href=\"#36447b3aa2a14becbb895fd70fdd9d4a\">#</a>\n    </h3>\n    <p>\n        The hypothesis of the <a href=\"/2024/12/09/implementation-and-usage-mindsets\">previous</a> article is that dynamically typed languages may be more suited for implementation tasks. The dynamically typed language that I know best is <a href=\"https://www.python.org/\">Python</a>, so let's try that.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">def</span>&nbsp;<span style=\"color:#2b91af;\">cut_rod</span>(p,&nbsp;n):\n&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;[0]&nbsp;*&nbsp;(n&nbsp;+&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;[0]&nbsp;*&nbsp;(n&nbsp;+&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;r[0]&nbsp;=&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;j&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:blue;\">range</span>(1,&nbsp;n&nbsp;+&nbsp;1):\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;<span style=\"color:#2b91af;\">float</span>(<span style=\"color:#a31515;\">&#39;-inf&#39;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;i&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:blue;\">range</span>(1,&nbsp;j&nbsp;+&nbsp;1):\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;q&nbsp;&lt;&nbsp;p[i]&nbsp;+&nbsp;r[j&nbsp;-&nbsp;i]:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;p[i]&nbsp;+&nbsp;r[j&nbsp;-&nbsp;i]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[j]&nbsp;=&nbsp;i\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r[j]&nbsp;=&nbsp;q\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;r,&nbsp;s</pre>\n    </p>\n    <p>\n        That does, indeed, turn out to be straightforward. I had to figure out the syntax for initializing arrays, and how to represent negative infinity, but a combination of <a href=\"https://github.com/features/copilot\">GitHub Copilot</a> and a few web searches quickly cleared that up.\n    </p>\n    <p>\n        The same is true for the <code>Print-Cut-Rod-Solution</code> procedure.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">def</span>&nbsp;<span style=\"color:#2b91af;\">print_cut_rod_solution</span>(p,&nbsp;n):\n&nbsp;&nbsp;&nbsp;&nbsp;r,&nbsp;s&nbsp;=&nbsp;cut_rod(p,&nbsp;n)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">while</span>&nbsp;n&nbsp;&gt;&nbsp;0:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">print</span>(s[n])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;=&nbsp;n&nbsp;-&nbsp;s[n]</pre>\n    </p>\n    <p>\n        Apart from minor syntactical differences, the pseudocode translates directly to Python.\n    </p>\n    <p>\n        So far, the hypothesis seems to hold. This particular dynamically typed language, at least, easily implements that particular algorithm. If we must speculate about underlying reasons, we may argue that a dynamically typed language is <a href=\"/2019/12/16/zone-of-ceremony\">low on ceremony</a>. You don't have to get side-tracked by declaring types of parameters, variables, or return values.\n    </p>\n    <p>\n        That, at least, is a common complaint about statically typed languages that I hear when I discuss with lovers of dynamically typed languages.\n    </p>\n    <p>\n        Let us, then, try to implement the rod-cutting algorithm in a statically typed language.\n    </p>\n    <h3 id=\"a55c4ff33cf247f0b57ae58aa6795343\">\n        Translation to Java <a href=\"#a55c4ff33cf247f0b57ae58aa6795343\">#</a>\n    </h3>\n    <p>\n        Together with other <a href=\"https://en.wikipedia.org/wiki/C_(programming_language)\">C</a>-based languages, <a href=\"https://www.java.com/\">Java</a> is infamous for requiring a high amount of ceremony to get anything done. How easy is it to translate the rod-cutting pseudocode to Java? Not surprisingly, it turns out that one has to jump through a few more hoops.\n    </p>\n    <p>\n        First, of course, one has to set up a code base and choose a build system. I'm not well-versed in Java development, but here I (more or less) arbitrarily chose <a href=\"https://gradle.org/\">gradle</a>. When you're new to an ecosystem, this can be a significant barrier, but I know from decades of C# programming that tooling alleviates much of that pain. Still, a single <code>.py</code> file this isn't.\n    </p>\n    <p>\n        Apart from that, the biggest hurdle turned out to be that, as far as I can tell, Java doesn't have native tuple support. Thus, in order to return two arrays, I would have to either pick a reusable package that implements tuples, or define a custom class for that purpose. Object-oriented programmers often argue that tuples represent poor design, since a tuple doesn't really communicate the role or intent of each element. Given that the rod-cutting algorithm returns two integer arrays, I'd be inclined to agree. You can't even tell them apart based on their types. For that reason, I chose to define a class to hold the result of the algorithm.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">RodCuttingSolution</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;revenues;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;sizes;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">RodCuttingSolution</span>(<span style=\"color:blue;\">int</span>[]&nbsp;revenues,&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;sizes)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.revenues&nbsp;=&nbsp;revenues;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.sizes&nbsp;=&nbsp;sizes;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;<span style=\"color:#2b91af;\">getRevenues</span>()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;revenues;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;<span style=\"color:#2b91af;\">getSizes</span>()&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;sizes;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        Armed with this return type, the rest of the translation went smoothly.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">RodCuttingSolution</span>&nbsp;<span style=\"color:#2b91af;\">cutRod</span>(<span style=\"color:blue;\">int</span>[]&nbsp;p,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;r&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[n&nbsp;+&nbsp;1];\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;s&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[n&nbsp;+&nbsp;1];\n&nbsp;&nbsp;&nbsp;&nbsp;r[0]&nbsp;=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;(<span style=\"color:blue;\">int</span>&nbsp;j&nbsp;=&nbsp;1;&nbsp;j&nbsp;&lt;=&nbsp;n;&nbsp;j++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;q&nbsp;=&nbsp;<span style=\"color:blue;\">Integer</span>.MIN_VALUE;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;(<span style=\"color:blue;\">int</span>&nbsp;i&nbsp;=&nbsp;1;&nbsp;i&nbsp;&lt;=&nbsp;j;&nbsp;i++)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;(q&nbsp;&lt;&nbsp;p[i]&nbsp;+&nbsp;r[j&nbsp;-&nbsp;i])&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&nbsp;p[i]&nbsp;+&nbsp;r[j&nbsp;-&nbsp;i];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s[j]&nbsp;=&nbsp;i;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r[j]&nbsp;=&nbsp;q;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">RodCuttingSolution</span>(r,&nbsp;s);\n}</pre>\n    </p>\n    <p>\n        Granted, there's a bit more ceremony involved compared to the Python code, since one must declare the types of both input parameters and method return type. You also have to declare the type of the arrays when initializing them, and you could argue that the <code>for</code> loop syntax is more complicated than Python's <code>for ... in range ...</code> syntax. One may also complain that all the brackets and parentheses makes it harder to read the code.\n    </p>\n    <p>\n        While I'm used to such C-like code, I'm not immune to such criticism. I actually do find the Python code more readable.\n    </p>\n    <p>\n        Translating the <code>Print-Cut-Rod-Solution</code> pseudocode is a bit easier:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#2b91af;\">printCutRodSolution</span>(<span style=\"color:blue;\">int</span>[]&nbsp;p,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;cutRod(p,&nbsp;n);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">while</span>&nbsp;(n&nbsp;&gt;&nbsp;0)&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">System</span>.out.println(result.getSizes()[n]);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;=&nbsp;n&nbsp;-&nbsp;result.getSizes()[n];\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The overall structure of the code remains intact, but again we're burdened with extra ceremony. We have to declare input and output types, and call that awkward <code>getSizes</code> method to retrieve the array of cut sizes.\n    </p>\n    <p>\n        It's possible that my Java isn't perfectly <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a>. After all, although I've read many books with Java examples over the years, I rarely write Java code. Additionally, you may argue that <code>static</code> methods exhibit a code smell like <a href=\"https://wiki.c2.com/?FeatureEnvySmell\">Feature Envy</a>. I might agree, but the purpose of the current example is to examine how easy or difficult it is to implement a particular algorithm in various languages. Now that we have an implementation in Java, we might wish to refactor to a more object-oriented design, but that's outside the scope of this article.\n    </p>\n    <p>\n        Given that the rod-cutting algorithm isn't the most complex algorithm that exists, we may jump to the conclusion that Java isn't <em>that bad</em> compared to Python. Consider, however, how the extra ceremony on display here impacts your work if you have to implement a larger algorithm, or if you need to iterate to find an algorithm on your own.\n    </p>\n    <p>\n        To be clear, C# would require a similar amount of ceremony, and I don't even want to think about doing this in C.\n    </p>\n    <p>\n        All that said, it'd be irresponsible to extrapolate from only a few examples. You'd need both more languages and more problems before it even seems reasonable to draw any conclusions. I don't, however, intend the present example to constitute a full argument. Rather, it's an illustration of an idea that I haven't pulled out of thin air.\n    </p>\n    <p>\n        One of the points of <a href=\"/2019/12/16/zone-of-ceremony\">Zone of Ceremony</a> is that the degree of awkwardness isn't necessarily correlated to whether types are dynamically or statically defined. While I'm sure that I miss lots of points made by 'dynamists', this is a point that I often feel is missed by that camp. One language that exemplifies that 'beyond-ceremony' zone is <a href=\"https://fsharp.org/\">F#</a>.\n    </p>\n    <h3 id=\"0bb95c0e7967419680fe3e6fcc9aed41\">\n        Translation to F# <a href=\"#0bb95c0e7967419680fe3e6fcc9aed41\">#</a>\n    </h3>\n    <p>\n        If I'm right, we should be able to translate the rod-cutting pseudocode to F# with approximately the same amount of trouble than when translating to Python. How do we fare?\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">cut</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">p</span>&nbsp;:&nbsp;_&nbsp;<span style=\"color:#2b91af;\">array</span>)&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Array</span>.<span style=\"color:#74531f;\">zeroCreate</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;+&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Array</span>.<span style=\"color:#74531f;\">zeroCreate</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;+&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>[0]&nbsp;<span style=\"color:blue;\">&lt;-</span>&nbsp;0\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">j</span>&nbsp;=&nbsp;1&nbsp;<span style=\"color:blue;\">to</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">mutable</span>&nbsp;<span style=\"color:#a08000;\">q</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Int32</span>.MinValue\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">for</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&nbsp;1&nbsp;<span style=\"color:blue;\">to</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">j</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:#a08000;\">q</span>&nbsp;&lt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>[<span style=\"font-weight:bold;color:#1f377f;\">i</span>]&nbsp;+&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>[<span style=\"font-weight:bold;color:#1f377f;\">j</span>&nbsp;-&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>]&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a08000;\">q</span>&nbsp;<span style=\"color:blue;\">&lt;-</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>[<span style=\"font-weight:bold;color:#1f377f;\">i</span>]&nbsp;+&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>[<span style=\"font-weight:bold;color:#1f377f;\">j</span>&nbsp;-&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>[<span style=\"font-weight:bold;color:#1f377f;\">j</span>]&nbsp;<span style=\"color:blue;\">&lt;-</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>[<span style=\"font-weight:bold;color:#1f377f;\">j</span>]&nbsp;<span style=\"color:blue;\">&lt;-</span>&nbsp;<span style=\"color:#a08000;\">q</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span></pre>\n    </p>\n    <p>\n        Fairly well, as it turns out, although we <em>do</em> have to annotate <code>p</code> by indicating that it's an array. Still, the underscore in front of the <code>array</code> keyword indicates that we're happy to let the compiler infer the type of array (which is <code>int array</code>).\n    </p>\n    <p>\n        (We <em>can</em> get around that issue by writing <code>Array.item i p</code> instead of <code>p[i]</code>, but that's verbose in a different way.)\n    </p>\n    <p>\n        Had we chosen to instead implement the algorithm based on an input list or map, we wouldn't have needed the type hint. One could therefore argue that the reason that the hint is even required is because arrays aren't the most idiomatic data structure for a functional language like F#.\n    </p>\n    <p>\n        Otherwise, I don't find that this translation was much harder than translating to Python, and I personally prefer <code><span style=\"color:blue;\">for</span>&nbsp;<span style=\"color:#1f377f;\">j</span>&nbsp;=&nbsp;1&nbsp;<span style=\"color:blue;\">to</span>&nbsp;<span style=\"color:#1f377f;\">n</span>&nbsp;<span style=\"color:blue;\">do</span></code> over <code><span style=\"color:blue;\">for</span>&nbsp;j&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:blue;\">range</span>(1,&nbsp;n&nbsp;+&nbsp;1):</code>.\n    </p>\n    <p>\n        We also need to add the <code>mutable</code> keyword to allow <code>q</code> to change during the loop. You could argue that this is another example of additional ceremony, While I agree, it's not much related to static versus dynamic typing, but more to how values are immutable by default in F#. If I recall correctly, JavaScript similarly distinguishes between <code>let</code>, <code>var</code>, and <code>const</code>.\n    </p>\n    <p>\n        Translating <code>Print-Cut-Rod-Solution</code> requires, again due to values being immutable by default, a bit more effort than Python, but not much:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">printSolution</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;_,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;=&nbsp;<span style=\"color:#74531f;\">cut</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">mutable</span>&nbsp;<span style=\"color:#a08000;\">n</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">while</span>&nbsp;<span style=\"color:#a08000;\">n</span>&nbsp;&gt;&nbsp;0&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#74531f;\">printfn</span>&nbsp;<span style=\"color:#a31515;\">&quot;</span><span style=\"color:#2b91af;\">%i</span><span style=\"color:#a31515;\">&quot;</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>[<span style=\"color:#a08000;\">n</span>]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a08000;\">n</span>&nbsp;<span style=\"color:blue;\">&lt;-</span>&nbsp;<span style=\"color:#a08000;\">n</span>&nbsp;-&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>[<span style=\"color:#a08000;\">n</span>]</pre>\n    </p>\n    <p>\n        I had to shadow the <code>n</code> parameter with a <code>mutable</code> variable to stay as close to the pseudocode as possible. Again, one may argue that the overall problem here isn't the static type system, but that programming based on mutation isn't idiomatic for F# (or other functional programming languages). As you'll see in the next article, a more idiomatic implementation is even simpler than this one.\n    </p>\n    <p>\n        Notice, however, that the <code>printSolution</code> action requires no type declarations or annotations.\n    </p>\n    <p>\n        Let's see it all in use:\n    </p>\n    <p>\n        <pre>&gt; let p = [|0; 1; 5; 8; 9; 10; 17; 17; 20; 24; 30|];;\nval p: int array = [|0; 1; 5; 8; 9; 10; 17; 17; 20; 24; 30|]\n\n&gt; Rod.printSolution p 7;;\n1\n6</pre>\n    </p>\n    <p>\n        This little interactive session reproduces the example illustrated in the beginning of this article, when given the price array from the book and a rod of size <em>7</em>, the solution printed indicates cuts at positions <em>1</em> and <em>6</em>.\n    </p>\n    <p>\n        I find it telling that the translation to F# is on par with the translation to Python, even though the structure of the pseudocode is quite imperative.\n    </p>\n    <h3 id=\"eb28d2ce98b34628b2ec4d0df8905492\">\n        Conclusion <a href=\"#eb28d2ce98b34628b2ec4d0df8905492\">#</a>\n    </h3>\n    <p>\n        You could, perhaps, say that if your mindset is predominantly imperative, implementing an algorithm using Python is likely easier than both F# or Java. If, on the other hand, you're mostly in an implementation mindset, but not strongly attached to whether the implementation should be imperative, object-oriented, or functional, I'd offer the conjecture that a language like F# is as implementation-friendly as a language like Python.\n    </p>\n    <p>\n        If, on the other hand, you're more focused on encapsulating and documenting how an existing API works, perhaps that shift of perspective suggests another evaluation of dynamically versus statically typed languages.\n    </p>\n    <p>\n        In any case, the F# code shown here is hardly idiomatic, so it might be illuminating to see what happens if we refactor it.\n    </p>\n    <p>\n        <strong>Next:</strong> Encapsulating rod-cutting.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/12/23/implementing-rod-cutting/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/12/16/a-restaurant-sandwich",
      "Title": "A restaurant sandwich",
      "PublishDate": "2024-12-16T19:11:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>An Impureim Sandwich example in C#.</em>\n    </p>\n    <p>\n        When learning functional programming (FP) people often struggle with how to organize code. How do you <a href=\"/2020/02/24/discerning-and-maintaining-purity\">discern and maintain purity</a>? <a href=\"/2017/02/02/dependency-rejection\">How do you do Dependency Injection in FP?</a> What does <a href=\"/2018/11/19/functional-architecture-a-definition\">a functional architecture</a> look like?\n    </p>\n    <p>\n        A common FP design pattern is the <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a>. The entry point of an application is always impure, so you push all impure actions to the boundary of the system. This is also known as <a href=\"https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell\">Functional Core, Imperative Shell</a>. If you have a <a href=\"/2017/07/10/pure-interactions\">micro-operation-based architecture</a>, which includes all web-based systems, you can often get by with a 'sandwich'. Perform impure actions to collect all the data you need. Pass all data to a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. Finally, use impure actions to handle the <a href=\"https://en.wikipedia.org/wiki/Referential_transparency\">referentially transparent</a> return value from the pure function.\n    </p>\n    <p>\n        No design pattern applies universally, and neither does this one. In my experience, however, it's surprisingly often possible to apply this architecture. We're far past the <a href=\"https://en.wikipedia.org/wiki/Pareto_principle\">Pareto principle</a>'s 80 percent.\n    </p>\n    <p>\n        Examples may help illustrate the pattern, as well as explore its boundaries. In this article you'll see how I refactored an entry point of a <a href=\"https://en.wikipedia.org/wiki/REST\">REST</a> API, specifically the <code>PUT</code> handler in the sample code base that accompanies <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>.\n    </p>\n    <h3 id=\"67463d3ade684a2b9de807b261ebb03c\">\n        Starting point <a href=\"#67463d3ade684a2b9de807b261ebb03c\">#</a>\n    </h3>\n    <p>\n        As discussed in the book, the architecture of the sample code base is, in fact, Functional Core, Imperative Shell. This isn't, however, the main theme of the book, and the code doesn't explicitly apply the Impureim Sandwich. In spirit, that's actually what's going on, but it isn't clear from looking at the code. This was a deliberate choice I made, because I wanted to highlight other software engineering practices. This does have the effect, though, that the Impureim Sandwich is invisible.\n    </p>\n    <p>\n        For example, the book follows <a href=\"/2019/11/04/the-80-24-rule\">the 80/24 rule</a> closely. This was a didactic choice on my part. Most code bases I've seen in the wild have far too big methods, so I wanted to hammer home the message that it's possible to develop and maintain a non-trivial code base with small code blocks. This meant, however, that I had to split up HTTP request handlers (in ASP.NET known as <em>action methods</em> on Controllers).\n    </p>\n    <p>\n        The most complex HTTP handler is the one that handles <code>PUT</code> requests for reservations. Clients use this action when they want to make changes to a restaurant reservation.\n    </p>\n    <p>\n        The action method actually invoked by an HTTP request is this <code>Put</code> method:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">HttpPut</span>(<span style=\"color:#a31515;\">&quot;restaurants/{restaurantId}/reservations/{id}&quot;</span>)]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Put</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ReservationDto</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">dto</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(<span style=\"color:blue;\">nameof</span>(<span style=\"font-weight:bold;color:#1f377f;\">dto</span>));\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"color:#2b91af;\">Guid</span>.<span style=\"color:#74531f;\">TryParse</span>(<span style=\"font-weight:bold;color:#1f377f;\">id</span>,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rid</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reservation</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>.<span style=\"font-weight:bold;color:#74531f;\">Validate</span>(<span style=\"font-weight:bold;color:#1f377f;\">rid</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BadRequestResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;RestaurantDatabase\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetRestaurant</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">TryUpdate</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n}</pre>\n    </p>\n    <p>\n        Since I, for pedagogical reasons, wanted to fit each method inside an 80x24 box, I made a few somewhat unnatural design choices. The above code is one of them. While I don't consider it completely indefensible, this method does a bit of up-front input validation and verification, and then delegates execution to the <code>TryUpdate</code> method.\n    </p>\n    <p>\n        This may seem all fine and dandy until you realize that the only caller of <code>TryUpdate</code> is that <code>Put</code> method. A similar thing happens in <code>TryUpdate</code>: It calls a method that has only that one caller. We may try to inline those two methods to see if we can spot the Impureim Sandwich.\n    </p>\n    <h3 id=\"dab8cd4011a5493ea55b47cb2240839b\">\n        Inlined Transaction Script <a href=\"#dab8cd4011a5493ea55b47cb2240839b\">#</a>\n    </h3>\n    <p>\n        Inlining those two methods leave us with a larger, <a href=\"https://martinfowler.com/eaaCatalog/transactionScript.html\">Transaction Script</a>-like entry point:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">HttpPut</span>(<span style=\"color:#a31515;\">&quot;restaurants/{restaurantId}/reservations/{id}&quot;</span>)]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Put</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ReservationDto</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">dto</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(<span style=\"color:blue;\">nameof</span>(<span style=\"font-weight:bold;color:#1f377f;\">dto</span>));\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"color:#2b91af;\">Guid</span>.<span style=\"color:#74531f;\">TryParse</span>(<span style=\"font-weight:bold;color:#1f377f;\">id</span>,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rid</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reservation</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>.<span style=\"font-weight:bold;color:#74531f;\">Validate</span>(<span style=\"font-weight:bold;color:#1f377f;\">rid</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BadRequestResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;RestaurantDatabase\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetRestaurant</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">TransactionScope</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TransactionScopeAsyncFlowOption</span>.Enabled);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">existing</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Id)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">existing</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.At)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>.<span style=\"font-weight:bold;color:#74531f;\">Where</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>.Id&nbsp;<span style=\"font-weight:bold;color:#74531f;\">!=</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Id).<span style=\"font-weight:bold;color:#74531f;\">ToList</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">now</span>&nbsp;=&nbsp;Clock.<span style=\"font-weight:bold;color:#74531f;\">GetCurrentDateTime</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ok</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">now</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"font-weight:bold;color:#1f377f;\">ok</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Update</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.Id,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>.<span style=\"font-weight:bold;color:#74531f;\">Complete</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkObjectResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.<span style=\"font-weight:bold;color:#74531f;\">ToDto</span>());\n}</pre>\n    </p>\n    <p>\n        While I've definitely seen longer methods in the wild, this variation is already so big that it no longer fits on my laptop screen. I have to scroll up and down to read the whole thing. When looking at the bottom of the method, I have to <em>remember</em> what was at the top, because I can no longer see it.\n    </p>\n    <p>\n        A major point of <a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a> is that what limits programmer productivity is human cognition. If you have to scroll your screen because you can't see the whole method at once, does that fit in your brain? Chances are, it doesn't.\n    </p>\n    <p>\n        Can you spot the Impureim Sandwich now?\n    </p>\n    <p>\n        If you can't, that's understandable. It's not really clear because there's quite a few small decisions being made in this code. You could argue, for example, that this decision is referentially transparent:\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">existing</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();</pre>\n    </p>\n    <p>\n        These two lines of code are deterministic and have no side effects. The branch only returns a <code>NotFoundResult</code> when <code>existing is null</code>. Additionally, these two lines of code are surrounded by impure actions both before and after. Is this the Sandwich, then?\n    </p>\n    <p>\n        No, it's not. This is how <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> imperative code looks. To borrow a diagram from <a href=\"/2020/03/23/repeatable-execution\">another article</a>, pure and impure code is interleaved without discipline:\n    </p>\n    <p>\n        <img src=\"/content/binary/impure-with-stripes-of-purity.png\" alt=\"A box of mostly impure (red) code with vertical stripes of green symbolising pure code.\">\n    </p>\n    <p>\n        Even so, the above <code>Put</code> method implements the Functional Core, Imperative Shell architecture. The <code>Put</code> method <em>is</em> the Imperative Shell, but where's the Functional Core?\n    </p>\n    <h3 id=\"e9ccab8ae8234c139934b87238dcf672\">\n        Shell perspective <a href=\"#e9ccab8ae8234c139934b87238dcf672\">#</a>\n    </h3>\n    <p>\n        One thing to be aware of is that when looking at the Imperative Shell code, the Functional Core is close to invisible. This is because it's typically only a single function call.\n    </p>\n    <p>\n        In the above <code>Put</code> method, this is the Functional Core:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ok</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">now</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);\n<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"font-weight:bold;color:#1f377f;\">ok</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>();</pre>\n    </p>\n    <p>\n        It's only a few lines of code, and had I not given myself the constraint of staying within an 80 character line width, I could have instead laid it out like this and inlined the <code>ok</code> flag:\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"font-weight:bold;color:#1f377f;\">restaurant</span>.MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(<span style=\"font-weight:bold;color:#1f377f;\">now</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservations</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>();</pre>\n    </p>\n    <p>\n        Now that I try this, in fact, it turns out that this actually still stays within 80 characters. To be honest, I don't know exactly why I had that former code instead of this, but perhaps I found the latter alternative too dense. Or perhaps I simply didn't think of it. Code is rarely perfect. Usually when I revisit a piece of code after having been away from it for some time, I find some thing that I want to change.\n    </p>\n    <p>\n        In any case, that's beside the point. What matters here is that when you're looking through the Imperative Shell code, the Functional Core looks insignificant. Blink and you'll miss it. Even if we ignore all the other small pure decisions (the <code>if</code> statements) and pretend that we already have an Impureim Sandwich, from this viewpoint, the architecture <em>looks</em> like this:\n    </p>\n    <p>\n        <img src=\"/content/binary/impure-tiny-pure-impure-sandwich-box.png\" alt=\"A box with a big red section on top, a thin green sliver middle, and another big red part at the bottom.\">\n    </p>\n    <p>\n        It's tempting to ask, then: What's all the fuss about? Why even bother?\n    </p>\n    <p>\n        This is a natural experience for a code reader. After all, if you don't know a code base well, you often start at the entry point to try to understand how the application handles a certain stimulus. Such as an HTTP <code>PUT</code> request. When you do that, you see all of the Imperative Shell code before you see the Functional Core code. This could give you the wrong impression about the balance of responsibility.\n    </p>\n    <p>\n        After all, code like the above <code>Put</code> method has inlined most of the impure code so that it's right in your face. Granted, there's still some code hiding behind, say, <code>Repository.ReadReservations</code>, but a substantial fraction of the imperative code is visible in the method.\n    </p>\n    <p>\n        On the other hand, the Functional Core is just a single function call. If we inlined all of that code, too, the picture might rather look like this:\n    </p>\n    <p>\n        <img src=\"/content/binary/impure-pure-impure-sandwich-box.png\" alt=\"A box with a thin red slice on top, a thick green middle, and a thin red slice at the bottom.\">\n    </p>\n    <p>\n        This obviously depends on the de-facto ratio of pure to imperative code. In any case, inlining the pure code is a thought experiment only, because the whole point of functional architecture is that <a href=\"/2021/07/28/referential-transparency-fits-in-your-head\">a referentially transparent function fits in your head</a>. Regardless of the complexity and amount of code hiding behind that <code>MaitreD.WillAccept</code> function, the return value is <em>equal</em> to the function call. It's the ultimate abstraction.\n    </p>\n    <h3 id=\"f3019f4107254a82b4280753cbbfab5f\">\n        Standard combinators <a href=\"#f3019f4107254a82b4280753cbbfab5f\">#</a>\n    </h3>\n    <p>\n        As I've already suggested, the inlined <code>Put</code> method looks like a Transaction Script. The <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">cyclomatic complexity</a> fortunately hovers on <a href=\"https://en.wikipedia.org/wiki/The_Magical_Number_Seven,_Plus_or_Minus_Two\">the magical number seven</a>, and branching is exclusively organized around <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard Clauses</a>. Apart from that, there are no nested <code>if</code> statements or <code>for</code> loops.\n    </p>\n    <p>\n        Apart from the Guard Clauses, this mostly looks like a procedure that runs in a straight line from top to bottom. The exception is all those small conditionals that may cause the procedure to exit prematurely. Conditions like this:\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(!<span style=\"color:#2b91af;\">Guid</span>.<span style=\"color:#74531f;\">TryParse</span>(<span style=\"font-weight:bold;color:#1f377f;\">id</span>,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rid</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>();</pre>\n    </p>\n    <p>\n        or\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BadRequestResult</span>();</pre>\n    </p>\n    <p>\n        Such checks occur throughout the method. Each of them are actually small pure islands amidst all the imperative code, but each is ad hoc. Each checks if it's possible for the procedure to continue, and returns a kind of error value if it decides that it's not.\n    </p>\n    <p>\n        Is there a way to model such 'derailments' from the main flow?\n    </p>\n    <p>\n        If you've ever encountered Scott Wlaschin's <a href=\"https://fsharpforfunandprofit.com/rop/\">Railway Oriented Programming</a> you may already see where this is going. Railway-oriented programming is a fantastic metaphor, because it gives you a way to visualize that you have, indeed, a main track, but then you have a side track that you may shuffle some trains too. And once the train is on the side track, it can't go back to the main track.\n    </p>\n    <p>\n        That's how the <a href=\"/2022/05/09/an-either-monad\">Either monad</a> works. Instead of all those ad-hoc <code>if</code> statements, we should be able to replace them with what we may call <em>standard combinators</em>. The most important of these combinators is <a href=\"/2022/03/28/monads\">monadic bind</a>. Composing a Transaction Script like <code>Put</code> with standard combinators will 'hide away' those small decisions, and make the Sandwich nature more apparent.\n    </p>\n    <p>\n        If we had had pure code, we could just have composed Either-valued functions. Unfortunately, most of what's going on in the <code>Put</code> method happens in a Task-based context. Thankfully, Either is one of those monads that nest well, implying that we can <a href=\"/2024/11/25/nested-monads\">turn the combination into a composed TaskEither monad</a>. The linked article shows the core <code>TaskEither</code> <code>SelectMany</code> implementations.\n    </p>\n    <p>\n        The way to encode all those small decisions between 'main track' or 'side track', then, is to wrap 'naked' values in the desired <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;&nbsp;</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">id</span>.<span style=\"font-weight:bold;color:#74531f;\">TryParseGuid</span>().<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>()))</pre>\n    </p>\n    <p>\n        This little code snippet makes use of a few small building blocks that we also need to introduce. First, .NET's standard <code>TryParse</code> APIs don't, compose, but since <a href=\"/2019/07/15/tester-doer-isomorphisms\">they're isomorphic to Maybe-valued functions</a>, you can write an adapter like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Guid</span>?&nbsp;<span style=\"color:#74531f;\">TryParseGuid</span>(<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">candidate</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"color:#2b91af;\">Guid</span>.<span style=\"color:#74531f;\">TryParse</span>(<span style=\"font-weight:bold;color:#1f377f;\">candidate</span>,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">guid</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">guid</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n}</pre>\n    </p>\n    <p>\n        In this code base, I treat <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/nullable-reference-types\">nullable reference types</a> as equivalent to the <a href=\"/2022/04/25/the-maybe-monad\">Maybe monad</a>, but if your language doesn't have that feature, you can use Maybe instead.\n    </p>\n    <p>\n        To implement the <code>Put</code> method, however, we don't want nullable (or Maybe) values. We need Either values, so we may introduce a <a href=\"/2022/07/18/natural-transformations\">natural transformation</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&nbsp;<span style=\"color:#74531f;\">OnNull</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">R</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">candidate</span>,&nbsp;<span style=\"color:#2b91af;\">L</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>)&nbsp;<span style=\"color:blue;\">where</span>&nbsp;<span style=\"color:#2b91af;\">R</span>&nbsp;:&nbsp;<span style=\"color:blue;\">struct</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">candidate</span>.HasValue)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">Right</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">candidate</span>.Value);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#74531f;\">Left</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">left</span>);\n}</pre>\n    </p>\n    <p>\n        In <a href=\"https://www.haskell.org/\">Haskell</a> one might just make use of the <a href=\"https://hackage.haskell.org/package/base/docs/Data-Maybe.html#v:maybe\">built-in</a> <a href=\"/2019/05/20/maybe-catamorphism\">Maybe catamorphism</a>:\n    </p>\n    <p>\n        <pre>ghci&gt; maybe (Left \"boo!\") Right $ Just 123\nRight 123\nghci&gt; maybe (Left \"boo!\") Right $ Nothing\nLeft \"boo!\"</pre>\n    </p>\n    <p>\n        Such conversions from <code>Maybe</code> to <code>Either</code> hover just around the <a href=\"https://wiki.haskell.org/Fairbairn_threshold\">Fairbairn threshold</a>, but since we are going to need it more than once, it makes sense to add a specialized <code>OnNull</code> transformation to the C# code base. The one shown here handles <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/nullable-value-types\">nullable value types</a>, but the code base also includes an overload that handles nullable reference types. It's almost identical.\n    </p>\n    <h3 id=\"f158fc8250db4f07b1419a044fe23f91\">\n        Support for query syntax <a href=\"#f158fc8250db4f07b1419a044fe23f91\">#</a>\n    </h3>\n    <p>\n        There's more than one way to consume monadic values in C#. While many C# developers like <a href=\"https://learn.microsoft.com/dotnet/csharp/linq/\">LINQ</a>, most seem to prefer the familiar <em>method call syntax</em>; that is, just call the <code>Select</code>, <code>SelectMany</code>, and <code>Where</code> methods as the normal <a href=\"https://learn.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods\">extension methods</a> they are. Another option, however, is to use <a href=\"https://learn.microsoft.com/dotnet/csharp/linq/get-started/query-expression-basics\">query syntax</a>. This is what I'm aiming for here, since it'll make it easier to spot the Impureim Sandwich.\n    </p>\n    <p>\n        You'll see the entire sandwich later in the article. Before that, I'll highlight details and explain how to implement them. You can always scroll down to see the end result, and then scroll back here, if that's more to your liking.\n    </p>\n    <p>\n        The sandwich starts by parsing the <code>id</code> into a <a href=\"https://learn.microsoft.com/dotnet/api/system.guid\">GUID</a> using the above building blocks:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sandwich</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;rid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">id</span>.<span style=\"font-weight:bold;color:#74531f;\">TryParseGuid</span>().<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>()))</pre>\n    </p>\n    <p>\n        It then immediately proceeds to <code>Validate</code> (<a href=\"https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/\">parse</a>, really) the <code>dto</code> into a proper Domain Model:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">from</span>&nbsp;reservation&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>.<span style=\"font-weight:bold;color:#74531f;\">Validate</span>(rid).<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BadRequestResult</span>())</pre>\n    </p>\n    <p>\n        Notice that the second <code>from</code> expression doesn't wrap the result with <code>Task.FromResult</code>. How does that work? Is the return value of <code>dto.Validate</code> already a <code>Task</code>? No, this works because I added 'degenerate' <code>SelectMany</code> overloads:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>)));\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">k</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">k</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">y</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">y</span>)));\n}</pre>\n    </p>\n    <p>\n        Notice that the <code>selector</code> only produces an <code><span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;</code> value, rather than <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;</code>. This allows query syntax to 'pick up' the previous value (<code>rid</code>, which is 'really' a <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>,&nbsp;<span style=\"color:#2b91af;\">Guid</span>&gt;&gt;</code>) and continue with a function that doesn't produce a <code>Task</code>, but rather just an <code>Either</code> value. The first of these two overloads then wraps that <code>Either</code> value and wraps it with <code>Task.FromResult</code>. The second overload is just the usual <a href=\"/2019/12/16/zone-of-ceremony\">ceremony</a> that enables query syntax.\n    </p>\n    <p>\n        Why, then, doesn't the <code>sandwich</code> use the same trick for <code>rid</code>? Why does it explicitly call <code>Task.FromResult</code>?\n    </p>\n    <p>\n        As far as I can tell, this is because of type inference. It looks as though the C# compiler infers the monad's type from the first expression. If I change the first expression to\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">from</span>&nbsp;rid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>.<span style=\"font-weight:bold;color:#74531f;\">TryParseGuid</span>().<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>())</pre>\n    </p>\n    <p>\n        the compiler thinks that the query expression is based on <code><span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;</code>, rather than <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;</code>. This means that once we run into the first <code>Task</code> value, the entire expression no longer works.\n    </p>\n    <p>\n        By explicitly wrapping the first expression in a <code>Task</code>, the compiler correctly infers the monad we'd like it to. If there's a more elegant way to do this, I'm not aware of it.\n    </p>\n    <h3 id=\"066473b442cc4dd4904b43dccd257fa4\">\n        Values that don't fail <a href=\"#066473b442cc4dd4904b43dccd257fa4\">#</a>\n    </h3>\n    <p>\n        The sandwich proceeds to query various databases, using the now-familiar <code>OnNull</code> combinators to transform nullable values to <code>Either</code> values.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">from</span>&nbsp;restaurant&nbsp;<span style=\"color:blue;\">in</span>&nbsp;RestaurantDatabase\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetRestaurant</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>())\n<span style=\"color:blue;\">from</span>&nbsp;existing&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(restaurant.Id,&nbsp;reservation.Id)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>())</pre>\n    </p>\n    <p>\n        This works like before because both <code>GetRestaurant</code> and <code>ReadReservation</code> are queries that may fail to return a value. Here's the interface definition of <code>ReadReservation</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>?&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Guid</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>);</pre>\n    </p>\n    <p>\n        Notice the question mark that indicates that the result may be <code>null</code>.\n    </p>\n    <p>\n        The <code>GetRestaurant</code> method is similar.\n    </p>\n    <p>\n        The next query that the sandwich has to perform, however, is different. The return type of the <code>ReadReservations</code> method is <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;&gt;</code>. Notice that the type contained in the <code>Task</code> is <em>not</em> nullable. Barring database connection errors, this query <a href=\"/2024/01/29/error-categories-and-category-errors\">can't fail</a>. If it finds no data, it returns an empty collection.\n    </p>\n    <p>\n        Since the value isn't nullable, we can't use <code>OnNull</code> to turn it into a <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;</code> value. We could try to use the <code>Right</code> creation function for that.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&nbsp;<span style=\"color:#74531f;\">Right</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"color:#2b91af;\">R</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;.<span style=\"color:#74531f;\">Right</span>(<span style=\"font-weight:bold;color:#1f377f;\">right</span>);\n}</pre>\n    </p>\n    <p>\n        This works, but is awkward:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">from</span>&nbsp;reservations&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(restaurant.Id,&nbsp;reservation.At)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Either</span>.<span style=\"color:#74531f;\">Right</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;&gt;(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>))</pre>\n    </p>\n    <p>\n        The problem with calling <code>Either.Right</code> is that while the compiler can infer which type to use for <code>R</code>, it doesn't know what the <code>L</code> type is. Thus, we have to tell it, and we can't tell it what <code>L</code> is without <em>also</em> telling it what <code>R</code> is. Even though it already knows that.\n    </p>\n    <p>\n        In such scenarios, the <a href=\"https://fsharp.org/\">F#</a> compiler can usually figure it out, and <a href=\"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler\">GHC</a> always can (unless you add some exotic language extensions to your code). C# doesn't have any syntax that enables you to tell the compiler about only the type that it doesn't know about, and let it infer the rest.\n    </p>\n    <p>\n        All is not lost, though, because there's a little trick you can use in cases such as this. You <em>can</em> let the C# compiler infer the <code>R</code> type so that you only have to tell it what <code>L</code> is. It's a two-stage process. First, define an extension method on <code>R</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">RightBuilder</span>&lt;<span style=\"color:#2b91af;\">R</span>&gt;&nbsp;<span style=\"color:#74531f;\">ToRight</span>&lt;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">R</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">RightBuilder</span>&lt;<span style=\"color:#2b91af;\">R</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">right</span>);\n}</pre>\n    </p>\n    <p>\n        The only type argument on this <code>ToRight</code> method is <code>R</code>, and since the <code>right</code> parameter is of the type <code>R</code>, the C# compiler can always infer the type of <code>R</code> from the type of <code>right</code>.\n    </p>\n    <p>\n        What's <code><span style=\"color:#2b91af;\">RightBuilder</span>&lt;<span style=\"color:#2b91af;\">R</span>&gt;</code>? It's this little auxiliary class:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">RightBuilder</span>&lt;<span style=\"color:#2b91af;\">R</span>&gt;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">R</span>&nbsp;right;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">RightBuilder</span>(<span style=\"color:#2b91af;\">R</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.right&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">WithLeft</span>&lt;<span style=\"color:#2b91af;\">L</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>.<span style=\"color:#74531f;\">Right</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;(right);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The code base for <a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a> was written on .NET 3.1, but today you could have made this a <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">record</a> instead. The only purpose of this class is to break the type inference into two steps so that the <code>R</code> type can be automatically inferred. In this way, you only need to tell the compiler what the <code>L</code> type is.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">from</span>&nbsp;reservations&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(restaurant.Id,&nbsp;reservation.At)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rs</span>.<span style=\"font-weight:bold;color:#74531f;\">ToRight</span>().<span style=\"font-weight:bold;color:#74531f;\">WithLeft</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;())</pre>\n    </p>\n    <p>\n        As indicated, this style of programming isn't language-neutral. Even if you find this little trick neat, I'd much rather have the compiler just figure it out for me. The entire <code>sandwich</code> query expression is already defined as working with <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;</code>, and the <code>L</code> type can't change like the <code>R</code> type can. Functional compilers can figure this out, and while I intend this article to show object-oriented programmers how functional programming sometimes work, I don't wish to pretend that it's a good idea to write code like this in C#. I've <a href=\"/2019/03/18/the-programmer-as-decision-maker\">covered that ground already</a>.\n    </p>\n    <p>\n        Not surprisingly, there's a mirror-image <code>ToLeft</code>/<code>WithRight</code> combo, too.\n    </p>\n    <h3 id=\"8628f41e4a8d4c6e8d282c5a64ad1c44\">\n        Working with Commands <a href=\"#8628f41e4a8d4c6e8d282c5a64ad1c44\">#</a>\n    </h3>\n    <p>\n        The ultimate goal with the <code>Put</code> method is to modify a row in the database. The method to do that has this interface definition:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Task</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Update</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Reservation</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>);</pre>\n    </p>\n    <p>\n        I usually call that non-generic <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task\">Task</a> class for 'asynchronous <code>void</code>' when explaining it to non-C# programmers. The <code>Update</code> method is an asynchronous <a href=\"https://en.wikipedia.org/wiki/Command%E2%80%93query_separation\">Command</a>.\n    </p>\n    <p>\n        <code>Task</code> and <code>void</code> aren't legal values for use with LINQ query syntax, so you have to find a way to work around that limitation. In this case I defined a local helper method to make it look like a Query:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">RunUpdate</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"color:#2b91af;\">Reservation</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>,&nbsp;<span style=\"color:#2b91af;\">TransactionScope</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Update</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>.<span style=\"font-weight:bold;color:#74531f;\">Complete</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>;\n}</pre>\n    </p>\n    <p>\n        It just echoes back the <code>reservation</code> parameter once the <code>Update</code> has completed. This makes it composable in the larger query expression.\n    </p>\n    <p>\n        You'll probably not be surprised when I tell you that both F# and Haskell handle this scenario gracefully, without requiring any hoop-jumping.\n    </p>\n    <h3 id=\"d7c6feabfcb74e2eb5174a9ad3dd9c7f\">\n        Full sandwich <a href=\"#d7c6feabfcb74e2eb5174a9ad3dd9c7f\">#</a>\n    </h3>\n    <p>\n        Those are all the building block. Here's the full <code>sandwich</code> definition, colour-coded like the examples in <a href=\"/2020/03/02/impureim-sandwich\">Impureim sandwich</a>.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>,&nbsp;<span style=\"color:#2b91af;\">OkObjectResult</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sandwich</span>&nbsp;=\n<span style=\"background-color: palegreen;\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;rid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">id</span>.<span style=\"font-weight:bold;color:#74531f;\">TryParseGuid</span>().<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>()))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;reservation&nbsp;<span style=\"color:blue;\">in</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dto</span>.<span style=\"font-weight:bold;color:#74531f;\">Validate</span>(rid).<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BadRequestResult</span>())</span>\n \n<span style=\"background-color: lightsalmon;\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;restaurant&nbsp;<span style=\"color:blue;\">in</span>&nbsp;RestaurantDatabase\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">GetRestaurant</span>(<span style=\"font-weight:bold;color:#1f377f;\">restaurantId</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>())\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;existing&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservation</span>(restaurant.Id,&nbsp;reservation.Id)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">OnNull</span>((<span style=\"color:#2b91af;\">ActionResult</span>)<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NotFoundResult</span>())\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;reservations&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Repository\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(restaurant.Id,&nbsp;reservation.At)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rs</span>.<span style=\"font-weight:bold;color:#74531f;\">ToRight</span>().<span style=\"font-weight:bold;color:#74531f;\">WithLeft</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;())\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;now&nbsp;=&nbsp;Clock.<span style=\"font-weight:bold;color:#74531f;\">GetCurrentDateTime</span>()</span>\n \n<span style=\"background-color: palegreen;\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;reservations2&nbsp;=\n    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reservations.<span style=\"font-weight:bold;color:#74531f;\">Where</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>.Id&nbsp;<span style=\"font-weight:bold;color:#74531f;\">!=</span>&nbsp;reservation.Id)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;ok&nbsp;=&nbsp;restaurant.MaitreD.<span style=\"font-weight:bold;color:#74531f;\">WillAccept</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;now,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reservations2,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reservation)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;reservation2&nbsp;<span style=\"color:blue;\">in</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ok&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;reservation.<span style=\"font-weight:bold;color:#74531f;\">ToRight</span>().<span style=\"font-weight:bold;color:#74531f;\">WithLeft</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span style=\"color:#74531f;\">NoTables500InternalServerError</span>().<span style=\"font-weight:bold;color:#74531f;\">ToLeft</span>().<span style=\"font-weight:bold;color:#74531f;\">WithRight</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;()</span>\n \n<span style=\"background-color: lightsalmon;\">&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">from</span>&nbsp;reservation3&nbsp;<span style=\"color:blue;\">in</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">RunUpdate</span>(restaurant.Id,&nbsp;reservation2,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">scope</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>.<span style=\"font-weight:bold;color:#74531f;\">ToRight</span>().<span style=\"font-weight:bold;color:#74531f;\">WithLeft</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>&gt;())</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">select</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkObjectResult</span>(reservation3.<span style=\"font-weight:bold;color:#74531f;\">ToDto</span>());</pre>\n    </p>\n    <p>\n        As is evident from the colour-coding, this isn't quite a sandwich. The structure is honestly more accurately depicted like this:\n    </p>\n    <p>\n        <img src=\"/content/binary/pure-impure-pure-impure-box.png\" alt=\"A box with green, red, green, and red horizontal tiers.\">\n    </p>\n    <p>\n        As I've previously argued, <a href=\"/2023/10/09/whats-a-sandwich\">while the metaphor becomes strained, this still works well as a functional-programming architecture</a>.\n    </p>\n    <p>\n        As defined here, the <code>sandwich</code> value is a <code>Task</code> that must be awaited.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">ActionResult</span>,&nbsp;<span style=\"color:#2b91af;\">OkObjectResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">either</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sandwich</span>.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">either</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>);</pre>\n    </p>\n    <p>\n        By awaiting the task, we get an <code>Either</code> value. The <code>Put</code> method, on the other hand, must return an <code>ActionResult</code>. How do you turn an <code>Either</code> object into a single object?\n    </p>\n    <p>\n        By pattern matching on it, as the code snippet shows. The <code>L</code> type is already an <code>ActionResult</code>, so we return it without changing it. If C# had had a built-in identity function, I'd used that, but idiomatically, we instead use the <code><span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span></code> lambda expression.\n    </p>\n    <p>\n        The same is the case for the <code>R</code> type, because <code>OkObjectResult</code> inherits from <code>ActionResult</code>. The identity expression automatically performs the type conversion for us.\n    </p>\n    <p>\n        This, by the way, is a recurring pattern with Either values that I run into in all languages. You've essentially computed an <code>Either&lt;T, T&gt;</code>, with the same type on both sides, and now you just want to return whichever <code>T</code> value is contained in the Either value. You'd think this is such a common pattern that Haskell has a nice abstraction for it, but <a href=\"https://hoogle.haskell.org/?hoogle=Either%20a%20a%20-%3E%20a\">even Hoogle fails to suggest a commonly-accepted function that does this</a>. Apparently, <code>either id id</code> is considered below the Fairbairn threshold, too.\n    </p>\n    <h3 id=\"fc8f5dd20a494cc297a55ce57c865212\">\n        Conclusion <a href=\"#fc8f5dd20a494cc297a55ce57c865212\">#</a>\n    </h3>\n    <p>\n        This article presents an example of a non-trivial Impureim Sandwich. When I introduced the pattern, I gave a few examples. I'd deliberately chosen these examples to be simple so that they highlighted the structure of the idea. The downside of that didactic choice is that some commenters found the examples too simplistic. Therefore, I think that there's value in going through more complex examples.\n    </p>\n    <p>\n        The code base that accompanies <a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a> is complex enough that it borders on the realistic. It was deliberately written that way, and since I assume that the code base is familiar to readers of the book, I thought it'd be a good resource to show how an Impureim Sandwich might look. I explicitly chose to refactor the <code>Put</code> method, since it's easily the most complicated process in the code base.\n    </p>\n    <p>\n        The benefit of that code base is that it's written in a programming language that reach a large audience. Thus, for the reader curious about functional programming I thought that this could also be a useful introduction to some intermediate concepts.\n    </p>\n    <p>\n        As I've commented along the way, however, I wouldn't expect anyone to write production C# code like this. If you're able to do this, you're also able to do it in a language better suited for this programming paradigm.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/12/16/a-restaurant-sandwich/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/12/09/implementation-and-usage-mindsets",
      "Title": "Implementation and usage mindsets",
      "PublishDate": "2024-12-09T21:45:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A one-dimensional take on the enduring static-versus-dynamic debate.</em>\n    </p>\n    <p>\n        It recently occurred to me that one possible explanation for the standing, and probably never-ending, debate about static versus dynamic types may be that each camp have disjoint perspectives on the kinds of problems their favourite languages help them solve. In short, my hypothesis is that perhaps lovers of dynamically-typed languages often approach a problem from an implementation mindset, whereas proponents of static types emphasize usage.\n    </p>\n    <p>\n        <img src=\"/content/binary/implementation-versus-usage.png\" alt=\"A question mark in the middle. An arrow from left labelled 'implementation' points to the question mark from a figure indicating a person. Another arrow from the right labelled 'usage' points to the question mark from another figure indicating a person.\">\n    </p>\n    <p>\n        I'll expand on this idea here, and then provide examples in two subsequent articles.\n    </p>\n    <h3 id=\"d748f29ae31543fbb6db537711800c62\">\n        Background <a href=\"#d748f29ae31543fbb6db537711800c62\">#</a>\n    </h3>\n    <p>\n        For years I've struggled to understand 'the other side'. While I'm firmly in the statically typed camp, I realize that many highly skilled programmers and thought leaders enjoy, or get great use out of, dynamically typed languages. This worries me, because it <a href=\"/2021/08/09/am-i-stuck-in-a-local-maximum\">might indicate that I'm stuck in a local maximum</a>.\n    </p>\n    <p>\n        In other words, just because I, personally, prefer static types, it doesn't follow that static types are universally better than dynamic types.\n    </p>\n    <p>\n        In reality, it's probably rather the case that we're dealing with a false dichotomy, and that the problem is really multi-dimensional.\n    </p>\n    <blockquote>\n        <p>\n            \"Let me stop you right there: I don't think there is a real dynamic typing versus static typing debate.\n        </p>\n        <p>\n            \"What such debates normally are is language X vs language Y debates (where X happens to be dynamic and Y happens to be static).\"\n        </p>\n        <footer><cite><a href=\"https://twitter.com/KevlinHenney/status/1425513161252278280\">Kevlin Henney</a></cite></footer>\n    </blockquote>\n    <p>\n        Even so, I can't help thinking about such things. Am I missing something?\n    </p>\n    <p>\n        For the past few years, I've dabbled with <a href=\"https://www.python.org/\">Python</a> to see what writing in a popular dynamically typed language is like. It's not a bad language, and I can clearly see how it's attractive. Even so, I'm still frustrated every time I return to some Python code after a few weeks or more. The lack of static types makes it hard for me to pick up, or revisit, old code.\n    </p>\n    <h3 id=\"8b6d87e0536d40b6aaec28d8e6356553\">\n        A question of perspective? <a href=\"#8b6d87e0536d40b6aaec28d8e6356553\">#</a>\n    </h3>\n    <p>\n        Whenever I run into a difference of opinion, I often interpret it as a difference in perspective. Perhaps it's my academic background as an economist, but I consider it a given that people have different motivations, and that incentives influence actions.\n    </p>\n    <p>\n        A related kind of analysis deals with problem definitions. Are we even trying to solve the same problem?\n    </p>\n    <p>\n        I've <a href=\"/2021/08/09/am-i-stuck-in-a-local-maximum\">discussed such questions before, but in a different context</a>. Here, it strikes me that perhaps programmers who gravitate toward dynamically typed languages are focused on another problem than the other group.\n    </p>\n    <p>\n        Again, I'd like to emphasize that I don't consider the world so black and white in reality. Some developers straddle the two camps, and as the above Kevlin Henney quote suggests, there really aren't only two kinds of languages. <a href=\"https://en.wikipedia.org/wiki/C_(programming_language)\">C</a> and <a href=\"https://www.haskell.org/\">Haskell</a> are both statically typed, but the similarities stop there. Likewise, I don't know if it's fair to put JavaScript and <a href=\"https://clojure.org/\">Clojure</a> in the same bucket.\n    </p>\n    <p>\n        That said, I'd still like to offer the following hypothesis, in the spirit that although <a href=\"https://en.wikipedia.org/wiki/All_models_are_wrong\">all models are wrong</a>, some are useful.\n    </p>\n    <p>\n        The idea is that if you're trying to solve a problem related to <em>implementation</em>, dynamically typed languages may be more suitable. If you're trying to implement an algorithm, or even trying to invent one, a dynamic language seems useful. One year, I did a good chunk of <a href=\"https://adventofcode.com/\">Advent of Code</a> in Python, and didn't find it harder than in Haskell. (I ultimately ran out of steam for reasons unrelated to Python.)\n    </p>\n    <p>\n        On the other hand, if your main focus may be <em>usage</em> of your code, perhaps you'll find a statically typed language more useful. At least, I do. I can use the static type system to communicate how my APIs work. How to instantiate my classes. How to call my functions. How return values are shaped. In other words, the preconditions, invariants, and postconditions of my reusable code: <a href=\"/encapsulation-and-solid/\">Encapsulation</a>.\n    </p>\n    <h3 id=\"f0cbf02e11484e9a8c8d0fab9a6463f2\">\n        Examples <a href=\"#f0cbf02e11484e9a8c8d0fab9a6463f2\">#</a>\n    </h3>\n    <p>\n        Some examples may be in order. In the next two articles, I'll first examine how easy it is to implement an algorithm in various programming languages. Then I'll discuss how to encapsulate that algorithm.\n    </p>\n    <ul>\n        <li><a href=\"/2024/12/23/implementing-rod-cutting\">Implementing rod-cutting</a></li>\n        <li>Encapsulating rod-cutting</li>\n    </ul>\n    <p>\n        The articles will both discuss the rod-cutting problem from <a href=\"/ref/clrs\">Introduction to Algorithms</a>, but I'll introduce the problem in the next article.\n    </p>\n    <h3 id=\"97b3e722024b4228924faa2d6ff5d188\">\n        Conclusion <a href=\"#97b3e722024b4228924faa2d6ff5d188\">#</a>\n    </h3>\n    <p>\n        I'd be naive if I believed that a single model can fully explain why some people prefer dynamically typed languages, and others rather like statically typed languages. Even so, suggesting a model helps me understand how to analyze problems.\n    </p>\n    <p>\n        My hypothesis is that dynamically typed languages may be suitable for implementing algorithms, whereas statically typed languages offer better encapsulation.\n    </p>\n    <p>\n        This may be used as a heuristic for 'picking the right tool for the job'. If I need to suss out an algorithm, perhaps I should do it in Python. If, on the other hand, I need to publish a reusable library, perhaps Haskell is a better choice.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2024/12/23/implementing-rod-cutting\">Implementing rod-cutting</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/12/09/implementation-and-usage-mindsets/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/12/02/short-circuiting-an-asynchronous-traversal",
      "Title": "Short-circuiting an asynchronous traversal",
      "PublishDate": "2024-12-02T09:32:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Another C# example.</em>\n    </p>\n    <p>\n        This article is a continuation of <a href=\"/2024/11/18/collecting-and-handling-result-values\">an earlier post</a> about refactoring a piece of imperative code to a <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>. It all started with <a href=\"https://stackoverflow.com/q/79112836/126014\">a Stack Overflow question</a>, but read the previous article, and you'll be up to speed.\n    </p>\n    <h3 id=\"2bf66b90d3ba4dfe980538175b647070\">\n        Imperative outset <a href=\"#2bf66b90d3ba4dfe980538175b647070\">#</a>\n    </h3>\n    <p>\n        To begin, consider this mostly imperative code snippet:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>,&nbsp;hasError:&nbsp;<span style=\"color:blue;\">false</span>);\n<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;(<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:blue;\">bool</span>)&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.hasError&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.hasError)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">BadRequest</span>();\n}\n \n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n \n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">Ok</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>]));</pre>\n    </p>\n    <p>\n        I'll recap a few points from the previous article. Apart from one crucial detail, it's similar to the other post. One has to infer most of the types and APIs, since the original post didn't show more code than that. If you're used to engaging with Stack Overflow questions, however, it's not too hard to figure out what most of the moving parts do.\n    </p>\n    <p>\n        The most non-obvious detail is that the code uses a library called <a href=\"https://github.com/mcintyre321/OneOf/\">OneOf</a>, which supplies general-purpose, but rather abstract, sum types. Both the container type <code>OneOf</code>, as well as the two indicator types <code>NotFound</code> and <code>Error</code> are defined in that library.\n    </p>\n    <p>\n        The <code>Match</code> method implements standard <a href=\"/2018/05/22/church-encoding\">Church encoding</a>, which enables the code to pattern-match on the three alternative values that <code>UpdateItem</code> returns.\n    </p>\n    <p>\n        One more detail also warrants an explicit description: The <code>itemsToUpdate</code> object is an input argument of the type <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;</code>.\n    </p>\n    <p>\n        The major difference from before is that now the update process short-circuits on the first <code>Error</code>. If an error occurs, it stops processing the rest of the items. In that case, it now returns <code>Results.BadRequest()</code>, and it <em>doesn't</em> save the changes to <code>dbContext</code>.\n    </p>\n    <p>\n        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?\n    </p>\n    <h3 id=\"d5b47b3ebb0345ea9b1d2879755bec12\">\n        Short-circuiting traversal <a href=\"#d5b47b3ebb0345ea9b1d2879755bec12\">#</a>\n    </h3>\n    <p>\n        <a href=\"/2024/11/11/traversals\">The standard Traverse function</a> isn't lazy, or rather, it does consume the entire input sequence. Even various <a href=\"https://www.haskell.org/\">Haskell</a> data structures I investigated do that. And yes, I even tried to <code>traverse</code> <a href=\"https://hackage.haskell.org/package/list-t/docs/ListT.html\">ListT</a>. If there's a data structure that you can <code>traverse</code> with deferred execution of I/O-bound actions, I'm not aware of it.\n    </p>\n    <p>\n        That said, all is not lost, but you'll need to implement a more specialized traversal. While consuming the input sequence, the function needs to know when to stop. It can't do that on just any <a href=\"https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1\">IEnumerable&lt;T&gt;</a>, because it has no information about <code>T</code>.\n    </p>\n    <p>\n        If, on the other hand, you specialize the traversal to a sequence of items with more information, you can stop processing if it encounters a particular condition. You could generalize this to, say, <code>IEnumerable&lt;Either&lt;L, R&gt;&gt;</code>, but since I already have the OneOf library in scope, I'll use that, instead of implementing or pulling in a general-purpose <a href=\"/2018/06/11/church-encoded-either\">Either</a> data type.\n    </p>\n    <p>\n        In fact, I'll just use a three-way <code>OneOf</code> type compatible with the one that <code>UpdateItem</code> returns.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">Sequence</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">task</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">result</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">result</span>.IsT2)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>;\n}</pre>\n    </p>\n    <p>\n        This implementation doesn't care what <code>T1</code> or <code>T2</code> is, so they're free to be <code>ShoppingListItem</code> and <code>NotFound</code>. The third type argument, on the other hand, must be <code>Error</code>.\n    </p>\n    <p>\n        The <code>if</code> conditional looks a bit odd, but as I wrote, the types that ship with the OneOf library have rather abstract APIs. A three-way <code>OneOf</code> value comes with three case tests called <code>IsT0</code>, <code>IsT1</code>, and <code>IsT2</code>. Notice that the library uses a zero-indexed naming convention for its type parameters. <code>IsT2</code> returns <code>true</code> if the value is the <em>third</em> kind, in this case <code>Error</code>. If a <code>task</code> turns out to produce an <code>Error</code>, the <code>Sequence</code> method adds that one error, but then stops processing any remaining items.\n    </p>\n    <p>\n        Some readers may complain that the entire implementation of <code>Sequence</code> is imperative. It hardly matters that much, since the mutation doesn't escape the method. The behaviour is as functional as it's possible to make it. It's fundamentally I/O-bound, so we can't consider it a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. That said, if we hypothetically imagine that all the <code>tasks</code> are deterministic and have no side effects, the <code>Sequence</code> function does become a pure function when viewed as a black box. From the outside, you can't tell that the implementation is imperative.\n    </p>\n    <p>\n        It <em>is</em> possible to implement <code>Sequence</code> in a proper functional style, and it might make <a href=\"/2020/01/13/on-doing-katas\">a good exercise</a>. I think, however, that it'll be difficult in C#. In <a href=\"https://fsharp.org/\">F#</a> or Haskell I'd use recursion, and while you <em>can</em> do that in C#, I admit that I've lost sight of whether or not <a href=\"/2015/12/22/tail-recurse\">tail recursion</a> is supported by the C# compiler.\n    </p>\n    <p>\n        Be that as it may, the traversal implementation doesn't change.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">TResult</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">Traverse</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T1</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">TResult</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>).<span style=\"font-weight:bold;color:#74531f;\">Sequence</span>();\n}</pre>\n    </p>\n    <p>\n        You can now <code>Traverse</code> the <code>itemsToUpdate</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));</pre>\n    </p>\n    <p>\n        As the <code>// Impure</code> comment may suggest, this constitutes the first impure layer of an <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a>.\n    </p>\n    <h3 id=\"e7d6b741e8e1406b9588a5788df0ff9b\">\n        Aggregating the results <a href=\"#e7d6b741e8e1406b9588a5788df0ff9b\">#</a>\n    </h3>\n    <p>\n        Since the above statement awaits the traversal, the <code>results</code> object is a 'pure' object that can be passed to a pure function. This does, however, assume that <code>ShoppingListItem</code> is an immutable object.\n    </p>\n    <p>\n        The next step must collect results and <code>NotFound</code>-related failures, but contrary to the previous article, it must short-circuit if it encounters an <code>Error</code>. This again suggests an Either-like data structure, but again I'll repurpose a <code>OneOf</code> container. I'll start by defining a <code>seed</code> for an aggregation (a <em>left fold</em>).\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OneOf</span>&lt;(<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;),&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"color:#74531f;\">FromT0</span>(([],&nbsp;[]));</pre>\n    </p>\n    <p>\n        This type can be either a tuple or an error. The .NET tendency is often to define an explicit <code>Result&lt;TSuccess, TFailure&gt;</code> type, where <code>TSuccess</code> is defined to the left of <code>TFailure</code>. This, for example, is <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/results\">how F# defines Result types</a>, and other .NET libraries tend to emulate that design. That's also what I've done here, although I admit that I'm regularly confused when going back and forth between F# and Haskell, where the <code>Right</code> case is <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> considered to indicate success.\n    </p>\n    <p>\n        As already discussed, OneOf follows a zero-indexed naming convention for type parameters, so <code>FromT0</code> indicates the first (or leftmost) case. The seed is thus initialized with a tuple that contains two empty sequences.\n    </p>\n    <p>\n        As in the previous article, you can now use the <a href=\"https://learn.microsoft.com/dotnet/api/system.linq.enumerable.aggregate\">Aggregate</a> method to collect the result you want.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">BulkUpdateResult</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">MapT0</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">t</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item1.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item2)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">MapT0</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">t</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item1,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item2.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item))),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">e</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">e</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">MapT0</span>(<span style=\"font-weight:bold;color:#1f377f;\">t</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item1.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>(),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">t</span>.Item2.<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>()));</pre>\n    </p>\n    <p>\n        This expression is a two-step composition. I'll get back to the concluding <code>MapT0</code> in a moment, but let's first discuss what happens in the <code>Aggregate</code> step. Since the <code>state</code> is now a discriminated union, the big lambda expression not only has to <code>Match</code> on the <code>result</code>, but it also has to deal with the two mutually exclusive cases in which <code>state</code> can be.\n    </p>\n    <p>\n        Although it comes third in the code listing, it may be easiest to explain if we start with the error case. Keep in mind that the <code>seed</code> starts with the optimistic assumption that the operation is going to succeed. If, however, we encounter an error <code>e</code>, we now switch the <code>state</code> to the <code>Error</code> case. Once in that state, it stays there.\n    </p>\n    <p>\n        The two other <code>result</code> cases map over the first (i.e. the success) case, appending the result to the appropriate sequence in the tuple <code>t</code>. Since these expressions map over the first (zero-indexed) case, these updates only run as long as the <code>state</code> is in the success case. If the <code>state</code> is in the error state, these lambda expressions don't run, and the <code>state</code> doesn't change.\n    </p>\n    <p>\n        After having collected the tuple of sequences, the final step is to map over the success case, turning the tuple <code>t</code> into a <code>BulkUpdateResult</code>. That's what <code>MapT0</code> does: It maps over the first (zero-indexed) case, which contains the tuple of sequences. It's a standard <a href=\"/2018/03/22/functors\">functor</a> projection.\n    </p>\n    <h3 id=\"e4c3b20a30c34b4785ccdd886b20d197\">\n        Saving the changes and returning the results <a href=\"#e4c3b20a30c34b4785ccdd886b20d197\">#</a>\n    </h3>\n    <p>\n        The final, impure step in the sandwich is to save the changes and return the results:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">bulkUpdateResult</span>&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">Ok</span>(<span style=\"font-weight:bold;color:#1f377f;\">bulkUpdateResult</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">_</span>&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">BadRequest</span>()));</pre>\n    </p>\n    <p>\n        Note that it only calls <code>dbContext.SaveChangesAsync()</code> in case the <code>result</code> is a success.\n    </p>\n    <h3 id=\"a6d28bd9d66a4e068bc4cd4ba21dde32\">\n        Accumulating the bulk-update result <a href=\"#a6d28bd9d66a4e068bc4cd4ba21dde32\">#</a>\n    </h3>\n    <p>\n        So far, I've assumed that the final <code>BulkUpdateResult</code> class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use that to aggregate the result, instead of an anonymous tuple.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>([..&nbsp;StoredItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>],&nbsp;FailedItems);\n \n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>(StoredItems,&nbsp;[..&nbsp;FailedItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>]);</pre>\n    </p>\n    <p>\n        I would have personally preferred the name <code>NotFound</code> instead of <code>Fail</code>, but I was going with the original post's <code>failedItems</code> terminology, and I thought that it made more sense to call a method <code>Fail</code> when it adds to a collection called <code>FailedItems</code>.\n    </p>\n    <p>\n        Adding these two instance methods to <code>BulkUpdateResult</code> simplifies the composing code:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">BulkUpdateResult</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">BulkUpdateResult</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;.<span style=\"color:#74531f;\">FromT0</span>(<span style=\"color:blue;\">new</span>([],&nbsp;[])),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">MapT0</span>(<span style=\"font-weight:bold;color:#1f377f;\">bur</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">bur</span>.<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">MapT0</span>(<span style=\"font-weight:bold;color:#1f377f;\">bur</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">bur</span>.<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">e</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">e</span>));</pre>\n    </p>\n    <p>\n        This variation starts with an empty <code>BulkUpdateResult</code> and then uses <code>Store</code> or <code>Fail</code> as appropriate to update the state. The final, impure step of the sandwich remains the same.\n    </p>\n    <h3 id=\"ed88649e2d75403ab654fe7c034b6c1f\">\n        Conclusion <a href=\"#ed88649e2d75403ab654fe7c034b6c1f\">#</a>\n    </h3>\n    <p>\n        It's a bit more tricky to implement a short-circuiting traversal than the standard traversal. You can, still, implement a specialized <code>Sequence</code> or <code>Traverse</code> method, but it requires that the input stream carries enough information to decide when to stop processing more items. In this article, I used a specialized three-way union, but you could generalize this to use a standard Either or Result type.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/12/02/short-circuiting-an-asynchronous-traversal/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/11/25/nested-monads",
      "Title": "Nested monads",
      "PublishDate": "2024-11-25T07:31:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>You can stack some monads in such a way that the composition is also a monad.</em>\n    </p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In a previous article you learned that <a href=\"/2024/10/28/functor-compositions\">nested functors form a functor</a>. You may have wondered if <a href=\"/2022/03/28/monads\">monads</a> compose in the same way. Does a monad nested in a monad form a monad?\n\t</p>\n    <p>\n        As far as I know, there's no universal rule like that, but some monads compose well. Fortunately, it's been my experience that the combinations that you need in practice are among those that exist and are well-known. In a <a href=\"https://www.haskell.org/\">Haskell</a> context, it's often the case that you need to run some kind of 'effect' inside <code>IO</code>. Perhaps you want to use <code>Maybe</code> or <code>Either</code> nested within <code>IO</code>.\n    </p>\n    <p>\n        In .NET, you may run into a similar need to compose task-based programming with an effect. This happens more often in <a href=\"https://fsharp.org/\">F#</a> than in C#, since F# comes with other native monads (<code>option</code> and <code>Result</code>, to name the most common).\n    </p>\n    <h3 id=\"d84f448d09124e31a8fbeb27abe3d826\">\n        Abstract shape <a href=\"#d84f448d09124e31a8fbeb27abe3d826\">#</a>\n    </h3>\n    <p>\n        You'll see some real examples in a moment, but as usual it helps to outline what it is that we're looking for. Imagine that you have a monad. We'll call it <code>F</code> in keeping with tradition. In this article series, you've seen how two or more <a href=\"/2018/03/22/functors\">functors</a> compose. When discussing the abstract shapes of things, we've typically called our two abstract functors <code>F</code> and <code>G</code>. I'll stick to that naming scheme here, because monads are functors (<a href=\"/2022/03/28/monads\">that you can flatten</a>).\n    </p>\n    <p>\n        Now imagine that you have a value that stacks two monads: <code>F&lt;G&lt;T&gt;&gt;</code>. If the inner monad <code>G</code> is the 'right' kind of monad, that configuration itself forms a monad.\n    </p>\n    <p>\n        <img src=\"/content/binary/nested-monads-transformed-to-single-monad.png\" alt=\"Nested monads depicted as concentric circles. To the left the circle F contains the circle G that again contains the circle a. To the right the wider circle FG contains the circle that contains a. An arrow points from the left circles to the right circles.\">\n    </p>\n    <p>\n        In the diagram, I've simply named the combined monad <code>FG</code>, which is a naming strategy I've seen in the real world, too: <code>TaskResult</code>, etc.\n    </p>\n    <p>\n        As I've already mentioned, if there's a general theorem that says that this is always possible, I'm not aware of it. To the contrary, I seem to recall reading that this is distinctly not the case, but the source escapes me at the moment. One hint, though, is offered in the documentation of <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html\">Data.Functor.Compose</a>:\n    </p>\n    <blockquote>\n        <p>\n            \"The composition of applicative functors is always applicative, but the composition of monads is not always a monad.\"\n        </p>\n    </blockquote>\n    <p>\n        Thankfully, the monads that you mostly need to compose do, in fact, compose. They include <a href=\"/2022/04/25/the-maybe-monad\">Maybe</a>, <a href=\"/2022/05/09/an-either-monad\">Either</a>, <a href=\"/2022/06/20/the-state-monad\">State</a>, <a href=\"/2022/11/14/the-reader-monad\">Reader</a>, and <a href=\"/2022/05/16/the-identity-monad\">Identity</a> (okay, that one maybe isn't that useful). In other words, any monad <code>F</code> that composes with e.g. <code>Maybe</code>, that is, <code>F&lt;Maybe&lt;T&gt;&gt;</code>, also forms a monad.\n    </p>\n    <p>\n        Notice that it's the 'inner' monad that determines whether composition is possible. Not the 'outer' monad.\n    </p>\n    <p>\n        For what it's worth, I'm basing much of this on my personal experience, which was again helpfully guided by <a href=\"https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Class.html\">Control.Monad.Trans.Class</a>. I don't, however, wish to turn this article into an article about monad transformers, because if you already know Haskell, you can read the documentation and look at examples. And if you don't know Haskell, the specifics of monad transformers don't readily translate to languages like C# or F#.\n    </p>\n    <p>\n        The conclusions do translate, but the specific language mechanics don't.\n    </p>\n    <p>\n        Let's look at some common examples.\n    </p>\n    <h3 id=\"51dcb0d54afc46d7b26b7f4021e08dbc\">\n        TaskMaybe monad <a href=\"#51dcb0d54afc46d7b26b7f4021e08dbc\">#</a>\n    </h3>\n    <p>\n        We'll start with a simple, yet realistic example. The article <a href=\"/2019/02/11/asynchronous-injection\">Asynchronous Injection</a> shows a simple operation that involves reading from a database, making a decision, and potentially writing to the database. The final composition, repeated here for your convenience, is an asynchronous (that is, <code>Task</code>-based) process.\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;maîtreD.<span style=\"font-weight:bold;color:#74531f;\">TryAccept</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">m</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">m</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(<span style=\"font-weight:bold;color:#74531f;\">InternalServerError</span>(<span style=\"color:#a31515;\">&quot;Table&nbsp;unavailable&quot;</span>),&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Ok</span>);</pre>\n    </p>\n    <p>\n        The problem here is that <code>TryAccept</code> returns <code><span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;</code>, but since the overall workflow already 'runs in' an <a href=\"/2022/06/06/asynchronous-monads\">asynchronous monad</a> (<code>Task</code>), the monads are now nested as <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code>.\n    </p>\n    <p>\n        The way I dealt with that issue in the above code snippet was to rely on a <a href=\"/2024/11/11/traversals\">traversal</a>, but it's actually an inelegant solution. The way that the <code>SelectMany</code> invocation maps over the <code><span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">Reservation</span>&gt;</code> <code>m</code> is awkward. Instead of <a href=\"/2018/07/02/terse-operators-make-business-code-more-readable\">composing a business process</a>, the scaffolding is on display, so to speak. Sometimes this is unavoidable, but at other times, there may be a better way.\n    </p>\n    <p>\n        In my defence, when I wrote that article in 2019 I had another pedagogical goal than teaching nested monads. It turns out, however, that you can rewrite the business process using the <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code> stack as a monad in its own right.\n    </p>\n    <p>\n        A monad needs two functions: <em>return</em> and either <em>bind</em> or <em>join</em>. In C# or F#, you can often treat <em>return</em> as 'implied', in the sense that you can always wrap <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> in a call to <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.fromresult\">Task.FromResult</a>. You'll see that in a moment.\n    </p>\n    <p>\n        While you can be cavalier about monadic <em>return</em>, you'll need to explicitly implement either <em>bind</em> or <em>join</em>. In this case, it turns out that the sample code base already had a <code>SelectMany</code> implementation:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">m</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">m</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">nothing</span>:&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">just</span>:&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>));\n}</pre>\n    </p>\n    <p>\n        The method first awaits the <code>Maybe</code> value, and then proceeds to <code>Match</code> on it. In the <code>nothing</code> case, you see the implicit <em>return</em> being used. In the <code>just</code> case, the <code>SelectMany</code> method calls <code>selector</code> with whatever <code>x</code> value was contained in the <code>Maybe</code> object. The result of calling <code>selector</code> already has the desired type <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;</code>, so the implementation simply returns that value without further ado.\n    </p>\n    <p>\n        This enables you to rewrite the <code>SelectMany</code> call in the business process so that it instead looks like this:\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;maîtreD.<span style=\"font-weight:bold;color:#74531f;\">TryAccept</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:blue;\">int</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">i</span>)))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(<span style=\"font-weight:bold;color:#74531f;\">InternalServerError</span>(<span style=\"color:#a31515;\">&quot;Table&nbsp;unavailable&quot;</span>),&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Ok</span>);</pre>\n    </p>\n    <p>\n        At first glance, it doesn't look like much of an improvement. To be sure, the lambda expression within the <code>SelectMany</code> method no longer operates on a <code>Maybe</code> value, but rather on the <code>Reservation</code> Domain Model <code>r</code>. On the other hand, we're now saddled with that graceless <code><span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:blue;\">int</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">i</span>))</code>.\n    </p>\n    <p>\n        Had this been Haskell, we could have made this more succinct by eta reducing the <code>Maybe</code> case constructor and used the <code>&lt;$&gt;</code> infix operator instead of <code>fmap</code>; something like <code>Just &lt;$&gt; create r</code>. In C#, on the other hand, we can do something that Haskell doesn't allow. We can overload the <code>SelectMany</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">y</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">y</span>)));\n}</pre>\n    </p>\n    <p>\n        This overload generalizes the 'pattern' exemplified by the above business process composition. Instead of a specific method call, it now works with any <code>selector</code> function that returns <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code>. Since <code>selector</code> only returns a <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code> value, and not a <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;</code> value, as actually required in this nested monad, the overload has to map (that is, <code>Select</code>) the result by wrapping it in a <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code>.\n    </p>\n    <p>\n        This now enables you to improve the business process composition to something more readable.\n    </p>\n    <p>\n        <pre><span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">ReadReservations</span>(<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&gt;&nbsp;maîtreD.<span style=\"font-weight:bold;color:#74531f;\">TryAccept</span>(<span style=\"font-weight:bold;color:#1f377f;\">rs</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">reservation</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(<span style=\"font-weight:bold;color:#74531f;\">InternalServerError</span>(<span style=\"color:#a31515;\">&quot;Table&nbsp;unavailable&quot;</span>),&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Ok</span>);</pre>\n    </p>\n    <p>\n        It even turned out to be possible to eta reduce the lambda expression instead of the (also valid, but more verbose) <code><span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;Repository.<span style=\"font-weight:bold;color:#74531f;\">Create</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>)</code>.\n    </p>\n    <p>\n        If you're interested in the sample code, I've pushed a branch named <code>use-monad-stack</code> to <a href=\"https://github.com/ploeh/asynchronous-injection\">the GitHub repository</a>.\n    </p>\n    <p>\n        Not surprisingly, the F# <code>bind</code> function is much terser:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">bind</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&nbsp;<span style=\"color:blue;\">async</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">match!</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;<span style=\"color:blue;\">with</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:#2b91af;\">Some</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x&#39;</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">return!</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x&#39;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:#2b91af;\">None</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">None</span>&nbsp;}</pre>\n    </p>\n    <p>\n        You can find that particular snippet in the code base that accompanies the article <a href=\"/2019/12/02/refactoring-registration-flow-to-functional-architecture\">Refactoring registration flow to functional architecture</a>, although as far as I can tell, it's not actually in use in that code base. I probably just added it because I could.\n    </p>\n    <p>\n        You can find Haskell examples of combining <a href=\"https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-Maybe.html\">MaybeT</a> with <code>IO</code> in various articles on this blog. One of them is <a href=\"/2017/02/02/dependency-rejection\">Dependency rejection</a>.\n    </p>\n    <h3 id=\"74c0764ee623459596700a6462dd5452\">\n        TaskResult monad <a href=\"#74c0764ee623459596700a6462dd5452\">#</a>\n    </h3>\n    <p>\n        A similar, but slightly more complex, example involves nesting Either values in asynchronous workflows. In some languages, such as F#, Either is rather called <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/results\">Result</a>, and asynchronous workflows are modelled by a <code>Task</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a>, as already demonstrated above. Thus, on .NET at least, this nested monad is often called <em>TaskResult</em>, but you may also see <em>AsyncResult</em>, <em>AsyncEither</em>, or other combinations. Depending on the programming language, such names may be used only for modules, and not for the container type itself. In C# or F# code, for example, you may look in vain after a class called <code>TaskResult&lt;T&gt;</code>, but rather find a <code>TaskResult</code> static class or module.\n    </p>\n    <p>\n        In C# you can define monadic <em>bind</em> like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">source</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(<span style=\"color:blue;\">nameof</span>(<span style=\"font-weight:bold;color:#1f377f;\">source</span>));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>.<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">l</span>&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"color:#2b91af;\">Either</span>.<span style=\"color:#74531f;\">Left</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">l</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>).<span style=\"font-weight:bold;color:#74531f;\">ConfigureAwait</span>(<span style=\"color:blue;\">false</span>);\n}</pre>\n    </p>\n    <p>\n        Here I've again passed the eta-reduced <code>selector</code> straight to the <em>right</em> case of the <code>Either</code> value, but <code><span style=\"font-weight:bold;color:#1f377f;\">r</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">r</span>)</code> works, too.\n    </p>\n    <p>\n        The <em>left</em> case shows another example of 'implicit monadic <em>return</em>'. I didn't bother defining an explicit <code>Return</code> function, but rather use <code><span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">FromResult</span>(<span style=\"color:#2b91af;\">Either</span>.<span style=\"color:#74531f;\">Left</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">l</span>))</code> to return a <code><span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;</code> value.\n    </p>\n    <p>\n        As is the case with C#, you'll also need to add a special overload to enable the syntactic sugar of <a href=\"https://learn.microsoft.com/dotnet/csharp/linq/get-started/query-expression-basics\">query expressions</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">SelectMany</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">R</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">Either</span>&lt;<span style=\"color:#2b91af;\">L</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">k</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">R</span>,&nbsp;<span style=\"color:#2b91af;\">U</span>,&nbsp;<span style=\"color:#2b91af;\">R1</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">source</span>.<span style=\"font-weight:bold;color:#74531f;\">SelectMany</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">k</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">y</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">y</span>)));\n}</pre>\n    </p>\n    <p>\n        You'll see a comprehensive example using these functions in a future article.\n    </p>\n    <p>\n        In F# I'd often first define a module with a few functions including <code>bind</code>, and then use those implementations to define a <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/computation-expressions\">computation expression</a>, but in <a href=\"/2016/04/11/async-as-surrogate-io\">one article</a>, I jumped straight to the expression builder:\n    </p>\n    <p>\n\t\t<pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#4ec9b0;\">AsyncEitherBuilder</span>&nbsp;()&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Async&lt;Result&lt;&#39;a,&#39;c&gt;&gt;&nbsp;*&nbsp;(&#39;a&nbsp;-&gt;&nbsp;Async&lt;Result&lt;&#39;b,&#39;c&gt;&gt;)</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;-&gt;&nbsp;Async&lt;Result&lt;&#39;b,&#39;c&gt;&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;this.<span style=\"color:navy;\">Bind</span>(x,&nbsp;<span style=\"color:navy;\">f</span>)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">async</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;x&#39;&nbsp;=&nbsp;x\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">match</span>&nbsp;x&#39;&nbsp;<span style=\"color:blue;\">with</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:navy;\">Success</span>&nbsp;s&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">return!</span>&nbsp;<span style=\"color:navy;\">f</span>&nbsp;s\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:navy;\">Failure</span>&nbsp;f&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:navy;\">Failure</span>&nbsp;f&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;&#39;a&nbsp;-&gt;&nbsp;&#39;a</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">member</span>&nbsp;this.<span style=\"color:navy;\">ReturnFrom</span>&nbsp;x&nbsp;=&nbsp;x\n \n<span style=\"color:blue;\">let</span>&nbsp;asyncEither&nbsp;=&nbsp;<span style=\"color:#4ec9b0;\">AsyncEitherBuilder</span>&nbsp;()</pre>\n\t</p>\n    <p>\n        That article also shows usage examples. Another article, <a href=\"/2022/02/14/a-conditional-sandwich-example\">A conditional sandwich example</a>, shows more examples of using this nested monad, although there, the computation expression is named <code>taskResult</code>.\n    </p>\n    <h3 id=\"e6426619b2ae4f8d97d62edfe9cae0ca\">\n        Stateful computations that may fail <a href=\"#e6426619b2ae4f8d97d62edfe9cae0ca\">#</a>\n    </h3>\n    <p>\n        To be honest, you mostly run into a scenario where nested monads are useful when some kind of 'effect' (errors, mostly) is embedded in an <a href=\"https://en.wikipedia.org/wiki/Input/output\">I/O</a>-bound computation. In Haskell, this means <code>IO</code>, in C# <code>Task</code>, and in F# either <code>Task</code> or <code>Async</code>.\n    </p>\n    <p>\n        Other combinations are possible, however, but I've rarely encountered a need for additional nested monads outside of Haskell. In multi-paradigmatic languages, you can usually find other good designs that address issues that you may occasionally run into in a purely functional language. The following example is a Haskell-only example. You can skip it if you don't know or care about Haskell.\n    </p>\n    <p>\n        Imagine that you want to keep track of some statistics related to a software service you offer. If the <a href=\"https://en.wikipedia.org/wiki/Variance\">variance</a> of some number (say, response time) exceeds 10 then you want to issue an alert that the <a href=\"https://en.wikipedia.org/wiki/Service-level_agreement\">SLA</a> was violated. Apparently, in your system, reliability means staying consistent.\n    </p>\n    <p>\n        You have millions of observations, and they keep arriving, so you need an <a href=\"https://en.wikipedia.org/wiki/Online_algorithm\">online algorithm</a>. For average and variance we'll use <a href=\"https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\">Welford's algorithm</a>.\n    </p>\n    <p>\n        The following code uses these imports:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">import</span>&nbsp;Control.Monad\n<span style=\"color:blue;\">import</span>&nbsp;Control.Monad.Trans.State.Strict\n<span style=\"color:blue;\">import</span>&nbsp;Control.Monad.Trans.Maybe</pre>\n    </p>\n    <p>\n        First, you can define a data structure to hold the aggregate values required for the algorithm, as well as an initial, empty value:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Aggregate&nbsp;=&nbsp;Aggregate&nbsp;{&nbsp;count&nbsp;::&nbsp;Int,&nbsp;meanA&nbsp;::&nbsp;Double,&nbsp;m2&nbsp;::&nbsp;Double&nbsp;}&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Eq</span>,&nbsp;<span style=\"color:#2b91af;\">Show</span>)\n \n<span style=\"color:#2b91af;\">emptyA</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>\nemptyA&nbsp;=&nbsp;Aggregate&nbsp;0&nbsp;0&nbsp;0</pre>\n    </p>\n    <p>\n        You can also define a function to update the aggregate values with a new observation:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">update</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>\nupdate&nbsp;(Aggregate&nbsp;count&nbsp;mean&nbsp;m2)&nbsp;x&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;count&#39;&nbsp;=&nbsp;count&nbsp;+&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta&nbsp;=&nbsp;x&nbsp;-&nbsp;mean\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mean&#39;&nbsp;=&nbsp;mean&nbsp;+&nbsp;delta&nbsp;/&nbsp;<span style=\"color:blue;\">fromIntegral</span>&nbsp;count&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta2&nbsp;=&nbsp;x&nbsp;-&nbsp;mean&#39;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m2&#39;&nbsp;=&nbsp;m2&nbsp;+&nbsp;delta&nbsp;*&nbsp;delta2\n&nbsp;&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Aggregate&nbsp;count&#39;&nbsp;mean&#39;&nbsp;m2&#39;</pre>\n    </p>\n    <p>\n        Given an existing <code>Aggregate</code> record and a new observation, this function implements the algorithm to calculate a new <code>Aggregate</code> record.\n    </p>\n    <p>\n        The values in an <code>Aggregate</code> record, however, are only intermediary values that you can use to calculate statistics such as mean, variance, and sample variance. You'll need a data type and function to do that, as well:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Statistics&nbsp;=\n&nbsp;&nbsp;Statistics\n&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;mean&nbsp;::&nbsp;Double,&nbsp;variance&nbsp;::&nbsp;Double,&nbsp;sampleVariance&nbsp;::&nbsp;Maybe&nbsp;Double&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Eq</span>,&nbsp;<span style=\"color:#2b91af;\">Show</span>)\n \n<span style=\"color:#2b91af;\">extractStatistics</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;<span style=\"color:blue;\">Statistics</span>\nextractStatistics&nbsp;(Aggregate&nbsp;count&nbsp;mean&nbsp;m2)&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;count&nbsp;&lt;&nbsp;1&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Nothing\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;variance&nbsp;=&nbsp;m2&nbsp;/&nbsp;<span style=\"color:blue;\">fromIntegral</span>&nbsp;count\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sampleVariance&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;count&nbsp;&lt;&nbsp;2&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Nothing&nbsp;<span style=\"color:blue;\">else</span>&nbsp;Just&nbsp;$&nbsp;m2&nbsp;/&nbsp;<span style=\"color:blue;\">fromIntegral</span>&nbsp;(count&nbsp;-&nbsp;1)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">in</span>&nbsp;Just&nbsp;$&nbsp;Statistics&nbsp;mean&nbsp;variance&nbsp;sampleVariance</pre>\n    </p>\n    <p>\n        This is where the computation becomes 'failure-prone'. Granted, we only have a real problem when we have zero observations, but this still means that we need to return a <code>Maybe Statistics</code> value in order to avoid division by zero.\n    </p>\n    <p>\n        (There might be other designs that avoid that problem, or you might simply decide to tolerate that edge case and code around it in other ways. I've decided to design the <code>extractStatistics</code> function in this particular way in order to furnish an example. Work with me here.)\n    </p>\n    <p>\n        Let's say that as the next step, you'd like to compose these two functions into a single function that both adds a new observation, computes the statistics, but also returns the updated <code>Aggregate</code>.\n    </p>\n    <p>\n        You <em>could</em> write it like this:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">addAndCompute</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;(<span style=\"color:blue;\">Statistics</span>,&nbsp;<span style=\"color:blue;\">Aggregate</span>)\naddAndCompute&nbsp;x&nbsp;agg&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;agg&#39;&nbsp;=&nbsp;update&nbsp;agg&nbsp;x\n&nbsp;&nbsp;stats&nbsp;&lt;-&nbsp;extractStatistics&nbsp;agg&#39;\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(stats,&nbsp;agg&#39;)</pre>\n    </p>\n    <p>\n        This implementation uses <code>do</code> notation to automate handling of <code>Nothing</code> values. Still, it's a bit inelegant with its two <code>agg</code> values only distinguishable by the prime sign after one of them, and the need to explicitly return a tuple of the value and the new state.\n    </p>\n    <p>\n        This is the kind of problem that the State monad addresses. You could instead write the function like this:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">addAndCompute</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">State</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;(<span style=\"color:#2b91af;\">Maybe</span>&nbsp;<span style=\"color:blue;\">Statistics</span>)\naddAndCompute&nbsp;x&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;modify&nbsp;$&nbsp;<span style=\"color:blue;\">flip</span>&nbsp;update&nbsp;x\n&nbsp;&nbsp;gets&nbsp;extractStatistics</pre>\n    </p>\n    <p>\n        You could actually also write it as a one-liner, but that's already a bit too terse to my liking:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">addAndCompute</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">State</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;(<span style=\"color:#2b91af;\">Maybe</span>&nbsp;<span style=\"color:blue;\">Statistics</span>)\naddAndCompute&nbsp;x&nbsp;=&nbsp;modify&nbsp;(`update`&nbsp;x)&nbsp;&gt;&gt;&nbsp;gets&nbsp;extractStatistics</pre>\n    </p>\n    <p>\n        And if you really hate your co-workers, you can always visit <a href=\"https://pointfree.io\">pointfree.io</a> to entirely obscure that expression, but I digress.\n    </p>\n    <p>\n        The point is that the State monad <a href=\"/ref/doocautbm\">amplifies the essential and eliminates the irrelevant</a>.\n    </p>\n    <p>\n        Now you'd like to add a function that issues an alert if the variance is greater than 10. Again, you <em>could</em> write it like this:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">monitor</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">State</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;(<span style=\"color:#2b91af;\">Maybe</span>&nbsp;<span style=\"color:#2b91af;\">String</span>)\nmonitor&nbsp;x&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;stats&nbsp;&lt;-&nbsp;addAndCompute&nbsp;x\n&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;stats&nbsp;<span style=\"color:blue;\">of</span>\n&nbsp;&nbsp;&nbsp;&nbsp;Just&nbsp;Statistics&nbsp;{&nbsp;variance&nbsp;}&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;10&nbsp;&lt;&nbsp;variance\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Just&nbsp;<span style=\"color:#a31515;\">&quot;SLA&nbsp;violation&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;Nothing\n&nbsp;&nbsp;&nbsp;&nbsp;Nothing&nbsp;-&gt;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Nothing</pre>\n    </p>\n    <p>\n        But again, the code is graceless with its explicit handling of <code>Maybe</code> cases. Whenever you see code that matches <code>Maybe</code> cases and maps <code>Nothing</code> to <code>Nothing</code>, your spider sense should be tingling. Could you abstract that away with a functor or monad?\n    </p>\n    <p>\n        Yes you can! You can use the <code>MaybeT</code> monad transformer, which nests <code>Maybe</code> computations inside another monad. In this case <code>State</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">monitor</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Double</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">State</span>&nbsp;<span style=\"color:blue;\">Aggregate</span>&nbsp;(<span style=\"color:#2b91af;\">Maybe</span>&nbsp;<span style=\"color:#2b91af;\">String</span>)\nmonitor&nbsp;x&nbsp;=&nbsp;runMaybeT&nbsp;$&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;Statistics&nbsp;{&nbsp;variance&nbsp;}&nbsp;&lt;-&nbsp;MaybeT&nbsp;$&nbsp;addAndCompute&nbsp;x\n&nbsp;&nbsp;guard&nbsp;(10&nbsp;&lt;&nbsp;variance)\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#a31515;\">&quot;SLA&nbsp;Violation&quot;</span></pre>\n    </p>\n    <p>\n        The function type is the same, but the implementation is much simpler. First, the code lifts the <code>Maybe</code>-valued <code>addAndCompute</code> result into <code>MaybeT</code> and pattern-matches on the <code>variance</code>. Since the code is now 'running in' a <code>Maybe</code>-like context, this line of code only executes if there's a <code>Statistics</code> value to extract. If, on the other hand, <code>addAndCompute</code> returns <code>Nothing</code>, the function already short-circuits there.\n    </p>\n    <p>\n        The <code>guard</code> works just like imperative <a href=\"https://en.wikipedia.org/wiki/Guard_(computer_science)\">Guard Clauses</a>. The third line of code only runs if the <code>variance</code> is greater than 10. In that case, it returns an alert message.\n    </p>\n    <p>\n        The entire <code>do</code> workflow gets unwrapped with <code>runMaybeT</code> so that we return back to a normal stateful computation that may fail.\n    </p>\n    <p>\n        Let's try it out:\n    </p>\n    <p>\n        <pre>ghci&gt; (evalState $ monitor 1 &gt;&gt; monitor 7) emptyA\nNothing\nghci&gt; (evalState $ monitor 1 &gt;&gt; monitor 8) emptyA\nJust \"SLA Violation\"</pre>\n    </p>\n    <p>\n        Good, rigorous testing suggests that it's working.\n    </p>\n    <h3 id=\"e67fa8bc1b40459c91c1c8b45595c379\">\n        Conclusion <a href=\"#e67fa8bc1b40459c91c1c8b45595c379\">#</a>\n    </h3>\n    <p>\n        You sometimes run into situations where monads are nested. This mostly happens in I/O-bound computations, where you may have a Maybe or Either value embedded inside <code>Task</code> or <code>IO</code>. This can sometimes make working with the 'inner' monad awkward, but in many cases there's a good solution at hand.\n    </p>\n    <p>\n        Some monads, like Maybe, Either, State, Reader, and Identity, nest nicely inside other monads. Thus, if your 'inner' monad is one of those, you can turn the nested arrangement into a monad in its own right. This may help simplify your code base.\n    </p>\n    <p>\n        In addition to the common monads listed here, there are few more exotic ones that also play well in a nested configuration. Additionally, if your 'inner' monad is a custom data structure of your own creation, it's up to you to investigate if it nests nicely in another monad. As far as I can tell, though, if you can make it nest in one monad (e.g Task, Async, or IO) you can probably make it nest in any monad.\n    </p>\n\t<p>\n\t\t<strong>Next:</strong> <a href=\"/2018/01/08/software-design-isomorphisms\">Software design isomorphisms</a>.\n\t</p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/11/25/nested-monads/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/11/18/collecting-and-handling-result-values",
      "Title": "Collecting and handling result values",
      "PublishDate": "2024-11-18T07:39:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>The answer is traverse. It's always traverse.</em>\n    </p>\n    <p>\n        I recently came across <a href=\"https://stackoverflow.com/q/79112836/126014\">a Stack Overflow question</a> about collecting and handling <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">sum types</a> (AKA discriminated unions or, in this case, result types). While the question was tagged <em>functional-programming</em>, the overall structure of the code was so imperative, with so much interleaved <a href=\"https://en.wikipedia.org/wiki/Input/output\">I/O</a>, that it hardly <a href=\"/2018/11/19/functional-architecture-a-definition\">qualified as functional architecture</a>.\n    </p>\n    <p>\n        Instead, I gave <a href=\"https://stackoverflow.com/a/79112992/126014\">an answer which involved a minimal change to the code</a>. Subsequently, the original poster asked to see a more functional version of the code. That's a bit too large a task for a Stack Overflow answer, I think, so I'll do it here on the blog instead.\n    </p>\n    <p>\n        Further comments and discussion on the original post reveal that the poster is interested in two alternatives. I'll start with the alternative that's only discussed, but not shown, in the question. The motivation for this ordering is that this variation is easier to implement than the other one, and I consider it pedagogical to start with the simplest case.\n    </p>\n    <p>\n        I'll do that in this article, and then follow up with another article that covers the short-circuiting case.\n    </p>\n    <h3 id=\"9b3987ad5daf4df48c8155a54fb39318\">\n        Imperative outset <a href=\"#9b3987ad5daf4df48c8155a54fb39318\">#</a>\n    </h3>\n    <p>\n        To begin, consider this mostly imperative code snippet:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>);\n<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;(<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;)&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n}\n \n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n \n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">Ok</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>]));</pre>\n    </p>\n    <p>\n        There's quite a few things to take in, and one has to infer most of the types and APIs, since the original post didn't show more code than that. If you're used to engaging with Stack Overflow questions, however, it's not too hard to figure out what most of the moving parts do.\n    </p>\n    <p>\n        The most non-obvious detail is that the code uses a library called <a href=\"https://github.com/mcintyre321/OneOf/\">OneOf</a>, which supplies general-purpose, but rather abstract, sum types. Both the container type <code>OneOf</code>, as well as the two indicator types <code>NotFound</code> and <code>Error</code> are defined in that library.\n    </p>\n    <p>\n        The <code>Match</code> method implements standard <a href=\"/2018/05/22/church-encoding\">Church encoding</a>, which enables the code to pattern-match on the three alternative values that <code>UpdateItem</code> returns.\n    </p>\n    <p>\n        One more detail also warrants an explicit description: The <code>itemsToUpdate</code> object is an input argument of the type <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;</code>.\n    </p>\n    <p>\n        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?\n    </p>\n    <h3 id=\"c4e1b030e919464aa22ade11a511414f\">\n        Standard traversal <a href=\"#c4e1b030e919464aa22ade11a511414f\">#</a>\n    </h3>\n    <p>\n        I'll pretend that we only need to turn the above code snippet into a functional design. Thus, I'm ignoring that the code is most likely part of a larger code base. Because of the implied database interaction, the method isn't a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. Unless it's a top-level method (that is, at the boundary of the application), it doesn't exemplify larger-scale <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>.\n    </p>\n    <p>\n        That said, my goal is to refactor the code to an <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a>: Impure actions first, then the meat of the functionality as a pure function, and then some more impure actions to complete the functionality. This strongly suggests that the first step should be to map over <code>itemsToUpdate</code> and call <code>UpdateItem</code> for each.\n    </p>\n    <p>\n        If, however, you do that, you get this:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));</pre>\n    </p>\n    <p>\n        The <code>results</code> object is a sequence of tasks. If we consider <a href=\"/2020/07/27/task-asynchronous-programming-as-an-io-surrogate\">Task as a surrogate for IO</a>, each task should be considered impure, as it's either non-deterministic, has side effects, or both. This means that we can't pass <code>results</code> to a pure function, and that frustrates the ambition to structure the code as an Impureim Sandwich.\n    </p>\n    <p>\n        This is one of the most common problems in functional programming, and the answer is usually: Use a <a href=\"/2024/11/11/traversals\">traversal</a>.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));</pre>\n    </p>\n    <p>\n        Because this first, impure layer of the sandwich awaits the task, <code>results</code> is now an immutable value that can be passed to the pure step. This, by the way, assumes that <code>ShoppingListItem</code> is immutable, too.\n    </p>\n    <p>\n        Notice that I adjusted one of the cases of the discriminated union to <code><span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;</code> rather than just <code>NotFound</code>. While the OneOf library ships with a <code>NotFound</code> type, it doesn't have a generic container of that name, so I defined it myself:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>);</pre>\n    </p>\n    <p>\n        I added it to make the next step simpler.\n    </p>\n    <h3 id=\"8f0e6fb0f34047ed99c59f6140a2b08f\">\n        Aggregating the results <a href=\"#8f0e6fb0f34047ed99c59f6140a2b08f\">#</a>\n    </h3>\n    <p>\n        The next step is to sort the <code>results</code> into three 'buckets', as it were.\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;);\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>))));</pre>\n    </p>\n    <p>\n        It's also possible to inline the <code>seed</code> value, but here I defined it in a separate expression in an attempt at making the code a little more readable. I don't know if I succeeded, because regardless of where it goes, it's hardly <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> to break tuple initialization over multiple lines. I had to, though, because otherwise the code would run <a href=\"/2019/11/04/the-80-24-rule\">too far to the right</a>.\n    </p>\n    <p>\n        The lambda expression handles each <code>result</code> in <code>results</code> and uses <code>Match</code> to append the value to its proper 'bucket'. The outer <code>result</code> is a tuple of the three collections.\n    </p>\n    <h3 id=\"035012be047e431d8904686ec9915b8f\">\n        Saving the changes and returning the results <a href=\"#035012be047e431d8904686ec9915b8f\">#</a>\n    </h3>\n    <p>\n        The final, impure step in the sandwich is to save the changes and return the results:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkResult</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item1],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item2],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item3]));</pre>\n    </p>\n    <p>\n        To be honest, the last line of code is pure, but <a href=\"/2023/10/09/whats-a-sandwich\">that's not unusual</a> when it comes to Impureim Sandwiches.\n    </p>\n    <h3 id=\"178ff7d455e44a619b67d911a6aecba7\">\n        Accumulating the bulk-update result <a href=\"#178ff7d455e44a619b67d911a6aecba7\">#</a>\n    </h3>\n    <p>\n        So far, I've assumed that the final <code>BulkUpdateResult</code> class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use them to aggregate the result, instead of an anonymous tuple.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>([..&nbsp;StoredItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>],&nbsp;FailedItems,&nbsp;Errors);\n \n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>(StoredItems,&nbsp;[..&nbsp;FailedItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>],&nbsp;Errors);\n \n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Error</span>(<span style=\"color:#2b91af;\">Error</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>(StoredItems,&nbsp;FailedItems,&nbsp;[..&nbsp;Errors,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>]);</pre>\n    </p>\n    <p>\n        I would have personally preferred the name <code>NotFound</code> instead of <code>Fail</code>, but I was going with the original post's <code>failedItems</code> terminology, and I thought that it made more sense to call a method <code>Fail</code> when it adds to a collection called <code>FailedItems</code>.\n    </p>\n    <p>\n        Adding these three instance methods to <code>BulkUpdateResult</code> simplifies the composing code:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));\n \n<span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([],&nbsp;[],&nbsp;[]),\n&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Error</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>)));\n \n<span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">result</span>);</pre>\n    </p>\n    <p>\n        This variation starts with an empty <code>BulkUpdateResult</code> and then uses <code>Store</code>, <code>Fail</code>, or <code>Error</code> as appropriate to update the state.\n    </p>\n    <h3 id=\"32e680ea1dbb4bc7bc097e8fcfcb90e9\">\n        Parallel Sequence <a href=\"#32e680ea1dbb4bc7bc097e8fcfcb90e9\">#</a>\n    </h3>\n    <p>\n        If the tasks you want to traverse are thread-safe, you might consider making the traversal concurrent. You can use <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.whenall\">Task.WhenAll</a> for that. It has the same type as <code>Sequence</code>, so if you can live with the extra non-determinism that comes with parallel execution, you can use that instead:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">Sequence</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">WhenAll</span>(<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>);\n}</pre>\n    </p>\n    <p>\n        Since the method signature doesn't change, the rest of the code remains unchanged.\n    </p>\n    <h3 id=\"a54fe20498bd4aca99d7d4184209a4df\">\n        Conclusion <a href=\"#a54fe20498bd4aca99d7d4184209a4df\">#</a>\n    </h3>\n    <p>\n        One of the most common stumbling blocks in functional programming is when you have a collection of values, and you need to perform an impure action (typically I/O) for each. This leaves you with a collection of impure values (<code>Task</code> in C#, <code>Task</code> or <code>Async</code> in <a href=\"https://fsharp.org/\">F#</a>, <code>IO</code> in <a href=\"https://www.haskell.org/\">Haskell</a>, etc.). What you actually need is a single impure value that contains the collection of results.\n    </p>\n    <p>\n        The solution to this kind of problem is to <em>traverse</em> the collection, rather than mapping over it (with <code>Select</code>, <code>map</code>, <code>fmap</code>, or similar). Note that computer scientists often talk about <em>traversing</em> a data structure like a <a href=\"https://en.wikipedia.org/wiki/Tree_(abstract_data_type)\">tree</a>. This is a less well-defined use of the word, and not directly related. That said, you <em>can</em> also write <code>Traverse</code> and <code>Sequence</code> functions for trees.\n    </p>\n    <p>\n        This article used a Stack Overflow question as the starting point for an example showing how to refactor imperative code to an Impureim Sandwich.\n    </p>\n    <p>\n        This completes the first variation requested in the Stack Overflow question.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2024/12/02/short-circuiting-an-asynchronous-traversal\">Short-circuiting an asynchronous traversal</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/11/18/collecting-and-handling-result-values/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/11/11/traversals",
      "Title": "Traversals",
      "PublishDate": "2024-11-11T07:45:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n\t<p>\n\t\t<em>How to convert a list of tasks into an asynchronous list, and similar problems.</em>\n\t</p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In a previous article you learned about <a href=\"/2022/07/18/natural-transformations\">natural transformations</a>, and then how <a href=\"/2018/03/22/functors\">functors</a> compose. You can skip several of them if you like, but you might find the one about <a href=\"/2024/10/28/functor-compositions\">functor compositions</a> relevant. Still, this article can be read independently of the rest of the series.\n\t</p>\n\t<p>\n\t\tYou can go a long way with just a single functor or <a href=\"/2022/03/28/monads\">monad</a>. Consider how useful C#'s LINQ API is, or similar kinds of APIs in other languages - typically <code>map</code> and <code>flatMap</code> methods. These APIs work exclusively with the <a href=\"/2022/04/19/the-list-monad\">List monad</a> (which is also a functor). Working with lists, sequences, or collections is so useful that many languages have other kinds of special syntax specifically aimed at working with multiple values: <a href=\"https://en.wikipedia.org/wiki/List_comprehension\">List comprehension</a>.\n\t</p>\n\t<p>\n\t\t<a href=\"/2022/06/06/asynchronous-monads\">Asynchronous monads</a> like <a href=\"https://docs.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task&lt;T&gt;</a> or <a href=\"https://fsharp.org/\">F#</a>'s <a href=\"https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync-1.html\">Async&lt;'T&gt;</a> are another kind of functor so useful in their own right that languages have special <code>async</code> and <code>await</code> keywords to compose them.\n\t</p>\n\t<p>\n\t\tSooner or later, though, you run into situations where you'd like to combine two different functors.\n\t</p>\n\t<h3 id=\"ebf67a9789e44ad8997832e1ac7c17da\">\n\t\tLists and tasks <a href=\"#ebf67a9789e44ad8997832e1ac7c17da\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tIt's not unusual to combine collections and asynchrony. If you make an asynchronous database query, you could easily receive something like <code>Task&lt;IEnumerable&lt;Reservation&gt;&gt;</code>. This, in isolation, hardly causes problems, but things get more interesting when you need to compose multiple reads.\n\t</p>\n\t<p>\n\t\tConsider a query like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Foo&gt;&nbsp;Read(<span style=\"color:blue;\">int</span>&nbsp;id)</pre>\n\t</p>\n\t<p>\n\t\tWhat happens if you have a collection of IDs that you'd like to read? This happens:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">var</span>&nbsp;ids&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;42,&nbsp;1337,&nbsp;2112&nbsp;};\nIEnumerable&lt;Task&lt;Foo&gt;&gt;&nbsp;fooTasks&nbsp;=&nbsp;ids.Select(id&nbsp;=&gt;&nbsp;Foo.Read(id));</pre>\n\t</p>\n\t<p>\n\t\tYou get a collection of Tasks, which may be awkward because you can't <code>await</code> it. Perhaps you'd rather prefer a single Task that contains a collection: <code>Task&lt;IEnumerable&lt;Foo&gt;&gt;</code>. In other words, you'd like to flip the functors:\n\t</p>\n\t<p>\n\t\t<pre>IEnumerable&lt;Task&lt;Foo&gt;&gt;\nTask&lt;IEnumerable&lt;Foo&gt;&gt;</pre>\n\t</p>\n\t<p>\n\t\tThe top type is what you have. The bottom type is what you'd like to have.\n\t</p>\n\t<p>\n\t\tThe combination of asynchrony and collections is so common that .NET has special methods to do that. I'll briefly mention one of these later, but what's the <em>general</em> solution to this problem?\n\t</p>\n\t<p>\n\t\tWhenever you need to flip two functors, you need a <em>traversal</em>.\n\t</p>\n\t<h3 id=\"b962041a5e3d4eb9ba5101641407ca3f\">\n\t\tSequence <a href=\"#b962041a5e3d4eb9ba5101641407ca3f\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tAs is almost always the case, we can look to <a href=\"https://www.haskell.org/\">Haskell</a> for a canonical definition of traversals - or, as the type class is called: <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html\">Traversable</a>.\n\t</p>\n\t<p>\n\t\tA <em>traversable functor</em> is a functor that enables you to flip that functor and another functor, like the above C# example. In more succinct syntax:\n\t</p>\n\t<p>\n\t\t<pre>t (f a) -&gt; f (t a)</pre>\n\t</p>\n\t<p>\n\t\tHere, <code>t</code> symbolises any traversable functor (like <code>IEnumerable&lt;T&gt;</code> in the above C# example), and <code>f</code> is another functor (like <code>Task&lt;T&gt;</code>, above). By flipping the functors I mean making <code>t</code> and <code>f</code> change places; just like <code>IEnumerable</code> and <code>Task</code>, above.\n\t</p>\n\t<p>\n\t\tThinking of <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">functors as containers</a> we might depict the function like this:\n\t</p>\n\t<p>\n\t\t<img src=\"/content/binary/traversal-sequence.png\" alt=\"Nested functors depicted as concentric circles. To the left the circle t contains the circle f that again contains the circle a. To the right the circle f contains the circle t that again contains the circle a. An arrow points from the left circles to the right circles.\">\n\t</p>\n\t<p>\n\t\tTo the left, we have an outer functor <code>t</code> (e.g. <code>IEnumerable</code>) that contains another functor <code>f</code> (e.g. <code>Task</code>) that again 'contains' values of type <code>a</code> (in C# typically called <code>T</code>). We'd like to flip how the containers are nested so that <code>f</code> contains <code>t</code>.\n\t</p>\n\t<p>\n\t\tContrary to what you might expect, the function that does that isn't called <em>traverse</em>; it's called <em>sequence</em>. (For those readers who are interested in Haskell specifics, the function I'm going to be talking about is actually called <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequenceA\">sequenceA</a>. There's also a function called <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequence\">sequence</a>, but it's not as general. The reason for the odd names are related to the evolution of various Haskell type classes.)\n\t</p>\n\t<p>\n\t\tThe <em>sequence</em> function doesn't work for any old functor. First, <code>t</code> has to be a <em>traversable functor</em>. We'll get back to that later. Second, <code>f</code> has to be an <a href=\"/2018/10/01/applicative-functors\">applicative functor</a>. (To be honest, I'm not sure if this is <em>always</em> required, or if it's possible to produce an example of a specific functor that isn't applicative, but where it's still possible to implement a <em>sequence</em> function. The Haskell <code>sequenceA</code> function has <code>Applicative f</code> as a constraint, but as far as I can tell, this only means that this is a <em>sufficient</em> requirement - not that it's necessary.)\n\t</p>\n\t<p>\n\t\tSince tasks (e.g. <code>Task&lt;T&gt;</code>) are applicative functors (they are, because <a href=\"/2022/06/06/asynchronous-monads\">they are monads</a>, and <a href=\"/2022/03/28/monads\">all monads are applicative functors</a>), that second requirement is fulfilled for the above example. I'll show you how to implement a <code>Sequence</code> function in C# and how to use it, and then we'll return to the general discussion of what a traversable functor is:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;IEnumerable&lt;T&gt;&gt;&nbsp;Sequence&lt;<span style=\"color:#2b91af;\">T</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;Task&lt;T&gt;&gt;&nbsp;source)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Aggregate(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Task.FromResult(Enumerable.Empty&lt;T&gt;()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">async</span>&nbsp;(acc,&nbsp;t)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;xs&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;acc;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;x&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;t;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;xs.Concat(<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;x&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n}</pre>\n\t</p>\n\t<p>\n\t\tThis <code>Sequence</code> function enables you to flip any <code>IEnumerable&lt;Task&lt;T&gt;&gt;</code> to a <code>Task&lt;IEnumerable&lt;T&gt;&gt;</code>, including the above <code>fooTasks</code>:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;fooTasks.Sequence();</pre>\n\t</p>\n\t<p>\n\t\tYou can also implement <code>sequence</code> in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;Async&lt;&#39;a&gt;&nbsp;list&nbsp;-&gt;&nbsp;Async&lt;&#39;a&nbsp;list&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;sequence&nbsp;asyncs&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;go&nbsp;acc&nbsp;t&nbsp;=&nbsp;async&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;xs&nbsp;=&nbsp;acc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;x&nbsp;&nbsp;=&nbsp;t\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;List.append&nbsp;xs&nbsp;[x]&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;List.fold&nbsp;go&nbsp;(fromValue&nbsp;[])&nbsp;asyncs</pre>\n\t</p>\n\t<p>\n\t\tand use it like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;fooTasks&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read\n<span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;fooTasks&nbsp;|&gt;&nbsp;Async.sequence</pre>\n\t</p>\n\t<p>\n\t\tFor this example, I put the <code>sequence</code> function in a local <code>Async</code> module; it's not part of any published <code>Async</code> module.\n\t</p>\n\t<p>\n\t\tThese C# and F# examples are specific translations: From lists of tasks to a task of list. If you need another translation, you'll have to write a new function for that particular combination of functors. Haskell has more general capabilities, so that you don't have to write functions for all combinations. I'm not assuming that you know Haskell, however, so I'll proceed with the description.\n\t</p>\n\t<h3 id=\"d63d059d841b4d9783f42c0360b21662\">\n\t\tTraversable functor <a href=\"#d63d059d841b4d9783f42c0360b21662\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tThe <em>sequence</em> function requires that the 'other' functor (the one that's <em>not</em> the traversable functor) is an applicative functor, but what about the traversable functor itself? What does it take to be a traversable functor?\n\t</p>\n\t<p>\n\t\tI have to admit that I have to rely on Haskell specifics to a greater extent than normal. For most other concepts and abstractions in <a href=\"/2017/10/04/from-design-patterns-to-category-theory\">the overall article series</a>, I've been able to draw on various sources, chief of which are <a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\">Category Theory for Programmers</a>. In various articles, I've cited my sources whenever possible. While I've relied on Haskell libraries for 'canonical' ways to <em>represent</em> concepts in a programming language, I've tried to present ideas as having a more universal origin than just Haskell.\n\t</p>\n\t<p>\n\t\tWhen it comes to traversable functors, I haven't come across universal reasoning like that which gives rise to concepts like <a href=\"/2017/10/06/monoids\">monoids</a>, functors, <a href=\"/2018/05/22/church-encoding\">Church encodings</a>, or <a href=\"/2019/04/29/catamorphisms\">catamorphisms</a>. This is most likely a failing on my part.\n\t</p>\n\t<p>\n\t\tTraversals of the Haskell kind are, however, so <em>useful</em> that I find it appropriate to describe them. When consulting, it's a common solution to a lot of problems that people are having with functional programming.\n\t</p>\n\t<p>\n\t\tThus, based on Haskell's <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html\">Data.Traversable</a>, a traversable functor must:\n\t\t<ul>\n\t\t\t<li>be a functor</li>\n\t\t\t<li>be a 'foldable' functor</li>\n\t\t\t<li>define a <em>sequence</em> or <em>traverse</em> function</li>\n\t\t</ul>\n\t\tYou've already seen examples of <em>sequence</em> functions, and I'm also assuming that (since you've made it so far in the article already) you know what a functor is. But what's a <em>foldable</em> functor?\n\t</p>\n\t<p>\n\t\tHaskell comes with a <a href=\"https://hackage.haskell.org/package/base/docs/Data-Foldable.html\">Foldable</a> type class. It defines a class of data that has a particular type of <a href=\"/2019/04/29/catamorphisms\">catamorphism</a>. As I've outlined in my article on catamorphisms, Haskell's notion of a <em>fold</em> sometimes coincides with a (or 'the') catamorphism for a type, and sometimes not. For <a href=\"/2019/05/20/maybe-catamorphism\">Maybe</a> and <a href=\"/2019/05/27/list-catamorphism\">List</a> they do coincide, while they don't for <a href=\"/2019/06/03/either-catamorphism\">Either</a> or <a href=\"/2019/06/10/tree-catamorphism\">Tree</a>. It's not that you can't define <code>Foldable</code> for <a href=\"/2018/06/11/church-encoded-either\">Either</a> or <a href=\"/2018/08/06/a-tree-functor\">Tree</a>, it's just that it's not 'the' <em>general</em> catamorphism for that type.\n\t</p>\n\t<p>\n\t\tI can't tell whether <code>Foldable</code> is a universal abstraction, or if it's just an ad-hoc API that turns out to be useful in practice. It looks like the latter to me, but my knowledge is only limited. Perhaps I'll be wiser in a year or two.\n\t</p>\n\t<p>\n\t\tI will, however, take it as licence to treat this topic a little less formally than I've done with other articles. While there <em>are</em> laws associated with <code>Traversable</code>, they are rather complex, so I'm going to skip them.\n\t</p>\n\t<p>\n\t\tThe above requirements will enable you to define traversable functors if you run into some more exotic ones, but in practice, the common functors List, <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a>, <a href=\"/2019/01/14/an-either-functor\">Either</a>, <a href=\"/2018/08/06/a-tree-functor\">Tree</a>, and <a href=\"/2018/09/03/the-identity-functor\">Identity</a> are all traversable. That it useful to know. If any of those functors is the outer functor in a composition of functors, then you can flip them to the inner position as long as the other functor is an applicative functor.\n\t</p>\n\t<p>\n\t\tSince <code>IEnumerable&lt;T&gt;</code> is traversable, and <code>Task&lt;T&gt;</code> (or <code>Async&lt;'T&gt;</code>) is an applicative functor, it's possible to use <code>Sequence</code> to convert <code>IEnumerable&lt;Task&lt;Foo&gt;&gt;</code> to <code>Task&lt;IEnumerable&lt;Foo&gt;&gt;</code>.\n\t</p>\n\t<h3 id=\"3346c092666c4dacb9a61cc1f622fc0f\">\n\t\tTraverse <a href=\"#3346c092666c4dacb9a61cc1f622fc0f\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tThe C# and F# examples you've seen so far arrive at the desired type in a two-step process. First they produce the 'wrong' type with <code>ids.Select(Foo.Read)</code> or <code>ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read</code>, and then they use <code>Sequence</code> to arrive at the desired type.\n\t</p>\n\t<p>\n\t\tWhen you use two expressions, you need two lines of code, and you also need to come up with a name for the intermediary value. It might be easier to chain the two function calls into a single expression:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;ids.Select(Foo.Read).Sequence();</pre>\n\t</p>\n\t<p>\n\t\tOr, in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read&nbsp;|&gt;&nbsp;Async.sequence</pre>\n\t</p>\n\t<p>\n\t\tChaining <code>Select</code>/<code>map</code> with <code>Sequence</code>/<code>sequence</code> is so common that it's a named function: <em>traverse</em>. In C#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;IEnumerable&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Select(selector).Sequence();\n}</pre>\n\t</p>\n\t<p>\n\t\tThis makes usage a little easier:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;ids.Traverse(Foo.Read);</pre>\n\t</p>\n\t<p>\n\t\tIn F# the implementation might be similar:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;(&#39;a&nbsp;-&gt;&nbsp;Async&lt;&#39;b&gt;)&nbsp;-&gt;&nbsp;&#39;a&nbsp;list&nbsp;-&gt;&nbsp;Async&lt;&#39;b&nbsp;list&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;traverse&nbsp;f&nbsp;xs&nbsp;=&nbsp;xs&nbsp;|&gt;&nbsp;List.map&nbsp;f&nbsp;|&gt;&nbsp;sequence</pre>\n\t</p>\n\t<p>\n\t\tUsage then looks like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;Async.traverse&nbsp;Foo.Read</pre>\n\t</p>\n\t<p>\n\t\tAs you can tell, if you've already implemented <em>sequence</em> you can always implement <em>traverse</em>. The converse is also true: If you've already implemented <em>traverse</em>, you can always implement <em>sequence</em>. You'll see an example of that later.\n\t</p>\n\t<h3 id=\"117fac3b686e4db8b6c3c4e0ac556929\">\n\t\tA reusable idea <a href=\"#117fac3b686e4db8b6c3c4e0ac556929\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tIf you know the .NET Task Parallel Library (TPL), you may demur that my implementation of <code>Sequence</code> seems like an inefficient version of <a href=\"https://docs.microsoft.com/dotnet/api/system.threading.tasks.task.whenall\">Task.WhenAll</a>, and that <code>Traverse</code> could be written like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IEnumerable&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Task.WhenAll(source.Select(selector));\n}</pre>\n\t</p>\n\t<p>\n\t\tThis alternative is certainly possible. Whether it's more efficient I don't know; I haven't measured. As foreshadowed in the beginning of the article, the combination of collections and asynchrony is so common that .NET has special APIs to handle that. You may ask, then: <em>What's the point?</em>\n\t</p>\n\t<p>\n\t\tThe point of is that a traversable functor is <em>a reusable idea</em>.\n\t</p>\n\t<p>\n\t\tYou may be able to find existing APIs like <code>Task.WhenAll</code> to deal with combinations of collections and asynchrony, but what if you need to deal with asynchronous Maybe or Either? Or a List of Maybes?\n\t</p>\n\t<p>\n\t\tThere may be no existing API to flip things around - before you add it. Now you know that there's a (dare I say it?) design pattern you can implement.\n\t</p>\n\t<h3 id=\"f81375a0121247698f0ad5eac4deebff\">\n\t\tAsynchronous Maybe <a href=\"#f81375a0121247698f0ad5eac4deebff\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tOnce people go beyond collections they often run into problems. You may, for example, decide to use the <a href=\"/2022/04/25/the-maybe-monad\">Maybe monad</a> in order to model the presence or absence of a value. Then, once you combine Maybe-based decision values with asynchronous processesing, you may run into problems.\n\t</p>\n\t<p>\n\t\tFor example, in my article <a href=\"/2019/02/11/asynchronous-injection\">Asynchronous Injection</a> I modelled the core domaim logic as returning <code>Maybe&lt;Reservation&gt;</code>. When handling an HTTP request, the application should use that value to determine what to do next. If the return value is empty it should do nothing, but when the Maybe value is populated, it should save the reservation in a data store using this method:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;<span style=\"color:blue;\">int</span>&gt;&nbsp;Create(Reservation&nbsp;reservation)</pre>\n\t</p>\n\t<p>\n\t\tFinally, if accepting the reservation, the HTTP handler (<code>ReservationsController</code>) should return the resevation ID, which is the <code>int</code> returned by <code>Create</code>. Please refer to the article for details. It also links to the sample code on GitHub.\n\t</p>\n\t<p>\n\t\tThe entire expression is, however, <code>Task</code>-based:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IActionResult&gt;&nbsp;Post(Reservation&nbsp;reservation)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(m&nbsp;=&gt;&nbsp;m.Traverse(Repository.Create))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Match(InternalServerError(<span style=\"color:#a31515;\">&quot;Table&nbsp;unavailable&quot;</span>),&nbsp;Ok);\n}</pre>\n\t</p>\n\t<p>\n\t\tThe <code>Select</code> and <code>SelectMany</code> methods are defined on the <code>Task</code> monad. The <code>m</code> in the <code>SelectMany</code> lambda expression is the <code>Maybe&lt;Reservation&gt;</code> returned by <code>TryAccept</code>. What would happen if you didn't have a <code>Traverse</code> method?\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;&nbsp;whatIsThis&nbsp;=&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(m&nbsp;=&gt;&nbsp;m.Select(Repository.Create));</pre>\n\t</p>\n\t<p>\n\t\tNotice that <code>whatIsThis</code> (so named because it's a temporary variable used to investigate the type of the expression so far) has an awkward type: <code>Task&lt;Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;</code>. That's a Task within a Maybe within a Task.\n\t</p>\n\t<p>\n\t\tThis makes it difficult to continue the composition and return an HTTP result.\n\t</p>\n\t<p>\n\t\tInstead, use <code>Traverse</code>:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;Task&lt;Maybe&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;&nbsp;whatIsThis&nbsp;=&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(m&nbsp;=&gt;&nbsp;m.Traverse(Repository.Create));</pre>\n\t</p>\n\t<p>\n\t\tThis flips the inner <code>Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;</code> to <code>Task&lt;Maybe&lt;<span style=\"color:blue;\">int</span>&gt;&gt;</code>. Now you have a Maybe within a Task within a Task. The outer two Tasks are now nicely nested, and it's a job for a monad to remove one level of nesting. That's the reason that the final composition uses <code>SelectMany</code> instead of <code>Select</code>.\n\t</p>\n\t<p>\n\t\tThe <code>Traverse</code> function is implemented like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Maybe&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;Maybe&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Match(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nothing:&nbsp;Task.FromResult(<span style=\"color:blue;\">new</span>&nbsp;Maybe&lt;TResult&gt;()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;just:&nbsp;<span style=\"color:blue;\">async</span>&nbsp;x&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Maybe&lt;TResult&gt;(<span style=\"color:blue;\">await</span>&nbsp;selector(x)));\n}</pre>\n\t</p>\n\t<p>\n\t\tThe <em>idea</em> is reusable. You can also implement a similar traversal in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;(&#39;a&nbsp;-&gt;&nbsp;Async&lt;&#39;b&gt;)&nbsp;-&gt;&nbsp;&#39;a&nbsp;option&nbsp;-&gt;&nbsp;Async&lt;&#39;b&nbsp;option&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;traverse&nbsp;f&nbsp;=&nbsp;<span style=\"color:blue;\">function</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Some&nbsp;x&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;async&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;x&#39;&nbsp;=&nbsp;f&nbsp;x\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Some&nbsp;x&#39;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;None&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;async&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;None&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tYou can see the F# function as well as a usage example in the article <a href=\"/2019/12/02/refactoring-registration-flow-to-functional-architecture\">Refactoring registration flow to functional architecture</a>.\n\t</p>\n\t<h3 id=\"a9e25f8c3dc24d99b669f90a4e46afa0\">\n\t\tSequence from traverse <a href=\"#a9e25f8c3dc24d99b669f90a4e46afa0\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tYou've already seen that if you have a <em>sequence</em> function, you can implement <em>traverse</em>. I also claimed that the reverse is true: If you have <em>traverse</em> you can implement <em>sequence</em>.\n\t</p>\n\t<p>\n\t\tWhen you've encountered these kinds of dual definitions a couple of times, you start to expect the ubiquitous identity function to make an appearance, and indeed it does:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;sequence&nbsp;x&nbsp;=&nbsp;traverse&nbsp;id&nbsp;x</pre>\n\t</p>\n\t<p>\n\t\tThat's the F# version where the identity function is built in as <code>id</code>. In C# you'd use a lambda expression:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Maybe&lt;T&gt;&gt;&nbsp;Sequence&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;Maybe&lt;Task&lt;T&gt;&gt;&nbsp;source)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Traverse(x&nbsp;=&gt;&nbsp;x);\n}</pre>\n\t</p>\n\t<p>\n\t\tSince C# doesn't come with a predefined identity function, it's <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> to use <code>x&nbsp;=&gt;&nbsp;x</code> instead.\n\t</p>\n\t<h3 id=\"cc6c409706e24ea9b3ebefa49fcc3235\">\n\t\tConclusion <a href=\"#cc6c409706e24ea9b3ebefa49fcc3235\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tTraversals are useful when you need to 'flip' the order of two different, nested functors. The outer one must be a traversable functor, and the inner an applicative functor.\n\t</p>\n\t<p>\n\t\tCommon traversable functors are List, Maybe, Either, Tree, and Identity, but there are more than those. In .NET you often need them when combining them with Tasks. In Haskell, they are useful when combined with <code>IO</code>.\n\t</p>\n\t<p>\n\t\t<strong>Next:</strong> <a href=\"/2024/11/25/nested-monads\">Nested monads</a>.\n\t</p>\n</div>\n\n<div id=\"comments\">\n    <hr>\n    <h2 id=\"comments-header\">\n        Comments\n    </h2>\n    <div class=\"comment\" id=\"c72c30e16cdd48419f95fd7ad5c74f81\">\n        <div class=\"comment-author\">qfilip <a href=\"#c72c30e16cdd48419f95fd7ad5c74f81\">#</a></div>\n        <div class=\"comment-content\">\n            <p>\n\t\t\t\tThanks for this one. You might be interested in <a href=\"https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Andrew Lock's</a> take on the whole subject as well.\n\t\t\t</p>\n        </div>\n        <div class=\"comment-date\">2024-11-17 14:51 UTC</div>\n    </div>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/11/11/traversals/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default",
      "Title": "Pendulum swing: no Haskell type annotation by default",
      "PublishDate": "2024-11-04T07:45:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Are Haskell IDE plugins now good enough that you don't need explicit type annotations?</em>\n    </p>\n    <p>\n        More than three years ago, I published <a href=\"/2021/02/22/pendulum-swings\">a small article series</a> to document that I'd changed my mind on various small practices. Belatedly, here comes a fourth article, which, frankly, is a cousin rather than a sibling. Still, it fits the overall theme well enough to become another instalment in the series.\n    </p>\n    <p>\n        Here, I consider using fewer <a href=\"https://www.haskell.org/\">Haskell</a> type annotations, following a practice that I've always followed in <a href=\"https://fsharp.org/\">F#</a>.\n    </p>\n    <p>\n        To be honest, though, it's not that I've already applied the following practice for a long time, and only now write about it. It's rather that I feel the need to write this article to kick an old habit and start a new.\n    </p>\n    <h3 id=\"227874a509f24b93b9a091429b9ad03e\">\n        Inertia <a href=\"#227874a509f24b93b9a091429b9ad03e\">#</a>\n    </h3>\n    <p>\n        As I write in the dedication in <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>,\n    </p>\n    <blockquote>\n        <p>\n            \"To my parents:\n        </p>\n        <p>\n            \"My mother, Ulla Seemann, to whom I owe my attention to detail.\n        </p>\n        <p>\n            \"My father, Leif Seemann, from whom I inherited my contrarian streak.\"\n        </p>\n        <footer><cite><a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a></cite>, dedication</footer>\n    </blockquote>\n    <p>\n        One should always be careful simplifying one's personality to a simple, easy-to-understand model, but a major point here is that I have two traits that pull in almost the opposite direction.\n    </p>\n    <p>\n        <img src=\"/content/binary/neatness-contrariness-vector-sum.png\" alt=\"Two vectors labelled respectively neatness and contrariness pulling in almost opposing directions, while still not quite cancelling each other out, leaving a short vector sum pointing to the right.\">\n    </p>\n    <p>\n        Despite much work, I only make slow progress. My desire to make things neat and proper almost cancel out my tendency to go against the norms. I tend to automatically toe whatever line that exists until the cognitive dissonance becomes so great that I can no longer ignore it.\n    </p>\n    <p>\n        I then write an article for the blog to clarify my thoughts.\n    </p>\n    <p>\n        You may read what comes next and ask, <em>what took you so long?!</em>\n    </p>\n    <p>\n        I can only refer to the above. I may look calm on the surface, but underneath I'm paddling like the dickens. Despite much work, though, only limited progress is visible.\n    </p>\n    <h3 id=\"a00a292d223a435b873f7cc1de1730c3\">\n        Nudge <a href=\"#a00a292d223a435b873f7cc1de1730c3\">#</a>\n    </h3>\n    <p>\n        Haskell is a statically typed language with the most powerful type system I know my way around. The types carry so much information that one can often infer <a href=\"/2022/10/24/encapsulation-in-functional-programming\">a function's contract</a> from the type alone. This is also fortunate, since many Haskell libraries tend to have, shall we say, minimal documentation. Even so, I've often found myself able to figure out how to use an unfamiliar Haskell API by examining the various types that a library exports.\n    </p>\n    <p>\n        In fact, the type system is so powerful that it drives <a href=\"https://hoogle.haskell.org/\">a specialized search engine</a>. If you need a function with the type <code>(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:#2b91af;\">String</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:#2b91af;\">Int</span>]</code> you can search for it. Hoogle will list all functions that match that type, including functions that are more abstract than your specialized need. You don't even have to imagine what the name might be.\n    </p>\n    <p>\n        Since the type system is so powerful, it's a major means of communication. Thus, it makes sense that <a href=\"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler\">GHC</a> regularly issues <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wmissing-signatures\">a warning</a> if a function lacks a type annotation.\n    </p>\n    <p>\n        While the compiler enables you to control which warnings are turned on, the <code>missing-signatures</code> warning is included in the popular <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wall\">all</a> flag that most people, I take it, use. I do, at least.\n    </p>\n    <p>\n        If you forget to declare the type of a function, the compiler will complain:\n    </p>\n    <p>\n        <pre>src\\SecurityManager.hs:15:1: <span style=\"color:red;\">warning</span>: [<span style=\"color:red;\">GHC-38417</span>] [<span style=\"color:red;\">-Wmissing-signatures</span>]\n    Top-level binding with no type signature:\n      createUser :: (Monad m, Text.Printf.PrintfArg b,\n                     Text.Printf.PrintfArg (t a), Foldable t, Eq (t a)) =&gt;\n                    (String -&gt; m ()) -&gt; m (t a) -&gt; (t a -&gt; b) -&gt; m ()\n<span style=\"color:blue;\">   |</span>\n<span style=\"color:blue;\">15 |</span> <span style=\"color:red;\">createUser</span> writeLine readLine encrypt = do\n<span style=\"color:blue;\">   |</span> <span style=\"color:red;\">^^^^^^^^^^</span></pre>\n    </p>\n    <p>\n        This is a strong nudge that you're supposed to give each function a type declaration, so I've been doing that for years. Neat and proper.\n    </p>\n    <p>\n        Of course, if you treat warnings as errors, as <a href=\"/code-that-fits-in-your-head\">I recommend</a>, the nudge becomes a law.\n    </p>\n    <h3 id=\"cf16318003ef46ed8c67d81217e56011\">\n        Learning from F# <a href=\"#cf16318003ef46ed8c67d81217e56011\">#</a>\n    </h3>\n    <p>\n        While I try to adopt the style and <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idioms</a> of any language I work in, it's always annoyed me that I had to add a type annotation to a Haskell function. After all, the compiler can usually infer the type. Frankly, adding a type signature feels like redundant ceremony. It's like having to declare a function in a header file before being able to implement it in another file.\n    </p>\n    <p>\n        This particularly bothers me because I've long since abandoned type annotations in F#. As far as I can tell, most of the F# community has, too.\n    </p>\n    <p>\n        When you implement an F# function, you just write the implementation and let the compiler infer the type. (Code example from <a href=\"/2019/12/16/zone-of-ceremony\">Zone of Ceremony</a>.)\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">inline</span>&nbsp;<span style=\"color:#74531f;\">consume</span>&nbsp;<span style=\"color:#1f377f;\">quantity</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>,&nbsp;<span style=\"color:#1f377f;\">xs</span>)&nbsp;<span style=\"color:#1f377f;\">x</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:#1f377f;\">quantity</span>&nbsp;&lt;=&nbsp;<span style=\"color:#1f377f;\">acc</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>,&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">append</span>&nbsp;<span style=\"color:#1f377f;\">xs</span>&nbsp;(<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">singleton</span>&nbsp;<span style=\"color:#1f377f;\">x</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>&nbsp;+&nbsp;<span style=\"color:#1f377f;\">x</span>,&nbsp;<span style=\"color:#1f377f;\">xs</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">fold</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;(<span style=\"color:#2b91af;\">LanguagePrimitives</span>.GenericZero,&nbsp;<span style=\"color:#2b91af;\">Seq</span>.empty)&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">snd</span></pre>\n    </p>\n    <p>\n        Since F# often has to interact with .NET code written in C#, you regularly have to add <em>some</em> type annotations to help the compiler along:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">average</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">NonEmpty</span>&lt;<span style=\"color:#2b91af;\">TimeSpan</span>&gt;)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>.Head&nbsp;]&nbsp;@&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">ofSeq</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>.Tail\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">averageBy</span>&nbsp;(_.Ticks&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">double</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#74531f;\">int64</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"font-weight:bold;color:#74531f;\">FromTicks</span></pre>\n    </p>\n    <p>\n        Even so, I follow the rule of minimal annotations: Only add the type information required to compile, and let the compiler infer the rest. For example, the above <a href=\"/2024/05/06/conservative-codomain-conjecture\">average function</a> has the inferred type <code><span style=\"color:#2b91af;\">NonEmpty</span><span style=\"color:#2b91af;\">&lt;</span><span style=\"color:#2b91af;\">TimeSpan</span><span style=\"color:#2b91af;\">&gt;</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span></code>. While I had to specify the input type in order to be able to use the <a href=\"https://learn.microsoft.com/dotnet/api/system.datetime.ticks\">Ticks property</a>, I didn't have to specify the return type. So I didn't.\n    </p>\n    <p>\n        My impression from reading other people's F# code is that this is a common, albeit not universal, approach to type annotation.\n    </p>\n    <p>\n        This minimizes ceremony, since you only need to declare and maintain the types that the compiler can't infer. There's no reason to repeat the work that the compiler can already do, and in practice, if you do, it just gets in the way.\n    </p>\n    <h3 id=\"fdd9161164f64f438aa0bedf5ff6f9a8\">\n        Motivation for explicit type definitions <a href=\"#fdd9161164f64f438aa0bedf5ff6f9a8\">#</a>\n    </h3>\n    <p>\n        When I extol the merits of static types, proponents of dynamically typed languages often argue that the types are in the way. Granted, this is <a href=\"/2021/08/09/am-i-stuck-in-a-local-maximum\">a discussion that I still struggle with</a>, but based on my understanding of the argument, it seems entirely reasonable. After all, if you have to spend time declaring the type of each and every parameter, as well as a function's return type, it does seem to be in the way. This is only exacerbated if you later change your mind.\n    </p>\n    <p>\n        Programming is, to a large extend, an explorative activity. You start with one notion of how your code should be structured, but as you progress, you learn. You'll often have to go back and change existing code. This, as far as I can tell, is much easier in, say, <a href=\"https://www.python.org/\">Python</a> or <a href=\"https://clojure.org/\">Clojure</a> than in C# or <a href=\"https://www.java.com/\">Java</a>.\n    </p>\n    <p>\n        If, however, one extrapolates from the experience with Java or C# to all statically typed languages, that would be a logical fallacy. My point with <a href=\"/2019/12/16/zone-of-ceremony\">Zone of Ceremony</a> was exactly that there's a group of languages 'to the right' of high-ceremony languages with low levels of ceremony. Even though they're statically typed.\n    </p>\n    <p>\n        I have to admit, however, that in that article I cheated a little in order to drive home a point. While you <em>can</em> write Haskell code in a low-ceremony style, the tooling (in the form of the <code>all</code> warning set, at least) encourages a high-ceremony style. Add those type definitions, even thought they're redundant.\n    </p>\n    <p>\n        It's not that I don't understand some of the underlying motivation behind that rule. <a href=\"http://dmwit.com/\">Daniel Wagner</a> enumerated several reasons in <a href=\"https://stackoverflow.com/a/19626857/126014\">a 2013 Stack Overflow answer</a>. Some of the reasons still apply, but on the other hand, the world has also moved on in the intervening decade.\n    </p>\n    <p>\n        To be honest, the Haskell <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a> situation has always been precarious. One day, it works really well; the next day, I struggle with it. Over the years, though, things have improved.\n    </p>\n    <p>\n        There was a time when an explicit type definition was a indisputable help, because you couldn't rely on tools to light up and tell you what the inferred type was.\n    </p>\n    <p>\n        Today, on the other hand, the <a href=\"https://marketplace.visualstudio.com/items?itemName=haskell.haskell\">Haskell extension for Visual Studio Code</a> automatically displays the inferred type above a function implementation:\n    </p>\n    <p>\n        <img src=\"/content/binary/haskell-code-with-inferred-type-displayed-by-vs-code.png\" alt=\"Screen shot of a Haskell function in Visual Studio Code with the function's type automatically displayed above it by the Haskell extension.\">\n    </p>\n    <p>\n        To be clear, the top line that shows the type definition is not part of the source code. It's just shown by Visual Studio Code as a code lens (I think it's called), and it automatically changes if I edit the code in such a way that the type changes.\n    </p>\n    <p>\n        If you can rely on such automatic type information, it seems that an explicit type declaration is less useful. It's at least one less reason to add type annotations to the source code.\n    </p>\n    <h3 id=\"367135868de54bcb8eebd2d9bc9a0f8c\">\n        Ceremony example <a href=\"#367135868de54bcb8eebd2d9bc9a0f8c\">#</a>\n    </h3>\n    <p>\n        In order to explain what I mean by <em>the types being in the way</em>, I'll give an example. Consider the code example from the article <a href=\"/2024/10/21/legacy-security-manager-in-haskell\">Legacy Security Manager in Haskell</a>. In it, I described how every time I made a change to the <code>createUser</code> action, I had to effectively remove and re-add the type declaration.\n    </p>\n    <p>\n        It doesn't have to be like that. If instead I'd started without type annotations, I could have moved forward without being slowed down by having to edit type definitions. Take the first edit, breaking the dependency on the console, as an example. Without type annotations, the <code>createUser</code> action would look exactly as before, just without the type declaration. Its type would still be <code>IO ()</code>.\n    </p>\n    <p>\n        After the first edit, the first lines of the action now look like this:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;...</span></pre>\n    </p>\n    <p>\n        Even without a type definition, the action still has a type. The compiler infers it to be <code>(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;a,&nbsp;<span style=\"color:blue;\">IsChar</span>&nbsp;a)&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;[a]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code>, which is certainly a bit of a mouthful, but exactly what I had explicitly added in the other article.\n    </p>\n    <p>\n        The code doesn't compile until I also change the <code>main</code> method to pass the new parameters:\n    </p>\n    <p>\n        <pre>main&nbsp;=&nbsp;createUser&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:blue;\">getLine</span></pre>\n    </p>\n    <p>\n        You'd have to make a similar edit in, say, Python, although there'd be no compiler to remind you. My point isn't that this is better than a dynamically typed language, but rather that it's on par. The types aren't in the way.\n    </p>\n    <p>\n        We see the similar lack of required ceremony when the <code>createUser</code> action finally pulls in the <code>comparePasswords</code> and <code>validatePassword</code> functions:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;writeLine&nbsp;$&nbsp;either\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;(printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;.&nbsp;encrypt)\n&nbsp;&nbsp;&nbsp;&nbsp;(validatePassword&nbsp;=&lt;&lt;&nbsp;comparePasswords&nbsp;password&nbsp;confirmPassword)</pre>\n    </p>\n    <p>\n        Again, there's no type annotation, and while the type actually <em>does</em> change to\n    </p>\n    <p>\n        <pre>(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;b,&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;(t&nbsp;a),&nbsp;<span style=\"color:blue;\">Foldable</span>&nbsp;t,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;(t&nbsp;a))&nbsp;<span style=\"color:blue;\">=&gt;</span>\n(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;(t&nbsp;a)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(t&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;b)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        it impacts none of the existing code. Again, the types aren't in the way, and no ceremony is required.\n    </p>\n    <p>\n        Compare that inferred type signature with the explicit final type annotation in <a href=\"/2024/10/21/legacy-security-manager-in-haskell\">the previous article</a>. The inferred type is much more abstract and permissive than the explicit declaration, although I also grant that Daniel Wagner had a point that you can make explicit type definitions more reader-friendly.\n    </p>\n    <h3 id=\"d4469073def54f289edb56d1ca8417ee\">\n        Flies in the ointment <a href=\"#d4469073def54f289edb56d1ca8417ee\">#</a>\n    </h3>\n    <p>\n        Do the inferred types communicate intent? That's debatable. For example, it's not immediately clear that the above <code>t a</code> allows <code>String</code>.\n    </p>\n    <p>\n        Another thing that annoys me is that I had to add that <em>unit</em> binding on the first line:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;...</span></pre>\n    </p>\n    <p>\n        The reason for that is that if I don't do that (that is, if I just write <code>writeLine \"Xyz\"</code> all the way), the compiler infers the type of <code>writeLine</code> to be <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;b2</code>, rather than just <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code>. In effect, I want <code>b2 ~ ()</code>, but because the compiler thinks that <code>b2</code> may be anything, it issues an <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wunused-do-bind\">unused-do-bind</a> warning.\n    </p>\n    <p>\n        The idiomatic way to resolve that situation is to add a type definition, but that's the situation I'm trying to avoid. Thus, my desire to do without annotations pushes me to write unnatural implementation code. This reminds me of the notion of <a href=\"https://dhh.dk/2014/test-induced-design-damage.html\">test-induced damage</a>. This is at best a disagreeable compromise.\n    </p>\n    <p>\n        It also annoys me that implementation details leak out to the inferred type, witnessed by the <code>PrintfArg</code> type constraint. What happens if I change the implementation to use list concatenation?\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;createMsg&nbsp;pwd&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(&quot;</span>&nbsp;++&nbsp;username&nbsp;++<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>&nbsp;++&nbsp;fullName&nbsp;++&nbsp;<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>&nbsp;++&nbsp;pwd&nbsp;++<span style=\"color:#a31515;\">&quot;)&quot;</span>\n&nbsp;&nbsp;writeLine&nbsp;$&nbsp;either\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;(createMsg&nbsp;.&nbsp;encrypt)\n&nbsp;&nbsp;&nbsp;&nbsp;(validatePassword&nbsp;=&lt;&lt;&nbsp;comparePasswords&nbsp;password&nbsp;confirmPassword)</pre>\n    </p>\n    <p>\n        If I do that, the type also changes:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">Monad</span>&nbsp;m&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;[<span style=\"color:#2b91af;\">Char</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;([<span style=\"color:#2b91af;\">Char</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:#2b91af;\">Char</span>])&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        While we get rid of the <code>PrintfArg</code> type constraint, the type becomes otherwise more concrete, now operating on <code>String</code> values (keeping in mind that <code>String</code> is a type synonym for <code>[Char]</code>).\n    </p>\n    <p>\n        The code still compiles, and all tests still pass, because the abstraction I've had in mind all along is essentially this last type.\n    </p>\n    <p>\n        The <code>writeLine</code> action should take a <code>String</code> and have some side effect, but return no data. The type <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code> nicely models that, striking a fine balance between being sufficiently concrete to capture intent, but still abstract enough to be testable.\n    </p>\n    <p>\n        The <code>readLine</code> action should provide input <code>String</code> values, and again <code>m String</code> nicely models that concern.\n    </p>\n    <p>\n        Finally, <code>encrypt</code> is indeed a naked <code>String</code> <a href=\"https://en.wikipedia.org/wiki/Endomorphism\">endomorphism</a>: <code>String -&gt; String</code>.\n    </p>\n    <p>\n        With my decades of experience with object-oriented design, it still strikes me as odd that implementation details can make a type more abstract, but once you think it over, it may be okay.\n    </p>\n    <h3 id=\"a82d4017be064ce980c40e22aa6f801e\">\n        More liberal abstractions <a href=\"#a82d4017be064ce980c40e22aa6f801e\">#</a>\n    </h3>\n    <p>\n        The inferred types are consistently more liberal than the abstraction I have in mind, which is\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">Monad</span>&nbsp;m&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        In all cases, the inferred types include that type as a subset.\n    </p>\n    <p>\n        <img src=\"/content/binary/create-user-abstraction-sets.png\" alt=\"Various sets of inferred types.\">\n    </p>\n    <p>\n        I hope that I've created the above diagram so that it makes sense, but the point I'm trying to get across is that the two type definitions in the lower middle are equivalent, and are the most specific types. That's the intended abstraction. Thinking of <a href=\"/2021/11/15/types-as-sets\">types as sets</a>, all the other inferred types are supersets of that type, in various ways. Even though implementation details leak out in the shape of <code>PrintfArg</code> and <code>IsChar</code>, these are effectually larger sets.\n    </p>\n    <p>\n        This takes some getting used to: The implementation details are <em>more</em> liberal than the abstraction. This seems to be at odds with the <a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\">Dependency Inversion Principle</a> (DIP), which suggests that abstractions shouldn't depend on implementation details. I'm not yet sure what to make of this, but I suspect that this is more of problem of overlapping linguistic semantics than software design. What I mean is that I have a feeling that 'implementation detail' have more than one meaning. At least, in the perspective of the DIP, an implementation detail <em>limits</em> your options. For example, depending on a particular database technology is more constraining than depending on some abstract notion of what the persistence mechanism might be. Contrast this with an implementation detail such as the <code>PrintfArg</code> type constraint. It doesn't narrow your options; on the contrary, it makes the implementation more liberal.\n    </p>\n    <p>\n        Still, while an implementation should <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\">be liberal in what it accepts</a>, it's probably not a good idea to publish such a capability to the wider world. After all, if you do, <a href=\"https://www.hyrumslaw.com/\">someone will eventually rely on it</a>.\n    </p>\n    <h3 id=\"42ffe5249c7542809ca55a95a8f15f6c\">\n        For internal use only <a href=\"#42ffe5249c7542809ca55a95a8f15f6c\">#</a>\n    </h3>\n    <p>\n        Going through all these considerations, I think I'll revise my position as the following.\n    </p>\n    <p>\n        I'll forgo type annotations as long as I explore a problem space. For internal application use, this may effectively mean forever, in the sense that how you compose an application from smaller building blocks is likely to be in permanent flux. Here I have in mind your average web asset or other public-facing service that's in constant development. You keep adding new features, or changing domain logic as the overall business evolves.\n    </p>\n    <p>\n        As I've also recently discussed, <a href=\"/2024/02/05/statically-and-dynamically-typed-scripts\">Haskell is a great scripting language</a>, and I think that here, too, I'll dial down the type definitions.\n    </p>\n    <p>\n        If I ever do another <a href=\"https://adventofcode.com/\">Advent of Code</a> in Haskell, I think I'll also eschew explicit type annotations.\n    </p>\n    <p>\n        On the other hand, I can see that once an API stabilizes, you may want to lock it down. This may also apply to internal abstractions if you're working in a team and you explicitly want to communicate what a contract is.\n    </p>\n    <p>\n        If the code is a reusable library, I think that explicit type definitions are still required. Both for the reasons outlined by Daniel Wagner, and also to avoid being the victim of <a href=\"https://www.hyrumslaw.com/\">Hyrum's law</a>.\n    </p>\n    <p>\n        That's why I phrase this pendulum swing as a new <em>default</em>. I'll begin programming without type definitions, but add them as needed. The point is rather that there may be parts of a code base where they're never needed, and then it's okay to keep going without them.\n    </p>\n    <p>\n        You can use a language pragma to opt out of the <code>missing-signatures</code> compiler warning on a module-by-module basis:\n    </p>\n    <p>\n        <pre>{-#&nbsp;<span style=\"color:gray;\">OPTIONS_GHC</span>&nbsp;-Wno-missing-signatures&nbsp;#-}</pre>\n    </p>\n    <p>\n        This will enable me to rely on type inference in parts of the code base, while keeping the build clean of compiler warnings.\n    </p>\n    <h3 id=\"36e2b141fff548678e34d24eda5a3e03\">\n        Conclusion <a href=\"#36e2b141fff548678e34d24eda5a3e03\">#</a>\n    </h3>\n    <p>\n        I've always appreciated the F# compiler's ability to infer types and just let type changes automatically ripple through the code base. For that reason, the Haskell norm of explicitly adding a (redundant) type annotation has always vexed me.\n    </p>\n    <p>\n        It often takes me a long time to reach seemingly obvious conclusions, such as: Don't always add type definitions to Haskell functions. Let the type inference engine do its job.\n    </p>\n    <p>\n        The reason it takes me so long to take such a small step is that I want to follow 'best practice'; I want to write idiomatic code. When the standard compiler-warning set complains about missing type definitions, it takes me significant deliberation to discard such advice. I could imagine other programmers being in the same situation, which is one reason I wrote this article.\n    </p>\n    <p>\n        The point isn't that type definitions are a universally bad idea. They aren't. Rather, the point is only that it's also okay to do without them in parts of a code base. Perhaps only temporarily, but in some cases maybe permanently.\n    </p>\n    <p>\n        The <code>missing-signatures</code> warning shouldn't, I now believe, be considered an absolute law, but rather a contextual rule.\n    </p>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default/"
    },
    {
      "FeedId": "https://blog.ploeh.dk",
      "ItemId": "https://blog.ploeh.dk/2024/10/28/functor-compositions",
      "Title": "Functor compositions",
      "PublishDate": "2024-10-28T06:58:00+01:00",
      "Summary": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A functor nested within another functor forms a functor. With examples in C# and another language.</em>\n    </p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In this one you'll learn about a universal composition of functors. In short, if you have one functor nested within another functor, then this composition itself gives rise to a functor.\n\t</p>\n    <p>\n        Together with other articles in this series, this result can help you answer questions such as: <em>Does this data structure form a functor?</em>\n    </p>\n    <p>\n        Since <a href=\"/2018/03/22/functors\">functors</a> tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like <code>Foo&lt;T&gt;</code> (C# syntax) or <code>Bar&lt;T1, T2&gt;</code>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it's a functor strongly suggests that you should give it a <code>Select</code> method in C#, a <code>map</code> function in <a href=\"https://fsharp.org/\">F#</a>, and so on.\n    </p>\n    <p>\n        Not all generic types give rise to a (covariant) functor. Some are rather <a href=\"/2021/09/02/contravariant-functors\">contravariant functors</a>, and some are <a href=\"/2022/08/01/invariant-functors\">invariant</a>.\n    </p>\n    <p>\n        If, on the other hand, you have a data type where one functor is nested within another functor, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    </p>\n    <h3 id=\"a97b2f6471b74db6a83362a552ee5b03\">\n        Abstract shape <a href=\"#a97b2f6471b74db6a83362a552ee5b03\">#</a>\n    </h3>\n    <p>\n        Before we look at some examples found in other code, it helps if we know what we're looking for. Imagine that you have two functors <code>F</code> and <code>G</code>, and you're now considering a data structure that contains a value where <code>G</code> is nested inside of <code>F</code>.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;ginf;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>(<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ginf</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.ginf&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ginf</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Methods&nbsp;go&nbsp;here...</span></pre>\n    </p>\n    <p>\n        The <code><span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class has a single class field. The type of this field is an <code>F</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a>, but 'inside' <code>F</code> there's a <code>G</code> functor.\n    </p>\n    <p>\n        This kind of data structure gives rise to a functor. Knowing that, you can give it a <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(ginf.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">g</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        The composed <code>Select</code> method calls <code>Select</code> on the <code>F</code> functor, passing it a lambda expression that calls <code>Select</code> on the <code>G</code> functor. That nested <code>Select</code> call produces an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;</code> that the composed <code>Select</code> method finally wraps in a <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code> object that it returns.\n    </p>\n    <p>\n        I'll have more to say about how this generalizes to a nested composition of more than two functors, but first, let's consider some examples.\n    </p>\n    <h3 id=\"fcd4126b51c24b10867de4280f5e8844\">\n        Priority list <a href=\"#fcd4126b51c24b10867de4280f5e8844\">#</a>\n    </h3>\n    <p>\n        A common configuration is when the 'outer' functor is a collection, and the 'inner' functor is some other kind of container. The article <a href=\"/2024/07/01/an-immutable-priority-collection\">An immutable priority collection</a> shows a straightforward example. The <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class composes a single class field:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;[]&nbsp;priorities;</pre>\n    </p>\n    <p>\n        The <code>priorities</code> field is an array (a collection) of <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> objects. That type is a simple <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">record</a> type:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>);</pre>\n    </p>\n    <p>\n        If we squint a little and consider only the parameter list, we may realize that this is fundamentally an 'embellished' tuple: <code>(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>)</code>. <a href=\"/2018/12/31/tuple-bifunctor\">A pair forms a bifunctor</a>, but in the <a href=\"https://www.haskell.org/\">Haskell</a> <code>Prelude</code> a tuple is also a <code>Functor</code> instance over its rightmost element. In other words, if we'd swapped the <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> constructor parameters, it might have naturally looked like something we could <code>fmap</code>:\n    </p>\n    <p>\n        <pre>ghci&gt; fmap (elem 'r') (55, \"foo\")\n(55,False)</pre>\n    </p>\n    <p>\n        Here we have a tuple of an integer and a string. Imagine that the number <code>55</code> is the priority that we give to the label <code>\"foo\"</code>. This little ad-hoc example demonstrates how to map that tuple to another tuple with a priority, but now it instead holds a Boolean value indicating whether or not the string contained the character <code>'r'</code> (which it didn't).\n    </p>\n    <p>\n        You can easily swap the elements:\n    </p>\n    <p>\n        <pre>ghci&gt; import Data.Tuple\nghci&gt; swap (55, \"foo\")\n(\"foo\",55)</pre>\n    </p>\n    <p>\n        This looks just like the <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> parameter list. This also implies that if you originally have the parameter list in that order, you could <code>swap</code> it, map it, and swap it again:\n    </p>\n    <p>\n        <pre>ghci&gt; swap $ fmap (elem 'r') $ swap (\"foo\", 55)\n(False,55)</pre>\n    </p>\n    <p>\n        My point is only that <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> is isomorphic to a known functor. In reality you rarely need to analyze things that thoroughly to come to that realization, but the bottom line is that you can give <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> a lawful <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(Item),&nbsp;Priority);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        Hardly surprising, but since this article postulates that a functor of a functor is a functor, and since we already know that collections give rise to a functor, we should deduce that we can give <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> a <code>Select</code> method. And we can:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priorities.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">p</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)).<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>());\n}</pre>\n    </p>\n    <p>\n        Notice how much this implementation looks like the above <code><span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> 'shape' implementation.\n    </p>\n    <h3 id=\"32b4e828d4584c3d8cda81a9682aee34\">\n        Tree <a href=\"#32b4e828d4584c3d8cda81a9682aee34\">#</a>\n    </h3>\n    <p>\n        An example only marginally more complicated than the above is shown in <a href=\"/2018/08/06/a-tree-functor\">A Tree functor</a>. The <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class shown in that article contains two constituents:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;children;\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">T</span>&nbsp;Item&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n    </p>\n    <p>\n        Just like <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> there's a collection, as well as a 'naked' <code>T</code> value. The main difference is that here, the collection is of the same type as the object itself: <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>.\n    </p>\n    <p>\n        You've seen a similar example in <a href=\"/2024/10/14/functor-sums\">the previous article</a>, which also had a recursive data structure. If you assume, however, that <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> gives rise to a functor, then so does the nested composition of putting it in a collection. This means, from the 'theorem' put forth in this article, that <code><span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code> composes as a functor. Finally you have a product of a <code>T</code> (which is isomorphic to the <a href=\"/2018/09/03/the-identity-functor\">Identity functor</a>) and that composed functor. From <a href=\"/2024/09/16/functor-products\">Functor products</a> it follows that that's a functor too, which explains why <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> forms a functor. <a href=\"/2018/08/06/a-tree-functor\">The article</a> shows the <code>Select</code> implementation.\n    </p>\n    <h3 id=\"17209725eab64da598ba924342dafbd0\">\n        Binary tree Zipper <a href=\"#17209725eab64da598ba924342dafbd0\">#</a>\n    </h3>\n    <p>\n        In both previous articles you've seen pieces of the puzzle explaining why the <a href=\"/2024/09/09/a-binary-tree-zipper-in-c\">binary tree Zipper</a> gives rise to functor. There's one missing piece, however, that we can now finally address.\n    </p>\n    <p>\n        Recall that <code><span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> composes these two objects:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;Tree&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;Breadcrumbs&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n    </p>\n    <p>\n        We've already established that both <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> and <code><span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> form functors. In this article you've learned that a functor in a functor is a functor, which applies to <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code>. Both of the above read-only properties are functors, then, which means that the entire class is a product of functors. The <code>Select</code> method follows:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tree.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">c</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">c</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        Notice that this <code>Select</code> implementation calls <code>Select</code> on the 'outer' <code>Breadcrumbs</code> by calling <code>Select</code> on each <code><span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>. This is similar to the previous examples in this article.\n    </p>\n    <h3 id=\"800728c4c9c54aec815c62352843d52b\">\n        Other nested containers <a href=\"#800728c4c9c54aec815c62352843d52b\">#</a>\n    </h3>\n    <p>\n        There are plenty of other examples of functors that contains other functor values. Asynchronous programming supplies its own family of examples.\n    </p>\n    <p>\n        The way that C# and many other languages model asynchronous or I/O-bound actions is to wrap them in a <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a> container. If the value inside the <code>Task&lt;T&gt;</code> container is itself a functor, you can make that a functor, too. Examples include <code>Task&lt;IEnumerable&lt;T&gt;&gt;</code>, <code>Task&lt;Maybe&lt;T&gt;&gt;</code> (or its close cousin <code>Task&lt;T?&gt;</code>; notice <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/nullable-reference-types\">the question mark</a>), <code>Task&lt;Result&lt;T1, T2&gt;&gt;</code>, etc. You'll run into such types every time you have an I/O-bound or concurrent operation that returns <code>IEnumerable&lt;T&gt</code>, <code>Maybe&lt;T&gt;</code> etc. as an asynchronous result.\n    </p>\n    <p>\n        While you <em>can</em> make such nested task functors a functor in its own right, you rarely need that in languages with native <code>async</code> and <code>await</code> features, since those languages nudge you in other directions.\n    </p>\n    <p>\n        You can, however, run into other issues with task-based programming, but you'll see examples and solutions in <a href=\"/2024/11/11/traversals\">a future article</a>.\n    </p>\n    <p>\n        You'll run into other examples of nested containers with many property-based testing libraries. They typically define <a href=\"/2017/09/18/the-test-data-generator-functor\">Test Data Generators</a>, often called <code>Gen&lt;T&gt;</code>. For .NET, both <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a>, <a href=\"https://github.com/hedgehogqa/fsharp-hedgehog\">Hedgehog</a>, and <a href=\"https://github.com/AnthonyLloyd/CsCheck\">CsCheck</a> does this. For Haskell, <a href=\"https://hackage.haskell.org/package/QuickCheck\">QuickCheck</a>, too, defines <code>Gen a</code>.\n    </p>\n    <p>\n        You often need to generate random collections, in which case you'd work with <code>Gen&lt;IEnumerable&lt;T&gt;&gt;</code> or a similar collection type. If you need random <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a> values, you'll work with <code>Gen&lt;Maybe&lt;T&gt;&gt;</code>, and so on.\n    </p>\n    <p>\n        On the other hand, <a href=\"/2016/06/28/roman-numerals-via-property-based-tdd\">sometimes you need</a> to work with a collection of generators, such as <code>seq&lt;Gen&lt;'a&gt;&gt;</code>.\n    </p>\n    <p>\n        These are all examples of functors within functors. It's not a given that you <em>must</em> treat such a combination as a functor in its own right. To be honest, typically, you don't. On the other hand, if you find yourself writing <code>Select</code> within <code>Select</code>, or <code>map</code> within <code>map</code>, depending on your language, it might make your code more succinct and readable if you give that combination a specialized functor affordance.\n    </p>\n    <h3 id=\"bffe8909eb904260be8aa4ab1a22efb2\">\n        Higher arities <a href=\"#bffe8909eb904260be8aa4ab1a22efb2\">#</a>\n    </h3>\n    <p>\n        Like the previous two articles, the 'theorem' presented here generalizes to more than two functors. If you have a third <code>H</code> functor, then <code>F&lt;G&lt;H&lt;T&gt;&gt;&gt;</code> also gives rise to a functor. You can easily prove this by simple induction. We may first consider the base case. With a single functor (<em>n = 1</em>) any functor (say, <code>F</code>) is trivially a functor.\n    </p>\n    <p>\n        In the induction step (<em>n > 1</em>), you then assume that the <em>n - 1</em> 'stack' of functors already gives rise to a functor, and then proceed to prove that the configuration where all those nested functors are wrapped by yet another functor also forms a functor. Since the 'inner stack' of functors forms a functor (by assumption), you only need to prove that a configuration of the outer functor, and that 'inner stack', gives rise to a functor. You've seen how this works in this article, but I admit that a few examples constitute no proof. I'll leave you with only a sketch of this step, but you may consider using equational reasoning <a href=\"https://bartoszmilewski.com/2015/01/20/functors/\">as demonstrated by Bartosz Milewski</a> and then prove the functor laws for such a composition.\n    </p>\n    <p>\n        The Haskell <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html\">Data.Functor.Compose</a> module defines a general-purpose data type to compose functors. You may, for example, compose a tuple inside a Maybe inside a list:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">thriceNested</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Compose</span>&nbsp;[]&nbsp;(<span style=\"color:blue;\">Compose</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;((,)&nbsp;<span style=\"color:#2b91af;\">Integer</span>))&nbsp;<span style=\"color:#2b91af;\">String</span>\nthriceNested&nbsp;=&nbsp;Compose&nbsp;[Compose&nbsp;(Just&nbsp;(42,&nbsp;<span style=\"color:#a31515;\">&quot;foo&quot;</span>)),&nbsp;Compose&nbsp;Nothing,&nbsp;Compose&nbsp;(Just&nbsp;(89,&nbsp;<span style=\"color:#a31515;\">&quot;ba&quot;</span>))]</pre>\n    </p>\n    <p>\n        You can easily <code>fmap</code> that data structure, for example by evaluating whether the number of characters in each string is an odd number (if it's there at all):\n    </p>\n    <p>\n        <pre>ghci&gt; fmap (odd . length) thriceNested\nCompose [Compose (Just (42,True)),Compose Nothing,Compose (Just (89,False))]</pre>\n    </p>\n    <p>\n        The first element now has <code>True</code> as the second tuple element, since <code>\"foo\"</code> has an odd number of characters (3). The next element is <code>Nothing</code>, because <code>Nothing</code> maps to <code>Nothing</code>. The third element has <code>False</code> in the rightmost tuple element, since <code>\"ba\"</code> doesn't have an odd number of characters (it has 2).\n    </p>\n    <h3 id=\"8c6ca7bcdc554856bee94bd11981aa6f\">\n        Relations to monads <a href=\"#8c6ca7bcdc554856bee94bd11981aa6f\">#</a>\n    </h3>\n    <p>\n        A nested 'stack' of functors may remind you of the way that I prefer to teach <a href=\"/2022/03/28/monads\">monads</a>: <em>A monad is a functor your can flatten</em>. In short, the definition is the ability to 'flatten' <code>F&lt;F&lt;T&gt;&gt;</code> to <code>F&lt;T&gt;</code>. A function that can do that is often called <code>join</code> or <code>Flatten</code>.\n    </p>\n    <p>\n        So far in this article, we've been looking at stacks of different functors, abstractly denoted <code>F&lt;G&lt;T&gt;&gt;</code>. There's no rule, however, that says that <code>F</code> and <code>G</code> may not be the same. If <code>F = G</code> then <code>F&lt;G&lt;T&gt;&gt;</code> is really <code>F&lt;F&lt;T&gt;&gt;</code>. This starts to look like the <a href=\"https://en.wikipedia.org/wiki/Antecedent_(logic)\">antecedent</a> of the monad definition.\n    </p>\n    <p>\n        While the starting point may be the same, these notions are not equivalent. Yes, <code>F&lt;F&lt;T&gt;&gt;</code> <em>may</em> form a monad (if you can flatten it), but it does, universally, give rise to a functor. On the other hand, we can hardly talk about flattening <code>F&lt;G&lt;T&gt;&gt;</code>, because that would imply that you'd have to somehow 'throw away' either <code>F</code> or <code>G</code>. There may be specific functors (e.g. Identity) for which this is possible, but there's no universal law to that effect.\n    </p>\n    <p>\n        Not all 'stacks' of functors are monads. <a href=\"/2022/03/28/monads\">All monads, on the other hand, are functors</a>.\n    </p>\n    <h3 id=\"14f39729b7ab426e83a35a067cf8f3a1\">\n        Conclusion <a href=\"#14f39729b7ab426e83a35a067cf8f3a1\">#</a>\n    </h3>\n    <p>\n        A data structure that configures one type of functor inside of another functor itself forms a functor. The examples shown in this article are mostly constrained to two functors, but if you have a 'stack' of three, four, or more functors, that arrangement still gives rise to a functor.\n    </p>\n\t<p>\n\t\tThis is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such stacks into functors, in the way that Haskell's <code>Compose</code> container almost does. Thus, knowing when you can safely give your generic types a <code>Select</code> method or <code>map</code> function may come in handy.\n\t</p>\n    <p>\n        To be honest, though, this result is hardly the most important 'theorem' concerning stacks of functors. In reality, you often run into situations where you <em>do</em> have a stack of functors, but they're in the wrong order. You may have a collection of asynchronous tasks, but you really need an asynchronous task that contains a collection of values. The next article addresses that problem.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2024/11/11/traversals\">Traversals</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
      "Content": null,
      "Language": "en-us",
      "Link": "https://blog.ploeh.dk/2024/10/28/functor-compositions/"
    }
  ]
}
