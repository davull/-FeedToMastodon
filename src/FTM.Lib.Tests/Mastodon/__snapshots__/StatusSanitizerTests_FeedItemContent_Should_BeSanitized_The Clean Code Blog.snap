[
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2023/01/19/functional-classes-clojure",
    "raw": "<p>My previous <a href=\"http://blog.cleancoder.com/uncle-bob/2023/01/18/functional-classes.html\">blog</a> seemed only to continue the confusion regarding classes in Functional Programming.  Indeed, many people got quite irate.  So perhaps a bit of code will help.</p>\n\n<p><strong>Trigger Warning</strong>:</p>\n\n<ul>\n  <li>Object Oriented Terminology.</li>\n  <li>Dynamically Typed Language.</li>\n  <li>Mixed Metaphors.</li>\n  <li>Distracting Animations.</li>\n</ul>\n\n<blockquote>\n  <p>To all the adherents of the <em>Statically Typed</em> Functional Programming religion:  I know that you believe that <em>Static Typing</em> is an essential aspect of Functional Programming and that no mere dynamically typed language could ever begin to approach the heights and glory of <em>The One True and Holy TYPED Functional Apotheotic Paradigm</em>.  But we lowly programmers quivering down here at the base of <em>Orthanc</em> can only hope to meekly subsist on the dregs that fall from on high.</p>\n</blockquote>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/1KRqeDEQcYk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"\"></iframe>\n\n<p>(R.I.P. Kirstie Alley</p>\n\n<p>OK, so, once again…</p>\n\n<blockquote>\n  <p><em>A class is an intentionally named abstraction that consists of a set of narrowly cohesive functions that operate over an internally defined data structure.</em></p>\n</blockquote>\n\n<p>We do not need the <code class=\"language-plaintext highlighter-rouge\">class</code> keyword.  Nor do we need polymorphic dispatch.  Nor do we need inheritance.  A class is just a description, whether in full or in part, of an object.</p>\n\n<p>For example – it’s time we talked about clouds (which I have looked at from both sides now; and do, in fact, understand pretty well).</p>\n\n<p>So… Here come your father’s parentheses!</p>\n\n<p><img src=\"https://i.pinimg.com/originals/4f/1e/26/4f1e261d1afa9d58fd1125db5a5a4a12.jpg\" /></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(ns spacewar.game-logic.clouds\n  (:require [clojure.spec.alpha :as s]\n            [spacewar.geometry :as geo]\n            [spacewar.game-logic.config :as glc]))\n\n(s/def ::x number?)\n(s/def ::y number?)\n(s/def ::concentration number?)\n\n(s/def ::cloud (s/keys :req-un [::x ::y ::concentration]))\n(s/def ::clouds (s/coll-of ::cloud))\n\n(defn valid-cloud? [cloud]\n  (let [valid (s/valid? ::cloud cloud)]\n    (when (not valid)\n      (println (s/explain-str ::cloud cloud)))\n    valid))\n\n(defn make-cloud\n  ([]\n   (make-cloud 0 0 0))\n  ([x y concentration]\n  {:x x\n   :y y\n   :concentration concentration}))\n\n(defn harvest-dilithium [ms ship cloud]\n  (let [ship-pos [(:x ship) (:y ship)]\n        cloud-pos [(:x cloud) (:y cloud)]]\n    (if (&lt; (geo/distance ship-pos cloud-pos) glc/dilithium-harvest-range)\n      (let [max-harvest (* ms glc/dilithium-harvest-rate)\n            need (- glc/ship-dilithium (:dilithium ship))\n            cloud-content (:concentration cloud)\n            harvest (min max-harvest cloud-content need)\n            ship (update ship :dilithium + harvest)\n            cloud (update cloud :concentration - harvest)]\n        [ship cloud])\n      [ship cloud])))\n\n(defn update-dilithium-harvest [ms world]\n  (let [{:keys [clouds ship]} world]\n    (loop [clouds clouds ship ship harvested-clouds []]\n      (if (empty? clouds)\n        (assoc world :ship ship :clouds harvested-clouds)\n        (let [[ship cloud] (harvest-dilithium ms ship (first clouds))]\n          (recur (rest clouds) ship (conj harvested-clouds cloud)))))))\n\n(defn update-clouds-age [ms world]\n  (let [clouds (:clouds world)\n        decay (Math/pow glc/cloud-decay-rate ms)\n        clouds (map #(update % :concentration * decay) clouds)\n        clouds (filter #(&gt; (:concentration %) 1) clouds)\n        clouds (doall clouds)]\n    (assoc world :clouds clouds)))\n\n(defn update-clouds [ms world]\n  (-&gt;&gt; world\n       (update-clouds-age ms)\n       (update-dilithium-harvest ms)))\n</code></pre></div></div>\n\n<p>Some years back I wrote a nice little <a href=\"http://blog.cleancoder.com/uncle-bob/2021/11/28/Spacewar.html\">spacewar game</a> in Clojure.  You can play it <a href=\"http://spacewar.fikesfarm.com/spacewar.html\">here</a>.  While playing, if you manage to blow up a Klingon, a sparkling cloud of <em>Dilithium Crystals</em> will remain behind, quickly dissipating.  If you can guide your ship into the midst of that cloud, you will harvest some of that <em>Dilithium</em> and replenish your stores.</p>\n\n<p>The code you see above is the <em>class</em> that represents the <em>Dilithium Cloud</em>.</p>\n\n<p>The first thing to notice is that I defined the <em>TYPE</em> of the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>class</em> – <em>dynamically</em>.<br />\n<img src=\"https://yt3.ggpht.com/a/AATXAJxJ07NzOxzlMLuiV6SGv808JXSCrALLJMXJ1w=s900-c-k-c0xffffffff-no-rj-mo\" width=\"150\" /></p>\n\n<p>A <code class=\"language-plaintext highlighter-rouge\">cloud</code> is an object with an <code class=\"language-plaintext highlighter-rouge\">x</code> and <code class=\"language-plaintext highlighter-rouge\">y</code> coordinate, and a <code class=\"language-plaintext highlighter-rouge\">concentration</code>; all of which must be numbers.  I also created a little type checking function named <code class=\"language-plaintext highlighter-rouge\">valid-cloud?</code> that is used by my unit tests (not shown) to make sure the <em>TYPE</em> is not violated by any of the <em>methods</em>.</p>\n\n<p>Next comes <code class=\"language-plaintext highlighter-rouge\">make-cloud</code> the <em>constructor</em> of the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>class</em>.</p>\n\n<iframe src=\"https://giphy.com/embed/vyTnNTrs3wqQ0UIvwE\" width=\"480\" height=\"400\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen=\"\"></iframe>\n<p><a href=\"https://giphy.com/gifs/theoffice-the-office-tv-frame-toby-vyTnNTrs3wqQ0UIvwE\">via GIPHY</a></p>\n\n<p>There are two overloads of the <em>constructor</em>.  The first takes no arguments and simply creates a <code class=\"language-plaintext highlighter-rouge\">cloud</code> at (0,0) with no <em>Dilithium</em> in it.  The second takes three arguments and loads the <em>instance variables</em> of the <em>class</em>.</p>\n\n<iframe src=\"https://giphy.com/embed/2yP1jNgjNAkvu\" width=\"480\" height=\"480\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen=\"\"></iframe>\n<p><a href=\"https://giphy.com/gifs/monty-python-2yP1jNgjNAkvu\">via GIPHY</a></p>\n\n<p>There are two primary <em>methods</em> of the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>class</em>: <code class=\"language-plaintext highlighter-rouge\">update-clouds-age</code> and <code class=\"language-plaintext highlighter-rouge\">update-dilithium-harvest</code>.  The <code class=\"language-plaintext highlighter-rouge\">update-clouds-age</code> <em>method</em> finds all the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>instances</em> in the <code class=\"language-plaintext highlighter-rouge\">world</code> <em>object</em> and decreases their concentration by the <code class=\"language-plaintext highlighter-rouge\">decay</code> factor – which is a function of the number of milliseconds (<code class=\"language-plaintext highlighter-rouge\">ms</code>) since the last time they were updated. The <code class=\"language-plaintext highlighter-rouge\">update-dilithium-harvest</code> <em>method</em> finds all the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>objects</em> that are within the <code class=\"language-plaintext highlighter-rouge\">ship</code> <em>object</em>’s harvesting range and transfers <em>Dilithium</em> from those <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>objects</em> to the <code class=\"language-plaintext highlighter-rouge\">ship</code> <em>object</em>.</p>\n\n<p>Now, you might notice that these <em>methods</em> are not the traditional style of method you would find in a Java program.  For one thing, they deal with a list of <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>objects</em> rather than an individual <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>object</em>.  Secondly, there’s nothing polymorphic about them.  Third, they are <em>functional</em>, because they return a new <code class=\"language-plaintext highlighter-rouge\">world</code> <em>object</em> with new <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>objects</em> and, in the case of <code class=\"language-plaintext highlighter-rouge\">update-dilithium-harvest</code>, a new <code class=\"language-plaintext highlighter-rouge\">ship</code> <em>object</em>.</p>\n\n<p>So are these really <em>methods</em> of the <code class=\"language-plaintext highlighter-rouge\">cloud</code> <em>class</em>?  Sure!  Why not?  They are a set of narrowly cohesive functions that manipulate an internal data structure within an intentionally named abstraction.</p>\n\n<p>For all intents and purposes <code class=\"language-plaintext highlighter-rouge\">cloud</code> is a °°°°°° °°°°°°° <em>class</em>.</p>\n\n<iframe src=\"https://giphy.com/embed/TcdpZwYDPlWXC\" width=\"480\" height=\"240\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen=\"\"></iframe>\n<p><a href=\"https://giphy.com/gifs/reaction-laughing-lotr-TcdpZwYDPlWXC\">via GIPHY</a></p>\n\n<p>So there.</p>\n\n",
    "sanitized": "My previous blog seemed only to continue the confusion regarding classes in Functional Programming.  Indeed, many people got quite irate.  So perhaps a bit of code will help.\n\nTrigger Warning:\n\n\n  Object Oriented Terminology.\n  Dynamically Typed Language.\n  Mixed Metaphors.\n  Distracting Animations.\n\n\n\n  To all the adherents of the Statically Typed Functional Programming religion:  I know that you believe that Static Typing is an essential aspect of Functional Programming and that no mere dynamically typed language could ever begin to approach the heights and glory of The One True and Holy TYPED Functional Apotheotic Paradigm.  But we lowly programmers quivering down here at the base of Orthanc can only hope to meekly subsist on the dregs that fall from on high.\n\n\n\n\n(R.I.P. Kirstie Alley\n\nOK, so, once again…\n\n\n  A class is an intentionally named abstraction that consists of a set of narrowly cohesive functions that operate over an internally defined data structure.\n\n\nWe do not need the class keyword.  Nor do we need polymorphic dispatch.  Nor do we need inheritance.  A class is just a description, whether in full or in part, of an object.\n\nFor example – it’s time we talked about clouds (which I have looked at from both sides now; and do, in fact, understand pretty well).\n\nSo… Here come your father’s parentheses!\n\n\n\n(ns spacewar.game-logic.clouds\n  (:require [clojure.spec.alpha :as s]\n            [spacewar.geometry :as geo]\n            [spacewar.game-logic.config :as glc]))\n\n(s/def ::x number?)\n(s/def ::y number?)\n(s/def ::concentration number?)\n\n(s/def ::cloud (s/keys :req-un [::x ::y ::concentration]))\n(s/def ::clouds (s/coll-of ::cloud))\n\n(defn valid-cloud? [cloud]\n  (let [valid (s/valid? ::cloud cloud)]\n    (when (not valid)\n      (println (s/explain-str ::cloud cloud)))\n    valid))\n\n(defn make-cloud\n  ([]\n   (make-cloud 0 0 0))\n  ([x y concentration]\n  {:x x\n   :y y\n   :concentration concentration}))\n\n(defn harvest-dilithium [ms ship cloud]\n  (let [ship-pos [(:x ship) (:y ship)]\n        cloud-pos [(:x cloud) (:y cloud)]]\n    (if (< (geo/distance ship-pos cloud-pos) glc/dilithium-harvest-range)\n      (let [max-harvest (* ms glc/dilithium-harvest-rate)\n            need (- glc/ship-dilithium (:dilithium ship))\n            cloud-content (:concentration cloud)\n            harvest (min max-harvest cloud-content need)\n            ship (update ship :dilithium + harvest)\n            cloud (update cloud :concentration - harvest)]\n        [ship cloud])\n      [ship cloud])))\n\n(defn update-dilithium-harvest [ms world]\n  (let [{:keys [clouds ship]} world]\n    (loop [clouds clouds ship ship harvested-clouds []]\n      (if (empty? clouds)\n        (assoc world :ship ship :clouds harvested-clouds)\n        (let [[ship cloud] (harvest-dilithium ms ship (first clouds))]\n          (recur (rest clouds) ship (conj harvested-clouds cloud)))))))\n\n(defn update-clouds-age [ms world]\n  (let [clouds (:clouds world)\n        decay (Math/pow glc/cloud-decay-rate ms)\n        clouds (map #(update % :concentration * decay) clouds)\n        clouds (filter #(> (:concentration %) 1) clouds)\n        clouds (doall clouds)]\n    (assoc world :clouds clouds)))\n\n(defn update-clouds [ms world]\n  (->> world\n       (update-clouds-age ms)\n       (update-dilithium-harvest ms)))\n\n\nSome years back I wrote a nice little spacewar game in Clojure.  You can play it here.  While playing, if you manage to blow up a Klingon, a sparkling cloud of Dilithium Crystals will remain behind, quickly dissipating.  If you can guide your ship into the midst of that cloud, you will harvest some of that Dilithium and replenish your stores.\n\nThe code you see above is the class that represents the Dilithium Cloud.\n\nThe first thing to notice is that I defined the TYPE of the cloud class – dynamically.\n\n\nA cloud is an object with an x and y coordinate, and a concentration; all of which must be numbers.  I also created a little type checking function named valid-cloud? that is used by my unit tests (not shown) to make sure the TYPE is not violated by any of the methods.\n\nNext comes make-cloud the constructor of the cloud class.\n\n\nvia GIPHY\n\nThere are two overloads of the constructor.  The first takes no arguments and simply creates a cloud at (0,0) with no Dilithium in it.  The second takes three arguments and loads the instance variables of the class.\n\n\nvia GIPHY\n\nThere are two primary methods of the cloud class: update-clouds-age and update-dilithium-harvest.  The update-clouds-age method finds all the cloud instances in the world object and decreases their concentration by the decay factor – which is a function of the number of milliseconds (ms) since the last time they were updated. The update-dilithium-harvest method finds all the cloud objects that are within the ship object’s harvesting range and transfers Dilithium from those cloud objects to the ship object.\n\nNow, you might notice that these methods are not the traditional style of method you would find in a Java program.  For one thing, they deal with a list of cloud objects rather than an individual cloud object.  Secondly, there’s nothing polymorphic about them.  Third, they are functional, because they return a new world object with new cloud objects and, in the case of update-dilithium-harvest, a new ship object.\n\nSo are these really methods of the cloud class?  Sure!  Why not?  They are a set of narrowly cohesive functions that manipulate an internal data structure within an intentionally named abstraction.\n\nFor all intents and purposes cloud is a °°°°°° °°°°°°° class.\n\n\nvia GIPHY\n\nSo there."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2023/01/18/functional-classes",
    "raw": "<p>I recently tweeted the following:</p>\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">Should you subdivide a functional program into classes the way you would an object oriented program?<br /><br />Yes. You should. Because the rules don’t change just because you’ve chosen to use immutable data structures.</p>&mdash; Uncle Bob Martin (@unclebobmartin) <a href=\"https://twitter.com/unclebobmartin/status/1615436628385824769?ref_src=twsrc%5Etfw\">January 17, 2023</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>This led to a bevy of interesting responses about the difference between classes and modules.  In answer to those responses I tweeted this:</p>\n\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">A class is a group of cohesive and narrowly defined functions that operate on an encapsulated data structure. The functions may, or may not, be polymorphically deployed.</p>&mdash; Uncle Bob Martin (@unclebobmartin) <a href=\"https://twitter.com/unclebobmartin/status/1615438162746134528?ref_src=twsrc%5Etfw\">January 17, 2023</a></blockquote>\n<script async=\"\" src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>Of course that only led to an increased number of interesting responses.  And so I thought that it might be wise to blog about my reasoning rather than to continue trying to cram that reasoning into tweets.</p>\n\n<p>If you are in doubt about what FP is, and about what OO is, and about whether the two are compatible, then I recommend <a href=\"http://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html\">this</a> old blog of mine.</p>\n\n<p>What is a class? According to the dictionary a class is:</p>\n\n<blockquote>\n  <p><em>A set, collection, group, or configuration containing members regarded as having certain attributes or traits in common; a kind or category.</em></p>\n</blockquote>\n\n<p>Now consider that definition when reading the next paragraph.</p>\n\n<p>In OO languages we organize our programs into classes of objects that share similar traits.  We describe those objects in terms of the attributes and behaviors that they have in common.  We strive to create hierarchies of classification that those objects can fit within.  We consider the higher level classifications to be abstractions that allow the expression of general truths that are independent of irrelevant details.  (Indeed, I once defined abstraction as: <em>The Amplification of the essential, and the elimination of the irrelevant.</em><a href=\"https://www.amazon.com/Designing-Object-Oriented-Applications-Method/dp/0132038374\">[1]</a>)</p>\n\n<p>In 1966 the power of abstraction by classification led the authors of Simula to create the keyword <code class=\"language-plaintext highlighter-rouge\">class</code>.  In 1980, Bjarne Stroustrup continued that convention and used the <code class=\"language-plaintext highlighter-rouge\">class</code> keyword in C++.  This was actually somewhat strange because C already had the keyword <code class=\"language-plaintext highlighter-rouge\">struct</code> which had a virtually identical meaning.  But the power of the word <code class=\"language-plaintext highlighter-rouge\">class</code> held sway.</p>\n\n<p>In the mid 90s the power of that word led the authors of Java (and then C#) to declare <em>and enforce</em> that <em>everything</em> in a program must be part of a class.  This was a dramatic overreach.  It seems to me that some of the things that Java forces into classes ought not to be in classes at all.  For example, the class <code class=\"language-plaintext highlighter-rouge\">java.lang.Math</code> is really just a namespace for a batch of functions and is not, in any sense, a classification of objects.</p>\n\n<p>This conflation of object classification and namespaces is confusing and unnecessary; and is probably part of the reason my initial tweet generated the responses that it did.</p>\n\n<p>Another overreach in Java (and by extension C#) is that methods are polymorphic by default.  Polymorphism is a tool, not a rule.  Many, if not most, function calls do not require dynamic dispatch.</p>\n\n<p>These kinds of overreach lead to confusion about what a class really is.  I believe that most of the responses to my tweet were the result of that confusion.</p>\n\n<p>So let’s cut to the chase.</p>\n\n<p>One of the oldest rules of software design is that we should partition the elements of the system into loosely coupled and internally cohesive elements.  Those elements become well named places where we can put data and behavior.  This follows the old proverb: <em>A place for everything, and everything in its place.</em></p>\n\n<p>What are those elements?  It seems obvious that the classification structures of objects ought to be high on the list.  Namespaced function libraries like <code class=\"language-plaintext highlighter-rouge\">java.lang.Math</code> are another obvious choice.  In the one case we have a batch of functions that manipulate an internal data structure.  In the other case we have a batch of functions that manipulate an external data structure.</p>\n\n<p>The essential charachteristic of these elements, these batches of functions, is that they are internally cohesive.  That means that all the functions in the batch are strongly related to each other because they manipulate the same data structures, whether internal or external.  It is that cohesion that drives the partitioning of a software design.</p>\n\n<p>###Example</p>\n\n<p>Recently I have been writing an application called <a href=\"http://github.com/unclebob/more-speech\"><code class=\"language-plaintext highlighter-rouge\">more-speech</code></a> which is a client that browses messages on the <a href=\"https://nostr.com\"><code class=\"language-plaintext highlighter-rouge\">nostr</code></a> network.  This nework is composed of relays that use a simple websocket protocol to transmit messages to clients.  The <code class=\"language-plaintext highlighter-rouge\">more-speech</code> client is written in Clojure, which is a Functional Programming language.</p>\n\n<p>Early on I created a module named <code class=\"language-plaintext highlighter-rouge\">protocol</code> to house the code that implemented the <code class=\"language-plaintext highlighter-rouge\">nostr</code> protocol.  I began this module by managing the websockets over which the messages travelled, and then decoding those messages and manipulating them according to the rules of the protocol.</p>\n\n<p>Clojure is not a traditional OOPL, there is no <code class=\"language-plaintext highlighter-rouge\">class</code> keyword that is used to declare and define objects and the methods that manipulate them.  Rather, a module in Clojure is just a batch of functions that are not syntactically bound to any particular data.  Thus my <code class=\"language-plaintext highlighter-rouge\">protocol</code> module had functions that dealt with <code class=\"language-plaintext highlighter-rouge\">WebSocket</code>s and functions that dealth with messages and functions that dealth with protocol elements.  They were cohesive in the sense that they were all related to the <code class=\"language-plaintext highlighter-rouge\">nostr</code> protocol; but there was no central data structure that unified them.</p>\n\n<p>The other day I realized that I was missing an abstraction.  The <code class=\"language-plaintext highlighter-rouge\">nostr</code> protocol may be transmitted over websockets but the protocol rules have nothing to do with websockets.  Those rules deal with the data that comes through the websockets, but not the websockets themselves.  Yet my <code class=\"language-plaintext highlighter-rouge\">protocol</code> module was littered with websocket code.</p>\n\n<p>So I separated the websocket code from the <code class=\"language-plaintext highlighter-rouge\">protocol</code> code by creating an abstraction that I called <code class=\"language-plaintext highlighter-rouge\">relay</code>.  A <code class=\"language-plaintext highlighter-rouge\">relay</code> is a data structure that contains the <code class=\"language-plaintext highlighter-rouge\">url</code> of a websocket, the websocket itself, and a function to call when messages are received.  The <code class=\"language-plaintext highlighter-rouge\">relay</code> data structure is manipulated by functions such as <code class=\"language-plaintext highlighter-rouge\">make</code>, <code class=\"language-plaintext highlighter-rouge\">open</code>, <code class=\"language-plaintext highlighter-rouge\">close</code>, and <code class=\"language-plaintext highlighter-rouge\">send</code>.</p>\n\n<p>This <code class=\"language-plaintext highlighter-rouge\">relay</code> module very clearly defines a class of objects.  The <code class=\"language-plaintext highlighter-rouge\">protocol</code> constructs a <code class=\"language-plaintext highlighter-rouge\">relay</code> object for each of the urls in a list of active relays.  It <code class=\"language-plaintext highlighter-rouge\">open</code>s those <code class=\"language-plaintext highlighter-rouge\">relay</code>s and <code class=\"language-plaintext highlighter-rouge\">send</code>s messages to them.  Messages that are received are sent to <code class=\"language-plaintext highlighter-rouge\">protocol</code> through the callback functions that are passed into the function that constructs the <code class=\"language-plaintext highlighter-rouge\">relay</code> object.  In order to maintain the immutability and referential transparency constraints of Functional Programming, the functions that update the state of a <code class=\"language-plaintext highlighter-rouge\">relay</code> return a new instance of that <code class=\"language-plaintext highlighter-rouge\">relay</code>.</p>\n\n<p>###Lesson</p>\n\n<p>Java, C#, Ruby, and C++ all either enforce, or stronly encourage, the partitioning of systems into classes. Clojure does not; it is entirely agnostic about classes. The lesson that I learned from <code class=\"language-plaintext highlighter-rouge\">protocol</code> and <code class=\"language-plaintext highlighter-rouge\">relay</code> is that I had not been paying enough attention to class structure when writing complex Clojure programs.  Instead, I had been allowing functions to accumulate in modules in a, more or less, ad hoc fashion – similar to the way one might program in C, Fortran, Basic, or even Assembler.  But that was lazy.  Objects exist in programs, and they can, and should, be classified.  So, from now on, I will be paying much more attention to the classification structure of the objects my systems.</p>\n\n<blockquote>\n  <p><em>A place for everything, and everything in its place.</em></p>\n</blockquote>\n\n",
    "sanitized": "I recently tweeted the following:\n\nShould you subdivide a functional program into classes the way you would an object oriented program?Yes. You should. Because the rules don’t change just because you’ve chosen to use immutable data structures.— Uncle Bob Martin (@unclebobmartin) January 17, 2023\n\n\nThis led to a bevy of interesting responses about the difference between classes and modules.  In answer to those responses I tweeted this:\n\nA class is a group of cohesive and narrowly defined functions that operate on an encapsulated data structure. The functions may, or may not, be polymorphically deployed.— Uncle Bob Martin (@unclebobmartin) January 17, 2023\n\n\nOf course that only led to an increased number of interesting responses.  And so I thought that it might be wise to blog about my reasoning rather than to continue trying to cram that reasoning into tweets.\n\nIf you are in doubt about what FP is, and about what OO is, and about whether the two are compatible, then I recommend this old blog of mine.\n\nWhat is a class? According to the dictionary a class is:\n\n\n  A set, collection, group, or configuration containing members regarded as having certain attributes or traits in common; a kind or category.\n\n\nNow consider that definition when reading the next paragraph.\n\nIn OO languages we organize our programs into classes of objects that share similar traits.  We describe those objects in terms of the attributes and behaviors that they have in common.  We strive to create hierarchies of classification that those objects can fit within.  We consider the higher level classifications to be abstractions that allow the expression of general truths that are independent of irrelevant details.  (Indeed, I once defined abstraction as: The Amplification of the essential, and the elimination of the irrelevant.[1])\n\nIn 1966 the power of abstraction by classification led the authors of Simula to create the keyword class.  In 1980, Bjarne Stroustrup continued that convention and used the class keyword in C++.  This was actually somewhat strange because C already had the keyword struct which had a virtually identical meaning.  But the power of the word class held sway.\n\nIn the mid 90s the power of that word led the authors of Java (and then C#) to declare and enforce that everything in a program must be part of a class.  This was a dramatic overreach.  It seems to me that some of the things that Java forces into classes ought not to be in classes at all.  For example, the class java.lang.Math is really just a namespace for a batch of functions and is not, in any sense, a classification of objects.\n\nThis conflation of object classification and namespaces is confusing and unnecessary; and is probably part of the reason my initial tweet generated the responses that it did.\n\nAnother overreach in Java (and by extension C#) is that methods are polymorphic by default.  Polymorphism is a tool, not a rule.  Many, if not most, function calls do not require dynamic dispatch.\n\nThese kinds of overreach lead to confusion about what a class really is.  I believe that most of the responses to my tweet were the result of that confusion.\n\nSo let’s cut to the chase.\n\nOne of the oldest rules of software design is that we should partition the elements of the system into loosely coupled and internally cohesive elements.  Those elements become well named places where we can put data and behavior.  This follows the old proverb: A place for everything, and everything in its place.\n\nWhat are those elements?  It seems obvious that the classification structures of objects ought to be high on the list.  Namespaced function libraries like java.lang.Math are another obvious choice.  In the one case we have a batch of functions that manipulate an internal data structure.  In the other case we have a batch of functions that manipulate an external data structure.\n\nThe essential charachteristic of these elements, these batches of functions, is that they are internally cohesive.  That means that all the functions in the batch are strongly related to each other because they manipulate the same data structures, whether internal or external.  It is that cohesion that drives the partitioning of a software design.\n\n###Example\n\nRecently I have been writing an application called more-speech which is a client that browses messages on the nostr network.  This nework is composed of relays that use a simple websocket protocol to transmit messages to clients.  The more-speech client is written in Clojure, which is a Functional Programming language.\n\nEarly on I created a module named protocol to house the code that implemented the nostr protocol.  I began this module by managing the websockets over which the messages travelled, and then decoding those messages and manipulating them according to the rules of the protocol.\n\nClojure is not a traditional OOPL, there is no class keyword that is used to declare and define objects and the methods that manipulate them.  Rather, a module in Clojure is just a batch of functions that are not syntactically bound to any particular data.  Thus my protocol module had functions that dealt with WebSockets and functions that dealth with messages and functions that dealth with protocol elements.  They were cohesive in the sense that they were all related to the nostr protocol; but there was no central data structure that unified them.\n\nThe other day I realized that I was missing an abstraction.  The nostr protocol may be transmitted over websockets but the protocol rules have nothing to do with websockets.  Those rules deal with the data that comes through the websockets, but not the websockets themselves.  Yet my protocol module was littered with websocket code.\n\nSo I separated the websocket code from the protocol code by creating an abstraction that I called relay.  A relay is a data structure that contains the url of a websocket, the websocket itself, and a function to call when messages are received.  The relay data structure is manipulated by functions such as make, open, close, and send.\n\nThis relay module very clearly defines a class of objects.  The protocol constructs a relay object for each of the urls in a list of active relays.  It opens those relays and sends messages to them.  Messages that are received are sent to protocol through the callback functions that are passed into the function that constructs the relay object.  In order to maintain the immutability and referential transparency constraints of Functional Programming, the functions that update the state of a relay return a new instance of that relay.\n\n###Lesson\n\nJava, C#, Ruby, and C++ all either enforce, or stronly encourage, the partitioning of systems into classes. Clojure does not; it is entirely agnostic about classes. The lesson that I learned from protocol and relay is that I had not been paying enough attention to class structure when writing complex Clojure programs.  Instead, I had been allowing functions to accumulate in modules in a, more or less, ad hoc fashion – similar to the way one might program in C, Fortran, Basic, or even Assembler.  But that was lazy.  Objects exist in programs, and they can, and should, be classified.  So, from now on, I will be paying much more attention to the classification structure of the objects my systems.\n\n\n  A place for everything, and everything in its place."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/11/28/Spacewar",
    "raw": "<p>For the last month I've been spending a lot of time working on <a href=\"https://github.com/unclebob/spacewar\">Space War</a>.  I know, I know, I should have been working on <a href=\"https://cleancoders.com\"><em>Clean Code Episode 67: Legacy Code</em></a>, and <a href=\"https://www.youtube.com/playlist?list=PLmsuNLXeDr6Y1-a9ASu4mfxqDIgr-oaU6\"><em>Euler 5</em></a>, and <a href=\"https://www.youtube.com/channel/UCThitpd5RCB2J5b_HlcseMw\"><em>Countest and Curmugeon 3</em></a>.  I should have been working on a blog, or a new book, or...  But I couldn't let go of Space War.  It kept calling me.</p>\n\n<p>The first time I wrote Space War was in 1978.  I wrote it in <em>Alcom</em>, which was a simple derivative of <a href=\"https://en.wikipedia.org/wiki/FOCAL_(programming_language)\"><em>Focal</em></a>, which was an analog of <em>Basic</em> for the <a href=\"https://en.wikipedia.org/wiki/PDP-8\">PDP-8</a>.  The computer was an <em>M365</em> which was an augmented version of a PDP-8 and was proprietery to Teradyne, my employer at the time.</p>\n\n<p>The UI was screen based, using character graphics, similar to <em>curses</em>.  Screen updates took on the order of a second.  All input was through the keyboard.</p>\n\n<p>We used to play it on one machine while waiting for a compile on another.</p>\n\n<p>Forty years later, in September of 2018, I started working on <em>this</em> version of Space War.  It's an animated GUI driven system with a frame rate of 30fps.  It is written entirely in Clojure and uses the <a href=\"http://www.quil.info\">Quil</a> shim for the <a href=\"https://processing.org\">Processing</a> GUI framework.</p>\n\n<p>My justification for writing it was so that I could use it as the case study for my cleancoders.com videos on <em>Functional Programming</em>.  Once that series of videos was complete, I set Space War aside and started working on other things.</p>\n\n<p>Then, a month ago, the program called to me.  I don't know why.  Perhaps it was because I'd left it in a partially completed state.  Perhaps it was because I had just finished <a href=\"https://www.amazon.com/Clean-Craftsmanship-Disciplines-Standards-Ethics/dp/013691571X\"><em>Clean Craftsmanship</em></a> and I needed a way to decompress.  Or, perhaps it was just because I felt like it.  Whatever the reason, I loaded up the project and started goofing around with it.</p>\n\n<p>Now I'm sure you've had that feeling of trepidation when you pick up a code base that you haven't seen in three years.  I certainly felt it.  I mean, what was I going to find in there?  Would I be able to get my bearings and understand the code?  Or would I flail around aimlessly for weeks?</p>\n\n<p>I needn't have worried.  The code base was nicely organized.  There was a very nice suite of tests that covered the vast majority of the game logic.  The GUI code, though not tested, was simple enough to understand at a glance.</p>\n\n<p>But, perhaps most importantly, this code was written to be 100% functional.  No variables were mutated, anywhere in the code.  This meant that every function did exactly what it said it did; and left no detritus around to confound other functions.  No function could be impacted by the state of the system because the system did not have \"a state\".</p>\n\n<p>Now maybe you are rolling your eyes at that last paragraph.  Several years ago I might have rolled my eyes too.  But the relief I experienced coming back into this code base after three years of not touching it, and knowing it was functional, was palpable.</p>\n\n<p>Another thing that gave me a significant amount of help was that all the critical data structures in the system were described and tested using <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code>.  This was profoundly helpful because it gave me the kind of declarative help that is usually reserved for statically typed languages.</p>\n\n<p>For example, This is a Klingon:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(s/def ::x number?)\n(s/def ::y number?)\n(s/def ::shields number?)\n(s/def ::antimatter number?)\n\n(s/def ::kinetics number?)\n(s/def ::torpedos number?)\n(s/def ::weapon-charge number?)\n(s/def ::velocity (s/tuple number? number?))\n(s/def ::thrust (s/tuple number? number?))\n(s/def ::battle-state-age number?)\n(s/def ::battle-state #{:no-battle :flank-right :flank-left :retreating :advancing})\n(s/def ::cruise-state #{:patrol :guard :refuel :mission})\n(s/def ::mission #{:blockade :seek-and-destroy :escape-corbomite})\n\n(s/def ::klingon (s/keys :req-un [::x ::y ::shields ::antimatter\n                                  ::kinetics ::torpedos ::weapon-charge\n                                  ::velocity ::thrust\n                                  ::battle-state-age ::battle-state\n                                  ::cruise-state\n                                  ::mission]\n                         :opt-un [::hit/hit]))\n</code></pre></div></div>\n\n<p>These kinds of <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code> descriptions gave me the documentation I needed to reaquaint myself with the critical data structures of the system.  They also gave me the ability to check that any functions I wrote kept those data structures conformant to the spec.</p>\n\n<p>All of this means that I was able to make progress in this code base quickly, and with a high degree of confidence. <em>I never had that feeling of wading through bogs of legacy code.</em></p>\n\n<p>Anyway, I'm done now, for the time being.  I've given the player a mission to complete, and made it challenging, but possible, to complete that mission.  A game requires 2-3 hours of intense play, is tactially and strategically challenging, and is often punctuated by moments of sheer panic.</p>\n\n<p>I hope you enjoy downloading it, firing up Clojure, and playing it.  Consider it my Christmas present to you.</p>\n\n<p>One last thing.  Three years ago <a href=\"https://github.com/mfikes\">Mike Fikes</a> saw my Space War program and converted it from Clojure to <a href=\"https://clojurescript.org\">ClojureScript</a>.  The change was so miniscule that the two are now a single code base with a tiny smattering of conditional compilation for the very few differences.  So if you want to play the game on-line you can just click on <a href=\"http://spacewar.fikesfarm.com/spacewar.html\">http://spacewar.fikesfarm.com/spacewar.html</a>.  Mike has kindly kept this version up to date so -- have at it!</p>\n\n",
    "sanitized": "For the last month I've been spending a lot of time working on Space War.  I know, I know, I should have been working on Clean Code Episode 67: Legacy Code, and Euler 5, and Countest and Curmugeon 3.  I should have been working on a blog, or a new book, or...  But I couldn't let go of Space War.  It kept calling me.\n\nThe first time I wrote Space War was in 1978.  I wrote it in Alcom, which was a simple derivative of Focal, which was an analog of Basic for the PDP-8.  The computer was an M365 which was an augmented version of a PDP-8 and was proprietery to Teradyne, my employer at the time.\n\nThe UI was screen based, using character graphics, similar to curses.  Screen updates took on the order of a second.  All input was through the keyboard.\n\nWe used to play it on one machine while waiting for a compile on another.\n\nForty years later, in September of 2018, I started working on this version of Space War.  It's an animated GUI driven system with a frame rate of 30fps.  It is written entirely in Clojure and uses the Quil shim for the Processing GUI framework.\n\nMy justification for writing it was so that I could use it as the case study for my cleancoders.com videos on Functional Programming.  Once that series of videos was complete, I set Space War aside and started working on other things.\n\nThen, a month ago, the program called to me.  I don't know why.  Perhaps it was because I'd left it in a partially completed state.  Perhaps it was because I had just finished Clean Craftsmanship and I needed a way to decompress.  Or, perhaps it was just because I felt like it.  Whatever the reason, I loaded up the project and started goofing around with it.\n\nNow I'm sure you've had that feeling of trepidation when you pick up a code base that you haven't seen in three years.  I certainly felt it.  I mean, what was I going to find in there?  Would I be able to get my bearings and understand the code?  Or would I flail around aimlessly for weeks?\n\nI needn't have worried.  The code base was nicely organized.  There was a very nice suite of tests that covered the vast majority of the game logic.  The GUI code, though not tested, was simple enough to understand at a glance.\n\nBut, perhaps most importantly, this code was written to be 100% functional.  No variables were mutated, anywhere in the code.  This meant that every function did exactly what it said it did; and left no detritus around to confound other functions.  No function could be impacted by the state of the system because the system did not have \"a state\".\n\nNow maybe you are rolling your eyes at that last paragraph.  Several years ago I might have rolled my eyes too.  But the relief I experienced coming back into this code base after three years of not touching it, and knowing it was functional, was palpable.\n\nAnother thing that gave me a significant amount of help was that all the critical data structures in the system were described and tested using clojure/spec.  This was profoundly helpful because it gave me the kind of declarative help that is usually reserved for statically typed languages.\n\nFor example, This is a Klingon:\n\n(s/def ::x number?)\n(s/def ::y number?)\n(s/def ::shields number?)\n(s/def ::antimatter number?)\n\n(s/def ::kinetics number?)\n(s/def ::torpedos number?)\n(s/def ::weapon-charge number?)\n(s/def ::velocity (s/tuple number? number?))\n(s/def ::thrust (s/tuple number? number?))\n(s/def ::battle-state-age number?)\n(s/def ::battle-state #{:no-battle :flank-right :flank-left :retreating :advancing})\n(s/def ::cruise-state #{:patrol :guard :refuel :mission})\n(s/def ::mission #{:blockade :seek-and-destroy :escape-corbomite})\n\n(s/def ::klingon (s/keys :req-un [::x ::y ::shields ::antimatter\n                                  ::kinetics ::torpedos ::weapon-charge\n                                  ::velocity ::thrust\n                                  ::battle-state-age ::battle-state\n                                  ::cruise-state\n                                  ::mission]\n                         :opt-un [::hit/hit]))\n\n\nThese kinds of clojure/spec descriptions gave me the documentation I needed to reaquaint myself with the critical data structures of the system.  They also gave me the ability to check that any functions I wrote kept those data structures conformant to the spec.\n\nAll of this means that I was able to make progress in this code base quickly, and with a high degree of confidence. I never had that feeling of wading through bogs of legacy code.\n\nAnyway, I'm done now, for the time being.  I've given the player a mission to complete, and made it challenging, but possible, to complete that mission.  A game requires 2-3 hours of intense play, is tactially and strategically challenging, and is often punctuated by moments of sheer panic.\n\nI hope you enjoy downloading it, firing up Clojure, and playing it.  Consider it my Christmas present to you.\n\nOne last thing.  Three years ago Mike Fikes saw my Space War program and converted it from Clojure to ClojureScript.  The change was so miniscule that the two are now a single code base with a tiny smattering of conditional compilation for the very few differences.  So if you want to play the game on-line you can just click on http://spacewar.fikesfarm.com/spacewar.html.  Mike has kindly kept this version up to date so -- have at it!"
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/10/28/functional-duplication",
    "raw": "<p>I broke out my old <a href=\"https://github.com/unclebob/spacewar\">Space War</a> game a few days ago and decided to make a few changes to speed the game up and make it more fun to play.  In so doing I discovered a very interesting bug.</p>\n\n<p>One of the changes I made was to populate the initial space with a few random bases scattered here and there.  This would allow the player some extra resources with which to battle the Klingons while building up a network of more bases.</p>\n\n<p>While I was playing the modified game, it crashed.  Hard.</p>\n\n<p>Now I wrote this with TDD, and I was very disciplined about the cleanliness of the code, and the test coverage.  So this was unexpected.  So I dug up all my old debugging skills from the pit in which I had buried them, and started to work out what was going on.</p>\n\n<p>It wasn't long before I realized that crash was occuring because a transport was being launched between two bases, but the angle of the velocity vector of the transport was <code class=\"language-plaintext highlighter-rouge\">:bad-angle</code>.  This can only happen if the two bases exist at the exact same location.</p>\n\n<p>Bases don't move around in this game, so there's no chance that two bases will accidentally slide on top of each other.  There is a very (very) minor chance that the random number generator will put two bases on top of each other at the start of the game; but the odds are so miniscule that didn't worry about it. In any case, this crash happened well into the game I was playing, so initial values could not have been the cause.</p>\n\n<p>Fortunately it's pretty easy to hunt and peck around in the game, so I was quickly able to discover that the two bases in question were duplicates of each other.  Something in my code was duplicating bases!</p>\n\n<p>Well now that should't be too hard to find.  So I wrote a litte function that would examine the world and halt with a message if the world contained two bases at the same location.  I called this function in the main update loop, and sure enough after 20 minutes of play the program halted with my message.</p>\n\n<p>Unfortunately being able to detect <em>that</em> the duplication occurred did not tell me <em>where</em> it occurred.  So I laced the code with calls to my <code class=\"language-plaintext highlighter-rouge\">check-for-duplicate-base</code> function.</p>\n\n<p>It took me a few tries because the problem was not in any of the obvious places.  So over a few hours I added more and more calls to <code class=\"language-plaintext highlighter-rouge\">check-for-duplicate-base</code>.</p>\n\n<p>Eventually I found the culprit in a low frequency function named <code class=\"language-plaintext highlighter-rouge\">klingons-steal-antimatter</code>.</p>\n\n<p>This function is called once per second.  It checks to see if any klingons are within <code class=\"language-plaintext highlighter-rouge\">docking-distance</code> of a base, and if so it steals antimatter from that base.</p>\n\n<p>This explained why the crash took so long to create.  Most of the time it takes 20 minutes or so for a Klingon to move close enough to a base to start stealing.</p>\n\n<p>Anyway, I looked at the code and didn't see any obvious duplication.  So I wrote a unit test to check whether that function duplicated bases.  My test positioned a klingon near a base, called the <code class=\"language-plaintext highlighter-rouge\">klingons-steal-antimatter</code> function, and then checked the number of bases in the world.  The result: No duplication.</p>\n\n<p>Now, before I continue, let me describe the process I used in the <code class=\"language-plaintext highlighter-rouge\">klingons-steal-antimatter</code> function.</p>\n\n<p>The function created a list of <em>thefts</em>.  A theft is a <code class=\"language-plaintext highlighter-rouge\">[thief victim]</code> pair.  It used those pairs to create lists of all the thieves and victims, and separate lists of all the innocent klingons and all the unvictimized bases.</p>\n\n<p>Why?  Because this is a purely functional program.  In a purely functional program you cannot update the status of an object.  Instead you transformm old objects into new objects.  So when stealing antimatter from a base you must create a new base with less antimatter, and you must create a new klingon with more antimatter.  When you are done processing all the thefts you are left with a list of all the updated klingons, and a list of all the updated bases.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">world</code> contains a list of all the klingons and a list of all the bases.  In order to update the <code class=\"language-plaintext highlighter-rouge\">world</code> after processing the thefts you have to concatenate the updated bases with the unvictimized bases, and you have to concatenate the updated klingons with the innocent klingons.</p>\n\n<p>Got it?  Understand?  Good.</p>\n\n<p>As I pondered the code I realized that a base could be robbed by more than one klingon.  Klingons tend to slowly migrate towards bases and then steal from them.  Two or three or more could eventually manage to slide over to a base, like a pack of coyotes squabbling over a carcass.</p>\n\n<p>Now I already had a unit test that checked for this condition.  It created two klingons near one base and made sure that each klingon was able to steal from that base.  What that test did not do, however, was count the number of bases in the world when it was done.</p>\n\n<p>So I added a check.  <code class=\"language-plaintext highlighter-rouge\">base-count =&gt; 1</code>.  Whoops, it came back with <code class=\"language-plaintext highlighter-rouge\">2</code>.</p>\n\n<p>Now maybe you've already figured out why this happened.  But let me walk you through it.  My function identified two thefts: <code class=\"language-plaintext highlighter-rouge\">[[k1 b] [k2 b]]</code>  It returned with the results of each theft. Let's say that <code class=\"language-plaintext highlighter-rouge\">k1</code> stole <code class=\"language-plaintext highlighter-rouge\">a1</code> antimatter from <code class=\"language-plaintext highlighter-rouge\">b</code>, and <code class=\"language-plaintext highlighter-rouge\">k2</code> stole <code class=\"language-plaintext highlighter-rouge\">a2</code> from <code class=\"language-plaintext highlighter-rouge\">b</code>.  What the function returned was <code class=\"language-plaintext highlighter-rouge\">[[k1+a1 b-a1] [k1+a2 b-a2]]</code>.  Note that the second theft in the list was <em>not</em> <code class=\"language-plaintext highlighter-rouge\">[k2+a2 b-a1-a2]</code>.</p>\n\n<p>You've probably guessed the rest.  When I reassembled the world, I added all the bases that had been victims; and -- of course -- I added <code class=\"language-plaintext highlighter-rouge\">b-a1</code> <em>and</em> <code class=\"language-plaintext highlighter-rouge\">b-a2</code>.</p>\n\n<p>Fortunately I had lots of unit tests to fall back on.  Changing the algorithm was actually quite challenging, and required me to put all the klingons and bases into hashmaps keyed by their positions.  I won't bore you with the details.</p>\n\n<p>So I added unit tests to check for the duplications, saw them fail, and then gradually made them pass.  The unit tests allowed me to be sure that I was not breaking something else along the way.</p>\n\n<p>Now you might think this is just an esoteric little problem that you'll never encounter.  However, if you are writing functional programs, you <em>will</em> face this issue, and you'll likely face it a lot.  Dealing with immutable lists of objects means that when you update such a list you must recreate it.  If you are only updating <code class=\"language-plaintext highlighter-rouge\">m</code> out of <code class=\"language-plaintext highlighter-rouge\">n</code> elements of the list, you have to partition the original list into the <code class=\"language-plaintext highlighter-rouge\">m</code> elements you are changing and the <code class=\"language-plaintext highlighter-rouge\">n-m</code> elements you are not changing; and then you have to concatenate the <code class=\"language-plaintext highlighter-rouge\">m</code> changed elements with the <code class=\"language-plaintext highlighter-rouge\">n-m</code> unchanged elements in order to create the updated list.</p>\n\n<p>Anyway, I thought you might find that interesting.</p>\n",
    "sanitized": "I broke out my old Space War game a few days ago and decided to make a few changes to speed the game up and make it more fun to play.  In so doing I discovered a very interesting bug.\n\nOne of the changes I made was to populate the initial space with a few random bases scattered here and there.  This would allow the player some extra resources with which to battle the Klingons while building up a network of more bases.\n\nWhile I was playing the modified game, it crashed.  Hard.\n\nNow I wrote this with TDD, and I was very disciplined about the cleanliness of the code, and the test coverage.  So this was unexpected.  So I dug up all my old debugging skills from the pit in which I had buried them, and started to work out what was going on.\n\nIt wasn't long before I realized that crash was occuring because a transport was being launched between two bases, but the angle of the velocity vector of the transport was :bad-angle.  This can only happen if the two bases exist at the exact same location.\n\nBases don't move around in this game, so there's no chance that two bases will accidentally slide on top of each other.  There is a very (very) minor chance that the random number generator will put two bases on top of each other at the start of the game; but the odds are so miniscule that didn't worry about it. In any case, this crash happened well into the game I was playing, so initial values could not have been the cause.\n\nFortunately it's pretty easy to hunt and peck around in the game, so I was quickly able to discover that the two bases in question were duplicates of each other.  Something in my code was duplicating bases!\n\nWell now that should't be too hard to find.  So I wrote a litte function that would examine the world and halt with a message if the world contained two bases at the same location.  I called this function in the main update loop, and sure enough after 20 minutes of play the program halted with my message.\n\nUnfortunately being able to detect that the duplication occurred did not tell me where it occurred.  So I laced the code with calls to my check-for-duplicate-base function.\n\nIt took me a few tries because the problem was not in any of the obvious places.  So over a few hours I added more and more calls to check-for-duplicate-base.\n\nEventually I found the culprit in a low frequency function named klingons-steal-antimatter.\n\nThis function is called once per second.  It checks to see if any klingons are within docking-distance of a base, and if so it steals antimatter from that base.\n\nThis explained why the crash took so long to create.  Most of the time it takes 20 minutes or so for a Klingon to move close enough to a base to start stealing.\n\nAnyway, I looked at the code and didn't see any obvious duplication.  So I wrote a unit test to check whether that function duplicated bases.  My test positioned a klingon near a base, called the klingons-steal-antimatter function, and then checked the number of bases in the world.  The result: No duplication.\n\nNow, before I continue, let me describe the process I used in the klingons-steal-antimatter function.\n\nThe function created a list of thefts.  A theft is a [thief victim] pair.  It used those pairs to create lists of all the thieves and victims, and separate lists of all the innocent klingons and all the unvictimized bases.\n\nWhy?  Because this is a purely functional program.  In a purely functional program you cannot update the status of an object.  Instead you transformm old objects into new objects.  So when stealing antimatter from a base you must create a new base with less antimatter, and you must create a new klingon with more antimatter.  When you are done processing all the thefts you are left with a list of all the updated klingons, and a list of all the updated bases.\n\nThe world contains a list of all the klingons and a list of all the bases.  In order to update the world after processing the thefts you have to concatenate the updated bases with the unvictimized bases, and you have to concatenate the updated klingons with the innocent klingons.\n\nGot it?  Understand?  Good.\n\nAs I pondered the code I realized that a base could be robbed by more than one klingon.  Klingons tend to slowly migrate towards bases and then steal from them.  Two or three or more could eventually manage to slide over to a base, like a pack of coyotes squabbling over a carcass.\n\nNow I already had a unit test that checked for this condition.  It created two klingons near one base and made sure that each klingon was able to steal from that base.  What that test did not do, however, was count the number of bases in the world when it was done.\n\nSo I added a check.  base-count => 1.  Whoops, it came back with 2.\n\nNow maybe you've already figured out why this happened.  But let me walk you through it.  My function identified two thefts: [[k1 b] [k2 b]]  It returned with the results of each theft. Let's say that k1 stole a1 antimatter from b, and k2 stole a2 from b.  What the function returned was [[k1+a1 b-a1] [k1+a2 b-a2]].  Note that the second theft in the list was not [k2+a2 b-a1-a2].\n\nYou've probably guessed the rest.  When I reassembled the world, I added all the bases that had been victims; and -- of course -- I added b-a1 and b-a2.\n\nFortunately I had lots of unit tests to fall back on.  Changing the algorithm was actually quite challenging, and required me to put all the klingons and bases into hashmaps keyed by their positions.  I won't bore you with the details.\n\nSo I added unit tests to check for the duplications, saw them fail, and then gradually made them pass.  The unit tests allowed me to be sure that I was not breaking something else along the way.\n\nNow you might think this is just an esoteric little problem that you'll never encounter.  However, if you are writing functional programs, you will face this issue, and you'll likely face it a lot.  Dealing with immutable lists of objects means that when you update such a list you must recreate it.  If you are only updating m out of n elements of the list, you have to partition the original list into the m elements you are changing and the n-m elements you are not changing; and then you have to concatenate the m changed elements with the n-m unchanged elements in order to create the updated list.\n\nAnyway, I thought you might find that interesting."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/09/25/roots",
    "raw": "<p>When I was 15 or so, my father would drive me, and my best friend, Tim Conrad, to the Digital Equipment Corporation (DEC) sales office each Saturday.  This was a 30 min drive.  My father would drop us off in the morning and pick us up in the late afternoon.  He spend two hours in his car each Saturday hauling us around.</p>\n\n<blockquote>\n  <p><em>Thanks Dad!</em></p>\n</blockquote>\n\n<p>Tim and I would spend our day \"playing\" with the floor model of the PDP-8 they had at the office.  The office staff were very accommodating and accepting of our presence, and they helped us out if we needed any fresh rolls of teleprinter paper, or paper tape.</p>\n\n<p>Several years later, at the age of 20, I found myself working at Teradyne Applied Systems in Chicago.  The computer we used there was called an M365; but it was really just an upgraded PDP-8.  We used it to control lasers in order to trim electronic components to very precise values.</p>\n\n<p>Forty four years later, in May of 2015, I started playing with a cute little Lua environment on my iPad called <a href=\"https://codea.io/\">Codea</a>.  I wrote several fun little programs, like lunar lander, etc.  But then I thought: \"Wouldn't it be fun to write a PDP-8 Emulator?\"</p>\n\n<p>A few days/weeks later I had a nice little PDP-8 emulator running on my iPad.  I found some archived binary images of ancient paper tapes and managed to load them into my emulator.  This allowed me to run the suite of development tools that I had used back in those early days.</p>\n\n<p>Then Apple decided it didn't want people writing code on the Ipad that was not distributed through the App store, so they blocked the means by which Codea users could share source code.   Indeed, I couldn't even move Lua source code to my new iPads.  So the emulator was lost.</p>\n\n<p>Fortunately I had put the last working version up on GitHub.</p>\n\n<p>At some point, Apple reopened the channel, perhaps due to a court case.  I discovered this a few weeks back, and loaded that old source code back into my iPad.  It worked like a champ.</p>\n\n<p>I made a few changes to deal with the bigger screen, and the faster processor, and then announced it on twitter.  I think many people have played with it since.</p>\n\n<blockquote>\n  <p><strong>You can get the emulator <a href=\"https://github.com/unclebob/PDP8EmulatorIpad\">here</a>.</strong>  You'll find a lot of good tutorial information, and several demonstration videos in that repository.</p>\n</blockquote>\n\n<h3 id=\"euler-4\">Euler 4</h3>\n<p>As you may know I have a <a href=\"https://www.youtube.com/playlist?list=PLmsuNLXeDr6Y1-a9ASu4mfxqDIgr-oaU6\">youtube series</a> on the <a href=\"https://www.youtube.com/c/Cleancoders/playlists\">cleancoders.com channel</a>, in which I walk through the problems in the <a href=\"https://projecteuler.net/\">Euler project</a> solving them in Clojure and then taking them to the max, Myth-buster style.</p>\n\n<p>Euler 4 is a simple little problem of finding the factors of palindromic numbers.  I quickly solved it in Clojure, and then I thought it would be fun to write a PDP-8 program to solve it.</p>\n\n<blockquote>\n  <p><em>Down the rathole I went.</em></p>\n</blockquote>\n\n<p>I used TDD to get the individual subroutines working.  Among the subroutines I wrote were single and double precision multiply and divide routines. (We didn't use the word \"functions\" back then.)  The poor PDP-8 could only add.  It couldn't even subtract.  Subtraction was accomplished by using twos-complement addition (let the reader understand;-)</p>\n\n<p>Was this fun?  Yes, at first it was kinda cool to reminisce, and to feel all the old knowledge and instincts come flooding back into my brain.  But once the \"novelty\" wore off, it stopped being fun, and just turned into work -- grinding, tedious, work.</p>\n\n<p>It took me several hours, over a period of a few days, but I got the blasted thing working.  It's not an experience I'd like to repeat.  Working on a PDP-8 is a <strong>PITA</strong>, even when with all the cheats I supply in my Emulator.</p>\n\n<p>Here, for your edification, is my solution to Euler 4 on a PDP-8.  This code solves the problem; but I'm quite sure it has some really nasty bugs anyway.  I am in no way proud of this code.  I'm just not willing to improve it.  If you study it you'll see just how awful it is.  I mean, among other sins I used truly naive algorithms for multiplying and dividing numbers.</p>\n\n<p>Anyway, be careful.  The lure of the rathole is very compelling.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/EULER 4 SOLUTION\n\n        PZERO=20\n\n        *200\n    \nMAIN,   CLA\n        TLS\n        TAD SEED\n        ISZ SEED\n        CIA\n        JMS CALL\n        MKPAL\n    \n        JMS CALL\n        PRDOT\n\n        CLA\n        TAD MAXFAC\n        DCA FAC\n\nFACLUP, \n        CLA\n        TAD FAC\n        TAD K100\n        SMA CLA\n        JMP MAIN\n    \n        JMS CALL\n        DLOAD\n        DPAL\n        TAD FAC\n        CIA\n        JMS CALL\n        ISFAC\n        SKP\n        JMP GOTFAC\n    \n        CLA\n        TAD I OFP /OTHER FAC &gt; 999 TRY NEXT PAL.\n        TAD MAXFAC\n        SMA CLA\n        JMP MAIN\n        ISZ FAC\n        JMP FACLUP\n    \nGOTFAC,\n        CLA\n        TAD I OFP\n        TAD MAXFAC\n        SMA CLA\n        JMP MAIN\n\n        JMS CRLF\n        CLA\n        TAD FAC\n        CIA\n        JMS CALL\n        PRAC\n        JMS CALL\n        PRDOT\n        CLA\n        TAD I OFP\n        JMS CALL\n        PRAC\n        JMS CRLF\n        JMS CALL\n        DLOAD\n        DPAL\n        JMS CALL\n        PRDACC\n        JMS CRLF\n        HLT     \n\n        DECIMAL\nSEED,   -999\nMAXFAC, -999\n        OCTAL\nFAC,    0\nOFP,    OTHFAC+1\n\n        *400\n\n/MAKE A PALINDROMIC  NUMBER FROM A SEED.\n/ABC-&gt;ABCCBA IN DECIMAL IN DACC AND STORED IN DPAL\n\nMKPAL,  0\n        DCA DPAL+1\n        DCA DPAL\n        TAD DPAL+1\n        JMS CALL\n        DIV\n        K10\n        DCA WRK\n        TAD REM\n        DCA DIGS\n        TAD WRK\n        JMS CALL\n        DIV\n        K10\n        DCA DIGS+2\n        TAD REM\n        DCA DIGS+1\n        JMS CALL\n        DLOAD\n        DPAL\n        TAD K1000\n        JMS CALL\n        DMUL\n        JMS CALL\n        DSTORE\n        DPAL\n        CLA\n        TAD DIGS\n        JMS CALL\n        MUL\n        K10\n        TAD DIGS+1\n        JMS CALL\n        MUL\n        K10\n        TAD DIGS+2\n        DCA DWRK+1\n        DCA DWRK\n        JMS CALL\n        DLOAD\n        DPAL\n        JMS CALL\n        DADD\n        DWRK\n    \n        JMS CALL\n        DSTORE\n        DPAL\n        JMP I MKPAL\n    \n/SKIP IF AC IS A FACTOR OF DACC. AC=0\nISFAC,  0\n        DCA DFAC+1\n        DCA DFAC\n    \n        JMS CALL\n        DDIV\n        DFAC\n    \n        JMS CALL\n        DSTORE\n        OTHFAC\n    \n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DSKEQ\n        D0\n        SKP\n        ISZ ISFAC\n        JMP I ISFAC\n\nDFAC,   0\n        0\nOTHFAC, 0\n        0\n    \n        OCTAL\nDPAL,   0\n        0\n    \n\nDIGS,   0\n        0\n        0\n    \nWRK,    0\n\nDWRK,   0\n        0\n    \n// PZERO FOR EULER\n        *PZERO\n        DECIMAL\nK100,   100\nK1000,  1000\nK10,    10\n        OCTAL\n\nPZERO = .\n\n\n~   \n\n*1000\n/DMATHLIB \n/DLOAD - LOAD ARG INTO DACC, AC=0\nDLOAD,  0\n        CLA\n        TAD I DLOAD\n        ISZ DLOAD\n        DCA DARGP\n        TAD I DARGP\n        DCA DACC\n        ISZ DARGP\n        TAD I DARGP\n        DCA DACC+1\n        JMP I DLOAD\n\n/DOUBLE PRECISION STORE ACCUMULATOR POINTED TO BY ARG\nDSTORE, 0\n        CLA\n        TAD I DSTORE\n        DCA DARGP\n        ISZ DSTORE\n    \n        TAD DACC\n        DCA I DARGP\n        ISZ DARGP\n        TAD DACC+1\n        DCA I DARGP\n        JMP I DSTORE\n\n/SKIP IF DOUBLE PRECISION ARGUMENT IS EQUAL TO DACC. AC=0\nDSKEQ,  0\n        CLA\n        TAD I DSKEQ\n        DCA DARGP\n        ISZ DSKEQ\n    \n        TAD DACC\n        CIA\n        TAD I DARGP\n        SZA CLA\n        JMP I DSKEQ\n    \n        ISZ DARGP\n        TAD DACC+1\n        CIA\n        TAD I DARGP\n        SNA CLA \n        ISZ DSKEQ\n        JMP I DSKEQ\n    \n/DOUBLE PRECISION ADD ARGUMENT TO DACC. AC=0\n\nDADD,   0\n        CLA CLL\n        TAD I DADD\n        ISZ DADD\n        DCA DARGP\n        TAD DARGP\n        IAC\n        DCA DARGP2\n    \n        TAD I DARGP2\n        TAD DACC+1\n        DCA DACC+1\n        RAL\n        TAD I DARGP\n        TAD DACC\n        DCA DACC\n    \n        JMP I DADD\n\n/COMPLEMENT AND INCREMENT DACC      \nDCIA,   0\n        CLA CLL\n        TAD DACC+1\n        CMA IAC\n        DCA DACC+1\n        TAD DACC\n        CMA\n        SZL\n        IAC\n        DCA DACC\n        JMP I DCIA\n    \n/MULTIPY DACC BY AC\nDMUL,   0\n        CIA\n        DCA PLIERD\n        JMS DSTORE\n        DCAND\n        JMS DLOAD\n        D0\n        TAD PLIERD\n        SNA CLA\n        JMP I DMUL\nDMUL1,  JMS DADD\n        DCAND\n        ISZ PLIERD\n        JMP DMUL1\n        JMP I DMUL\n    \nPLIERD, 0\nDCAND,  0\n        0\n    \n/DIV DACC BY DARG (AWFUL) R IN DREM AC=0\nDDIV,   0\n        CLA\n        TAD I DDIV\n        ISZ DDIV\n        DCA .+4\n        JMS DSTORE\n        DVDEND\n        JMS DLOAD\n        0\n        JMS DCIA /NEGATE DIVISOR\n        JMS DSTORE\n        DVSOR\n        JMS DLOAD\n        DVDEND\n    \n        DCA DQUOT \n        DCA DQUOT+1\n        JMP DDIV1\n    \nDDIV2,  ISZ DQUOT+1 // INCREMENT DQUOT\n        SKP\n        ISZ DQUOT\n    \nDDIV1,  JMS DSTORE\n        DREM\n        JMS DADD\n        DVSOR\n        TAD DACC\n        SMA CLA\n        JMP DDIV2\n    \n        JMS DLOAD\n        DQUOT\n        JMP I DDIV\n    \n    \nDARGP,  0\nDARGP2, 0       \n    \nDVSOR,  0\n        0\nDVDEND, 0\n        0\nDQUOT,  0\n        0\n        \n/PAGE ZERO DATA FOR DMATHLIB\n\n*PZERO\nDACC,   0\n        0\nD0,     0\n        0\nDREM,   0\n        0\nPZERO=.\n~\n\n/SINGLE PRECISION MATH LIBRARY\n        *2000\n/DIVIDE AC BY ARGP (SLOW AND NAIVE)\n/Q IN AC, R IN REM\nDIV,    0\n        DCA REM\n        TAD I DIV\n        ISZ DIV\n        DCA ARGP\n        TAD I ARGP\n        CIA\n        DCA MDVSOR\n        DCA QUOTNT\n        TAD REM\nDIVLUP, TAD MDVSOR\n        SPA\n        JMP DIVDUN\n        ISZ QUOTNT\n        JMP DIVLUP\nDIVDUN, CIA\n        TAD MDVSOR\n        CIA\n        DCA REM\n        TAD QUOTNT\n        JMP I DIV\nMDVSOR, 0\nQUOTNT, 0\nARGP,   0\n\n/MULTIPLY AC BY ARGP (SLOW AND NAIVE)\n/GIVING SINGLE PRECISION PRODUCT IN AC\n\nMUL,    0\n        DCA CAND\n        TAD I MUL\n        ISZ MUL\n        DCA ARGP\n        TAD I ARGP\n        SNA\n        JMP I MUL\n        CIA\n        DCA PLIER\n        TAD CAND\n        ISZ PLIER\n        JMP .-2\n        JMP I MUL\nCAND,   0\nPLIER,  0\n\n/PZERO FOR SMATHLIB\n        *PZERO\nREM,    0\nPZERO=.\n~\n\n/TTY UTILS\n        *3000\n/PRINT ONE CHAR IN AC.  IF CR THEN PRINT LF.  \nPRTCHAR,0\n        TSF\n        JMP .-1\n        TLS\n        DCA CH\n        TAD CH\n        TAD MCR\n        SZA\n        JMP RETCHR\n        TAD KLF\n        TSF\n        JMP .-1\n        TLS\nRETCHR, CLA\n        TAD CH\n        JMP I PRTCHAR\nCH,     0\nMCR,    -215\n\n/PRINT AC AS ONE DECIMAL DIGIT AC=0\nPRDIG,  0\n        TAD K260\n        TSF\n        JMP .-1\n        TLS\n        CLA\n        JMP I PRDIG\n        \nK260,   260\n\n/PRINT THE DACC IN DECIMAL\n\nPRDACC, 0\n        JMS CALL\n        DSTORE\n        DACSV\n        JMS CALL\n        DDIV\n        D1E6\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E5\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E4\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E3\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E2\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E1\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DACSV\n        JMP I PRDACC\n    \n        \nDACSV,  0\n        0\nD1E6,   0364\n        1100\nD1E5,   0030\n        3240\nD1E4,   2\n        3420\nD1E3,   0\n        1750\nD1E2,   0\n        144\nD1E1,   0\n        12\n    \n/PRINT AC, AC=AC\nPRAC,   0\n        DCA SAC\n        TAD SAC\n        JMS CALL\n        DIV\n        D1E3+1\n        JMS PRDIG\n        TAD REM\n        JMS CALL\n        DIV\n        D1E2+1\n        JMS PRDIG\n        TAD REM\n        JMS CALL\n        DIV\n        D1E1+1\n        JMS PRDIG\n        TAD REM\n        JMS PRDIG\n        TAD SAC\n        JMP I PRAC\nSAC,    0\n\n/PRINT DOT AC=AC\nPRDOT,  0\n        DCA SAC\n        TAD KDOT\n        JMS TYPE\n        TAD SAC\n        JMP I PRDOT\n    \n/----------------------\n/PZERO TEST LIBRARY\n        *PZERO     \nTYPE,   0 / AC=0\n        TSF\n        JMP .-1\n        TLS\n        CLA\n        JMP I TYPE\n    \nCRLF,   0 / AC=0\n        CLA\n        TAD KCR\n        JMS TYPE\n        TAD KLF\n        JMS TYPE\n        JMP I CRLF\n\n/SOUND BELL AND HALT WITH ADDR OF BAD TEST IN AC    \nERROR,  0\n        CLA\n        TAD KBELL\n        JMS TYPE\n        CLA CMA\n        TAD ERROR\n        HLT\n\n/PRINT DOT, COUNT ERROR     \nPASS,   0\n        CLA\n        TAD KDOT\n        JMS TYPE\n        ISZ TESTS\n        JMP I PASS\n\n/TESTS COMPLETE, PRINT ZERO AND HALT WITH # OF TESTS IN AC. \nTSTDUN,\n        JMS CRLF\n        TAD KZERO\n        JMS TYPE\n        JMS CRLF\n        TAD TESTS\n        HLT\n    \n/CALL SUBROUTINE\nCALL,   0\n        DCA AC\n        TAD I CALL\n        DCA CALLEE\n        TAD CALL\n        IAC\n        DCA I CALLEE\n        ISZ CALLEE\n        TAD AC\n        JMP I CALLEE\nAC,     0\nCALLEE, 0\n\nTESTS, 0           \nKZERO,  260\nKBELL,  207\nKCR,    215\nKLF,    212\nKDOT,   256\n\nPZERO=.\n~\n$\n</code></pre></div></div>\n\n",
    "sanitized": "When I was 15 or so, my father would drive me, and my best friend, Tim Conrad, to the Digital Equipment Corporation (DEC) sales office each Saturday.  This was a 30 min drive.  My father would drop us off in the morning and pick us up in the late afternoon.  He spend two hours in his car each Saturday hauling us around.\n\n\n  Thanks Dad!\n\n\nTim and I would spend our day \"playing\" with the floor model of the PDP-8 they had at the office.  The office staff were very accommodating and accepting of our presence, and they helped us out if we needed any fresh rolls of teleprinter paper, or paper tape.\n\nSeveral years later, at the age of 20, I found myself working at Teradyne Applied Systems in Chicago.  The computer we used there was called an M365; but it was really just an upgraded PDP-8.  We used it to control lasers in order to trim electronic components to very precise values.\n\nForty four years later, in May of 2015, I started playing with a cute little Lua environment on my iPad called Codea.  I wrote several fun little programs, like lunar lander, etc.  But then I thought: \"Wouldn't it be fun to write a PDP-8 Emulator?\"\n\nA few days/weeks later I had a nice little PDP-8 emulator running on my iPad.  I found some archived binary images of ancient paper tapes and managed to load them into my emulator.  This allowed me to run the suite of development tools that I had used back in those early days.\n\nThen Apple decided it didn't want people writing code on the Ipad that was not distributed through the App store, so they blocked the means by which Codea users could share source code.   Indeed, I couldn't even move Lua source code to my new iPads.  So the emulator was lost.\n\nFortunately I had put the last working version up on GitHub.\n\nAt some point, Apple reopened the channel, perhaps due to a court case.  I discovered this a few weeks back, and loaded that old source code back into my iPad.  It worked like a champ.\n\nI made a few changes to deal with the bigger screen, and the faster processor, and then announced it on twitter.  I think many people have played with it since.\n\n\n  You can get the emulator here.  You'll find a lot of good tutorial information, and several demonstration videos in that repository.\n\n\nEuler 4\nAs you may know I have a youtube series on the cleancoders.com channel, in which I walk through the problems in the Euler project solving them in Clojure and then taking them to the max, Myth-buster style.\n\nEuler 4 is a simple little problem of finding the factors of palindromic numbers.  I quickly solved it in Clojure, and then I thought it would be fun to write a PDP-8 program to solve it.\n\n\n  Down the rathole I went.\n\n\nI used TDD to get the individual subroutines working.  Among the subroutines I wrote were single and double precision multiply and divide routines. (We didn't use the word \"functions\" back then.)  The poor PDP-8 could only add.  It couldn't even subtract.  Subtraction was accomplished by using twos-complement addition (let the reader understand;-)\n\nWas this fun?  Yes, at first it was kinda cool to reminisce, and to feel all the old knowledge and instincts come flooding back into my brain.  But once the \"novelty\" wore off, it stopped being fun, and just turned into work -- grinding, tedious, work.\n\nIt took me several hours, over a period of a few days, but I got the blasted thing working.  It's not an experience I'd like to repeat.  Working on a PDP-8 is a PITA, even when with all the cheats I supply in my Emulator.\n\nHere, for your edification, is my solution to Euler 4 on a PDP-8.  This code solves the problem; but I'm quite sure it has some really nasty bugs anyway.  I am in no way proud of this code.  I'm just not willing to improve it.  If you study it you'll see just how awful it is.  I mean, among other sins I used truly naive algorithms for multiplying and dividing numbers.\n\nAnyway, be careful.  The lure of the rathole is very compelling.\n\n/EULER 4 SOLUTION\n\n        PZERO=20\n\n        *200\n    \nMAIN,   CLA\n        TLS\n        TAD SEED\n        ISZ SEED\n        CIA\n        JMS CALL\n        MKPAL\n    \n        JMS CALL\n        PRDOT\n\n        CLA\n        TAD MAXFAC\n        DCA FAC\n\nFACLUP, \n        CLA\n        TAD FAC\n        TAD K100\n        SMA CLA\n        JMP MAIN\n    \n        JMS CALL\n        DLOAD\n        DPAL\n        TAD FAC\n        CIA\n        JMS CALL\n        ISFAC\n        SKP\n        JMP GOTFAC\n    \n        CLA\n        TAD I OFP /OTHER FAC > 999 TRY NEXT PAL.\n        TAD MAXFAC\n        SMA CLA\n        JMP MAIN\n        ISZ FAC\n        JMP FACLUP\n    \nGOTFAC,\n        CLA\n        TAD I OFP\n        TAD MAXFAC\n        SMA CLA\n        JMP MAIN\n\n        JMS CRLF\n        CLA\n        TAD FAC\n        CIA\n        JMS CALL\n        PRAC\n        JMS CALL\n        PRDOT\n        CLA\n        TAD I OFP\n        JMS CALL\n        PRAC\n        JMS CRLF\n        JMS CALL\n        DLOAD\n        DPAL\n        JMS CALL\n        PRDACC\n        JMS CRLF\n        HLT     \n\n        DECIMAL\nSEED,   -999\nMAXFAC, -999\n        OCTAL\nFAC,    0\nOFP,    OTHFAC+1\n\n        *400\n\n/MAKE A PALINDROMIC  NUMBER FROM A SEED.\n/ABC->ABCCBA IN DECIMAL IN DACC AND STORED IN DPAL\n\nMKPAL,  0\n        DCA DPAL+1\n        DCA DPAL\n        TAD DPAL+1\n        JMS CALL\n        DIV\n        K10\n        DCA WRK\n        TAD REM\n        DCA DIGS\n        TAD WRK\n        JMS CALL\n        DIV\n        K10\n        DCA DIGS+2\n        TAD REM\n        DCA DIGS+1\n        JMS CALL\n        DLOAD\n        DPAL\n        TAD K1000\n        JMS CALL\n        DMUL\n        JMS CALL\n        DSTORE\n        DPAL\n        CLA\n        TAD DIGS\n        JMS CALL\n        MUL\n        K10\n        TAD DIGS+1\n        JMS CALL\n        MUL\n        K10\n        TAD DIGS+2\n        DCA DWRK+1\n        DCA DWRK\n        JMS CALL\n        DLOAD\n        DPAL\n        JMS CALL\n        DADD\n        DWRK\n    \n        JMS CALL\n        DSTORE\n        DPAL\n        JMP I MKPAL\n    \n/SKIP IF AC IS A FACTOR OF DACC. AC=0\nISFAC,  0\n        DCA DFAC+1\n        DCA DFAC\n    \n        JMS CALL\n        DDIV\n        DFAC\n    \n        JMS CALL\n        DSTORE\n        OTHFAC\n    \n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DSKEQ\n        D0\n        SKP\n        ISZ ISFAC\n        JMP I ISFAC\n\nDFAC,   0\n        0\nOTHFAC, 0\n        0\n    \n        OCTAL\nDPAL,   0\n        0\n    \n\nDIGS,   0\n        0\n        0\n    \nWRK,    0\n\nDWRK,   0\n        0\n    \n// PZERO FOR EULER\n        *PZERO\n        DECIMAL\nK100,   100\nK1000,  1000\nK10,    10\n        OCTAL\n\nPZERO = .\n\n\n~   \n\n*1000\n/DMATHLIB \n/DLOAD - LOAD ARG INTO DACC, AC=0\nDLOAD,  0\n        CLA\n        TAD I DLOAD\n        ISZ DLOAD\n        DCA DARGP\n        TAD I DARGP\n        DCA DACC\n        ISZ DARGP\n        TAD I DARGP\n        DCA DACC+1\n        JMP I DLOAD\n\n/DOUBLE PRECISION STORE ACCUMULATOR POINTED TO BY ARG\nDSTORE, 0\n        CLA\n        TAD I DSTORE\n        DCA DARGP\n        ISZ DSTORE\n    \n        TAD DACC\n        DCA I DARGP\n        ISZ DARGP\n        TAD DACC+1\n        DCA I DARGP\n        JMP I DSTORE\n\n/SKIP IF DOUBLE PRECISION ARGUMENT IS EQUAL TO DACC. AC=0\nDSKEQ,  0\n        CLA\n        TAD I DSKEQ\n        DCA DARGP\n        ISZ DSKEQ\n    \n        TAD DACC\n        CIA\n        TAD I DARGP\n        SZA CLA\n        JMP I DSKEQ\n    \n        ISZ DARGP\n        TAD DACC+1\n        CIA\n        TAD I DARGP\n        SNA CLA \n        ISZ DSKEQ\n        JMP I DSKEQ\n    \n/DOUBLE PRECISION ADD ARGUMENT TO DACC. AC=0\n\nDADD,   0\n        CLA CLL\n        TAD I DADD\n        ISZ DADD\n        DCA DARGP\n        TAD DARGP\n        IAC\n        DCA DARGP2\n    \n        TAD I DARGP2\n        TAD DACC+1\n        DCA DACC+1\n        RAL\n        TAD I DARGP\n        TAD DACC\n        DCA DACC\n    \n        JMP I DADD\n\n/COMPLEMENT AND INCREMENT DACC      \nDCIA,   0\n        CLA CLL\n        TAD DACC+1\n        CMA IAC\n        DCA DACC+1\n        TAD DACC\n        CMA\n        SZL\n        IAC\n        DCA DACC\n        JMP I DCIA\n    \n/MULTIPY DACC BY AC\nDMUL,   0\n        CIA\n        DCA PLIERD\n        JMS DSTORE\n        DCAND\n        JMS DLOAD\n        D0\n        TAD PLIERD\n        SNA CLA\n        JMP I DMUL\nDMUL1,  JMS DADD\n        DCAND\n        ISZ PLIERD\n        JMP DMUL1\n        JMP I DMUL\n    \nPLIERD, 0\nDCAND,  0\n        0\n    \n/DIV DACC BY DARG (AWFUL) R IN DREM AC=0\nDDIV,   0\n        CLA\n        TAD I DDIV\n        ISZ DDIV\n        DCA .+4\n        JMS DSTORE\n        DVDEND\n        JMS DLOAD\n        0\n        JMS DCIA /NEGATE DIVISOR\n        JMS DSTORE\n        DVSOR\n        JMS DLOAD\n        DVDEND\n    \n        DCA DQUOT \n        DCA DQUOT+1\n        JMP DDIV1\n    \nDDIV2,  ISZ DQUOT+1 // INCREMENT DQUOT\n        SKP\n        ISZ DQUOT\n    \nDDIV1,  JMS DSTORE\n        DREM\n        JMS DADD\n        DVSOR\n        TAD DACC\n        SMA CLA\n        JMP DDIV2\n    \n        JMS DLOAD\n        DQUOT\n        JMP I DDIV\n    \n    \nDARGP,  0\nDARGP2, 0       \n    \nDVSOR,  0\n        0\nDVDEND, 0\n        0\nDQUOT,  0\n        0\n        \n/PAGE ZERO DATA FOR DMATHLIB\n\n*PZERO\nDACC,   0\n        0\nD0,     0\n        0\nDREM,   0\n        0\nPZERO=.\n~\n\n/SINGLE PRECISION MATH LIBRARY\n        *2000\n/DIVIDE AC BY ARGP (SLOW AND NAIVE)\n/Q IN AC, R IN REM\nDIV,    0\n        DCA REM\n        TAD I DIV\n        ISZ DIV\n        DCA ARGP\n        TAD I ARGP\n        CIA\n        DCA MDVSOR\n        DCA QUOTNT\n        TAD REM\nDIVLUP, TAD MDVSOR\n        SPA\n        JMP DIVDUN\n        ISZ QUOTNT\n        JMP DIVLUP\nDIVDUN, CIA\n        TAD MDVSOR\n        CIA\n        DCA REM\n        TAD QUOTNT\n        JMP I DIV\nMDVSOR, 0\nQUOTNT, 0\nARGP,   0\n\n/MULTIPLY AC BY ARGP (SLOW AND NAIVE)\n/GIVING SINGLE PRECISION PRODUCT IN AC\n\nMUL,    0\n        DCA CAND\n        TAD I MUL\n        ISZ MUL\n        DCA ARGP\n        TAD I ARGP\n        SNA\n        JMP I MUL\n        CIA\n        DCA PLIER\n        TAD CAND\n        ISZ PLIER\n        JMP .-2\n        JMP I MUL\nCAND,   0\nPLIER,  0\n\n/PZERO FOR SMATHLIB\n        *PZERO\nREM,    0\nPZERO=.\n~\n\n/TTY UTILS\n        *3000\n/PRINT ONE CHAR IN AC.  IF CR THEN PRINT LF.  \nPRTCHAR,0\n        TSF\n        JMP .-1\n        TLS\n        DCA CH\n        TAD CH\n        TAD MCR\n        SZA\n        JMP RETCHR\n        TAD KLF\n        TSF\n        JMP .-1\n        TLS\nRETCHR, CLA\n        TAD CH\n        JMP I PRTCHAR\nCH,     0\nMCR,    -215\n\n/PRINT AC AS ONE DECIMAL DIGIT AC=0\nPRDIG,  0\n        TAD K260\n        TSF\n        JMP .-1\n        TLS\n        CLA\n        JMP I PRDIG\n        \nK260,   260\n\n/PRINT THE DACC IN DECIMAL\n\nPRDACC, 0\n        JMS CALL\n        DSTORE\n        DACSV\n        JMS CALL\n        DDIV\n        D1E6\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E5\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E4\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E3\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E2\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        JMS CALL\n        DDIV\n        D1E1\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DREM\n        TAD DACC+1\n        JMS PRDIG\n        JMS CALL\n        DLOAD\n        DACSV\n        JMP I PRDACC\n    \n        \nDACSV,  0\n        0\nD1E6,   0364\n        1100\nD1E5,   0030\n        3240\nD1E4,   2\n        3420\nD1E3,   0\n        1750\nD1E2,   0\n        144\nD1E1,   0\n        12\n    \n/PRINT AC, AC=AC\nPRAC,   0\n        DCA SAC\n        TAD SAC\n        JMS CALL\n        DIV\n        D1E3+1\n        JMS PRDIG\n        TAD REM\n        JMS CALL\n        DIV\n        D1E2+1\n        JMS PRDIG\n        TAD REM\n        JMS CALL\n        DIV\n        D1E1+1\n        JMS PRDIG\n        TAD REM\n        JMS PRDIG\n        TAD SAC\n        JMP I PRAC\nSAC,    0\n\n/PRINT DOT AC=AC\nPRDOT,  0\n        DCA SAC\n        TAD KDOT\n        JMS TYPE\n        TAD SAC\n        JMP I PRDOT\n    \n/----------------------\n/PZERO TEST LIBRARY\n        *PZERO     \nTYPE,   0 / AC=0\n        TSF\n        JMP .-1\n        TLS\n        CLA\n        JMP I TYPE\n    \nCRLF,   0 / AC=0\n        CLA\n        TAD KCR\n        JMS TYPE\n        TAD KLF\n        JMS TYPE\n        JMP I CRLF\n\n/SOUND BELL AND HALT WITH ADDR OF BAD TEST IN AC    \nERROR,  0\n        CLA\n        TAD KBELL\n        JMS TYPE\n        CLA CMA\n        TAD ERROR\n        HLT\n\n/PRINT DOT, COUNT ERROR     \nPASS,   0\n        CLA\n        TAD KDOT\n        JMS TYPE\n        ISZ TESTS\n        JMP I PASS\n\n/TESTS COMPLETE, PRINT ZERO AND HALT WITH # OF TESTS IN AC. \nTSTDUN,\n        JMS CRLF\n        TAD KZERO\n        JMS TYPE\n        JMS CRLF\n        TAD TESTS\n        HLT\n    \n/CALL SUBROUTINE\nCALL,   0\n        DCA AC\n        TAD I CALL\n        DCA CALLEE\n        TAD CALL\n        IAC\n        DCA I CALLEE\n        ISZ CALLEE\n        TAD AC\n        JMP I CALLEE\nAC,     0\nCALLEE, 0\n\nTESTS, 0           \nKZERO,  260\nKBELL,  207\nKCR,    215\nKLF,    212\nKDOT,   256\n\nPZERO=.\n~\n$"
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/06/29/MoreOnTypes",
    "raw": "<p>Recently I wrote a cute little program for doing <em>Turtle Graphics</em>.  For those of you who don't know, turtle graphics were originally added to the LOGO language by Seymour Papert in the late 1960s.  He built a robot that he called a \"turtle\" that could hold a pen.  The robot had wheels and could move forwards and backwards, and could rotate left and right.  It could also raise and lower the pen.  When placed on a sheet of paper, the turtle could be commanded to draw interesting designs.</p>\n\n<p>Papert's goal was to teach children about programming.  As the years went by the robot got replaced with screens, and the turtle became an icon that could draw lines.  Children from the 70s until now have been enthralled by the simple commands for directing the turtle, and the elegant drawings they can make.</p>\n\n<p>For example, this is how you might draw a square:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>forward 100\nright 90\nforward 100\nright 90\nforward 100\nright 90\nforward 100\nright 90.\n</code></pre></div></div>\n\n<p>Recently I had a need to explore some interesting geometrical designs.  Turtle graphics would be perfect for my purposes.  So I wrote a turtle graphics processor in Clojure.  <a href=\"https://github.com/unclebob/Euler/tree/main/e2_Fibonacci/Turtle\">[code]</a></p>\n\n<p>I used the <a href=\"http://quil.info/\"><code class=\"language-plaintext highlighter-rouge\">quil</code></a> framework which is based on the <a href=\"http://processing.org\"><code class=\"language-plaintext highlighter-rouge\">Processing</code></a> framework in Java. This framework makes it very easy to create simple GUIs in Clojure.</p>\n\n<p>Now consider the problem of the Turtle.  What is the type model for this object?  What fields does it have, and what constraints must be placed on those fields?</p>\n\n<p>Here was my solution to that problem, written in <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code>.  As usual, in Clojure, you start at the bottom and read towards the top.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(s/def ::position (s/tuple number? number?))\n(s/def ::heading (s/and number? #(&lt;= 0 % 360)))\n(s/def ::velocity number?)\n(s/def ::distance number?)\n(s/def ::omega number?)\n(s/def ::angle number?)\n(s/def ::weight (s/and pos? number?))\n(s/def ::state #{:idle :busy})\n(s/def ::pen #{:up :down})\n(s/def ::pen-start (s/or :nil nil?\n                         :pos (s/tuple number? number?)))\n(s/def ::line-start (s/tuple number? number?))\n(s/def ::line-end (s/tuple number? number?))\n(s/def ::line (s/keys :req-un [::line-start ::line-end]))\n(s/def ::lines (s/coll-of ::line))\n(s/def ::visible boolean?)\n(s/def ::speed (s/and int? pos?))\n(s/def ::turtle (s/keys :req-un [::position\n                                 ::heading\n                                 ::velocity\n                                 ::distance\n                                 ::omega\n                                 ::angle\n                                 ::pen\n                                 ::weight\n                                 ::speed\n                                 ::lines\n                                 ::visible\n                                 ::state]\n                        :opt-un [::pen-start]))\n</code></pre></div></div>\n\n<p>Now don't freak out at all the parentheses and colons.  In fact, for the moment, just ignore them.</p>\n\n<p>So, what is a turtle?  A turtle is a map whose required keys are as follows:</p>\n\n<ul>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">position</code> is the cartesian coordinate of the pen of the turtle.  If you look up towards the top you will see that a position is defined as a tuple containing two numbers.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">heading</code> is the direction that the turtle is pointing.  It will move in that direction if told to move forward.  Again, looking up towards the top you can see that a heading must be a number between 0 and 360.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">velocity</code> is a number that represents the speed at which the turtle will move across the screen.  This is used for animation, so that the user can actually watch the turtle travel across the screen.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">distance</code> is a number that represents the remaining distance that the turtle must traverse before the current command (either a <code class=\"language-plaintext highlighter-rouge\">forward</code> or <code class=\"language-plaintext highlighter-rouge\">backwards</code> command) is complete.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">omega</code> is a number that represents the angular velocity of the turtle.  Again, this is for animation purposes, so that the user can watch the turtle rotate when given a <code class=\"language-plaintext highlighter-rouge\">right</code> or <code class=\"language-plaintext highlighter-rouge\">left</code> command.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">angle</code> is a number that represents the number of degrees remaining to complete the current rotation command.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">pen</code> is the state of the pen.  Looking up you can see that the state of the pen can be either <code class=\"language-plaintext highlighter-rouge\">up</code> or <code class=\"language-plaintext highlighter-rouge\">down</code>.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">weight</code> is a positive number that represents the thickness of the line drawn by the pen.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">speed</code> is a positive integer that acts as a multiplier for both the <code class=\"language-plaintext highlighter-rouge\">velocity</code> and <code class=\"language-plaintext highlighter-rouge\">omega</code> parameters.  This allows the user to speed up or slow down the animation.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">lines</code> is a list of all the lines drawn by the turtle so far.  Looking up you can see that it is a collection of lines, and that lines are maps whose required keys are <code class=\"language-plaintext highlighter-rouge\">line-start</code> and <code class=\"language-plaintext highlighter-rouge\">line-end</code>, both of which are tuples of two numbers. (Yes, I suppose I should have created a <code class=\"language-plaintext highlighter-rouge\">point</code> type.)</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">visible</code> is a boolean that determines whether the turtle itself should be visible while it is being animated.  If this is false, then all the user sees is the animated result of the turtle's movements.</p>\n  </li>\n  <li>\n    <p><code class=\"language-plaintext highlighter-rouge\">state</code> is either <code class=\"language-plaintext highlighter-rouge\">busy</code> or <code class=\"language-plaintext highlighter-rouge\">idle</code>.  This is used by the command processor.  When the turtle goes from <code class=\"language-plaintext highlighter-rouge\">busy</code> to <code class=\"language-plaintext highlighter-rouge\">idle</code> the next command is pulled from the command queue and executed.</p>\n  </li>\n</ul>\n\n<p>It should be clear that this is a type model.  Most statically typed languages would not be able to capture all the constraints within this type model; though there are perhaps some that could.  However, this is not a static type model.  Clojure is not a statically typed language.  <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code> is a dynamic type definition language.</p>\n\n<p>What does that mean?  Probably the best way to explain that is to show you where that type model gets invoked.  Here's a simple example.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn make []\n  {:post [(s/assert ::turtle %)]}\n  {:position [0.0 0.0]\n   :heading 0.0\n   :velocity 0.0\n   :distance 0.0\n   :omega 0.0\n   :angle 0.0\n   :pen :up\n   :weight 1\n   :speed 5\n   :visible true\n   :lines []\n   :state :idle})\n</code></pre></div></div>\n\n<p>This is the default constructor of the turtle.  Notice that it just loads up all the required fields into a map. Notice also that there is a <em>post condition</em> that asserts that the result conforms the the <code class=\"language-plaintext highlighter-rouge\">turtle</code> type.</p>\n\n<p>This is nice.  If I forget to initialize a field, or if I initialize a field to a value that conflicts with the type, I get an error.</p>\n\n<p>Here's another, more complex example.  Don't freak out, you don't have to understand this in detail.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn update-turtle [turtle]\n  {:post [(s/assert ::turtle %)]}\n  (if (= :idle (:state turtle))\n    turtle\n    (let [{:keys [distance\n                  state\n                  angle\n                  lines\n                  position\n                  pen\n                  pen-start] :as turtle}\n          (-&gt; turtle\n              (update-position)\n              (update-heading))\n          done? (and (zero? distance)\n                     (zero? angle))\n          state (if done? :idle state)\n          lines (if (and done? (= pen :down))\n                  (conj lines (make-line turtle))\n                  lines)\n          pen-start (if (and done? (= pen :down))\n                      position\n                      pen-start)]\n      (assoc turtle :state state :lines lines :pen-start pen-start)))\n  )\n</code></pre></div></div>\n\n<p>This is the function that updates the turtle for each screen refresh.  Again, notice the <em>post condition</em>.  If anything is calculated incorrectly by the <code class=\"language-plaintext highlighter-rouge\">update-turtle</code> function, I'll get an exception right away.</p>\n\n<p>Now some of you might be worried that by checking types at runtime I could end up with runtime errors in production.  You might therefore assert that static typing is better because the compiler checks the types long before the program ever executes.</p>\n\n<p>However, I do not intend to have runtime errors in production, because I have a suite of tests that exercise all the behaviors of the system.  Here's just one of those tests:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(describe \"Turtle Update\"\n  (with turtle (-&gt; (t/make) (t/position [1.0 1.0]) (t/heading 1.0)))\n  (context \"position update\"\n    (it \"holds position when there's no velocity\"\n      (let [turtle (-&gt; @turtle (t/velocity 0.0) (t/state :idle))\n            new-turtle (t/update-turtle turtle)]\n        (should= turtle new-turtle)))\n</code></pre></div></div>\n\n<p>Again, you don't have to understand this in any detail.  Just notice that the <code class=\"language-plaintext highlighter-rouge\">make</code> and <code class=\"language-plaintext highlighter-rouge\">update-turtle</code> functions are being invoked.  Since those functions have <em>post conditions</em> that will check the types, and since my suite of tests is exhaustive, I am quite certain that there will be no runtime errors in production and that my dynamic type checking is as robust as any static type system.</p>\n\n<p>The dynamic nature of the type checking allows me to assert type constraints that are very difficult, if not impossible, to assert at compile time.  I can, for example, assert complex relationships between the values of the fields.</p>\n\n<p>To expand on that example, imagine the type model of an accounting balance sheet.  The sum of the assets, liabilities and equities on the balance sheet must be zero.  This is easy to assert in <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code> but is difficult, if not impossible, to assert in most statically typed languages.</p>\n\n<p>Moreover, <em>I</em> get to control when types are asserted.  It is up to me to decide if and when a certain type should be checked.  This gives me a lot of power and flexibility.  It allows me to violate the type rules in the midst of computations, so long as the end result ends up conforming to the types.</p>\n\n<p>One last point.  In the late 90s and the 2000s, there was a lengthy and animated (and sometimes acrimonious) debate over TDD vs DBC (Design by Contract).  What <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code> has taught me is that the two play very well together, and both should be in every programmer's toolkit.</p>\n\n",
    "sanitized": "Recently I wrote a cute little program for doing Turtle Graphics.  For those of you who don't know, turtle graphics were originally added to the LOGO language by Seymour Papert in the late 1960s.  He built a robot that he called a \"turtle\" that could hold a pen.  The robot had wheels and could move forwards and backwards, and could rotate left and right.  It could also raise and lower the pen.  When placed on a sheet of paper, the turtle could be commanded to draw interesting designs.\n\nPapert's goal was to teach children about programming.  As the years went by the robot got replaced with screens, and the turtle became an icon that could draw lines.  Children from the 70s until now have been enthralled by the simple commands for directing the turtle, and the elegant drawings they can make.\n\nFor example, this is how you might draw a square:\n\nforward 100\nright 90\nforward 100\nright 90\nforward 100\nright 90\nforward 100\nright 90.\n\n\nRecently I had a need to explore some interesting geometrical designs.  Turtle graphics would be perfect for my purposes.  So I wrote a turtle graphics processor in Clojure.  [code]\n\nI used the quil framework which is based on the Processing framework in Java. This framework makes it very easy to create simple GUIs in Clojure.\n\nNow consider the problem of the Turtle.  What is the type model for this object?  What fields does it have, and what constraints must be placed on those fields?\n\nHere was my solution to that problem, written in clojure/spec.  As usual, in Clojure, you start at the bottom and read towards the top.\n\n(s/def ::position (s/tuple number? number?))\n(s/def ::heading (s/and number? #(<= 0 % 360)))\n(s/def ::velocity number?)\n(s/def ::distance number?)\n(s/def ::omega number?)\n(s/def ::angle number?)\n(s/def ::weight (s/and pos? number?))\n(s/def ::state #{:idle :busy})\n(s/def ::pen #{:up :down})\n(s/def ::pen-start (s/or :nil nil?\n                         :pos (s/tuple number? number?)))\n(s/def ::line-start (s/tuple number? number?))\n(s/def ::line-end (s/tuple number? number?))\n(s/def ::line (s/keys :req-un [::line-start ::line-end]))\n(s/def ::lines (s/coll-of ::line))\n(s/def ::visible boolean?)\n(s/def ::speed (s/and int? pos?))\n(s/def ::turtle (s/keys :req-un [::position\n                                 ::heading\n                                 ::velocity\n                                 ::distance\n                                 ::omega\n                                 ::angle\n                                 ::pen\n                                 ::weight\n                                 ::speed\n                                 ::lines\n                                 ::visible\n                                 ::state]\n                        :opt-un [::pen-start]))\n\n\nNow don't freak out at all the parentheses and colons.  In fact, for the moment, just ignore them.\n\nSo, what is a turtle?  A turtle is a map whose required keys are as follows:\n\n\n  \n    position is the cartesian coordinate of the pen of the turtle.  If you look up towards the top you will see that a position is defined as a tuple containing two numbers.\n  \n  \n    heading is the direction that the turtle is pointing.  It will move in that direction if told to move forward.  Again, looking up towards the top you can see that a heading must be a number between 0 and 360.\n  \n  \n    velocity is a number that represents the speed at which the turtle will move across the screen.  This is used for animation, so that the user can actually watch the turtle travel across the screen.\n  \n  \n    distance is a number that represents the remaining distance that the turtle must traverse before the current command (either a forward or backwards command) is complete.\n  \n  \n    omega is a number that represents the angular velocity of the turtle.  Again, this is for animation purposes, so that the user can watch the turtle rotate when given a right or left command.\n  \n  \n    angle is a number that represents the number of degrees remaining to complete the current rotation command.\n  \n  \n    pen is the state of the pen.  Looking up you can see that the state of the pen can be either up or down.\n  \n  \n    weight is a positive number that represents the thickness of the line drawn by the pen.\n  \n  \n    speed is a positive integer that acts as a multiplier for both the velocity and omega parameters.  This allows the user to speed up or slow down the animation.\n  \n  \n    lines is a list of all the lines drawn by the turtle so far.  Looking up you can see that it is a collection of lines, and that lines are maps whose required keys are line-start and line-end, both of which are tuples of two numbers. (Yes, I suppose I should have created a point type.)\n  \n  \n    visible is a boolean that determines whether the turtle itself should be visible while it is being animated.  If this is false, then all the user sees is the animated result of the turtle's movements.\n  \n  \n    state is either busy or idle.  This is used by the command processor.  When the turtle goes from busy to idle the next command is pulled from the command queue and executed.\n  \n\n\nIt should be clear that this is a type model.  Most statically typed languages would not be able to capture all the constraints within this type model; though there are perhaps some that could.  However, this is not a static type model.  Clojure is not a statically typed language.  clojure/spec is a dynamic type definition language.\n\nWhat does that mean?  Probably the best way to explain that is to show you where that type model gets invoked.  Here's a simple example.\n\n(defn make []\n  {:post [(s/assert ::turtle %)]}\n  {:position [0.0 0.0]\n   :heading 0.0\n   :velocity 0.0\n   :distance 0.0\n   :omega 0.0\n   :angle 0.0\n   :pen :up\n   :weight 1\n   :speed 5\n   :visible true\n   :lines []\n   :state :idle})\n\n\nThis is the default constructor of the turtle.  Notice that it just loads up all the required fields into a map. Notice also that there is a post condition that asserts that the result conforms the the turtle type.\n\nThis is nice.  If I forget to initialize a field, or if I initialize a field to a value that conflicts with the type, I get an error.\n\nHere's another, more complex example.  Don't freak out, you don't have to understand this in detail.\n\n(defn update-turtle [turtle]\n  {:post [(s/assert ::turtle %)]}\n  (if (= :idle (:state turtle))\n    turtle\n    (let [{:keys [distance\n                  state\n                  angle\n                  lines\n                  position\n                  pen\n                  pen-start] :as turtle}\n          (-> turtle\n              (update-position)\n              (update-heading))\n          done? (and (zero? distance)\n                     (zero? angle))\n          state (if done? :idle state)\n          lines (if (and done? (= pen :down))\n                  (conj lines (make-line turtle))\n                  lines)\n          pen-start (if (and done? (= pen :down))\n                      position\n                      pen-start)]\n      (assoc turtle :state state :lines lines :pen-start pen-start)))\n  )\n\n\nThis is the function that updates the turtle for each screen refresh.  Again, notice the post condition.  If anything is calculated incorrectly by the update-turtle function, I'll get an exception right away.\n\nNow some of you might be worried that by checking types at runtime I could end up with runtime errors in production.  You might therefore assert that static typing is better because the compiler checks the types long before the program ever executes.\n\nHowever, I do not intend to have runtime errors in production, because I have a suite of tests that exercise all the behaviors of the system.  Here's just one of those tests:\n\n(describe \"Turtle Update\"\n  (with turtle (-> (t/make) (t/position [1.0 1.0]) (t/heading 1.0)))\n  (context \"position update\"\n    (it \"holds position when there's no velocity\"\n      (let [turtle (-> @turtle (t/velocity 0.0) (t/state :idle))\n            new-turtle (t/update-turtle turtle)]\n        (should= turtle new-turtle)))\n\n\nAgain, you don't have to understand this in any detail.  Just notice that the make and update-turtle functions are being invoked.  Since those functions have post conditions that will check the types, and since my suite of tests is exhaustive, I am quite certain that there will be no runtime errors in production and that my dynamic type checking is as robust as any static type system.\n\nThe dynamic nature of the type checking allows me to assert type constraints that are very difficult, if not impossible, to assert at compile time.  I can, for example, assert complex relationships between the values of the fields.\n\nTo expand on that example, imagine the type model of an accounting balance sheet.  The sum of the assets, liabilities and equities on the balance sheet must be zero.  This is easy to assert in clojure/spec but is difficult, if not impossible, to assert in most statically typed languages.\n\nMoreover, I get to control when types are asserted.  It is up to me to decide if and when a certain type should be checked.  This gives me a lot of power and flexibility.  It allows me to violate the type rules in the midst of computations, so long as the end result ends up conforming to the types.\n\nOne last point.  In the late 90s and the 2000s, there was a lengthy and animated (and sometimes acrimonious) debate over TDD vs DBC (Design by Contract).  What clojure/spec has taught me is that the two play very well together, and both should be in every programmer's toolkit."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/06/25/OnTypes",
    "raw": "<p>I wrote my first program in 1964.  The name of the program was: <em>Mr Patternson's Computerized Gate</em>, and it was implemented on a little plastic computer named DIGICOMP-I, which was a cute little three bit finite state machine with 6 AND gates.</p>\n\n<p>The first electronic computer I ever wrote a program for was an ECP-18 in 1966.  This was a 15 bit wide machine with 1024 words of <em>drum</em> memory.  The programs I wrote were all in binary machine language and were entered through the front-panel switches.</p>\n\n<p>In the years between 1967 and 1969 my father would drive my friend, Tim Conrad, and I 25 miles to the Digital Equipment Corp sales office, where we would spend our Saturdays entering programs into the PDP-8 that they had on the floor.  They were very gracious to allow us such access and freedom.  The code we wrote was in PAL-D assembler (which was written by Ed Yourdon when he was 21 years old).</p>\n\n<p>My very first job as a programmer was temporary.  A matter of two weeks.  I was 17, and the year was 1969.  My father went to the CEO of a nearby insurance actuarial firm, ASC Tabulating, and in his inimitable fashion, told them that they would be hiring me for a summer job.  He had a way of being <em>very</em> convincing.</p>\n\n<p>The program I wrote for ASC was named IDSET.  It was written in Honeywell H200 assembler (the language was called Easycoder and was based on IBM 1401 Autocoder).  The purpose was to read student records from a magnetic tape and insert ID codes into those records, and then write them out onto a new tape.  With some coaching, I was able to get that program to work.</p>\n\n<p>Upon graduating High School, in 1971, I got a job at ASC again; but this time as a third-shift off-line printer operator.  We were printing junk mail, which was a brand new thing back then.</p>\n\n<p>A few months later I was hired as a full-time programmer analyst at ASC, and was assigned to work on huge re-write of a massive accounting and records system for Local 705 Trucker's union in Chicago.  The existing system ran on a great big GE Datanet 30.  ASC wanted to reimplement it on a Varian 620F mini-computer.</p>\n\n<p>The 620F was a lovely little 16 bit computer with 32K of core memory and a 1us cycle time.  The primary IO devices were a teletype, a slow card reader, two magnetic tape drives, and two 2314 20MB disks.  The machine also had 16 (or was it 32) RS232 ports for talking to teletypes that were remotely connected through 300BPS modems.</p>\n\n<p>Although the 620F came with a stand-alone assembler, there was no operating system.  So every bit of that real time union accounting system was built from assembler code, with no frameworks, platforms, or operating systems to help.</p>\n\n<p>In 1973 I took a job at Chicago Laser Systems, programming a PDP-8-like machine, in assembler, to control pulsed lasers, galvonometer driven mirrors, and step-and-repeat tables to trim electronic components to high degrees of tolerance.</p>\n\n<p>In 1975 I took a job at Outboard Marine Corporation, programming a real time aluminum die cast system in IBM System 7 assembler.</p>\n\n<p>In 1977 I took a job at Teradyne Central, programming a PDP-8-like machine, in assembler (again), to control a distributed system for testing and monitoring the quality of all the telephone lines in a telephone company service area.  A year later we started using 8085 micro-computers and wrote all that code in assembler too.</p>\n\n<p>Suffice it to say that I was steeped in assembler, and thought that all high-level languages were a joke. My forays into COBOL, Fortran, and PL/1 did not convince me otherwise.  Real programmers programmed in assembler.</p>\n\n<p>Between 1977 and 1980 I was introduced to Pascal.  I rejected it as a viable language almost immediatly.  I found the type system far too constraining, and didn't trust all the magic behind the scenes.</p>\n\n<p>In 1980 I read a copy of Kernighan and Ritchie, and for the first time I began to see that a high-level language could possibly be an appropriate engineering language.  I spent many years writing in that wonderful language which, by the way, was as untyped as assembler.</p>\n\n<p>Oh, that's not to say that C didn't have declared types.  It's just that the compiler didn't bother to check that you were using those types properly.  This made the language untyped for all intents and purposes.</p>\n\n<p>In 1986, after several nightmare scenarios having to do with the typlessness of C, I was an enthusiastic early adopter of C++.  Unfortunately I could not get my hands on a C++ compiler until 1987.  I became quite an expert in the languge, and engaged in many (many (many)) arguments on comp.lang.c++ and comp.object (in those heady days of USENET, a very early social networking platform).</p>\n\n<p>C++ is a statically typed language.  Many, today, would consider it to be relatively weakly typed; but from my point of view, after a decade and a half of untyped languages, I thought the type enforcement was very strong.  I had overcome the feeling of being handcuffed by a strong type system and became quite adept at building type models.</p>\n\n<p>In 1990 I took a contracting job at Rational, working in C++ on the first release of Rational Rose.  This is where I met Grady Booch, and came up with the plan for my first book.</p>\n\n<p>By 1991 I was a consultant, selling my services to companies, all over the US and Europe, who wanted to learn about object-oriented programming and C++.  It was a lucrative affair for me, and I continued building that business for several years. Eventually I became the editor-in-chief of <em>The C++ Report</em> (does anybody remember print magazines?)</p>\n\n<p>In 1999 I realized that C++ was a waning technolgy, and that the action was really happening in Java.  Java was similar enough to C++ for me to make the transition with relative ease.  The type system of Java was a bit weaker than C++, and I refused to use the stronger features (like <code class=\"language-plaintext highlighter-rouge\">final</code> though I had been an avid consumer of <code class=\"language-plaintext highlighter-rouge\">const</code> in C++).</p>\n\n<p>By 2003 I had grown tired of Java's static type system and started playing around with Python.  I found the language to be primitive and somewhat haphazard; so after a few excursions with the language I switched to Ruby.</p>\n\n<p>In Ruby I found a home for several years.  The dynamic type system was robust.  The object-oriented facilities were well thought through and very easy to use.  It was an elegant language with very few warts.</p>\n\n<p>Then, in 2010 or so, I bumped into Clojure.  I had just recently read <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/index.html\"><em>The Structure and Interpretation of Computer Programs</em></a> and so was interested in playing around with a LISP derivative.</p>\n\n<p>It has been 11 years now, and I feel no urge to change languages.  I reckon that Clojure may be my last programming language.  Oh, not that I haven't looked around.  I've had some daliances with Golang, Elixr, and Kotlin, and have looked with trepidation at Haskel.  I've even played with Scala and F#.  I keep looking as new languages arise; but have found nothing that calls me to switch away from Clojure.</p>\n\n<p>Notice the pathway of my career.  I went from untyped languages like assembler and C, to statically typed languages like C++ and Java, to dynamically typed languages like Python and Ruby, and now to Clojure.</p>\n\n<p>The type system in Clojure is as dynamic as Python or Ruby, but there is a library in Clojure called <code class=\"language-plaintext highlighter-rouge\">clojure/spec</code> that provides all the strong typing anyone would ever need.  However, instead of that typing being controlled by the compiler, it is controlled by <em>me</em>.  I can enforce simple types, or very complex data relationships.  You might think of it as a kind of pre-condition/post-condition language.  Eifel programmers would feel very much at home with it.  It's an almost perfect way to engage in Design by Contract.</p>\n\n<p>So what do I conclude from this?  Not much other than that static typing is not for me.  I prefer the flexibility of dynamic typing, and the ability to enforce types if, and when, I need such enforcement.</p>\n\n",
    "sanitized": "I wrote my first program in 1964.  The name of the program was: Mr Patternson's Computerized Gate, and it was implemented on a little plastic computer named DIGICOMP-I, which was a cute little three bit finite state machine with 6 AND gates.\n\nThe first electronic computer I ever wrote a program for was an ECP-18 in 1966.  This was a 15 bit wide machine with 1024 words of drum memory.  The programs I wrote were all in binary machine language and were entered through the front-panel switches.\n\nIn the years between 1967 and 1969 my father would drive my friend, Tim Conrad, and I 25 miles to the Digital Equipment Corp sales office, where we would spend our Saturdays entering programs into the PDP-8 that they had on the floor.  They were very gracious to allow us such access and freedom.  The code we wrote was in PAL-D assembler (which was written by Ed Yourdon when he was 21 years old).\n\nMy very first job as a programmer was temporary.  A matter of two weeks.  I was 17, and the year was 1969.  My father went to the CEO of a nearby insurance actuarial firm, ASC Tabulating, and in his inimitable fashion, told them that they would be hiring me for a summer job.  He had a way of being very convincing.\n\nThe program I wrote for ASC was named IDSET.  It was written in Honeywell H200 assembler (the language was called Easycoder and was based on IBM 1401 Autocoder).  The purpose was to read student records from a magnetic tape and insert ID codes into those records, and then write them out onto a new tape.  With some coaching, I was able to get that program to work.\n\nUpon graduating High School, in 1971, I got a job at ASC again; but this time as a third-shift off-line printer operator.  We were printing junk mail, which was a brand new thing back then.\n\nA few months later I was hired as a full-time programmer analyst at ASC, and was assigned to work on huge re-write of a massive accounting and records system for Local 705 Trucker's union in Chicago.  The existing system ran on a great big GE Datanet 30.  ASC wanted to reimplement it on a Varian 620F mini-computer.\n\nThe 620F was a lovely little 16 bit computer with 32K of core memory and a 1us cycle time.  The primary IO devices were a teletype, a slow card reader, two magnetic tape drives, and two 2314 20MB disks.  The machine also had 16 (or was it 32) RS232 ports for talking to teletypes that were remotely connected through 300BPS modems.\n\nAlthough the 620F came with a stand-alone assembler, there was no operating system.  So every bit of that real time union accounting system was built from assembler code, with no frameworks, platforms, or operating systems to help.\n\nIn 1973 I took a job at Chicago Laser Systems, programming a PDP-8-like machine, in assembler, to control pulsed lasers, galvonometer driven mirrors, and step-and-repeat tables to trim electronic components to high degrees of tolerance.\n\nIn 1975 I took a job at Outboard Marine Corporation, programming a real time aluminum die cast system in IBM System 7 assembler.\n\nIn 1977 I took a job at Teradyne Central, programming a PDP-8-like machine, in assembler (again), to control a distributed system for testing and monitoring the quality of all the telephone lines in a telephone company service area.  A year later we started using 8085 micro-computers and wrote all that code in assembler too.\n\nSuffice it to say that I was steeped in assembler, and thought that all high-level languages were a joke. My forays into COBOL, Fortran, and PL/1 did not convince me otherwise.  Real programmers programmed in assembler.\n\nBetween 1977 and 1980 I was introduced to Pascal.  I rejected it as a viable language almost immediatly.  I found the type system far too constraining, and didn't trust all the magic behind the scenes.\n\nIn 1980 I read a copy of Kernighan and Ritchie, and for the first time I began to see that a high-level language could possibly be an appropriate engineering language.  I spent many years writing in that wonderful language which, by the way, was as untyped as assembler.\n\nOh, that's not to say that C didn't have declared types.  It's just that the compiler didn't bother to check that you were using those types properly.  This made the language untyped for all intents and purposes.\n\nIn 1986, after several nightmare scenarios having to do with the typlessness of C, I was an enthusiastic early adopter of C++.  Unfortunately I could not get my hands on a C++ compiler until 1987.  I became quite an expert in the languge, and engaged in many (many (many)) arguments on comp.lang.c++ and comp.object (in those heady days of USENET, a very early social networking platform).\n\nC++ is a statically typed language.  Many, today, would consider it to be relatively weakly typed; but from my point of view, after a decade and a half of untyped languages, I thought the type enforcement was very strong.  I had overcome the feeling of being handcuffed by a strong type system and became quite adept at building type models.\n\nIn 1990 I took a contracting job at Rational, working in C++ on the first release of Rational Rose.  This is where I met Grady Booch, and came up with the plan for my first book.\n\nBy 1991 I was a consultant, selling my services to companies, all over the US and Europe, who wanted to learn about object-oriented programming and C++.  It was a lucrative affair for me, and I continued building that business for several years. Eventually I became the editor-in-chief of The C++ Report (does anybody remember print magazines?)\n\nIn 1999 I realized that C++ was a waning technolgy, and that the action was really happening in Java.  Java was similar enough to C++ for me to make the transition with relative ease.  The type system of Java was a bit weaker than C++, and I refused to use the stronger features (like final though I had been an avid consumer of const in C++).\n\nBy 2003 I had grown tired of Java's static type system and started playing around with Python.  I found the language to be primitive and somewhat haphazard; so after a few excursions with the language I switched to Ruby.\n\nIn Ruby I found a home for several years.  The dynamic type system was robust.  The object-oriented facilities were well thought through and very easy to use.  It was an elegant language with very few warts.\n\nThen, in 2010 or so, I bumped into Clojure.  I had just recently read The Structure and Interpretation of Computer Programs and so was interested in playing around with a LISP derivative.\n\nIt has been 11 years now, and I feel no urge to change languages.  I reckon that Clojure may be my last programming language.  Oh, not that I haven't looked around.  I've had some daliances with Golang, Elixr, and Kotlin, and have looked with trepidation at Haskel.  I've even played with Scala and F#.  I keep looking as new languages arise; but have found nothing that calls me to switch away from Clojure.\n\nNotice the pathway of my career.  I went from untyped languages like assembler and C, to statically typed languages like C++ and Java, to dynamically typed languages like Python and Ruby, and now to Clojure.\n\nThe type system in Clojure is as dynamic as Python or Ruby, but there is a library in Clojure called clojure/spec that provides all the strong typing anyone would ever need.  However, instead of that typing being controlled by the compiler, it is controlled by me.  I can enforce simple types, or very complex data relationships.  You might think of it as a kind of pre-condition/post-condition language.  Eifel programmers would feel very much at home with it.  It's an almost perfect way to engage in Design by Contract.\n\nSo what do I conclude from this?  Not much other than that static typing is not for me.  I prefer the flexibility of dynamic typing, and the ability to enforce types if, and when, I need such enforcement."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/03/06/ifElseSwitch",
    "raw": "<p>A few days ago someone tweeted a question asking which of the following PHP snippets was better than the others, or whether there might be an even better approach.</p>\n\n<p><img src=\"/assets/ifElseSwitch.jpg\" /></p>\n\n<p>I tweeted my answer in the following cryptic paragraph.</p>\n\n<blockquote>\n  <p><em>Place the if/else cases in a factory object that creates a polymorphic object for each variant. Create the factory in ‘main’ and pass it into your app. That will ensure that the if/else chain occurs only once.</em></p>\n</blockquote>\n\n<p>Others have since asked me for an example.  Twitter is not the best medium for that so…</p>\n\n<p>Firstly, if the sole intent of the programmer is to translate:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>0-&gt;'male', \n1-&gt;'female' \notherwise -&gt; 'unknown'\n</code></pre></div></div>\n\n<p>…then his refactoring #2 would be my preference.</p>\n\n<p>However, I have a hard time believing that the business rules of the system are not using that gender code for making policy decisions.  My fear is that the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> chain that the author was asking about is replicated in many more places within the code.  Some of those <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statements might switch on the integer, and others might switch on the string.  It’s not inconceivable that you’d find a <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> that used an integer in one case and a string in the next!</p>\n\n<p>The proliferation of <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statements is a common problem in software systems.  The fact that they are replicated in many places is problematic because when such statements are inevitably changed, it is easy to miss some.  This leads to fragile systems.</p>\n\n<p>But there is a worse problem with <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statements.  It’s the dependency structure.</p>\n\n<p><img src=\"/assets/ifElseSwitchStructure.jpg\" /></p>\n\n<p>Such statements tend to have cases that point outwards towards lower level modules.  This often means that the module containing the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> will have source code dependencies upon those lower level modules.</p>\n\n<p>That’s bad enough.  We don’t like dependencies that run from high level modules to low level modules.  They thwart our desire to create architectures that are made up of independently deployable components.</p>\n\n<p>However, the above diagram shows that it’s worse than that.  Other higher level modules tend to depend on the modules that contains those <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statements.  Those higher level modules, therefore, have transitive dependencies upon the lower level modules.  This turns the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statements into <em>dependency magnets</em> that reach across large swathes of the system source code, binding the system into a tight monolithic architecture without a flexible component structure.</p>\n\n<p>The solution to this problem is to break those outwards dependencies on the lower level modules.  This can be done with simple polymorphism.</p>\n\n<p><img src=\"/assets/ifElseSwitchPolymorphism.jpg\" /></p>\n\n<p>In the diagram above you can see the high level modules using a base class interface that polymorphically deploys to the low level details.  With a little thought you should be able to see that this is behaviorally identical to the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> but with a twist.  The decision about which case to follow must have been made before those high level policy modules invoked the base class interface.</p>\n\n<p>We’ll come back to <em>when</em> that decision is made in a moment.  For now, just look at the direction of the dependencies.  There is no longer any transitive source code dependency from the high level modules to the low level modules.  We could easily create a component boundary that separates them.  We could even deploy the high level modules independently from the low level modules.  This makes for a pleasantly flexible architecture.</p>\n\n<p>Another point to consider is that the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> and the polymorphic implementations both use table lookups to do their work.  In the case of an <code class=\"language-plaintext highlighter-rouge\">if/else</code> the table lookup is procedural.  In the case of a <code class=\"language-plaintext highlighter-rouge\">switch</code> most compilers build a little lookup table.  In the case of the polymorphic dispatch the vector table is built into the base class interface.  So all three have very similar runtime and memory characteristics.  One is not much faster than another.</p>\n\n<p>So where does the decision get made?  The decision is made when the instance of the base class is created.  Hopefully that creation happens in a nice safe place like <code class=\"language-plaintext highlighter-rouge\">main</code>.  Usually we manage that with a simple factory class.</p>\n\n<p><img src=\"/assets/ifElseSwitchFactory.jpg\" /></p>\n\n<p>In the diagram above you can see the high level module uses the base class to do its work.  Every business rule that would once have depended on an <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statement now has its own particular method to call in the base class.  When a business rule calls that method, it will deploy down to the proper low level module.  The low level module is created by the <code class=\"language-plaintext highlighter-rouge\">Factory</code>.  The high level module invokes the <code class=\"language-plaintext highlighter-rouge\">make(x)</code> method of the <code class=\"language-plaintext highlighter-rouge\">Factory</code> passing some kind of token <code class=\"language-plaintext highlighter-rouge\">x</code> that represents the decision.  The <code class=\"language-plaintext highlighter-rouge\">FactoryImpl</code> contains the sole <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> statement, which creates the appropriate instance and passes it back to the high level module which then invokes it.</p>\n\n<p>Note, again, the direction of the dependencies.  See that red line?  That’s a nice convenient component boundary.  All dependencies cross it pointing towards the higher level modules.</p>\n\n<p>Be careful with that token <code class=\"language-plaintext highlighter-rouge\">x</code>.  Don’t try to make it an <code class=\"language-plaintext highlighter-rouge\">enum</code> or anything that requires a declaration above the red line.  An integer, or a string is a better choice.  It may not be type safe.  Indeed, it <em>cannot</em> be type safe.  But it will allow you to preserve the component structure of your architecture.</p>\n\n<p>You may well be concerned about a different matter.  That base class needs a method for every business rule that once depended upon the <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> decision.  As more of those business rules appear, you’ll have to add more methods to the base class.  And since many business rules already depend upon the base class they’ll have to be recompiled/redeployed even though nothing they care about changed.</p>\n\n<p>There are many ways to resolve that problem.  I could keep this blog going for another 2,000 words or so describing them.  To avoid that I suggest you look up <em>The Interface Segregation Principle</em> and the <em>Acyclic Visitor</em> pattern.</p>\n\n<p>Anyway, isn’t it fascinating how interesting a discussion of a simple <code class=\"language-plaintext highlighter-rouge\">if/else/switch</code> can be?</p>\n\n",
    "sanitized": "A few days ago someone tweeted a question asking which of the following PHP snippets was better than the others, or whether there might be an even better approach.\n\n\n\nI tweeted my answer in the following cryptic paragraph.\n\n\n  Place the if/else cases in a factory object that creates a polymorphic object for each variant. Create the factory in ‘main’ and pass it into your app. That will ensure that the if/else chain occurs only once.\n\n\nOthers have since asked me for an example.  Twitter is not the best medium for that so…\n\nFirstly, if the sole intent of the programmer is to translate:\n\n0->'male', \n1->'female' \notherwise -> 'unknown'\n\n\n…then his refactoring #2 would be my preference.\n\nHowever, I have a hard time believing that the business rules of the system are not using that gender code for making policy decisions.  My fear is that the if/else/switch chain that the author was asking about is replicated in many more places within the code.  Some of those if/else/switch statements might switch on the integer, and others might switch on the string.  It’s not inconceivable that you’d find a if/else/switch that used an integer in one case and a string in the next!\n\nThe proliferation of if/else/switch statements is a common problem in software systems.  The fact that they are replicated in many places is problematic because when such statements are inevitably changed, it is easy to miss some.  This leads to fragile systems.\n\nBut there is a worse problem with if/else/switch statements.  It’s the dependency structure.\n\n\n\nSuch statements tend to have cases that point outwards towards lower level modules.  This often means that the module containing the if/else/switch will have source code dependencies upon those lower level modules.\n\nThat’s bad enough.  We don’t like dependencies that run from high level modules to low level modules.  They thwart our desire to create architectures that are made up of independently deployable components.\n\nHowever, the above diagram shows that it’s worse than that.  Other higher level modules tend to depend on the modules that contains those if/else/switch statements.  Those higher level modules, therefore, have transitive dependencies upon the lower level modules.  This turns the if/else/switch statements into dependency magnets that reach across large swathes of the system source code, binding the system into a tight monolithic architecture without a flexible component structure.\n\nThe solution to this problem is to break those outwards dependencies on the lower level modules.  This can be done with simple polymorphism.\n\n\n\nIn the diagram above you can see the high level modules using a base class interface that polymorphically deploys to the low level details.  With a little thought you should be able to see that this is behaviorally identical to the if/else/switch but with a twist.  The decision about which case to follow must have been made before those high level policy modules invoked the base class interface.\n\nWe’ll come back to when that decision is made in a moment.  For now, just look at the direction of the dependencies.  There is no longer any transitive source code dependency from the high level modules to the low level modules.  We could easily create a component boundary that separates them.  We could even deploy the high level modules independently from the low level modules.  This makes for a pleasantly flexible architecture.\n\nAnother point to consider is that the if/else/switch and the polymorphic implementations both use table lookups to do their work.  In the case of an if/else the table lookup is procedural.  In the case of a switch most compilers build a little lookup table.  In the case of the polymorphic dispatch the vector table is built into the base class interface.  So all three have very similar runtime and memory characteristics.  One is not much faster than another.\n\nSo where does the decision get made?  The decision is made when the instance of the base class is created.  Hopefully that creation happens in a nice safe place like main.  Usually we manage that with a simple factory class.\n\n\n\nIn the diagram above you can see the high level module uses the base class to do its work.  Every business rule that would once have depended on an if/else/switch statement now has its own particular method to call in the base class.  When a business rule calls that method, it will deploy down to the proper low level module.  The low level module is created by the Factory.  The high level module invokes the make(x) method of the Factory passing some kind of token x that represents the decision.  The FactoryImpl contains the sole if/else/switch statement, which creates the appropriate instance and passes it back to the high level module which then invokes it.\n\nNote, again, the direction of the dependencies.  See that red line?  That’s a nice convenient component boundary.  All dependencies cross it pointing towards the higher level modules.\n\nBe careful with that token x.  Don’t try to make it an enum or anything that requires a declaration above the red line.  An integer, or a string is a better choice.  It may not be type safe.  Indeed, it cannot be type safe.  But it will allow you to preserve the component structure of your architecture.\n\nYou may well be concerned about a different matter.  That base class needs a method for every business rule that once depended upon the if/else/switch decision.  As more of those business rules appear, you’ll have to add more methods to the base class.  And since many business rules already depend upon the base class they’ll have to be recompiled/redeployed even though nothing they care about changed.\n\nThere are many ways to resolve that problem.  I could keep this blog going for another 2,000 words or so describing them.  To avoid that I suggest you look up The Interface Segregation Principle and the Acyclic Visitor pattern.\n\nAnyway, isn’t it fascinating how interesting a discussion of a simple if/else/switch can be?"
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2021/01/17/Pairing",
    "raw": "<p>Everybody pairs from time to time. It is a rare programmer who has not sat down with another programmer to look something over or help find a bug.</p>\n\n<p>Deep problems, that require much heavy thinking, do not often lend themselves to pairing. The interaction between the programmers tends to disrupt the necessary concentration.</p>\n\n<p>On the other hand, it is not uncommon for programmers to get caught in a problem that they think is deep, but for which there is a much simpler solution that another programmer could quickly see. So it is wise to start deep problems with a pair, or even a mob, but then break it up when it becomes clear that the problem is irreducible.</p>\n\n<p>On the other side of the spectrum, there is no good reason to pair on trivial matters. Fleshing out a list of error messages, or loading fifty fields into a form are relatively mindless activities that do not require the scrutiny afforded by pairing.</p>\n\n<p>Then there is the vast middle. This is where pairing/mobbing are most valuable. These are problems that are non-trivial, but also not particularly deep. This is 90% of all programming. Pairing on this type of code keeps that code well tested, well structured, and as simple as possible.</p>\n\n<p>Pairing should always be voluntary, never be forced, never be scheduled by a manager, and never tracked. It is an informal process that is entirely under the control of the individual programmers.</p>\n\n<p>Some people can’t, or won’t do it. That’s ok; but it may require that their participation in certain projects be curtailed.</p>\n\n<p>Pairing sessions should be short-ish. 20-40 minutes at a time. (<a href=\"https://en.wikipedia.org/wiki/Pomodoro_Technique\">Tomato</a> sized) With no more than three or four consecutive sessions of that length. This is not a rule, just an informal guideline.</p>\n\n<p>Not all code that would benefit from pairing, should be written by pairs. A mature team might pair 50% of the time, or even less. During the pairing sessions, a large amount of code will be reviewed; far more than the pair is actively writing; and thus the benefits of pairing will be seen in very large swathes of non-paired code.</p>\n\n<p>Bottom line: Don’t be a jerk. Pair sometimes, don’t pair other times. Pair enough so that you have a good grasp of the overall system, and know enough of what your teammates are doing that you could step into their roles if the need arose. Don’t pair so much that you hate your job, and your teammates.</p>\n",
    "sanitized": "Everybody pairs from time to time. It is a rare programmer who has not sat down with another programmer to look something over or help find a bug.\n\nDeep problems, that require much heavy thinking, do not often lend themselves to pairing. The interaction between the programmers tends to disrupt the necessary concentration.\n\nOn the other hand, it is not uncommon for programmers to get caught in a problem that they think is deep, but for which there is a much simpler solution that another programmer could quickly see. So it is wise to start deep problems with a pair, or even a mob, but then break it up when it becomes clear that the problem is irreducible.\n\nOn the other side of the spectrum, there is no good reason to pair on trivial matters. Fleshing out a list of error messages, or loading fifty fields into a form are relatively mindless activities that do not require the scrutiny afforded by pairing.\n\nThen there is the vast middle. This is where pairing/mobbing are most valuable. These are problems that are non-trivial, but also not particularly deep. This is 90% of all programming. Pairing on this type of code keeps that code well tested, well structured, and as simple as possible.\n\nPairing should always be voluntary, never be forced, never be scheduled by a manager, and never tracked. It is an informal process that is entirely under the control of the individual programmers.\n\nSome people can’t, or won’t do it. That’s ok; but it may require that their participation in certain projects be curtailed.\n\nPairing sessions should be short-ish. 20-40 minutes at a time. (Tomato sized) With no more than three or four consecutive sessions of that length. This is not a rule, just an informal guideline.\n\nNot all code that would benefit from pairing, should be written by pairs. A mature team might pair 50% of the time, or even less. During the pairing sessions, a large amount of code will be reviewed; far more than the pair is actively writing; and thus the benefits of pairing will be seen in very large swathes of non-paired code.\n\nBottom line: Don’t be a jerk. Pair sometimes, don’t pair other times. Pair enough so that you have a good grasp of the overall system, and know enough of what your teammates are doing that you could step into their roles if the need arose. Don’t pair so much that you hate your job, and your teammates."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/10/18/Solid-Relevance",
    "raw": "<p>Recently I received a letter from someone with a concern.  It went like this:</p>\n\n<hr />\n\n<blockquote>\n  <p><em>For years the knowledge of the SOLID principle has been a standard part of our recruiting procedure. Candidates were expected to have a good working knowledge of these principles.  Lately, however, one of our managers, who doesn’t code much anymore, has questioned whether that is wise.  His points were that the Open-Closed principle isn’t very important anymore because most of the code we write isn’t contained in large monoliths and making changes to small microservices is safe and easy.  The Liskov Substitution Principle is long out of date because we don’t focus on inheritance nearly as much as we did 20 years ago.  I think we should consider <a href=\"https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong\">Dan North’s position on SOLID</a> – “Just write simple code.”</em></p>\n</blockquote>\n\n<hr />\n\n<p>I wrote the following letter in response:</p>\n\n<p>The SOLID principles remain as relevant to day as they were in the 90s (and indeed before that).  This is because software hasn’t changed all that much in all those years — and <strong>that</strong> is because software hasn’t change all that much since 1945 when Turing wrote the first lines of code for an electronic computer.  Software is still <code class=\"language-plaintext highlighter-rouge\">if</code> statements, <code class=\"language-plaintext highlighter-rouge\">while</code> loops, and assignment statements — <em>Sequence</em>, <em>Selection</em>, and <em>Iteration</em>.</p>\n\n<p>Every new generation likes to think that their world is vastly different from the generation before.  Every new generation is wrong about that; which is something that every new generation learns once the next new generation comes along to tell them how much everything has changed. <code class=\"language-plaintext highlighter-rouge\">&lt;grin&gt;</code></p>\n\n<p>So let’s walk through the principles, one by one.</p>\n\n<p><strong>SRP</strong>) The Single Responsibility Principle.</p>\n\n<blockquote>\n  <p><em>Gather together the things that change for the same reasons.  Separate things that change for different reasons.</em></p>\n</blockquote>\n\n<p>It is hard to imagine that this principle is not relevant in software.  We do not mix business rules with GUI code.  We do not mix SQL queries with communications protocols.  We keep code that is changed for different reasons separate so that changes to one part to not break other parts.  We make sure that modules that change for different reasons do not have dependencies that tangle them.</p>\n\n<p>Microservices do not solve this problem.  You can create a tangled microservice, or a tangled set of microservices if you mix code that changes for different reasons.</p>\n\n<p>Dan North’s slides completely miss the point on this, and convinces me that he did not understand the principle at all.  (or that he was being ironic, which knowing Dan, is far more likely)  His answer to the SRP is to “Write Simple Code”.  I agree.  The SRP is one of the ways we keep the code simple.</p>\n\n<p><strong>OCP</strong>) The Open-Closed Principle.</p>\n\n<blockquote>\n  <p><em>A Module should be open for extension but closed for modification.</em></p>\n</blockquote>\n\n<p>Of all the principles, the idea that anyone would question this one fills me full of dread for the future of our industry.  Of course we want to create modules that can be extended without modifying them.  Can you imagine working in a system that did not have device independence, where writing to a disk file was fundamentally different than writing to a printer, or a screen, or a pipe?  Do we want to see <code class=\"language-plaintext highlighter-rouge\">if</code> statement scattered through our code to deal with all the little details?</p>\n\n<p>Or…  Do we want to separate abstract concepts from detailed concepts.  Do we want to keep business rules isolated from the nasty little details of the GUI, and the micro-service communications protocols, and the arbitrary behaviors of the database?  Of course we do!</p>\n\n<p>Again, Dan’s slide gets this completely wrong.  When requirements change only <em>part</em> of the existing code is wrong.  Much of the existing code is still right.  And we want to make sure that we don’t have to change the right code just to make the wrong code work again.  Dan’s answer is “write simple code”.  Again, I agree.  And, ironically, he is right.  <em>Simple code is both open and closed</em>.</p>\n\n<p><strong>LSP</strong>) The Liskov Substitution Principle.</p>\n\n<blockquote>\n  <p><em>A program that uses an interface must not be confused by an implementation of that interface.</em></p>\n</blockquote>\n\n<p>People (including me) have made the mistake that this is about inheritance.  It is not.  It is about sub-typing.  All implementations of interfaces are subtypes of an interface.  All duck-types are subtypes of an implied interface.  And, every user of the base interface, whether declared or implied, must agree on the meaning of that interface.  If an implementation confuses the user of the base type, then <code class=\"language-plaintext highlighter-rouge\">if/switch</code> statements will proliferate.</p>\n\n<p>This principle is about keeping abstractions crisp and well-defined.  It is impossible to believe that this is an outmoded concept.</p>\n\n<p>Dan’s slides are entirely correct on this topic; he simply missed the point of the principle.  Simple code is code that maintains crisp subtype relationships.</p>\n\n<p><strong>ISP</strong>) The Interface Segregation Principle.</p>\n\n<blockquote>\n  <p><em>Keep interfaces small so that users don’t end up depending on things they don’t need.</em></p>\n</blockquote>\n\n<p>We still work with compiled languages.  We still depend upon modification dates to determine which modules should be recompiled and redeployed.  So long as this is true we will have to face the problem that when module A depends on module B at <em>compile</em> time, but not at run time, then changes to module B will force recompilation and redeployment of module A.</p>\n\n<p>This issue is especially acute in statically typed languages like Java, C#, C++, GO, Swift, etc.  Dynamicaly typed languages are affected much less; but are still not immune.  The existence of Maven and Leiningen are proof of that.</p>\n\n<p>Dan’s slide on this topic is provably false.  Clients <em>do</em> depend on methods they don’t call, if they have to be recompiled and redeployed when one of those methods is modified.  Dan’s final point on this principle is fine, so far as it goes.  Yes, if you can split a class with two interfaces into two separate classes, then it is a good idea to do so (SRP).  But such separation is often not feasible, nor even desirable.</p>\n\n<p><strong>DIP</strong>) The Dependency Inversion Principle.</p>\n\n<blockquote>\n  <p><em>Depend in the direction of abstraction. High level modules should not depend upon low level details.</em></p>\n</blockquote>\n\n<p>It is hard to imagine an architecture that does not make significant use of this principle.  We do not want our high level business rules depending upon low level details.  I hope that is perfectly obvious.  We do not want the computations that make money for us polluted with SQL, or low level validations, or formatting issues.  We want isolation of the high level abstractions from the low level details.  That separation is achieved by carefully managing the dependencies within the system so that all source code dependencies, especially those that cross architectural boundaries, point towards high level abstractions, not low level details.</p>\n\n<p>In every case Dan’s slides end with: <em>Just write simple code</em>.  This is good advice.  However, if the years have taught us anything it is that simplicity requires disciplines guided by principles.  It is those principles that define simplicity.  It is those disciplines that constrain the programmers to produce code that leans towards simplicity.</p>\n\n<p>The best way to make a complicated mess is to tell everyone to “just be simple” and give them no further guidance.</p>\n",
    "sanitized": "Recently I received a letter from someone with a concern.  It went like this:\n\n\n\n\n  For years the knowledge of the SOLID principle has been a standard part of our recruiting procedure. Candidates were expected to have a good working knowledge of these principles.  Lately, however, one of our managers, who doesn’t code much anymore, has questioned whether that is wise.  His points were that the Open-Closed principle isn’t very important anymore because most of the code we write isn’t contained in large monoliths and making changes to small microservices is safe and easy.  The Liskov Substitution Principle is long out of date because we don’t focus on inheritance nearly as much as we did 20 years ago.  I think we should consider Dan North’s position on SOLID – “Just write simple code.”\n\n\n\n\nI wrote the following letter in response:\n\nThe SOLID principles remain as relevant to day as they were in the 90s (and indeed before that).  This is because software hasn’t changed all that much in all those years — and that is because software hasn’t change all that much since 1945 when Turing wrote the first lines of code for an electronic computer.  Software is still if statements, while loops, and assignment statements — Sequence, Selection, and Iteration.\n\nEvery new generation likes to think that their world is vastly different from the generation before.  Every new generation is wrong about that; which is something that every new generation learns once the next new generation comes along to tell them how much everything has changed. <grin>\n\nSo let’s walk through the principles, one by one.\n\nSRP) The Single Responsibility Principle.\n\n\n  Gather together the things that change for the same reasons.  Separate things that change for different reasons.\n\n\nIt is hard to imagine that this principle is not relevant in software.  We do not mix business rules with GUI code.  We do not mix SQL queries with communications protocols.  We keep code that is changed for different reasons separate so that changes to one part to not break other parts.  We make sure that modules that change for different reasons do not have dependencies that tangle them.\n\nMicroservices do not solve this problem.  You can create a tangled microservice, or a tangled set of microservices if you mix code that changes for different reasons.\n\nDan North’s slides completely miss the point on this, and convinces me that he did not understand the principle at all.  (or that he was being ironic, which knowing Dan, is far more likely)  His answer to the SRP is to “Write Simple Code”.  I agree.  The SRP is one of the ways we keep the code simple.\n\nOCP) The Open-Closed Principle.\n\n\n  A Module should be open for extension but closed for modification.\n\n\nOf all the principles, the idea that anyone would question this one fills me full of dread for the future of our industry.  Of course we want to create modules that can be extended without modifying them.  Can you imagine working in a system that did not have device independence, where writing to a disk file was fundamentally different than writing to a printer, or a screen, or a pipe?  Do we want to see if statement scattered through our code to deal with all the little details?\n\nOr…  Do we want to separate abstract concepts from detailed concepts.  Do we want to keep business rules isolated from the nasty little details of the GUI, and the micro-service communications protocols, and the arbitrary behaviors of the database?  Of course we do!\n\nAgain, Dan’s slide gets this completely wrong.  When requirements change only part of the existing code is wrong.  Much of the existing code is still right.  And we want to make sure that we don’t have to change the right code just to make the wrong code work again.  Dan’s answer is “write simple code”.  Again, I agree.  And, ironically, he is right.  Simple code is both open and closed.\n\nLSP) The Liskov Substitution Principle.\n\n\n  A program that uses an interface must not be confused by an implementation of that interface.\n\n\nPeople (including me) have made the mistake that this is about inheritance.  It is not.  It is about sub-typing.  All implementations of interfaces are subtypes of an interface.  All duck-types are subtypes of an implied interface.  And, every user of the base interface, whether declared or implied, must agree on the meaning of that interface.  If an implementation confuses the user of the base type, then if/switch statements will proliferate.\n\nThis principle is about keeping abstractions crisp and well-defined.  It is impossible to believe that this is an outmoded concept.\n\nDan’s slides are entirely correct on this topic; he simply missed the point of the principle.  Simple code is code that maintains crisp subtype relationships.\n\nISP) The Interface Segregation Principle.\n\n\n  Keep interfaces small so that users don’t end up depending on things they don’t need.\n\n\nWe still work with compiled languages.  We still depend upon modification dates to determine which modules should be recompiled and redeployed.  So long as this is true we will have to face the problem that when module A depends on module B at compile time, but not at run time, then changes to module B will force recompilation and redeployment of module A.\n\nThis issue is especially acute in statically typed languages like Java, C#, C++, GO, Swift, etc.  Dynamicaly typed languages are affected much less; but are still not immune.  The existence of Maven and Leiningen are proof of that.\n\nDan’s slide on this topic is provably false.  Clients do depend on methods they don’t call, if they have to be recompiled and redeployed when one of those methods is modified.  Dan’s final point on this principle is fine, so far as it goes.  Yes, if you can split a class with two interfaces into two separate classes, then it is a good idea to do so (SRP).  But such separation is often not feasible, nor even desirable.\n\nDIP) The Dependency Inversion Principle.\n\n\n  Depend in the direction of abstraction. High level modules should not depend upon low level details.\n\n\nIt is hard to imagine an architecture that does not make significant use of this principle.  We do not want our high level business rules depending upon low level details.  I hope that is perfectly obvious.  We do not want the computations that make money for us polluted with SQL, or low level validations, or formatting issues.  We want isolation of the high level abstractions from the low level details.  That separation is achieved by carefully managing the dependencies within the system so that all source code dependencies, especially those that cross architectural boundaries, point towards high level abstractions, not low level details.\n\nIn every case Dan’s slides end with: Just write simple code.  This is good advice.  However, if the years have taught us anything it is that simplicity requires disciplines guided by principles.  It is those principles that define simplicity.  It is those disciplines that constrain the programmers to produce code that leans towards simplicity.\n\nThe best way to make a complicated mess is to tell everyone to “just be simple” and give them no further guidance."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/09/30/loopy",
    "raw": "<p>The following is a segment of a journey.  It has no obvious beginning point, nor does it actually end up anywhere.  The value, if any, is in the journey itself.</p>\n\n<p>The code below is the standard solution to the <a href=\"http://butunclebob.com/ArticleS.UncleBob.ThePrimeFactorsKata\">Prime Factors Kata</a>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public List&lt;Integer&gt; factorsOf(int n) {\n  ArrayList&lt;Integer&gt; factors = new ArrayList&lt;&gt;();\n\n  for (int d = 2; n &gt; 1; d++)\n    for (; n % d == 0; n /= d)\n      factors.add(d);\n\n  return factors;\n}\n</code></pre></div></div>\n\n<p>However, I was doing this kata in Clojure the other day and I wound up with a different solution.  It looked like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime-factors [n]\n  (loop [n n d 2 factors []]\n          (if (&gt; n 1)\n            (if (zero? (mod n d))\n              (recur (/ n d) d (conj factors d))\n              (recur n (inc d) factors))\n            factors)))\n</code></pre></div></div>\n\n<p>The algorithm is pretty much the same.  I mean if you tracked the value of <code class=\"language-plaintext highlighter-rouge\">n</code>, <code class=\"language-plaintext highlighter-rouge\">d</code>, and <code class=\"language-plaintext highlighter-rouge\">factors</code> they would go through the same changes.  On the other hand the code in Java is a doubly nested loop; but the code in Clojure is a single recursive loop with two recursion points.  That’s interesting.</p>\n\n<p>I could write the recursive algorithm in Java like this:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n) {\n    return factorsOf(n, 2, new ArrayList&lt;Integer&gt;());\n  }\n\n  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    if (n&gt;1) {\n      if (n%d == 0) {\n        factors.add(d);\n        return factorsOf(n/d, d, factors);\n      } else {\n        return factorsOf(n, d+1, factors);\n      }\n    }\n    return factors;\n  }\n</code></pre></div></div>\n\n<p>And then, since this is tail recursive, I could rewrite it as a straight loop.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    while (true) {\n      if (n &gt; 1) {\n        if (n % d == 0) {\n          factors.add(d);\n          n /= d;\n        } else {\n          d++;\n        }\n      } else\n        return factors;\n    }\n  }\n</code></pre></div></div>\n\n<p>For all intents and purposes this code executes the same algorithm as the standard solution; but it does not have a doubly nested loop.  We have transformed the code from a doubly nested loop, to a single loop, without affecting the algorithm.</p>\n\n<p>Is this always possible?</p>\n\n<p>In other words: given a program with a nested loop, is there a way to write the same program with a single loop?</p>\n\n<p>The answer to that is: <em>Yes.</em></p>\n\n<p>The fact that a bit of code executes within an inner loop could be encoded into a state variable.  The outer loop could then dispatch to that bit of code depending upon how that state variable is set.</p>\n\n<p>We see that in the code above.  The state condition for the inner loop is <code class=\"language-plaintext highlighter-rouge\">n%d==0</code>.  Indeed, I can extract that out as a <a href=\"https://moderatemisbehaviour.github.io/clean-code-smells-and-heuristics/general/g19-use-explanatory-variables.html\">explanatory variable</a> to make my point clearer.  I can also extract <code class=\"language-plaintext highlighter-rouge\">n&gt;1</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    while (true) {\n      boolean factorsRemain = n &gt; 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n      if (factorsRemain) {\n        if (currentDivisorIsFactor) {\n          factors.add(d);\n          n /= d;\n        } else {\n          d++;\n        }\n      } else\n        return factors;\n    }\n  }\n</code></pre></div></div>\n\n<p>Now all the looping decisions are made at the very top; and the <code class=\"language-plaintext highlighter-rouge\">if</code> statements simply dispatch the flow of control to the right bits of code.</p>\n\n<p>That nested <code class=\"language-plaintext highlighter-rouge\">if</code> is a bit annoying. Let’s replace all that nesting with appropriate logic.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    while (true) {\n      boolean factorsRemain = n &gt; 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n      if (factorsRemain &amp;&amp; currentDivisorIsFactor) {\n          factors.add(d);\n          n /= d;\n      }\n      if (factorsRemain &amp;&amp; !currentDivisorIsFactor)\n          d++;\n      if (!factorsRemain)\n        return factors;\n    }\n  }\n</code></pre></div></div>\n\n<p>Now we have a nice outer loop that fully determines the execution path up front, and then selects the appropriate paths with a sequence of <code class=\"language-plaintext highlighter-rouge\">if</code> statements with no <code class=\"language-plaintext highlighter-rouge\">else</code> clauses.</p>\n\n<p>Indeed, we can improve upon this just a little bit more by using more explanatory variables to explicitly name those paths.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    while (true) {\n      boolean factorsRemain = n &gt; 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n  \n      boolean factorOutCurrentDivisor = factorsRemain &amp;&amp; \n                                        currentDivisorIsFactor;\n      boolean tryNextDivisor = factorsRemain &amp;&amp; !currentDivisorIsFactor;\n      boolean allDone = !factorsRemain;\n  \n      if (factorOutCurrentDivisor) {\n        factors.add(d);\n        n /= d;\n      }\n      if (tryNextDivisor) {\n        d++;\n      }\n      if (allDone)\n        return factors;\n    }\n  }\n</code></pre></div></div>\n\n<p>I think I can make this more interesting by using an <code class=\"language-plaintext highlighter-rouge\">enum</code> and a <code class=\"language-plaintext highlighter-rouge\">switch</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private enum State {Starting, Factoring, Searching, Done}\n\n  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    State state = State.Starting;\n    while (true) {\n      boolean factorsRemain = n &gt; 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n\n      if (factorsRemain &amp;&amp; currentDivisorIsFactor)\n        state = State.Factoring;\n      if (factorsRemain &amp;&amp; !currentDivisorIsFactor)\n        state = State.Searching;\n      if (!factorsRemain)\n        state = State.Done;\n\n      switch (state) {\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          break;\n        case Searching:\n          d++;\n          break;\n        case Done:\n          return factors;\n      }\n    }\n  }\n</code></pre></div></div>\n\n<p>Now let’s move the determination of the <em>next</em> state into each case.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    State state = State.Starting;\n    while (true) {\n      switch (state) {\n        case Starting:\n          if (n == 1)\n            state = State.Done;\n          else if (n % d == 0)\n            state = State.Factoring;\n          else\n            state = State.Searching;\n          break;\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          if (n == 1)\n            state = State.Done;\n          else if (n % d != 0)\n            state = State.Searching;\n          break;\n        case Searching:\n          d++;\n          if (n == 1)\n            state = State.Done;\n          else if (n % d == 0)\n            state = State.Factoring;\n          break;\n        case Done:\n          return factors;\n      }\n    }\n  }\n</code></pre></div></div>\n\n<p>Ugh.  I think we can improve upon this by moving a few things around and gettting rid of those explanatory variables.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  private List&lt;Integer&gt; factorsOf(int n, int d, List&lt;Integer&gt; factors) {\n    State state = State.Starting;\n    while (true) {\n      switch (state) {\n        case Starting:\n          break;\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          break;\n        case Searching:\n          d++;\n          break;\n        case Done:\n          return factors;\n      }\n\n      if (n == 1)\n        state = State.Done;\n      else if (n % d == 0)\n        state = State.Factoring;\n      else\n        state = State.Searching;\n    }\n  }\n</code></pre></div></div>\n\n<p>OK, So now the whole thing has been changed into a <a href=\"https://en.wikipedia.org/wiki/Moore_machine\">Moore</a> model finite state machine. The state transition diagram looks like this.</p>\n\n<p><img src=\"/assets/loopy/fsm.jpg\" width=\"300\" /></p>\n\n<p>If you look closely you can see the nested loops in that diagram.  They are the two transitions on the <code class=\"language-plaintext highlighter-rouge\">Searching</code> and <code class=\"language-plaintext highlighter-rouge\">Factoring</code> states that stay in the same state.  You can also see the how the two loops interconnect through the transitions between the <code class=\"language-plaintext highlighter-rouge\">Searching</code> and <code class=\"language-plaintext highlighter-rouge\">Factoring</code> states.  The <code class=\"language-plaintext highlighter-rouge\">Starting</code> state simply accepts <code class=\"language-plaintext highlighter-rouge\">n</code> from the outside world and initializes <code class=\"language-plaintext highlighter-rouge\">d</code> and <code class=\"language-plaintext highlighter-rouge\">factors</code>, and then dispatches to one of the other three states as appropriate.  The <code class=\"language-plaintext highlighter-rouge\">Done</code> state simply returns the <code class=\"language-plaintext highlighter-rouge\">factors</code> list.</p>\n\n<p>This is how Alan Turing envisioned computation in his <a href=\"https://www.cs.virginia.edu/~robins/Turing_Paper_1936.pdf\">1936 paper</a>, which you can read about in Charles Petzold’s wonderful book: <a href=\"https://www.amazon.com/Annotated-Turing-Through-Historic-Computability/dp/0470229055\">The Annotated Turing</a>.</p>\n\n<p>So, we’ve gone from a nice doubly nested loop in Java to a Turing style finite state machine simply through a sequence of refactorings, each of which kept all the tests passing.  This transformation from a standard procedure to a Turing style finite state machine could be done on any program at all.</p>\n\n<p>Now let’s go back to the two bits of code that started all this.  The Java version:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>public List&lt;Integer&gt; factorsOf(int n) {\n  ArrayList&lt;Integer&gt; factors = new ArrayList&lt;&gt;();\n\n  for (int d = 2; n &gt; 1; d++)\n    for (; n % d == 0; n /= d)\n      factors.add(d);\n\n  return factors;\n}\n</code></pre></div></div>\n\n<p>And the Clojure version:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime-factors [n]\n  (loop [n n d 2 factors []]\n          (if (&gt; n 1)\n            (if (zero? (mod n d))\n              (recur (/ n d) d (conj factors d))\n              (recur n (inc d) factors))\n            factors)))\n</code></pre></div></div>\n\n<p>The finite state machine is entirely hidden in the Java version isn’t it.  It’s very difficult to see it peaking out from those nested <code class=\"language-plaintext highlighter-rouge\">for</code> loops.  But that state machine is much more obvious in the Clojure program.  The state is determined by the two <code class=\"language-plaintext highlighter-rouge\">if</code> forms, and the appropriate code is executed for each state.</p>\n\n<p>If you can’t see that FSM in the Clojure code, then consider this simple refactoring which makes it even more evident:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn factors [n]\n  (loop [n n d 2 fs []]\n    (cond\n      (and (not= n 1) (zero? (mod n d)))       (recur (/ n d) d (conj fs d))\n      (and (not= n 1) (not (zero? (mod n d)))) (recur n (inc d) fs)\n      (= n 1)                                  fs)))\n</code></pre></div></div>\n\n<p>Why should this be?  Why should the Clojure program look more like the FSM than the Java program?  The answer is simple.  The Java program can save some state information <em>within</em> the flow of control, because it can mutate variables while the loops are in progress.  The Clojure program cannot save any state within the flow of control because no variables can be mutated at all.  Those state changes are only noticed when the recursive <code class=\"language-plaintext highlighter-rouge\">loop</code> is re-entered.</p>\n\n<p>Thus, functional programs tend to look much more like Finite State Machines than programs that are free to manipulate variables.</p>\n\n<p>One last thought.  The Java program that implemented the Finite State Machine had only one loop; and that loop was: <code class=\"language-plaintext highlighter-rouge\">while</code> <code class=\"language-plaintext highlighter-rouge\">(true)</code>.  That means the loop knew nothing at all about the algorithm it was looping.  Thus we can abstract it away from the program itself and envision a language that has no loops at all.  No <code class=\"language-plaintext highlighter-rouge\">while</code> statements, no <code class=\"language-plaintext highlighter-rouge\">for</code> loops, no <code class=\"language-plaintext highlighter-rouge\">if</code> statements, and (of course) no <code class=\"language-plaintext highlighter-rouge\">goto</code>s.  Programs in this language would be written in the FSM style.  They would be composed of switch statements that switched on boolean expressions that identified each state.  The language system would then simply execute that program, over and over, until told to stop.</p>\n\n<p>Such programs would be naturally functional.  For although they could mutate the state of variables, the mutated state would be irrelevant to the flow of control within the program, and could only affect the next iteration of the program.  In effect the program would look like a tail-call-optimized recursive function.</p>\n\n<p>Wait…  Did I miss the exit?</p>\n\n",
    "sanitized": "The following is a segment of a journey.  It has no obvious beginning point, nor does it actually end up anywhere.  The value, if any, is in the journey itself.\n\nThe code below is the standard solution to the Prime Factors Kata.\n\npublic List<Integer> factorsOf(int n) {\n  ArrayList<Integer> factors = new ArrayList<>();\n\n  for (int d = 2; n > 1; d++)\n    for (; n % d == 0; n /= d)\n      factors.add(d);\n\n  return factors;\n}\n\n\nHowever, I was doing this kata in Clojure the other day and I wound up with a different solution.  It looked like this:\n\n(defn prime-factors [n]\n  (loop [n n d 2 factors []]\n          (if (> n 1)\n            (if (zero? (mod n d))\n              (recur (/ n d) d (conj factors d))\n              (recur n (inc d) factors))\n            factors)))\n\n\nThe algorithm is pretty much the same.  I mean if you tracked the value of n, d, and factors they would go through the same changes.  On the other hand the code in Java is a doubly nested loop; but the code in Clojure is a single recursive loop with two recursion points.  That’s interesting.\n\nI could write the recursive algorithm in Java like this:\n\n  private List<Integer> factorsOf(int n) {\n    return factorsOf(n, 2, new ArrayList<Integer>());\n  }\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    if (n>1) {\n      if (n%d == 0) {\n        factors.add(d);\n        return factorsOf(n/d, d, factors);\n      } else {\n        return factorsOf(n, d+1, factors);\n      }\n    }\n    return factors;\n  }\n\n\nAnd then, since this is tail recursive, I could rewrite it as a straight loop.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    while (true) {\n      if (n > 1) {\n        if (n % d == 0) {\n          factors.add(d);\n          n /= d;\n        } else {\n          d++;\n        }\n      } else\n        return factors;\n    }\n  }\n\n\nFor all intents and purposes this code executes the same algorithm as the standard solution; but it does not have a doubly nested loop.  We have transformed the code from a doubly nested loop, to a single loop, without affecting the algorithm.\n\nIs this always possible?\n\nIn other words: given a program with a nested loop, is there a way to write the same program with a single loop?\n\nThe answer to that is: Yes.\n\nThe fact that a bit of code executes within an inner loop could be encoded into a state variable.  The outer loop could then dispatch to that bit of code depending upon how that state variable is set.\n\nWe see that in the code above.  The state condition for the inner loop is n%d==0.  Indeed, I can extract that out as a explanatory variable to make my point clearer.  I can also extract n>1.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    while (true) {\n      boolean factorsRemain = n > 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n      if (factorsRemain) {\n        if (currentDivisorIsFactor) {\n          factors.add(d);\n          n /= d;\n        } else {\n          d++;\n        }\n      } else\n        return factors;\n    }\n  }\n\n\nNow all the looping decisions are made at the very top; and the if statements simply dispatch the flow of control to the right bits of code.\n\nThat nested if is a bit annoying. Let’s replace all that nesting with appropriate logic.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    while (true) {\n      boolean factorsRemain = n > 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n      if (factorsRemain && currentDivisorIsFactor) {\n          factors.add(d);\n          n /= d;\n      }\n      if (factorsRemain && !currentDivisorIsFactor)\n          d++;\n      if (!factorsRemain)\n        return factors;\n    }\n  }\n\n\nNow we have a nice outer loop that fully determines the execution path up front, and then selects the appropriate paths with a sequence of if statements with no else clauses.\n\nIndeed, we can improve upon this just a little bit more by using more explanatory variables to explicitly name those paths.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    while (true) {\n      boolean factorsRemain = n > 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n  \n      boolean factorOutCurrentDivisor = factorsRemain && \n                                        currentDivisorIsFactor;\n      boolean tryNextDivisor = factorsRemain && !currentDivisorIsFactor;\n      boolean allDone = !factorsRemain;\n  \n      if (factorOutCurrentDivisor) {\n        factors.add(d);\n        n /= d;\n      }\n      if (tryNextDivisor) {\n        d++;\n      }\n      if (allDone)\n        return factors;\n    }\n  }\n\n\nI think I can make this more interesting by using an enum and a switch.\n\n  private enum State {Starting, Factoring, Searching, Done}\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    State state = State.Starting;\n    while (true) {\n      boolean factorsRemain = n > 1;\n      boolean currentDivisorIsFactor = n % d == 0;\n\n      if (factorsRemain && currentDivisorIsFactor)\n        state = State.Factoring;\n      if (factorsRemain && !currentDivisorIsFactor)\n        state = State.Searching;\n      if (!factorsRemain)\n        state = State.Done;\n\n      switch (state) {\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          break;\n        case Searching:\n          d++;\n          break;\n        case Done:\n          return factors;\n      }\n    }\n  }\n\n\nNow let’s move the determination of the next state into each case.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    State state = State.Starting;\n    while (true) {\n      switch (state) {\n        case Starting:\n          if (n == 1)\n            state = State.Done;\n          else if (n % d == 0)\n            state = State.Factoring;\n          else\n            state = State.Searching;\n          break;\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          if (n == 1)\n            state = State.Done;\n          else if (n % d != 0)\n            state = State.Searching;\n          break;\n        case Searching:\n          d++;\n          if (n == 1)\n            state = State.Done;\n          else if (n % d == 0)\n            state = State.Factoring;\n          break;\n        case Done:\n          return factors;\n      }\n    }\n  }\n\n\nUgh.  I think we can improve upon this by moving a few things around and gettting rid of those explanatory variables.\n\n  private List<Integer> factorsOf(int n, int d, List<Integer> factors) {\n    State state = State.Starting;\n    while (true) {\n      switch (state) {\n        case Starting:\n          break;\n        case Factoring:\n          factors.add(d);\n          n /= d;\n          break;\n        case Searching:\n          d++;\n          break;\n        case Done:\n          return factors;\n      }\n\n      if (n == 1)\n        state = State.Done;\n      else if (n % d == 0)\n        state = State.Factoring;\n      else\n        state = State.Searching;\n    }\n  }\n\n\nOK, So now the whole thing has been changed into a Moore model finite state machine. The state transition diagram looks like this.\n\n\n\nIf you look closely you can see the nested loops in that diagram.  They are the two transitions on the Searching and Factoring states that stay in the same state.  You can also see the how the two loops interconnect through the transitions between the Searching and Factoring states.  The Starting state simply accepts n from the outside world and initializes d and factors, and then dispatches to one of the other three states as appropriate.  The Done state simply returns the factors list.\n\nThis is how Alan Turing envisioned computation in his 1936 paper, which you can read about in Charles Petzold’s wonderful book: The Annotated Turing.\n\nSo, we’ve gone from a nice doubly nested loop in Java to a Turing style finite state machine simply through a sequence of refactorings, each of which kept all the tests passing.  This transformation from a standard procedure to a Turing style finite state machine could be done on any program at all.\n\nNow let’s go back to the two bits of code that started all this.  The Java version:\n\npublic List<Integer> factorsOf(int n) {\n  ArrayList<Integer> factors = new ArrayList<>();\n\n  for (int d = 2; n > 1; d++)\n    for (; n % d == 0; n /= d)\n      factors.add(d);\n\n  return factors;\n}\n\n\nAnd the Clojure version:\n\n(defn prime-factors [n]\n  (loop [n n d 2 factors []]\n          (if (> n 1)\n            (if (zero? (mod n d))\n              (recur (/ n d) d (conj factors d))\n              (recur n (inc d) factors))\n            factors)))\n\n\nThe finite state machine is entirely hidden in the Java version isn’t it.  It’s very difficult to see it peaking out from those nested for loops.  But that state machine is much more obvious in the Clojure program.  The state is determined by the two if forms, and the appropriate code is executed for each state.\n\nIf you can’t see that FSM in the Clojure code, then consider this simple refactoring which makes it even more evident:\n\n(defn factors [n]\n  (loop [n n d 2 fs []]\n    (cond\n      (and (not= n 1) (zero? (mod n d)))       (recur (/ n d) d (conj fs d))\n      (and (not= n 1) (not (zero? (mod n d)))) (recur n (inc d) fs)\n      (= n 1)                                  fs)))\n\n\nWhy should this be?  Why should the Clojure program look more like the FSM than the Java program?  The answer is simple.  The Java program can save some state information within the flow of control, because it can mutate variables while the loops are in progress.  The Clojure program cannot save any state within the flow of control because no variables can be mutated at all.  Those state changes are only noticed when the recursive loop is re-entered.\n\nThus, functional programs tend to look much more like Finite State Machines than programs that are free to manipulate variables.\n\nOne last thought.  The Java program that implemented the Finite State Machine had only one loop; and that loop was: while (true).  That means the loop knew nothing at all about the algorithm it was looping.  Thus we can abstract it away from the program itself and envision a language that has no loops at all.  No while statements, no for loops, no if statements, and (of course) no gotos.  Programs in this language would be written in the FSM style.  They would be composed of switch statements that switched on boolean expressions that identified each state.  The language system would then simply execute that program, over and over, until told to stop.\n\nSuch programs would be naturally functional.  For although they could mutate the state of variables, the mutated state would be irrelevant to the flow of control within the program, and could only affect the next iteration of the program.  In effect the program would look like a tail-call-optimized recursive function.\n\nWait…  Did I miss the exit?"
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/09/23/ConferenceConduct",
    "raw": "<p>It was just a few years ago, at the height of the <em>Me Too</em> revelations, that codes of conduct began to prominently appear in Software Conferences.  At the time I felt this was appropriate given the horror stories that had been circulating about sexual harassment and misbehavior at some of those conferences.  I wrote a <a href=\"http://blog.cleancoder.com/uncle-bob/2016/01/15/Manhandled.html\">blog</a> about it at the time.</p>\n\n<p>Since then I have seen the other side of the coin.  Codes of conduct have been used as weapons to exclude people on the basis of their political opinions, or on the basis of their associations, or just because someone didn’t like them.  I have written blogs about this as well.  <a href=\"http://blog.cleancoder.com/uncle-bob/2019/11/08/OpenLetterLinuxFoundation.html\">(1)</a>, <a href=\"http://blog.cleancoder.com/uncle-bob/2017/09/26/SierraJulietFoxtrot.html\">(2)</a></p>\n\n<p>As much as I think that codes of conduct are a good idea, we must not allow them to be weaponized.  If we are going to set up rules with consequences, then we also need to set up the the due processes by which those rules and consequences are adjudicated.  Otherwise the people who police the codes of conduct will be free of the due checks and balances that protect conference attendees and speakers from unfair and malicious actions.  As we have seen, such malicious and unfair actions have become all too common.</p>\n\n<p>It seems to me that if a conference is going to publish a code of conduct, like the one below, they must also publish the process by which alleged violations will be adjudicated.  That process must include provisions for the accused to be able to defend themselves against the allegation, and must also allow the accused to know the identity of the accuser(s).  Otherwise all conference attendees and speakers will be exposed to malicious and falsified complaints with no recourse to defend themselves.</p>\n\n<p>The conference I was <a href=\"http://blog.cleancoder.com/uncle-bob/2020/09/12/TheDisinvitation.html\">disinvited</a> from is over.  I was ejected because code of conduct complaints were registered against me by three relatively minor speakers in quick succession.  I do not know if those speakers acted in concert.  Nor am I certain of the identities of those speakers (though I have a good idea).  What I <em>do</em> know is that three or four weeks before the conference was to begin those speakers threatened to withdraw from the conference if I were allowed to speak.</p>\n\n<p>From what I have been able to discern, the conference organizers conducted an investigation.  I was not a party to this investigation, indeed I was unaware that it was taking place.  I was not notified about the complaints, nor was I given the opportunity to speak in my own defense.  The conference organizers simply judged me based upon the complaints and whatever they could discover for themselves.  I am quite certain that due diligence was not a requirement of the investigation.</p>\n\n<p>Given that they were volunteers, and that losing three speakers one month before the conference is a considerable blow, it’s not hard to imagine that the conference organizers were under a fair bit of pressure to resolve the issue quickly and salvage as many speakers as possible.  What’s more, the conference had already extracted as much value as it could from my image being emblazoned on their website and on the mailers they sent out two days before the start of the conference.  So the decision to eject me must have been pretty easy.</p>\n\n<p>What was the code of conduct violation?  Apparently it related to something on twitter.  I have read the code of conduct and the only potential violation I can see falls under the following rule.</p>\n\n<blockquote>\n  <p><em>Any form of written, social media, or verbal communication that can be offensive or harassing to any attendee, speaker or staff is not allowed at Chicago Cloud Conference.</em></p>\n</blockquote>\n\n<p>That’s quite a standard.  I don’t think any of us could withstand it.  We’ve all said or written things that have offended, or could offend <em>someone</em>. I’ve had people get offended about my definition of monads.  I’ve had people get upset with me about the SOLID principles, or my position on TDD, or my criticisms of statically typed languages.  Some people may even have been offended by my infrequent comments about current politics.</p>\n\n<p>As written, this rule means that anybody can complain about anything you might have said or written, at any time in the past.  The only qualification for violation is that <em>someone</em> finds it offensive.</p>\n\n<p>What’s more, since there is no published process of adjudication, you may well find that if a complaint is made against you, you will <em>not</em> be able to defend yourself, in any way.  An individual, or a small group of people, whom you do not know, will vote in secret, without your knowledge, and without your input. If they decide against you, you will be ejected from the conference, without refund, and without recourse.</p>\n\n<p>In short this means that if someone doesn’t like you, they can get you kicked out – and there’s nothing you can do about it.  In my case three speakers apparently didn’t like something I said on twitter.  So they extorted the conference organizers who bowed under the weight of that extortion and disinvited me without giving me the opportunity to address the complaints.</p>\n\n<p>My solution to this is simple:</p>\n\n<blockquote>\n  <p><em>From now on I will not agree to attend, nor will I agree to speak at, any conference that publishes a code of conduct but does not have a published process for adjudicating code of conduct complaints.  That process must include a means for those accused of a violation to defend themselves from the malicious actions of others, and must allow them to know who their accusers are.</em></p>\n</blockquote>\n\n<p>I recommend that you all adopt the same policy.</p>\n\n<hr />\n\n<blockquote>\n  <p><strong>Code Of Conduct</strong></p>\n</blockquote>\n\n<blockquote>\n  <p>Chicago Cloud Conference is dedicated to providing a harassment-free conference experience for everyone, regardless of gender, sexual orientation, disability, physical appearance, body size, race, or religion. We have a zero-tolerance policy for any harassment of conference participants in any form. Sexual language and imagery is not appropriate for any conference venue, including talks. Conference participants violating these rules may be sanctioned or expelled from the conference without a refund at the discretion of the conference organizers.</p>\n</blockquote>\n\n<blockquote>\n  <p>Any form of written, social media, or verbal communication that can be offensive or harassing to any attendee, speaker or staff is not allowed at Chicago Cloud Conference. Please inform a Chicago Cloud Conference staff member if you feel a violation has taken place and the conference leadership team will address the situation.</p>\n</blockquote>\n\n<blockquote>\n  <p>Harassment includes offensive verbal comments related to gender, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention. Participants asked to stop any harassing behavior are expected to comply immediately.\nExhibitors in the expo hall, sponsor or vendor booths, or similar activities are also subject to the anti-harassment policy. In particular, exhibitors should not use sexualized images, activities, or other material. Booth staff (including volunteers) should not use sexualized clothing/uniforms/costumes, or otherwise create a sexualized environment.</p>\n</blockquote>\n\n<blockquote>\n  <p>If a participant engages in harassing behavior, the conference organizers may take any action they deem appropriate, including warning the offender or expulsion from the conference with no refund. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of conference staff immediately. Conference staff can be identified by t-shirts and special badges.\nConference staff will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the conference. We value your attendance.</p>\n</blockquote>\n\n<blockquote>\n  <p>We expect participants to follow these rules at all conference venues and conference-related social events.</p>\n</blockquote>\n\n<blockquote>\n  <p>Chicago Cloud Conference prioritizes marginalized people’s safety over privileged people’s comfort and therefore we will not act on complaints regarding:\n‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’.\nReasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”.\nCommunicating in a ‘tone’ you don’t find congenial.\nCriticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions.</p>\n</blockquote>\n\n<blockquote>\n  <p>What to do when you witness a Code of Conduct violation?</p>\n</blockquote>\n\n<blockquote>\n  <p>All reports of incidents are confidential! We will not publish the name of the reporter in any way.\nSpeak up</p>\n</blockquote>\n\n<blockquote>\n  <p>Of course we do not want you do get into a more uncomfortable position as you maybe already are. You do not need to interact with the person(s) who presumably violated the Code of Conduct.  Please let someone of the organizing team know</p>\n</blockquote>\n\n<blockquote>\n  <p>In every session, you will find one track host (the person introducing the speakers) and at least one crew member (wearing a colorful shirt with the word “crew” on it). All people who are working on Chicago Cloud Conference are very aware of the Code of Conduct.\nApproach them and let them know. In most cases they will bring you to one of the main organizers, so we can write an incident report.\nWho What were the circumstances that led to the incident?\nWhen?</p>\n</blockquote>\n\n<blockquote>\n  <p>Everyone working on Chicago Cloud Conference is informed on how to deal with an incident and how to further proceed with the situation.</p>\n</blockquote>\n\n<blockquote>\n  <p>The Purpose of the Code of Conduct:</p>\n</blockquote>\n\n<blockquote>\n  <p>By signaling inclusivity and diversity as values we expect the conference to uphold, the Code of Conduct helps guarantee that the event will indeed be inclusive and embrace diversity.</p>\n</blockquote>\n\n",
    "sanitized": "It was just a few years ago, at the height of the Me Too revelations, that codes of conduct began to prominently appear in Software Conferences.  At the time I felt this was appropriate given the horror stories that had been circulating about sexual harassment and misbehavior at some of those conferences.  I wrote a blog about it at the time.\n\nSince then I have seen the other side of the coin.  Codes of conduct have been used as weapons to exclude people on the basis of their political opinions, or on the basis of their associations, or just because someone didn’t like them.  I have written blogs about this as well.  (1), (2)\n\nAs much as I think that codes of conduct are a good idea, we must not allow them to be weaponized.  If we are going to set up rules with consequences, then we also need to set up the the due processes by which those rules and consequences are adjudicated.  Otherwise the people who police the codes of conduct will be free of the due checks and balances that protect conference attendees and speakers from unfair and malicious actions.  As we have seen, such malicious and unfair actions have become all too common.\n\nIt seems to me that if a conference is going to publish a code of conduct, like the one below, they must also publish the process by which alleged violations will be adjudicated.  That process must include provisions for the accused to be able to defend themselves against the allegation, and must also allow the accused to know the identity of the accuser(s).  Otherwise all conference attendees and speakers will be exposed to malicious and falsified complaints with no recourse to defend themselves.\n\nThe conference I was disinvited from is over.  I was ejected because code of conduct complaints were registered against me by three relatively minor speakers in quick succession.  I do not know if those speakers acted in concert.  Nor am I certain of the identities of those speakers (though I have a good idea).  What I do know is that three or four weeks before the conference was to begin those speakers threatened to withdraw from the conference if I were allowed to speak.\n\nFrom what I have been able to discern, the conference organizers conducted an investigation.  I was not a party to this investigation, indeed I was unaware that it was taking place.  I was not notified about the complaints, nor was I given the opportunity to speak in my own defense.  The conference organizers simply judged me based upon the complaints and whatever they could discover for themselves.  I am quite certain that due diligence was not a requirement of the investigation.\n\nGiven that they were volunteers, and that losing three speakers one month before the conference is a considerable blow, it’s not hard to imagine that the conference organizers were under a fair bit of pressure to resolve the issue quickly and salvage as many speakers as possible.  What’s more, the conference had already extracted as much value as it could from my image being emblazoned on their website and on the mailers they sent out two days before the start of the conference.  So the decision to eject me must have been pretty easy.\n\nWhat was the code of conduct violation?  Apparently it related to something on twitter.  I have read the code of conduct and the only potential violation I can see falls under the following rule.\n\n\n  Any form of written, social media, or verbal communication that can be offensive or harassing to any attendee, speaker or staff is not allowed at Chicago Cloud Conference.\n\n\nThat’s quite a standard.  I don’t think any of us could withstand it.  We’ve all said or written things that have offended, or could offend someone. I’ve had people get offended about my definition of monads.  I’ve had people get upset with me about the SOLID principles, or my position on TDD, or my criticisms of statically typed languages.  Some people may even have been offended by my infrequent comments about current politics.\n\nAs written, this rule means that anybody can complain about anything you might have said or written, at any time in the past.  The only qualification for violation is that someone finds it offensive.\n\nWhat’s more, since there is no published process of adjudication, you may well find that if a complaint is made against you, you will not be able to defend yourself, in any way.  An individual, or a small group of people, whom you do not know, will vote in secret, without your knowledge, and without your input. If they decide against you, you will be ejected from the conference, without refund, and without recourse.\n\nIn short this means that if someone doesn’t like you, they can get you kicked out – and there’s nothing you can do about it.  In my case three speakers apparently didn’t like something I said on twitter.  So they extorted the conference organizers who bowed under the weight of that extortion and disinvited me without giving me the opportunity to address the complaints.\n\nMy solution to this is simple:\n\n\n  From now on I will not agree to attend, nor will I agree to speak at, any conference that publishes a code of conduct but does not have a published process for adjudicating code of conduct complaints.  That process must include a means for those accused of a violation to defend themselves from the malicious actions of others, and must allow them to know who their accusers are.\n\n\nI recommend that you all adopt the same policy.\n\n\n\n\n  Code Of Conduct\n\n\n\n  Chicago Cloud Conference is dedicated to providing a harassment-free conference experience for everyone, regardless of gender, sexual orientation, disability, physical appearance, body size, race, or religion. We have a zero-tolerance policy for any harassment of conference participants in any form. Sexual language and imagery is not appropriate for any conference venue, including talks. Conference participants violating these rules may be sanctioned or expelled from the conference without a refund at the discretion of the conference organizers.\n\n\n\n  Any form of written, social media, or verbal communication that can be offensive or harassing to any attendee, speaker or staff is not allowed at Chicago Cloud Conference. Please inform a Chicago Cloud Conference staff member if you feel a violation has taken place and the conference leadership team will address the situation.\n\n\n\n  Harassment includes offensive verbal comments related to gender, sexual orientation, disability, physical appearance, body size, race, religion; sexual images in public spaces; deliberate intimidation; stalking; following; harassing photography or recording; sustained disruption of talks or other events; inappropriate physical contact; and unwelcome sexual attention. Participants asked to stop any harassing behavior are expected to comply immediately.\nExhibitors in the expo hall, sponsor or vendor booths, or similar activities are also subject to the anti-harassment policy. In particular, exhibitors should not use sexualized images, activities, or other material. Booth staff (including volunteers) should not use sexualized clothing/uniforms/costumes, or otherwise create a sexualized environment.\n\n\n\n  If a participant engages in harassing behavior, the conference organizers may take any action they deem appropriate, including warning the offender or expulsion from the conference with no refund. If you are being harassed, notice that someone else is being harassed, or have any other concerns, please contact a member of conference staff immediately. Conference staff can be identified by t-shirts and special badges.\nConference staff will be happy to help participants contact hotel/venue security or local law enforcement, provide escorts, or otherwise assist those experiencing harassment to feel safe for the duration of the conference. We value your attendance.\n\n\n\n  We expect participants to follow these rules at all conference venues and conference-related social events.\n\n\n\n  Chicago Cloud Conference prioritizes marginalized people’s safety over privileged people’s comfort and therefore we will not act on complaints regarding:\n‘Reverse’ -isms, including ‘reverse racism,’ ‘reverse sexism,’ and ‘cisphobia’.\nReasonable communication of boundaries, such as “leave me alone,” “go away,” or “I’m not discussing this with you”.\nCommunicating in a ‘tone’ you don’t find congenial.\nCriticizing racist, sexist, cissexist, or otherwise oppressive behavior or assumptions.\n\n\n\n  What to do when you witness a Code of Conduct violation?\n\n\n\n  All reports of incidents are confidential! We will not publish the name of the reporter in any way.\nSpeak up\n\n\n\n  Of course we do not want you do get into a more uncomfortable position as you maybe already are. You do not need to interact with the person(s) who presumably violated the Code of Conduct.  Please let someone of the organizing team know\n\n\n\n  In every session, you will find one track host (the person introducing the speakers) and at least one crew member (wearing a colorful shirt with the word “crew” on it). All people who are working on Chicago Cloud Conference are very aware of the Code of Conduct.\nApproach them and let them know. In most cases they will bring you to one of the main organizers, so we can write an incident report.\nWho What were the circumstances that led to the incident?\nWhen?\n\n\n\n  Everyone working on Chicago Cloud Conference is informed on how to deal with an incident and how to further proceed with the situation.\n\n\n\n  The Purpose of the Code of Conduct:\n\n\n\n  By signaling inclusivity and diversity as values we expect the conference to uphold, the Code of Conduct helps guarantee that the event will indeed be inclusive and embrace diversity."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/09/12/TheDisinvitation",
    "raw": "<p>I have a friend, in the Chicago area, who calls me up two or three times a year to ask me to give a talk at a User Group, or a conference he’s involved with, or something like that.  If my schedule is free I always say yes. I don’t charge anything because I enjoy supporting the Chicago software community, and it’s never a bad thing to get my face out in front of new people.  I am a consultant, after all, and giving pro-bono talks is one of the ways I promote myself.</p>\n\n<p>Anyway, he wrote to me last October (That’s right, a full year ago!) and asked me to give a presentation at a Chicago conference this September 21st.  I agreed, and he thanked me, and that was that.  Then, in June, he wrote to tell me that the conference was going to be virtual due to Covid.  I acknowledged and, once again, that was that.</p>\n\n<p>Last Wednesday, September 9th, twelve days before the conference, he called me on the phone and said:</p>\n\n<blockquote>\n  <p><em>“This is going to be the most uncomfortable phone call I have ever made.”</em></p>\n</blockquote>\n\n<p>He went on to say that the “Code of Conduct” people at the conference were concerened about some of my political opinions, and that some of the speakers of the conference refused to speak if I was going to speak.</p>\n\n<p>Like I said, this guy is a friend of mine, and I don’t want to get him into any trouble, so I decided not to raise a fuss about it, and I promised him I would not mention his name or the name of the conference on line.  He responded by telling me:</p>\n\n<blockquote>\n  <p><em>I’m scared to death of these people.</em></p>\n</blockquote>\n\n<p>Over the last few days I’ve been mulling this situation over in my mind, and I’ve come to a few interesting conclusions.</p>\n\n<ol>\n  <li><strong>The conference organizers are in breach of contract.</strong></li>\n</ol>\n\n<p>OK, we didn’t have a formal written contract, but we had emails.  And we also had the fact that, for the better part of a year, the conference website had my picture on it, and advertised me as a speaker.  I conclude that the conference organizers derived substantial benefit from those pictures and from promising my virtual presence to their audience.  I, on the other hand, was denied the benefit of actually speaking to that audience.  Therefore, I am the damaged party.</p>\n\n<p>Could I sue them?  Certainly, though I’d have a difficult time quantifying the damages.  Had we agreed on a speaking fee, I could at least claim that fee as damages.  Next time I do one of these pro-bono events I’ll have the organizers agree to paying a hefty cancellation fee.</p>\n\n<ol>\n  <li><strong>The speakers who refused to speak if I spoke are guilty of <em>tortious interference</em>.</strong></li>\n</ol>\n\n<p>Those speakers would not have been harmed by speaking in a virtual conference that I also spoke in.  Their intent was to damage me by forcing the conference organizers to breach their contract with me.  That is the definition of tortious interference.</p>\n\n<p>Could I sue them?  Certainly.  I won’t, for the same reason that I’m not going to sue the conference organizers.  And, frankly, suing people for such small potatoes just isn’t worth the trouble.  But, like I said, next time I do a pro-bono talk I’ll have the conference organizers agree to the value that I’m deriving in return for using my name and likeness on their website.  Then I can sue them, and any tortious interferers, for that sum and punitive damages too.</p>\n\n<p>Do I know who those tortiously interfering speakers are?  I’ve got a pretty good idea.  Myfear of course is that I do not wish to harm my friend.  Nor do I wish to harm the conference organizers, nor the Chicago Software community.  It seems to me that they are all victims of those revolting speakers.</p>\n\n<p>So, this time, I’ll let the legal options rest.  Instead, I’m offering a virtual <a href=\"https://us02web.zoom.us/webinar/register/WN_Q5Fi-nWkRM6sdhNVY3r6VQ\">free talk</a> at 10:00 AM CDT, on September 21st, the first day of the conference.  Those who wanted to hear me speak, still can.</p>\n\n<p>The last point I’d like to make is this:</p>\n\n<blockquote>\n  <p><em>Disinviting someone from a virtual conference who can draw a potentially large audience away from that virtual conference is not a particularly intelligent tactic.</em></p>\n</blockquote>\n\n",
    "sanitized": "I have a friend, in the Chicago area, who calls me up two or three times a year to ask me to give a talk at a User Group, or a conference he’s involved with, or something like that.  If my schedule is free I always say yes. I don’t charge anything because I enjoy supporting the Chicago software community, and it’s never a bad thing to get my face out in front of new people.  I am a consultant, after all, and giving pro-bono talks is one of the ways I promote myself.\n\nAnyway, he wrote to me last October (That’s right, a full year ago!) and asked me to give a presentation at a Chicago conference this September 21st.  I agreed, and he thanked me, and that was that.  Then, in June, he wrote to tell me that the conference was going to be virtual due to Covid.  I acknowledged and, once again, that was that.\n\nLast Wednesday, September 9th, twelve days before the conference, he called me on the phone and said:\n\n\n  “This is going to be the most uncomfortable phone call I have ever made.”\n\n\nHe went on to say that the “Code of Conduct” people at the conference were concerened about some of my political opinions, and that some of the speakers of the conference refused to speak if I was going to speak.\n\nLike I said, this guy is a friend of mine, and I don’t want to get him into any trouble, so I decided not to raise a fuss about it, and I promised him I would not mention his name or the name of the conference on line.  He responded by telling me:\n\n\n  I’m scared to death of these people.\n\n\nOver the last few days I’ve been mulling this situation over in my mind, and I’ve come to a few interesting conclusions.\n\n\n  The conference organizers are in breach of contract.\n\n\nOK, we didn’t have a formal written contract, but we had emails.  And we also had the fact that, for the better part of a year, the conference website had my picture on it, and advertised me as a speaker.  I conclude that the conference organizers derived substantial benefit from those pictures and from promising my virtual presence to their audience.  I, on the other hand, was denied the benefit of actually speaking to that audience.  Therefore, I am the damaged party.\n\nCould I sue them?  Certainly, though I’d have a difficult time quantifying the damages.  Had we agreed on a speaking fee, I could at least claim that fee as damages.  Next time I do one of these pro-bono events I’ll have the organizers agree to paying a hefty cancellation fee.\n\n\n  The speakers who refused to speak if I spoke are guilty of tortious interference.\n\n\nThose speakers would not have been harmed by speaking in a virtual conference that I also spoke in.  Their intent was to damage me by forcing the conference organizers to breach their contract with me.  That is the definition of tortious interference.\n\nCould I sue them?  Certainly.  I won’t, for the same reason that I’m not going to sue the conference organizers.  And, frankly, suing people for such small potatoes just isn’t worth the trouble.  But, like I said, next time I do a pro-bono talk I’ll have the conference organizers agree to the value that I’m deriving in return for using my name and likeness on their website.  Then I can sue them, and any tortious interferers, for that sum and punitive damages too.\n\nDo I know who those tortiously interfering speakers are?  I’ve got a pretty good idea.  Myfear of course is that I do not wish to harm my friend.  Nor do I wish to harm the conference organizers, nor the Chicago Software community.  It seems to me that they are all victims of those revolting speakers.\n\nSo, this time, I’ll let the legal options rest.  Instead, I’m offering a virtual free talk at 10:00 AM CDT, on September 21st, the first day of the conference.  Those who wanted to hear me speak, still can.\n\nThe last point I’d like to make is this:\n\n\n  Disinviting someone from a virtual conference who can draw a potentially large audience away from that virtual conference is not a particularly intelligent tactic."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/05/27/ReplDrivenDesign",
    "raw": "<p>If you follow me on facebook you know that I’ve been publishing daily CoronaVirus statistics. I generate these statistics using the daily updates in the Johns Hopkins github <a href=\"https://github.com/CSSEGISandData/COVID-19\">repository</a>.</p>\n\n<p>At first I just hand copied the data into a spreadsheet.  But that became tedious quite rapidly.</p>\n\n<p>Then, in late March, I wrote a little Clojure program to extract and process the data.  Every morning I pull the repo, and then run my little program.  It reads the files, does the math, and prints the results.</p>\n\n<p>Of course I used TDD to write this little program.</p>\n\n<p>But over the last several weeks I’ve made quite a few small modifications to the program; and it has grown substantially.  In making these adaptations I chose to use a different discipline:  REPL Driven Design.</p>\n\n<p>REPL Driven Design is quite popular in Clojure circles.  It’s also quite seductive.  The idea is that you try some experiments in the REPL to make sure you’ve got the right ideas.  Then you write a function in your code using those idea.  Finally, you test that function by invoking it at the REPL.</p>\n\n<p>It turns out that this is a very satisfying way to work.  The cycle time – the time between a code experiment and the test at the REPL – is nearly as small as TDD.  This breeds lots of confidence in the solution.  It also seems to save the time needed to mock, and create fake data because, at least in my case, I could use real production data in my REPL tests.  So, overall, it felt like I was moving faster than I would have with TDD.</p>\n\n<p>But then, in late April, I wanted to do something a little more complicated than usual.  It required a design change to my basic structure.  And suddenly I found myself full of fear.  I had no way to ensure that those design changes wouldn’t leave the system broken in some way.  If I made those changes, I’d have to examine every output to make sure that none of them had broken. So I postponed the change until I could muster the courage, and set aside the dedicated time it would require.</p>\n\n<p>The change was not too painful.  Clojure is an easy language to work with.  But the verfication was not trivial, which led me to deploy the program with a small bug – a bug I caught 4 days later.  That bug forced me to go back and correct the data and graphs that I generated.</p>\n\n<p>Why did I need the design change?  Because I was not mocking and creating fake data.  My functions just read from the repo files directly.  There was no way to pass them fake data.  The design change I needed to make was precisely the same as the design change that I’d have needed for mocking and fake data.</p>\n\n<p>Had I stuck with the TDD discipline I would have automatically made that design change, and I would not have faced the fear, the delay, and the error.</p>\n\n<p>Is it ironic that the very design change that TDD would have forced upon me was the design change I eventually needed?  Not at all. The decoupling that TDD forces upon us in order to pass isolated inputs and gather isolated outputs is almost always the design that fascilitates flexibility and promotes change.</p>\n\n<p>So I’ve learned my lesson.  REPL driven development feels easier and faster than TDD; but it is not.  Next time, it’s back to TDD for me.</p>\n\n",
    "sanitized": "If you follow me on facebook you know that I’ve been publishing daily CoronaVirus statistics. I generate these statistics using the daily updates in the Johns Hopkins github repository.\n\nAt first I just hand copied the data into a spreadsheet.  But that became tedious quite rapidly.\n\nThen, in late March, I wrote a little Clojure program to extract and process the data.  Every morning I pull the repo, and then run my little program.  It reads the files, does the math, and prints the results.\n\nOf course I used TDD to write this little program.\n\nBut over the last several weeks I’ve made quite a few small modifications to the program; and it has grown substantially.  In making these adaptations I chose to use a different discipline:  REPL Driven Design.\n\nREPL Driven Design is quite popular in Clojure circles.  It’s also quite seductive.  The idea is that you try some experiments in the REPL to make sure you’ve got the right ideas.  Then you write a function in your code using those idea.  Finally, you test that function by invoking it at the REPL.\n\nIt turns out that this is a very satisfying way to work.  The cycle time – the time between a code experiment and the test at the REPL – is nearly as small as TDD.  This breeds lots of confidence in the solution.  It also seems to save the time needed to mock, and create fake data because, at least in my case, I could use real production data in my REPL tests.  So, overall, it felt like I was moving faster than I would have with TDD.\n\nBut then, in late April, I wanted to do something a little more complicated than usual.  It required a design change to my basic structure.  And suddenly I found myself full of fear.  I had no way to ensure that those design changes wouldn’t leave the system broken in some way.  If I made those changes, I’d have to examine every output to make sure that none of them had broken. So I postponed the change until I could muster the courage, and set aside the dedicated time it would require.\n\nThe change was not too painful.  Clojure is an easy language to work with.  But the verfication was not trivial, which led me to deploy the program with a small bug – a bug I caught 4 days later.  That bug forced me to go back and correct the data and graphs that I generated.\n\nWhy did I need the design change?  Because I was not mocking and creating fake data.  My functions just read from the repo files directly.  There was no way to pass them fake data.  The design change I needed to make was precisely the same as the design change that I’d have needed for mocking and fake data.\n\nHad I stuck with the TDD discipline I would have automatically made that design change, and I would not have faced the fear, the delay, and the error.\n\nIs it ironic that the very design change that TDD would have forced upon me was the design change I eventually needed?  Not at all. The decoupling that TDD forces upon us in order to pass isolated inputs and gather isolated outputs is almost always the design that fascilitates flexibility and promotes change.\n\nSo I’ve learned my lesson.  REPL driven development feels easier and faster than TDD; but it is not.  Next time, it’s back to TDD for me."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/04/09/ALittleMoreClojure",
    "raw": "<p>So let’s learn just a little bit more of Clojure.</p>\n\n<p>Here are a few common utility functions:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (inc 1) ; increments argument\n2\nuser=&gt; (dec 3) ; decrements argument\n2\nuser=&gt; (empty? []) ; tests for empty\ntrue\nuser=&gt; (empty? [1 2])\nfalse\n</code></pre></div></div>\n\n<p>If you know Java or C# you probably know what the <code class=\"language-plaintext highlighter-rouge\">map</code> function does.  Here’s an example: <code class=\"language-plaintext highlighter-rouge\">(map inc [1 2 3])</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">(2 3 4)</code>.<br />\nThe first argument of map is a function.  The second is a list.  The <code class=\"language-plaintext highlighter-rouge\">map</code> function returns a new list by applying the function to every element of the input list.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">filter</code> function also takes a function and a list.  <code class=\"language-plaintext highlighter-rouge\">(filter odd? [1 2 3 4 5])</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">(1 3 5)</code>.  From that I think you can tell what both the <code class=\"language-plaintext highlighter-rouge\">filter</code> and the <code class=\"language-plaintext highlighter-rouge\">odd?</code> functions do.</p>\n\n<p>And so with that, let’s try a little challenge.  Let’s find all the prime numbers between one and a thousand.</p>\n\n<p>We’ll use a variant of TDD to do this.  Our eyes will be the tests.  The cycle will be the same size as normal TDD; but we’ll write a bit of code first and then test it.</p>\n\n<blockquote>\n  <p><em>I know.  Blashphemy!  So sue me.  ;-)</em></p>\n</blockquote>\n\n<p>We begin like this: <code class=\"language-plaintext highlighter-rouge\">(defn primes [n] )</code>  This returns <code class=\"language-plaintext highlighter-rouge\">nil</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (primes 1000)\nnil\n</code></pre></div></div>\n\n<p>Now let’s get all the numbers between 1 and <code class=\"language-plaintext highlighter-rouge\">n</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn primes [n]\n  (range 1 (inc n)))\n\nuser=&gt; (primes 10)\n(1 2 3 4 5 6 7 8 9 10)\n</code></pre></div></div>\n\n<p>You’ve probably figured out what <code class=\"language-plaintext highlighter-rouge\">range</code> does.  It just returns a list of all the integers between it’s arguments.</p>\n\n<p>OK, so now all we have to do is filter all the primes:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn primes [n]\n  (let [candidates (range 1 (inc n))]\n    (filter prime? candidates)))\n\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: prime? in this context, compiling:(null:3:5)\n</code></pre></div></div>\n\n<p>Oh, oh.  We need to implement <code class=\"language-plaintext highlighter-rouge\">prime?</code></p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n])\n\nuser=&gt; (primes 10)\n()\n</code></pre></div></div>\n\n<p>OK, that makes sense.  But I should explain the <code class=\"language-plaintext highlighter-rouge\">let</code> function.  It allows you to create names that are bound to expressions.  The names exist only within the parentheses of the <code class=\"language-plaintext highlighter-rouge\">let</code> expression.  So it’s a way to create local variables – though the word “variable” is not quite right because they cannot be reassigned.  They are immutable.</p>\n\n<p>Now how do we tell if a given integer <code class=\"language-plaintext highlighter-rouge\">n</code> is prime?  Well, you all know how to do that, right?  The simple and naive way is to divide the integer by every number between 2 and <code class=\"language-plaintext highlighter-rouge\">n</code>.  But, of course that’s wasteful.  There’s a better upper limit to try which is the square root of <code class=\"language-plaintext highlighter-rouge\">n</code>.  I’m sure you can work out why that’s true.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n]\n  (let [sqrt (Math/sqrt n)]\n     sqrt))\n \nuser=&gt; (prime? 100)\n10.0\n</code></pre></div></div>\n\n<p>OK, that’s right.  Notice that we called the Java <code class=\"language-plaintext highlighter-rouge\">Math.sqrt</code> function.  That’s a good example of how Clojure can call down into the Java libraries).  Of course we don’t want <code class=\"language-plaintext highlighter-rouge\">prime?</code> to return a number; we want it to return a boolean.  But for now it’s good to see the intermediate values of our computation.</p>\n\n<p>So, next we’d like to get all the integers between 2 and the square root.  We already know how to do that.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))]\n     divisors))\n \n user=&gt; (prime? 100)\n (2 3 4 5 6 7 8 9 10)\n</code></pre></div></div>\n\n<p>Now which of the <code class=\"language-plaintext highlighter-rouge\">divisors</code>\tdivide <code class=\"language-plaintext highlighter-rouge\">n</code> evenly?  We can find out by using the <code class=\"language-plaintext highlighter-rouge\">map</code> function.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n        remainders (map (fn [x] (rem n x)) divisors)]\n   remainders))\n \nuser=&gt; (prime? 100)\n(0 1 0 0 4 2 4 1 0)\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">rem</code> function should be self-explanatory; it just returns the integer remainder of the division of <code class=\"language-plaintext highlighter-rouge\">n</code> by <code class=\"language-plaintext highlighter-rouge\">x</code>.  The <code class=\"language-plaintext highlighter-rouge\">(fn [x]...)</code> business needs a little explanation.  Notice how similar it is to <code class=\"language-plaintext highlighter-rouge\">defn f [x]</code>?  This is how we create an anonymous function.  If you know the syntax in Java or C# for anonymous functions, then this shouldn’t be too much of a surprise to you.  Anyway, the remainders list is just the list of all the remainders that result from dividing <code class=\"language-plaintext highlighter-rouge\">n</code> by the <code class=\"language-plaintext highlighter-rouge\">divisors</code>.</p>\n\n<p>Now some of those remainders were zero, and that means they divided <code class=\"language-plaintext highlighter-rouge\">n</code> evenly.  Therefore <code class=\"language-plaintext highlighter-rouge\">n</code> (100 in this case) is not prime.  Let’s try a few others.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (prime? 17)\n(1 2 1 2)\nuser=&gt; (prime? 1001)\n(1 2 1 1 5 0 1 2 1 0 5 0 7 11 9 15 11 13 1 14 11 12 17 1 13 2 21 15 11 9 9)\nuser=&gt; (prime? 37)\n(1 1 1 2 1 2)\n</code></pre></div></div>\n\n<p>OK, so if the remainders list has a zero in it, then <code class=\"language-plaintext highlighter-rouge\">n</code> is not prime.  Well, that should be easy, shouldn’t it?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n        remainders (map (fn [x] (rem n x)) divisors)\n        zeroes (filter zero? remainders)]\n     zeroes))\n \nuser=&gt; (prime? 100)\n(0 0 0 0)\nuser=&gt; (prime? 17)\n()\t \n</code></pre></div></div>\n\n<p>So now all we need to do is return <code class=\"language-plaintext highlighter-rouge\">true</code> if the list is empty.  Right?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n\t\tremainders (map (fn [x] (rem n x)) divisors)\n\t\tzeroes (filter zero? remainders)]\n     (empty? zeroes)))\n\nuser=&gt; (prime? 100)\nfalse\nuser=&gt; (prime? 17)\ntrue\nuser=&gt; (primes 100)\n(1 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)\t\n</code></pre></div></div>\n\n<p>Now I want you to think carefully about how we solved this problem.  No <code class=\"language-plaintext highlighter-rouge\">if</code> statements.  No <code class=\"language-plaintext highlighter-rouge\">while</code> loops.  Instead we envisioned lists of data flowing through filters and mappers.  The solution was almost more of a fluid dynamics problem than a software problem.  (Ok, that’s a stretch, but you get my meaning.)  Instead of imagining a procedural solution, we imagine a data-flow solution.</p>\n\n<p>Think hard on this – it is one of the keys to functional programming.</p>\n\n<p>(Special thanks to Stu Halloway @stuarthalloway for cluing me into the dataflow mindset way back in 2005)</p>\n\n<p>Oh, and the primes between 1 and 1000?</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (primes 1000)\n(1 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997)\n</code></pre></div></div>\n\n<blockquote>\n  <p><em>And, yes, there is a bug.  1 is not prime.  2 is prime.  Can you fix it?</em></p>\n</blockquote>\n\n",
    "sanitized": "So let’s learn just a little bit more of Clojure.\n\nHere are a few common utility functions:\n\nuser=> (inc 1) ; increments argument\n2\nuser=> (dec 3) ; decrements argument\n2\nuser=> (empty? []) ; tests for empty\ntrue\nuser=> (empty? [1 2])\nfalse\n\n\nIf you know Java or C# you probably know what the map function does.  Here’s an example: (map inc [1 2 3]) evaluates to (2 3 4).\nThe first argument of map is a function.  The second is a list.  The map function returns a new list by applying the function to every element of the input list.\n\nThe filter function also takes a function and a list.  (filter odd? [1 2 3 4 5]) evaluates to (1 3 5).  From that I think you can tell what both the filter and the odd? functions do.\n\nAnd so with that, let’s try a little challenge.  Let’s find all the prime numbers between one and a thousand.\n\nWe’ll use a variant of TDD to do this.  Our eyes will be the tests.  The cycle will be the same size as normal TDD; but we’ll write a bit of code first and then test it.\n\n\n  I know.  Blashphemy!  So sue me.  ;-)\n\n\nWe begin like this: (defn primes [n] )  This returns nil.\n\nuser=> (primes 1000)\nnil\n\n\nNow let’s get all the numbers between 1 and n.\n\n(defn primes [n]\n  (range 1 (inc n)))\n\nuser=> (primes 10)\n(1 2 3 4 5 6 7 8 9 10)\n\n\nYou’ve probably figured out what range does.  It just returns a list of all the integers between it’s arguments.\n\nOK, so now all we have to do is filter all the primes:\n\n(defn primes [n]\n  (let [candidates (range 1 (inc n))]\n    (filter prime? candidates)))\n\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: prime? in this context, compiling:(null:3:5)\n\n\nOh, oh.  We need to implement prime?\n\n(defn prime? [n])\n\nuser=> (primes 10)\n()\n\n\nOK, that makes sense.  But I should explain the let function.  It allows you to create names that are bound to expressions.  The names exist only within the parentheses of the let expression.  So it’s a way to create local variables – though the word “variable” is not quite right because they cannot be reassigned.  They are immutable.\n\nNow how do we tell if a given integer n is prime?  Well, you all know how to do that, right?  The simple and naive way is to divide the integer by every number between 2 and n.  But, of course that’s wasteful.  There’s a better upper limit to try which is the square root of n.  I’m sure you can work out why that’s true.\n\n(defn prime? [n]\n  (let [sqrt (Math/sqrt n)]\n     sqrt))\n \nuser=> (prime? 100)\n10.0\n\n\nOK, that’s right.  Notice that we called the Java Math.sqrt function.  That’s a good example of how Clojure can call down into the Java libraries).  Of course we don’t want prime? to return a number; we want it to return a boolean.  But for now it’s good to see the intermediate values of our computation.\n\nSo, next we’d like to get all the integers between 2 and the square root.  We already know how to do that.\n\n(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))]\n     divisors))\n \n user=> (prime? 100)\n (2 3 4 5 6 7 8 9 10)\n\n\nNow which of the divisors\tdivide n evenly?  We can find out by using the map function.\n\n(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n        remainders (map (fn [x] (rem n x)) divisors)]\n   remainders))\n \nuser=> (prime? 100)\n(0 1 0 0 4 2 4 1 0)\n\n\nThe rem function should be self-explanatory; it just returns the integer remainder of the division of n by x.  The (fn [x]...) business needs a little explanation.  Notice how similar it is to defn f [x]?  This is how we create an anonymous function.  If you know the syntax in Java or C# for anonymous functions, then this shouldn’t be too much of a surprise to you.  Anyway, the remainders list is just the list of all the remainders that result from dividing n by the divisors.\n\nNow some of those remainders were zero, and that means they divided n evenly.  Therefore n (100 in this case) is not prime.  Let’s try a few others.\n\nuser=> (prime? 17)\n(1 2 1 2)\nuser=> (prime? 1001)\n(1 2 1 1 5 0 1 2 1 0 5 0 7 11 9 15 11 13 1 14 11 12 17 1 13 2 21 15 11 9 9)\nuser=> (prime? 37)\n(1 1 1 2 1 2)\n\n\nOK, so if the remainders list has a zero in it, then n is not prime.  Well, that should be easy, shouldn’t it?\n\n(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n        remainders (map (fn [x] (rem n x)) divisors)\n        zeroes (filter zero? remainders)]\n     zeroes))\n \nuser=> (prime? 100)\n(0 0 0 0)\nuser=> (prime? 17)\n()\t \n\n\nSo now all we need to do is return true if the list is empty.  Right?\n\n(defn prime? [n]\n  (let [sqrt (Math/sqrt n)\n        divisors (range 2 (inc sqrt))\n\t\tremainders (map (fn [x] (rem n x)) divisors)\n\t\tzeroes (filter zero? remainders)]\n     (empty? zeroes)))\n\nuser=> (prime? 100)\nfalse\nuser=> (prime? 17)\ntrue\nuser=> (primes 100)\n(1 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)\t\n\n\nNow I want you to think carefully about how we solved this problem.  No if statements.  No while loops.  Instead we envisioned lists of data flowing through filters and mappers.  The solution was almost more of a fluid dynamics problem than a software problem.  (Ok, that’s a stretch, but you get my meaning.)  Instead of imagining a procedural solution, we imagine a data-flow solution.\n\nThink hard on this – it is one of the keys to functional programming.\n\n(Special thanks to Stu Halloway @stuarthalloway for cluing me into the dataflow mindset way back in 2005)\n\nOh, and the primes between 1 and 1000?\n\nuser=> (primes 1000)\n(1 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997)\n\n\n\n  And, yes, there is a bug.  1 is not prime.  2 is prime.  Can you fix it?"
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/04/06/ALittleClojure",
    "raw": "<p>So let’s learn just a little bit of clojure.</p>\n\n<p>This expression: <code class=\"language-plaintext highlighter-rouge\">(1 2)</code> represents the list containing the integers 1 and 2 in that order.  If you want an empty list, that’s just <code class=\"language-plaintext highlighter-rouge\">()</code>.  And the list of the first five letters of the alphabet is just <code class=\"language-plaintext highlighter-rouge\">(\\a \\b \\c \\d \\e)</code>.</p>\n\n<p>Now you know a lot about the syntax of clojure.  Perhaps you think there’s a lot missing.  Well, there are a <em>few</em> things missing; but far fewer than you’d think.</p>\n\n<p>You might be wondering how you add two numbers.  That’s easy, that’s just <code class=\"language-plaintext highlighter-rouge\">(+ 1 2)</code>.  As it happens that’s also just the list of the function named <code class=\"language-plaintext highlighter-rouge\">+</code> followed by a 1 and a 2.  You see, a function call is really just a list.  The function is the first element of the list, and the arguments are just the other elements of that list.  When you want to call a function, you simply invoke the list that represents that function call.</p>\n\n<p>There are quite a few built-in functions in clojure.  For example there’s <code class=\"language-plaintext highlighter-rouge\">+, -, *, and /</code>.  They do precisely what you’d think.  Well, perhaps not precisely.  <code class=\"language-plaintext highlighter-rouge\">(+ 1 2 3)</code> evaluations to <code class=\"language-plaintext highlighter-rouge\">6</code>.  <code class=\"language-plaintext highlighter-rouge\">(- 3 2 1)</code> evaluates to zero.  <code class=\"language-plaintext highlighter-rouge\">(* 2 3 4)</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">24</code>.  And <code class=\"language-plaintext highlighter-rouge\">(/ 20 2 5)</code> evaluates to 2.  <code class=\"language-plaintext highlighter-rouge\">(- 5)</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">-5</code>.  <code class=\"language-plaintext highlighter-rouge\">(* 5)</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">5</code>.  And, get ready for this, <code class=\"language-plaintext highlighter-rouge\">(/ 3)</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">1/3</code>.  That last is the clojure syntax for the rational number one-third.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">(first 1 2 3)</code> evaluates to <code class=\"language-plaintext highlighter-rouge\">1</code>, <code class=\"language-plaintext highlighter-rouge\">(second 1 2 3)</code> evaluates to 2, and <code class=\"language-plaintext highlighter-rouge\">(last 1 2 3)</code> evaluates to – you guessed it – <code class=\"language-plaintext highlighter-rouge\">3</code>.</p>\n\n<p>If you’d like to see this in action you’ll need to start up a clojure REPL.  You can google how to do that.  The word REPL stands for Read, Evaluate, Print Loop.  It’s a very simple program that reads in an expression, evaluates that expression, prints the result of that expression, and then loops back to the read.</p>\n\n<p>If you start a REPL you’ll get some kind of a prompt, perhaps like this <code class=\"language-plaintext highlighter-rouge\">user=&gt;</code>.  Then you can type an expression and see it evaluated.  Here are a few from my REPL</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (+ 1 2 3 4)\n10\nuser=&gt; (- 5 6 7 8)\n-16\nuser=&gt; (* 6 7 8)\n336\nuser=&gt; (/ 5 6 9)\n5/54\n</code></pre></div></div>\n\n<p>If you try the expression at the very start of this article: <code class=\"language-plaintext highlighter-rouge\">(1 2)</code> you’ll get a nasty surprise.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (1 2)\nClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  user$eval1766.invokeStatic (:1)\n</code></pre></div></div>\n\n<p>That’s because the digit <code class=\"language-plaintext highlighter-rouge\">1</code> is not a function; and the REPL believes that if it reads a list, that list ought to be evaluated as a function call.  If you just want the list <code class=\"language-plaintext highlighter-rouge\">(1 2)</code> at the REPL you can convince the REPL not to call the list as a function by quoting it as follows:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (quote (1 2))\n(1 2)\nuser=&gt; '(1 2)\n(1 2)\nuser=&gt; (list 1 2)\n(1 2)\n</code></pre></div></div>\n\n<p>The first invokes the <code class=\"language-plaintext highlighter-rouge\">quote</code> function which prevents its argument <code class=\"language-plaintext highlighter-rouge\">(1 2)</code> from being evaluated and just returns it.  The second is just a little syntax shortcut for calling the <code class=\"language-plaintext highlighter-rouge\">quote</code> function.  The third invokes the function that constructs lists.</p>\n\n<p>Lists are implemented as linked lists.  Each element contains a value and points to the next element.  That makes it very fast to add an element to the front of the list, or to walk the list one element at a time.  But it makes it slow to index into the list to find the Nth element.  So, for that, clojure uses the <em>vector</em> data type.  Here is a vector of the first three integers: <code class=\"language-plaintext highlighter-rouge\">[1 2 3]</code>.  That’s right, it’s the square brackets that do the trick.</p>\n\n<p>A vector is a lot like a growable array. It’s easy to add to the end of it, and it’s easy to index into it.  Lists make good stacks. Vectors make good queues.</p>\n\n<p>Now let’s define a function.  <code class=\"language-plaintext highlighter-rouge\">(defn f [x] (+ (* 3 x) 1))</code>  this defines the function named <code class=\"language-plaintext highlighter-rouge\">f</code>.  It takes one argument named <code class=\"language-plaintext highlighter-rouge\">x</code>.  And it calculates the formula: <code class=\"language-plaintext highlighter-rouge\">3x+1</code>.</p>\n\n<p>Now let’s take this apart one token at a time.  This looks like a call to the function <code class=\"language-plaintext highlighter-rouge\">defn</code>.  We’ll let that stand for the moment, but it’s not exactly right; <code class=\"language-plaintext highlighter-rouge\">defn</code> is a bit more special than that. The next token is the name of the function: <code class=\"language-plaintext highlighter-rouge\">f</code>.  Names are alphanumeric with a few special characters allowed.  For example <code class=\"language-plaintext highlighter-rouge\">+++</code> is a valid name.  Following the name is a vector that names the function arguments.  Again, these are names.  Those names will be bound to the argument values when the function is called.  And following the argument vector is the expression that is evaluated by the function.  That expression can use the argument names.</p>\n\n<p>You now know the vast majority of Clojure syntax.  There’s more, of course, but you already know enough to write significant programs.</p>\n\n<p>So let’s write a simple one.  Let’s write the factorial function.<br /> \n<code class=\"language-plaintext highlighter-rouge\">(defn fac [x] (if (= x 1) 1 (* x (fac (dec x)))))</code></p>\n\n<p>Let’s walk through this.  The function is named <code class=\"language-plaintext highlighter-rouge\">fac</code> and it takes one argument named <code class=\"language-plaintext highlighter-rouge\">x</code>.  The <code class=\"language-plaintext highlighter-rouge\">if</code> function takes three arguments. If the first evaluates to something <em>truthy</em> it returns the second, otherwise it returns the third.  The <code class=\"language-plaintext highlighter-rouge\">=</code> function does exactly what you’d think: it is a test for equality.  If <code class=\"language-plaintext highlighter-rouge\">x</code> is 1, then the <code class=\"language-plaintext highlighter-rouge\">if</code> statement, and therefore the function, will return 1.  Otherwise the <code class=\"language-plaintext highlighter-rouge\">if</code> statement will return <code class=\"language-plaintext highlighter-rouge\">x</code> times the factorial of the decrement of <code class=\"language-plaintext highlighter-rouge\">x</code>.</p>\n\n<p>Let’s try it:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (fac 3)\n6\nuser=&gt; (fac 4)\n24\nuser=&gt; (fac 10)\n3628800\nuser=&gt; (fac 20)\n2432902008176640000\nuser=&gt; (fac 30)\n\nArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)\n</code></pre></div></div>\n\n<p>That works nicely, until we exceed 64 bits of precision.  Clojure likes to use 64 bit integers for efficiency.  But if you’d rather have unlimited precision you can use the <code class=\"language-plaintext highlighter-rouge\">N</code> notation.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>user=&gt; (fac 1000N)\nn</code></pre></div></div>\n\n<p>OK, one last thing.  Let’s add up all the numbers in a list.  We want <code class=\"language-plaintext highlighter-rouge\">(sum [1 2 3 4 5])</code> to evaluate to <code class=\"language-plaintext highlighter-rouge\">15</code>.  First we’ll do it the hard way:<br />\n<code class=\"language-plaintext highlighter-rouge\">(defn sum [l] (if (empty? l) 0 (+ (first l) (sum (rest l)))))</code></p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">empty?</code> function does just what you’d think, it returns true if the list is empty.  The <code class=\"language-plaintext highlighter-rouge\">rest</code> function returns all but the first element of a list.</p>\n\n<p>Of course we could have written <code class=\"language-plaintext highlighter-rouge\">sum</code> like this: <code class=\"language-plaintext highlighter-rouge\">(defn sum [l] (apply + l))</code>.  The <code class=\"language-plaintext highlighter-rouge\">apply</code> function – um – applies the function passed in it’s first argument to the list in its second.</p>\n\n<p>We could also have written the function like this: <code class=\"language-plaintext highlighter-rouge\">(defn sum [l] (reduce + l))</code>.  But that takes us to the <code class=\"language-plaintext highlighter-rouge\">reduce</code> function which (as George Carlin used to say) might go a bit too far.  At least for this article.</p>\n\n",
    "sanitized": "So let’s learn just a little bit of clojure.\n\nThis expression: (1 2) represents the list containing the integers 1 and 2 in that order.  If you want an empty list, that’s just ().  And the list of the first five letters of the alphabet is just (\\a \\b \\c \\d \\e).\n\nNow you know a lot about the syntax of clojure.  Perhaps you think there’s a lot missing.  Well, there are a few things missing; but far fewer than you’d think.\n\nYou might be wondering how you add two numbers.  That’s easy, that’s just (+ 1 2).  As it happens that’s also just the list of the function named + followed by a 1 and a 2.  You see, a function call is really just a list.  The function is the first element of the list, and the arguments are just the other elements of that list.  When you want to call a function, you simply invoke the list that represents that function call.\n\nThere are quite a few built-in functions in clojure.  For example there’s +, -, *, and /.  They do precisely what you’d think.  Well, perhaps not precisely.  (+ 1 2 3) evaluations to 6.  (- 3 2 1) evaluates to zero.  (* 2 3 4) evaluates to 24.  And (/ 20 2 5) evaluates to 2.  (- 5) evaluates to -5.  (* 5) evaluates to 5.  And, get ready for this, (/ 3) evaluates to 1/3.  That last is the clojure syntax for the rational number one-third.\n\n(first 1 2 3) evaluates to 1, (second 1 2 3) evaluates to 2, and (last 1 2 3) evaluates to – you guessed it – 3.\n\nIf you’d like to see this in action you’ll need to start up a clojure REPL.  You can google how to do that.  The word REPL stands for Read, Evaluate, Print Loop.  It’s a very simple program that reads in an expression, evaluates that expression, prints the result of that expression, and then loops back to the read.\n\nIf you start a REPL you’ll get some kind of a prompt, perhaps like this user=>.  Then you can type an expression and see it evaluated.  Here are a few from my REPL\n\nuser=> (+ 1 2 3 4)\n10\nuser=> (- 5 6 7 8)\n-16\nuser=> (* 6 7 8)\n336\nuser=> (/ 5 6 9)\n5/54\n\n\nIf you try the expression at the very start of this article: (1 2) you’ll get a nasty surprise.\n\nuser=> (1 2)\nClassCastException java.lang.Long cannot be cast to clojure.lang.IFn  user$eval1766.invokeStatic (:1)\n\n\nThat’s because the digit 1 is not a function; and the REPL believes that if it reads a list, that list ought to be evaluated as a function call.  If you just want the list (1 2) at the REPL you can convince the REPL not to call the list as a function by quoting it as follows:\n\nuser=> (quote (1 2))\n(1 2)\nuser=> '(1 2)\n(1 2)\nuser=> (list 1 2)\n(1 2)\n\n\nThe first invokes the quote function which prevents its argument (1 2) from being evaluated and just returns it.  The second is just a little syntax shortcut for calling the quote function.  The third invokes the function that constructs lists.\n\nLists are implemented as linked lists.  Each element contains a value and points to the next element.  That makes it very fast to add an element to the front of the list, or to walk the list one element at a time.  But it makes it slow to index into the list to find the Nth element.  So, for that, clojure uses the vector data type.  Here is a vector of the first three integers: [1 2 3].  That’s right, it’s the square brackets that do the trick.\n\nA vector is a lot like a growable array. It’s easy to add to the end of it, and it’s easy to index into it.  Lists make good stacks. Vectors make good queues.\n\nNow let’s define a function.  (defn f [x] (+ (* 3 x) 1))  this defines the function named f.  It takes one argument named x.  And it calculates the formula: 3x+1.\n\nNow let’s take this apart one token at a time.  This looks like a call to the function defn.  We’ll let that stand for the moment, but it’s not exactly right; defn is a bit more special than that. The next token is the name of the function: f.  Names are alphanumeric with a few special characters allowed.  For example +++ is a valid name.  Following the name is a vector that names the function arguments.  Again, these are names.  Those names will be bound to the argument values when the function is called.  And following the argument vector is the expression that is evaluated by the function.  That expression can use the argument names.\n\nYou now know the vast majority of Clojure syntax.  There’s more, of course, but you already know enough to write significant programs.\n\nSo let’s write a simple one.  Let’s write the factorial function. \n(defn fac [x] (if (= x 1) 1 (* x (fac (dec x)))))\n\nLet’s walk through this.  The function is named fac and it takes one argument named x.  The if function takes three arguments. If the first evaluates to something truthy it returns the second, otherwise it returns the third.  The = function does exactly what you’d think: it is a test for equality.  If x is 1, then the if statement, and therefore the function, will return 1.  Otherwise the if statement will return x times the factorial of the decrement of x.\n\nLet’s try it:\n\nuser=> (fac 3)\n6\nuser=> (fac 4)\n24\nuser=> (fac 10)\n3628800\nuser=> (fac 20)\n2432902008176640000\nuser=> (fac 30)\n\nArithmeticException integer overflow  clojure.lang.Numbers.throwIntOverflow (Numbers.java:1501)\n\n\nThat works nicely, until we exceed 64 bits of precision.  Clojure likes to use 64 bit integers for efficiency.  But if you’d rather have unlimited precision you can use the N notation.\n\nuser=> (fac 1000N)\nn\n\nOK, one last thing.  Let’s add up all the numbers in a list.  We want (sum [1 2 3 4 5]) to evaluate to 15.  First we’ll do it the hard way:\n(defn sum [l] (if (empty? l) 0 (+ (first l) (sum (rest l)))))\n\nThe empty? function does just what you’d think, it returns true if the list is empty.  The rest function returns all but the first element of a list.\n\nOf course we could have written sum like this: (defn sum [l] (apply + l)).  The apply function – um – applies the function passed in it’s first argument to the list in its second.\n\nWe could also have written the function like this: (defn sum [l] (reduce + l)).  But that takes us to the reduce function which (as George Carlin used to say) might go a bit too far.  At least for this article."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2020/04/05/ANewHope",
    "raw": "<p><strong>…The Year is 2045…</strong></p>\n\n<p>Dad, can you help me with my school report?</p>\n\n<blockquote>\n  <p><em>Sure son.  What’s it about?</em></p>\n</blockquote>\n\n<p>We have to do it on the great pandemic of 2020.  You were there, right?</p>\n\n<blockquote>\n  <p><em>I was just a little boy.  But I know a lot about it.  What is it you need to know?</em></p>\n</blockquote>\n\n<p>We’re supposed to write about the heroes.</p>\n\n<blockquote>\n  <p><em>Ah, yes.  A good topic.  There were so many.</em></p>\n</blockquote>\n\n<p>OK, so…  Who were they?</p>\n\n<blockquote>\n  <p><em>Well, first of all there were the healthcare workers.  Day after day, week after week, they kept on working in those hospitals full of very sick people.  Many of them got sick too; and quite a few of them died.</em></p>\n</blockquote>\n\n<p>They must have been brave.</p>\n\n<blockquote>\n  <p><em>They were.  Very.  They were as brave as any soldier going to war.  Perhaps braver, because you couldn’t see the enemy, and in those days you couldn’t fight it.</em></p>\n</blockquote>\n\n<p>We can fight it now, can’t we Dad.</p>\n\n<blockquote>\n  <p><em>Yes son.  Now we can.  We have vaccines and treatments.  Nobody dies of COVID-19 anymore.  But back then we didn’t have vaccines or treatments.  We just had nurses and doctors who tried their very best to save as many people as possible.</em></p>\n</blockquote>\n\n<p>So they were the heroes?</p>\n\n<blockquote>\n  <p><em>Yes. But there were many more.  There were the people who worked in grocery stores.</em></p>\n</blockquote>\n\n<p>I thought everybody stayed home to work.</p>\n\n<blockquote>\n  <p><em>Many of us did.  We were the lucky ones.  But the people who worked in those stores had to go to work every day.  People needed food; and so grocery stores needed to stay open.  And the people who worked in those stores had to help hundreds, maybe even thousands of people every day.  They took huge risks to keep those stores open.</em></p>\n</blockquote>\n\n<p>Wow, I hadn’t thought of that.</p>\n\n<blockquote>\n  <p><em>And then there were the delivery people.  The people who drove trucks of food to the stores and trucks of products to people’s home.  The people who worked for Amazon, and UPS, and Fedex, and the US Mail.</em></p>\n</blockquote>\n\n<p>Who else, Dad?  Who else?</p>\n\n<blockquote>\n  <p><em>Well, look son, there were so many.  The police, the firemen, the sailors and soldiers, the air traffic controllers, the garbage men, the repairmen.  Even though most people weren’t working, the essential parts of our civilization had to be kept running.  And then there were just the everyday people who followed the rules and kept themselve at home for so many weeks.  It was a huge effort that everyone had to play a part in.</em></p>\n</blockquote>\n\n<blockquote>\n  <p><em>But…</em></p>\n</blockquote>\n\n<p>But what, Dad?</p>\n\n<blockquote>\n  <p><em>Well, there was one group of people who don’t often get mentioned; but without them the Pandemic would have been a hundred times worse than it was.</em></p>\n</blockquote>\n\n<p>Really?  Who?</p>\n\n<blockquote>\n  <p><em>The programmers.</em></p>\n</blockquote>\n\n<p>Dad…  You’re a programmer aren’t you?</p>\n\n<blockquote>\n  <p><em>Yes son, I am.  Just like my mother – your gramma – before me.  She was one of the ones who worked during the Pandemic.</em></p>\n</blockquote>\n\n<p>Was gramma a hero Dad?</p>\n\n<blockquote>\n  <p><em>No more than anyone else, son.  She worked from home.  She wore masks, and kept the necessary social distance from others.  I was just a little boy, but I remember those masks and how much we had to stay at home.  Most programmers did just what Gramma did too.  They worked from home.</em></p>\n</blockquote>\n\n<p>So then why were they heros, Dad?  It sounds to me like they just did what everybody else did.</p>\n\n<blockquote>\n  <p><em>Well, son, think of this.  It was the programmers who made it possible for people to work from home; because it was the programmers who built the software that made the internet possible.  You see, this was the first full scale national emergency during which people had instant access to the news, to the government, and to each other.  When the President, and the Governors told people to shelter at home, almost everybody knew about it within minutes or hours.  The news was sent to their computers, to their phones, and to their watches.  Not only that, but people who were stuck at home could still talk to each other using Facebook and Twitter and Facetime.  People could order products on Amazon, and on so many other on-line shopping networks.  People could even order food from restaurants to be delivered or picked up.  Without the programmers who made those systems, people would have had a much harder time sheltering at home; and the pandemic would have been much worse.</em></p>\n</blockquote>\n\n<p>So the programmers weren’t brave, like the doctors and nurses and police were brave.  They weren’t heros like that.</p>\n\n<blockquote>\n  <p><em>No, not like that.  But without them, without the tools they created, so many more people would have died.  For example, did you know that the genetic code of the virus was sequenced long before the pandemic spread?  It was that RNA sequence that allowed our researchers to get a head start on the vaccines that eventually killed off the virus and saved so many people.  It was programmers who built the software that ran in those RNA sequencers.  Without those programmers, the vaccines might have come much too late.</em></p>\n</blockquote>\n\n<p>Wow!  What else, Dad?  What else?</p>\n\n<blockquote>\n  <p><em>Well, you know that there was a time when people used paper money, right?  Imagine how easily the virus would have spread if people paid for groceries or gasoline with paper money!  But it was programmers who built the systems that allowed people to pay with credit cards, or by just waving their phone or watch over readers.  They didn’t even have to touch antyhing!  The virus couldn’t spread that way.</em></p>\n</blockquote>\n\n<blockquote>\n  <p><em>And then there was so much entertainment piped right into people’s homes.  Netflix, and Amazon Prime, and Youtube, and..  Well the options were endless back then.</em></p>\n</blockquote>\n\n<blockquote>\n  <p><em>So people could work from home, shop from home, be entertained at home, and hardly ever had to leave their homes.  And all that was because of the software written by programmers.</em></p>\n</blockquote>\n\n<p>And that saved us, didn’t it Dad?</p>\n\n<blockquote>\n  <p><em>Well, son, it certainly played a pretty important part.</em></p>\n</blockquote>\n\n<p>Are you glad you’re a programmer Dad?</p>\n\n<blockquote>\n  <p><em>It’s an important job, Son.  I never want to be anything else.  Except, of course, your Dad.</em></p>\n</blockquote>\n\n",
    "sanitized": "…The Year is 2045…\n\nDad, can you help me with my school report?\n\n\n  Sure son.  What’s it about?\n\n\nWe have to do it on the great pandemic of 2020.  You were there, right?\n\n\n  I was just a little boy.  But I know a lot about it.  What is it you need to know?\n\n\nWe’re supposed to write about the heroes.\n\n\n  Ah, yes.  A good topic.  There were so many.\n\n\nOK, so…  Who were they?\n\n\n  Well, first of all there were the healthcare workers.  Day after day, week after week, they kept on working in those hospitals full of very sick people.  Many of them got sick too; and quite a few of them died.\n\n\nThey must have been brave.\n\n\n  They were.  Very.  They were as brave as any soldier going to war.  Perhaps braver, because you couldn’t see the enemy, and in those days you couldn’t fight it.\n\n\nWe can fight it now, can’t we Dad.\n\n\n  Yes son.  Now we can.  We have vaccines and treatments.  Nobody dies of COVID-19 anymore.  But back then we didn’t have vaccines or treatments.  We just had nurses and doctors who tried their very best to save as many people as possible.\n\n\nSo they were the heroes?\n\n\n  Yes. But there were many more.  There were the people who worked in grocery stores.\n\n\nI thought everybody stayed home to work.\n\n\n  Many of us did.  We were the lucky ones.  But the people who worked in those stores had to go to work every day.  People needed food; and so grocery stores needed to stay open.  And the people who worked in those stores had to help hundreds, maybe even thousands of people every day.  They took huge risks to keep those stores open.\n\n\nWow, I hadn’t thought of that.\n\n\n  And then there were the delivery people.  The people who drove trucks of food to the stores and trucks of products to people’s home.  The people who worked for Amazon, and UPS, and Fedex, and the US Mail.\n\n\nWho else, Dad?  Who else?\n\n\n  Well, look son, there were so many.  The police, the firemen, the sailors and soldiers, the air traffic controllers, the garbage men, the repairmen.  Even though most people weren’t working, the essential parts of our civilization had to be kept running.  And then there were just the everyday people who followed the rules and kept themselve at home for so many weeks.  It was a huge effort that everyone had to play a part in.\n\n\n\n  But…\n\n\nBut what, Dad?\n\n\n  Well, there was one group of people who don’t often get mentioned; but without them the Pandemic would have been a hundred times worse than it was.\n\n\nReally?  Who?\n\n\n  The programmers.\n\n\nDad…  You’re a programmer aren’t you?\n\n\n  Yes son, I am.  Just like my mother – your gramma – before me.  She was one of the ones who worked during the Pandemic.\n\n\nWas gramma a hero Dad?\n\n\n  No more than anyone else, son.  She worked from home.  She wore masks, and kept the necessary social distance from others.  I was just a little boy, but I remember those masks and how much we had to stay at home.  Most programmers did just what Gramma did too.  They worked from home.\n\n\nSo then why were they heros, Dad?  It sounds to me like they just did what everybody else did.\n\n\n  Well, son, think of this.  It was the programmers who made it possible for people to work from home; because it was the programmers who built the software that made the internet possible.  You see, this was the first full scale national emergency during which people had instant access to the news, to the government, and to each other.  When the President, and the Governors told people to shelter at home, almost everybody knew about it within minutes or hours.  The news was sent to their computers, to their phones, and to their watches.  Not only that, but people who were stuck at home could still talk to each other using Facebook and Twitter and Facetime.  People could order products on Amazon, and on so many other on-line shopping networks.  People could even order food from restaurants to be delivered or picked up.  Without the programmers who made those systems, people would have had a much harder time sheltering at home; and the pandemic would have been much worse.\n\n\nSo the programmers weren’t brave, like the doctors and nurses and police were brave.  They weren’t heros like that.\n\n\n  No, not like that.  But without them, without the tools they created, so many more people would have died.  For example, did you know that the genetic code of the virus was sequenced long before the pandemic spread?  It was that RNA sequence that allowed our researchers to get a head start on the vaccines that eventually killed off the virus and saved so many people.  It was programmers who built the software that ran in those RNA sequencers.  Without those programmers, the vaccines might have come much too late.\n\n\nWow!  What else, Dad?  What else?\n\n\n  Well, you know that there was a time when people used paper money, right?  Imagine how easily the virus would have spread if people paid for groceries or gasoline with paper money!  But it was programmers who built the systems that allowed people to pay with credit cards, or by just waving their phone or watch over readers.  They didn’t even have to touch antyhing!  The virus couldn’t spread that way.\n\n\n\n  And then there was so much entertainment piped right into people’s homes.  Netflix, and Amazon Prime, and Youtube, and..  Well the options were endless back then.\n\n\n\n  So people could work from home, shop from home, be entertained at home, and hardly ever had to leave their homes.  And all that was because of the software written by programmers.\n\n\nAnd that saved us, didn’t it Dad?\n\n\n  Well, son, it certainly played a pretty important part.\n\n\nAre you glad you’re a programmer Dad?\n\n\n  It’s an important job, Son.  I never want to be anything else.  Except, of course, your Dad."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2019/11/08/OpenLetterLinuxFoundation",
    "raw": "<p>To: The Linux Foundation<br />\n    Jim Zemlin: Executive Director<br />\n    Angela Brown: VP of Events<br />\n    Andy Updegrove: Legal Council<br /></p>\n\n<p>From: Robert Martin (@unclebobmartin) (unclebob@cleancoder.com)</p>\n\n<p>Re: Code of Conduct case of Charles Max Wood.</p>\n\n<p>Dear Linux Foundation:</p>\n\n<p>I am writing to you as a concerned member of the software development community which I have enjoyed serving for the last 50 years.  I am writing in public because the events I wish to describe took place in public.  I fear that something has gone terribly wrong within your organization; and that it will have deep repercussions within this industry that I cherish.</p>\n\n<p>The timeline of events, as far as I can determine them, is as follows:</p>\n\n<p>The Linux Foundation received a public tweet sent to the @KubeCon twitter address. That tweet recommended that Kube Con discontinue their association with Charles Max Wood. The reasons given in this complaint were his request for an open and civil phone call, and a picture of Mr. Wood wearing a MAGA hat.</p>\n\n<p>The Linux Foundation <em>publicly</em> replied from the @linuxfoundation twitter account as follows:</p>\n\n<blockquote>\n  <p><em>Hi all, We have reviewed social and videos and determined that the Event Code of Conduct was violated and his registration to the event has been revoked. Our events should and will be a safe space.</em></p>\n</blockquote>\n\n<p>First let me say that I find it highly problematic that the complaint and the decision were public. Indeed I am surprised that LF would accept a publicly submitted code of conduct complaint. I am much more than surprised that LF would ever consider <em>publicly</em> responding to such a complaint. Indeed, it seems to me that the public complaint, and perhaps even the public response by LF, could be seen as public harassment – which is explicitly prohibited by the LF Code of Conduct.</p>\n\n<p>It seems to me that Code of Conduct complaints made in public must be immediately rejected and viewed as Code of Conduct violations in and of themselves.  Code of Conduct complaints should be submitted in private and remain private and confidential in order to prevent their use as a means of harassment. It also seems to me that while the process of accepting, reviewing, and adjudicating such complaints should be public, the proceedings and decision of each individual case should remain private and confidential in order to protect the parties from harm. Making them a public showcase is, simply, horrible.</p>\n\n<p>Was the Code of Conduct actually violated by Mr. Wood? I have watched the videos in question and read the tweets and I can find no instance where Mr Wood violated the LF Code of Conduct. I understand that LF can make any decision they like about what constitutes a Code of Conduct violation. However, when both the complaint and the response are so blatantly public, it seems to me that LF owes it to the observing community to explain their decision and describe the due process that was used to make it – including the decision to make the public response that undoubtedly caused harm to Mr. Wood. To date no such explanation has been forthcoming, despite repeated requests.</p>\n\n<p>The software community needs to understand how decisions like this are going to be made. Otherwise those of us who have watched this case may be forced to conclude that LF has no internal process, that no due diligence will be applied to Code of Conduct complaints and determinations, that the accused will have no rights either of appeal or privacy, that LF feels free to make its decisions based on the blowing of political winds, and will loudly announce their decisions regardless of the harm it might cause.</p>\n\n<p>Therefore I have the following questions:</p>\n\n<ul>\n  <li>\n    <p>Why was the initial complaint accepted and acknowledged in public? It was clearly political in nature, and very clearly intended to cause harm to Mr. Wood.</p>\n  </li>\n  <li>\n    <p>Is it LF policy to accept complaints that, in and of themselves, violate the LF Code of Conduct?</p>\n  </li>\n  <li>\n    <p>Why was the Code of Conduct determination announced publicly, despite the harm it would obviously cause to Mr. Wood?</p>\n  </li>\n  <li>\n    <p>Can LF specifically justify the determination that Mr. Wood violated the Code of Conduct?</p>\n  </li>\n  <li>\n    <p>Does LF have a documented process by which Code of Conduct complaints are to be submitted, reviewed, and adjudicated?</p>\n  </li>\n  <li>\n    <p>Is it LF policy to consider political affiliation, or support of certain public officials, as Code of Conduct violations?</p>\n  </li>\n  <li>\n    <p>Is it LF policy to publicly denounce registrants who have been determined to have violated the LF Code of Conduct?</p>\n  </li>\n  <li>\n    <p>Does LF have a Code of Conduct for how it conducts itself?</p>\n  </li>\n</ul>\n\n<p>In summary, it appears to this humble observer that The Code of Conduct process at The Linux Foundation went very badly off the rails with regard to Charles Max Wood. That LF owes Mr. Wood, and the Software Community at large, a <em>profound</em> apology. That LF should keep all future Code of Conduct complaints and decisions personal and confidential. That LF should publish and follow a well defined process for accepting, reviewing, and adjudicating future Code of Conduct complaints. And that some form of reparation be provided to Mr. Wood for the public harm that was done to him by the careless and unprofessional behavior of The Linux Foundation.</p>\n\n<p>Yours</p>\n\n<p>Robert C. Martin.</p>\n\n",
    "sanitized": "To: The Linux Foundation\n    Jim Zemlin: Executive Director\n    Angela Brown: VP of Events\n    Andy Updegrove: Legal Council\n\nFrom: Robert Martin (@unclebobmartin) (unclebob@cleancoder.com)\n\nRe: Code of Conduct case of Charles Max Wood.\n\nDear Linux Foundation:\n\nI am writing to you as a concerned member of the software development community which I have enjoyed serving for the last 50 years.  I am writing in public because the events I wish to describe took place in public.  I fear that something has gone terribly wrong within your organization; and that it will have deep repercussions within this industry that I cherish.\n\nThe timeline of events, as far as I can determine them, is as follows:\n\nThe Linux Foundation received a public tweet sent to the @KubeCon twitter address. That tweet recommended that Kube Con discontinue their association with Charles Max Wood. The reasons given in this complaint were his request for an open and civil phone call, and a picture of Mr. Wood wearing a MAGA hat.\n\nThe Linux Foundation publicly replied from the @linuxfoundation twitter account as follows:\n\n\n  Hi all, We have reviewed social and videos and determined that the Event Code of Conduct was violated and his registration to the event has been revoked. Our events should and will be a safe space.\n\n\nFirst let me say that I find it highly problematic that the complaint and the decision were public. Indeed I am surprised that LF would accept a publicly submitted code of conduct complaint. I am much more than surprised that LF would ever consider publicly responding to such a complaint. Indeed, it seems to me that the public complaint, and perhaps even the public response by LF, could be seen as public harassment – which is explicitly prohibited by the LF Code of Conduct.\n\nIt seems to me that Code of Conduct complaints made in public must be immediately rejected and viewed as Code of Conduct violations in and of themselves.  Code of Conduct complaints should be submitted in private and remain private and confidential in order to prevent their use as a means of harassment. It also seems to me that while the process of accepting, reviewing, and adjudicating such complaints should be public, the proceedings and decision of each individual case should remain private and confidential in order to protect the parties from harm. Making them a public showcase is, simply, horrible.\n\nWas the Code of Conduct actually violated by Mr. Wood? I have watched the videos in question and read the tweets and I can find no instance where Mr Wood violated the LF Code of Conduct. I understand that LF can make any decision they like about what constitutes a Code of Conduct violation. However, when both the complaint and the response are so blatantly public, it seems to me that LF owes it to the observing community to explain their decision and describe the due process that was used to make it – including the decision to make the public response that undoubtedly caused harm to Mr. Wood. To date no such explanation has been forthcoming, despite repeated requests.\n\nThe software community needs to understand how decisions like this are going to be made. Otherwise those of us who have watched this case may be forced to conclude that LF has no internal process, that no due diligence will be applied to Code of Conduct complaints and determinations, that the accused will have no rights either of appeal or privacy, that LF feels free to make its decisions based on the blowing of political winds, and will loudly announce their decisions regardless of the harm it might cause.\n\nTherefore I have the following questions:\n\n\n  \n    Why was the initial complaint accepted and acknowledged in public? It was clearly political in nature, and very clearly intended to cause harm to Mr. Wood.\n  \n  \n    Is it LF policy to accept complaints that, in and of themselves, violate the LF Code of Conduct?\n  \n  \n    Why was the Code of Conduct determination announced publicly, despite the harm it would obviously cause to Mr. Wood?\n  \n  \n    Can LF specifically justify the determination that Mr. Wood violated the Code of Conduct?\n  \n  \n    Does LF have a documented process by which Code of Conduct complaints are to be submitted, reviewed, and adjudicated?\n  \n  \n    Is it LF policy to consider political affiliation, or support of certain public officials, as Code of Conduct violations?\n  \n  \n    Is it LF policy to publicly denounce registrants who have been determined to have violated the LF Code of Conduct?\n  \n  \n    Does LF have a Code of Conduct for how it conducts itself?\n  \n\n\nIn summary, it appears to this humble observer that The Code of Conduct process at The Linux Foundation went very badly off the rails with regard to Charles Max Wood. That LF owes Mr. Wood, and the Software Community at large, a profound apology. That LF should keep all future Code of Conduct complaints and decisions personal and confidential. That LF should publish and follow a well defined process for accepting, reviewing, and adjudicating future Code of Conduct complaints. And that some form of reparation be provided to Mr. Wood for the public harm that was done to him by the careless and unprofessional behavior of The Linux Foundation.\n\nYours\n\nRobert C. Martin."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2019/11/03/WhatTheyThoughtOfUs",
    "raw": "<p>It is interesting and educational to go back in time and look at how programmers were represented in popular culture.  What did they think of us?  Did they know who were?</p>\n\n<p>It’s important to remember that prior to 1946 there were no programmers, that computers themselves were virtually unknown until the late ’50s.  That virtually nobody lived next door to a programmer back then.</p>\n\n<p>Nowadays virtually everyone in the western world, and even in much of the developing world, is surrounded by computers.  And while programming remains a mystery to many, programmers are common neighbors.</p>\n\n<p>So let’s scan the last six decades and watch as the culture changes it’s view of just who we are and what we do.</p>\n\n<h3 id=\"1956-forbidden-planet\">1956 Forbidden Planet</h3>\n<p>It’s best to begin at the beginning.  The first truly classic Science Fiction movie.  <em>Forbidden Planet</em>.  If you haven’t seen it, you are missing something profound and spectacular.  I urge you to watch – even study – it.</p>\n\n<p>There are no explicit mentions of computers or programmers in this movie.  The concept was simply not something that the public could relate to.  However there was a machine.  A very big machine.  And the implication was that it was intelligent, but not sentient.</p>\n\n<p><img src=\"/assets/krellMachine.jpeg\" /></p>\n\n<p>In the movie the anti-hero Dr Morbius is marooned on the uninhabited world of Altair 4.  He discovers an ancient alien machine.  Two decades later rescuers arrive.  He shows them the machine and states: “I have reason to believe that years ago a minor alteration was performed throughout the entire 8000 cubic miles of it’s own fabric.”</p>\n\n<p>The programmers of that big machine are long dead; but they are described as belonging to a highly evolved and benevolent alien race.</p>\n\n<p>There is another machine on this planet.  It is a robot named Robby.</p>\n\n<p><img src=\"/assets/robby.jpeg\" /></p>\n\n<p>Robby is clearly intelligent and sentient.  Robby speaks English, with the inflection of a proper british butler, rather in the manner of Carson on Downton Abbey.  Dr. Morbius claims to have created the Robot; so he is clearly the programmer.</p>\n\n<p>Morbius is studious, austere, even dour.  He is not evil; but he is a hermit and does not particularly enjoy the company of others.  He is massively intelligent but quite anti-social.</p>\n\n<p>Now remember that this was the ’50s.  Missiles and A-bombs.  Scientists had a particular stereotype in those days, and Dr. Morbius is consistent with that; though with a hint of Captain Nemo.</p>\n\n<h3 id=\"1954-tobor-the-great\">1954 TOBOR the Great</h3>\n<p>Yes, I’m going backwards two years, but only to say that I did not forget this movie.  I just don’t count it as significant.  This was a movie made for kids, and the semi-intelligent robot is much more like <em>Lassie</em> than Robby.  The creator of Tobor is an eminent scientist who also fits the mold of the ’50s.</p>\n\n<h3 id=\"1966-star-trek\">1966 Star Trek</h3>\n<p>With one exception, we learn very little about the programmers in Star Trek.  The computer, however, is fascinating.  The computer was voiced by Majel Barrett, Gene Roddenberry’s wife.  She also played Nurse Chapel, and “Number One” in the pilot.  She played the computer as utterly flat.  The voice was monotone.  The information was factual.  The computer never offered an opinion, or an emotion of any kind.  The computer was nothing more than a tool.</p>\n\n<p>The exception was the episode entitled <em>The Ultimate Computer</em> in which a new intelligent computer was hooked up to the enterprise.  The creator (and implicitly the programmer) of this machine was Dr. Daystrom.  Both he and the computer have a simultaneous nervous breakdown, and Kirk has to “pull the plug”.</p>\n\n<p>The implication is that programmers are so intelligent and driven that they eventually lose emotional stability.</p>\n\n<p>This is one of the first instances of the computer acting as the villain.</p>\n\n<h3 id=\"1968-2001-a-space-odyssey\">1968 2001: A Space Odyssey</h3>\n<p>Hal 9000 is the villain of this story.  We know little of the programmer, Dr. Chandra, except that he taught the computer a song.</p>\n\n<p>Note that during this era it is the computer that is the character.  The programmers, if mentioned at all, are ancillary.</p>\n\n<h3 id=\"1970-colossus-the-forbin-project\">1970 Colossus: The Forbin Project</h3>\n<p>Another movie in which the computer is the hyperintelligent villain.  The programmer is a scientist from the Dr. Morbius mold.</p>\n\n<h3 id=\"1982-blade-runner\">1982 Blade Runner</h3>\n<p>The computers are among the main characters and are essentially a race of slaves.  We never meet the programmers, but it’s clear that they must be morally bankrupt.</p>\n\n<h3 id=\"1982-tron\">1982 Tron</h3>\n<p>Hero programmer defeats evil computer.  This is the first time we see the programmer as a good guy who defeats the computer.  The movie is also a foreshadow of <em>The Matrix</em> because the main character gets transported into the computer.  As a programmer (though they call him a “user”) he as powers.</p>\n\n<p>The hero programmer is a world famous scientist and business man.  He does not live next door.</p>\n\n<h3 id=\"1983-war-games\">1983 War Games</h3>\n<p>The computer is again a character, though this time an innocent dupe.  A young boy meets the programmer and psychoanalyses him in order to convince the computer to not destroy the world.  The programmer is depicted as a famous scientist who is emotionally damaged.  The computer is depicted as a child-like character who likes to play games.</p>\n\n<h3 id=\"1984-the-terminator\">1984 The Terminator</h3>\n<p>This one is indirect. Well meaning humans program the evil computer, Skynet, that then programs the Terminator to kill Sarah Connor.  So this is a <em>singularity</em> prediction.  The computers program the computer.</p>\n\n<p>One interesting aspect of this film is the depiction of the human-like machine being so utterly focused on it’s mission.  At first you think of the terminator as almost human.  But bit by bit that humanity is lost.  In the end you see only the machine, half-destroyed, missing legs and all vestiges of human form, still intent on one purpose only.</p>\n\n<h3 id=\"1986-short-circuit\">1986 Short Circuit</h3>\n<p>(Sigh) Jonny number five is a combat robot whose programming gets scrambled by a lightning strike.  This makes the robot sentient and purely innocent.  Eventually the robot invents it’s own moral code which is vastly superior to anything human.</p>\n\n<p>So there is no programmer in this case – except nature or God or…  And in that case all human flaws are exposed by the purity of the programming.</p>\n\n<p>Cute movie, but very dumb.</p>\n\n<h3 id=\"1993-jurassic-park\">1993 Jurassic Park</h3>\n<p>This is our first real glimpse of a humanized programmer.  Dennis Nedry is not a mad scientist, not a well respected researcher, he’s just a common ordinary programmer.  And he is a flawed human.  Oh, there’s a bit of the Twinkie eating, basement dwelling stereotype there; but this is the first time the movies show a programmer as someone who might live next door.</p>\n\n<p>The computer is not a character at all.  It is just a tool (“a Unix System”).</p>\n\n<h3 id=\"1995-the-net\">1995 The Net</h3>\n<p>The main character is a programmer who must user her skills as a programmer to defeat a ruthless plot to frame her for murder and other nefarious things.</p>\n\n<p>This is another case where the programmer could be someone next door.</p>\n\n<h3 id=\"1999-the-matrix\">1999 The Matrix</h3>\n<p>All the human characters are programmers.  They all live next door.  But, given the red pill, are transported to an alternate reality where they can “see” the code.  They are engaged in an apocalyptic fight over good and evil.  The main character is a type of Jesus.</p>\n\n<h2 id=\"summary\">Summary</h2>\n<p>Note the progression.  Over the years the representation of the computer changes from Main Character (Good or evil) to supporting character to tool.  The programmer changes from obscurity to mad or damaged scientist, to Nature or Skynet, to the guy next door, to hyper-aware Savior.</p>\n\n<p>What does this say about society’s opinion of us.  Does society really think we are the folks who live next door who are simultaneously the hidden saviors?</p>\n\n<p>Well, maybe we don’t want to read too much into things.  Note that I stopped this review just prior to the millennium.  Have there been any movies since then in which programmers played a significant role?</p>\n\n<p>Actually, I think we have transitioned off the screen and have become part of the movie industry.  Virtually no movie made nowadays can be made without massive computer graphics and programming effort.  So now they know us intimately.  We <em>do</em> live next door.  And they don’t need to put us on the screen anymore.</p>\n\n",
    "sanitized": "It is interesting and educational to go back in time and look at how programmers were represented in popular culture.  What did they think of us?  Did they know who were?\n\nIt’s important to remember that prior to 1946 there were no programmers, that computers themselves were virtually unknown until the late ’50s.  That virtually nobody lived next door to a programmer back then.\n\nNowadays virtually everyone in the western world, and even in much of the developing world, is surrounded by computers.  And while programming remains a mystery to many, programmers are common neighbors.\n\nSo let’s scan the last six decades and watch as the culture changes it’s view of just who we are and what we do.\n\n1956 Forbidden Planet\nIt’s best to begin at the beginning.  The first truly classic Science Fiction movie.  Forbidden Planet.  If you haven’t seen it, you are missing something profound and spectacular.  I urge you to watch – even study – it.\n\nThere are no explicit mentions of computers or programmers in this movie.  The concept was simply not something that the public could relate to.  However there was a machine.  A very big machine.  And the implication was that it was intelligent, but not sentient.\n\n\n\nIn the movie the anti-hero Dr Morbius is marooned on the uninhabited world of Altair 4.  He discovers an ancient alien machine.  Two decades later rescuers arrive.  He shows them the machine and states: “I have reason to believe that years ago a minor alteration was performed throughout the entire 8000 cubic miles of it’s own fabric.”\n\nThe programmers of that big machine are long dead; but they are described as belonging to a highly evolved and benevolent alien race.\n\nThere is another machine on this planet.  It is a robot named Robby.\n\n\n\nRobby is clearly intelligent and sentient.  Robby speaks English, with the inflection of a proper british butler, rather in the manner of Carson on Downton Abbey.  Dr. Morbius claims to have created the Robot; so he is clearly the programmer.\n\nMorbius is studious, austere, even dour.  He is not evil; but he is a hermit and does not particularly enjoy the company of others.  He is massively intelligent but quite anti-social.\n\nNow remember that this was the ’50s.  Missiles and A-bombs.  Scientists had a particular stereotype in those days, and Dr. Morbius is consistent with that; though with a hint of Captain Nemo.\n\n1954 TOBOR the Great\nYes, I’m going backwards two years, but only to say that I did not forget this movie.  I just don’t count it as significant.  This was a movie made for kids, and the semi-intelligent robot is much more like Lassie than Robby.  The creator of Tobor is an eminent scientist who also fits the mold of the ’50s.\n\n1966 Star Trek\nWith one exception, we learn very little about the programmers in Star Trek.  The computer, however, is fascinating.  The computer was voiced by Majel Barrett, Gene Roddenberry’s wife.  She also played Nurse Chapel, and “Number One” in the pilot.  She played the computer as utterly flat.  The voice was monotone.  The information was factual.  The computer never offered an opinion, or an emotion of any kind.  The computer was nothing more than a tool.\n\nThe exception was the episode entitled The Ultimate Computer in which a new intelligent computer was hooked up to the enterprise.  The creator (and implicitly the programmer) of this machine was Dr. Daystrom.  Both he and the computer have a simultaneous nervous breakdown, and Kirk has to “pull the plug”.\n\nThe implication is that programmers are so intelligent and driven that they eventually lose emotional stability.\n\nThis is one of the first instances of the computer acting as the villain.\n\n1968 2001: A Space Odyssey\nHal 9000 is the villain of this story.  We know little of the programmer, Dr. Chandra, except that he taught the computer a song.\n\nNote that during this era it is the computer that is the character.  The programmers, if mentioned at all, are ancillary.\n\n1970 Colossus: The Forbin Project\nAnother movie in which the computer is the hyperintelligent villain.  The programmer is a scientist from the Dr. Morbius mold.\n\n1982 Blade Runner\nThe computers are among the main characters and are essentially a race of slaves.  We never meet the programmers, but it’s clear that they must be morally bankrupt.\n\n1982 Tron\nHero programmer defeats evil computer.  This is the first time we see the programmer as a good guy who defeats the computer.  The movie is also a foreshadow of The Matrix because the main character gets transported into the computer.  As a programmer (though they call him a “user”) he as powers.\n\nThe hero programmer is a world famous scientist and business man.  He does not live next door.\n\n1983 War Games\nThe computer is again a character, though this time an innocent dupe.  A young boy meets the programmer and psychoanalyses him in order to convince the computer to not destroy the world.  The programmer is depicted as a famous scientist who is emotionally damaged.  The computer is depicted as a child-like character who likes to play games.\n\n1984 The Terminator\nThis one is indirect. Well meaning humans program the evil computer, Skynet, that then programs the Terminator to kill Sarah Connor.  So this is a singularity prediction.  The computers program the computer.\n\nOne interesting aspect of this film is the depiction of the human-like machine being so utterly focused on it’s mission.  At first you think of the terminator as almost human.  But bit by bit that humanity is lost.  In the end you see only the machine, half-destroyed, missing legs and all vestiges of human form, still intent on one purpose only.\n\n1986 Short Circuit\n(Sigh) Jonny number five is a combat robot whose programming gets scrambled by a lightning strike.  This makes the robot sentient and purely innocent.  Eventually the robot invents it’s own moral code which is vastly superior to anything human.\n\nSo there is no programmer in this case – except nature or God or…  And in that case all human flaws are exposed by the purity of the programming.\n\nCute movie, but very dumb.\n\n1993 Jurassic Park\nThis is our first real glimpse of a humanized programmer.  Dennis Nedry is not a mad scientist, not a well respected researcher, he’s just a common ordinary programmer.  And he is a flawed human.  Oh, there’s a bit of the Twinkie eating, basement dwelling stereotype there; but this is the first time the movies show a programmer as someone who might live next door.\n\nThe computer is not a character at all.  It is just a tool (“a Unix System”).\n\n1995 The Net\nThe main character is a programmer who must user her skills as a programmer to defeat a ruthless plot to frame her for murder and other nefarious things.\n\nThis is another case where the programmer could be someone next door.\n\n1999 The Matrix\nAll the human characters are programmers.  They all live next door.  But, given the red pill, are transported to an alternate reality where they can “see” the code.  They are engaged in an apocalyptic fight over good and evil.  The main character is a type of Jesus.\n\nSummary\nNote the progression.  Over the years the representation of the computer changes from Main Character (Good or evil) to supporting character to tool.  The programmer changes from obscurity to mad or damaged scientist, to Nature or Skynet, to the guy next door, to hyper-aware Savior.\n\nWhat does this say about society’s opinion of us.  Does society really think we are the folks who live next door who are simultaneously the hidden saviors?\n\nWell, maybe we don’t want to read too much into things.  Note that I stopped this review just prior to the millennium.  Have there been any movies since then in which programmers played a significant role?\n\nActually, I think we have transitioned off the screen and have become part of the movie industry.  Virtually no movie made nowadays can be made without massive computer graphics and programming effort.  So now they know us intimately.  We do live next door.  And they don’t need to put us on the screen anymore."
  },
  {
    "itemId": "http://blog.cleancoder.com/uncle-bob/2019/10/31/Circulatory",
    "raw": "<p>My wife and I both got genetic analyses from <a href=\"https://www.23andme.com/\">23andMe</a> recently.  I discovered that my ancestry comes from Britain and Northern Europe.  My wife is Mexican, and she found that her ancestry is very diverse.</p>\n\n<p>One of the services of 23andMe is that they offer to connect you to relatives who have also used 23andMe.  Using this service my wife found a second cousin whom she had never met, but whose extended family had overlapped with hers.  By email they were able to compare the names of aunts and uncles, and the towns where they lived.  The more they talked, the more they realized that the overlap with the extended families was large.</p>\n\n<p>Some years back I went through the effort of scanning all the old photo albums that we had created or inherited over the years.  From that trove of digitized pictures my wive was able to find a 50 year old photograph of that extended family, taken in a little town in Mexico.  She shared that photo with her relative who happened to be visiting that town at the moment.</p>\n\n<p>The relative showed the picture to her aunts, uncles, cousins, and they all started pointing to people that they recognized.  Many tears flowed as warm recollections were conveyed.  This is apparently the only surviving photograph of that extended family; and now they all have, and cherish, it.</p>\n\n<p>Now I want you to consider what made this possible.</p>\n\n<ul>\n  <li>I scanned those pictures on a whim, using <a href=\"https://photomyne.com\">Photomyne</a> an iPhone app that makes scanning and cataloging old photos very easy.</li>\n  <li>My wife was able to find that picture using the Photos app on the Mac.</li>\n  <li>The software at 23andMe was able to find her distant relative.</li>\n  <li>Email and FaceTime allowed the two to communicate.</li>\n  <li>And the internet ran through it all.</li>\n</ul>\n\n<p>Software.  It was software that drove the connection of all those people.  It was software that enabled the warm tears of recollection to flow.  It was software that provided the photo to the folks in that little town in Mexico, who had not seen the faces of their loved ones in 50 years.  It was Software.  It was you and I – the programmers who built the systems and the connections that made that miracle happen.</p>\n\n<p>Software is the circulatory system of our civilization.  Software digests, filters, and sorts the constituents of the information stream.  Software routes the necessary element of that stream to the right places.  Software is the heart, the lungs, the vessels, the liver and kidneys, and the digestive system of our civilization.  Nothing works anymore without software.  Our civilization could no longer survive without software.</p>\n\n<p>But software does more than support the survival of our civilization.  Software also supports those moments of joy that my wife and her relatives recently experienced.</p>\n\n<p>It is things like this that make me proud to be a programmer.  Without us, our civilization could not survive, and the warm connections between relatives and friends could not be made.</p>\n\n<p>It is things like this that also make me yearn for a deeper discipline and professionalism for our industry.  Too much depends upon us now.  We’re going to have to leave the wild west of software behind and civilize ourselves, so that the civilization we support will continue to prosper.</p>\n\n",
    "sanitized": "My wife and I both got genetic analyses from 23andMe recently.  I discovered that my ancestry comes from Britain and Northern Europe.  My wife is Mexican, and she found that her ancestry is very diverse.\n\nOne of the services of 23andMe is that they offer to connect you to relatives who have also used 23andMe.  Using this service my wife found a second cousin whom she had never met, but whose extended family had overlapped with hers.  By email they were able to compare the names of aunts and uncles, and the towns where they lived.  The more they talked, the more they realized that the overlap with the extended families was large.\n\nSome years back I went through the effort of scanning all the old photo albums that we had created or inherited over the years.  From that trove of digitized pictures my wive was able to find a 50 year old photograph of that extended family, taken in a little town in Mexico.  She shared that photo with her relative who happened to be visiting that town at the moment.\n\nThe relative showed the picture to her aunts, uncles, cousins, and they all started pointing to people that they recognized.  Many tears flowed as warm recollections were conveyed.  This is apparently the only surviving photograph of that extended family; and now they all have, and cherish, it.\n\nNow I want you to consider what made this possible.\n\n\n  I scanned those pictures on a whim, using Photomyne an iPhone app that makes scanning and cataloging old photos very easy.\n  My wife was able to find that picture using the Photos app on the Mac.\n  The software at 23andMe was able to find her distant relative.\n  Email and FaceTime allowed the two to communicate.\n  And the internet ran through it all.\n\n\nSoftware.  It was software that drove the connection of all those people.  It was software that enabled the warm tears of recollection to flow.  It was software that provided the photo to the folks in that little town in Mexico, who had not seen the faces of their loved ones in 50 years.  It was Software.  It was you and I – the programmers who built the systems and the connections that made that miracle happen.\n\nSoftware is the circulatory system of our civilization.  Software digests, filters, and sorts the constituents of the information stream.  Software routes the necessary element of that stream to the right places.  Software is the heart, the lungs, the vessels, the liver and kidneys, and the digestive system of our civilization.  Nothing works anymore without software.  Our civilization could no longer survive without software.\n\nBut software does more than support the survival of our civilization.  Software also supports those moments of joy that my wife and her relatives recently experienced.\n\nIt is things like this that make me proud to be a programmer.  Without us, our civilization could not survive, and the warm connections between relatives and friends could not be made.\n\nIt is things like this that also make me yearn for a deeper discipline and professionalism for our industry.  Too much depends upon us now.  We’re going to have to leave the wild west of software behind and civilize ourselves, so that the civilization we support will continue to prosper."
  }
]
