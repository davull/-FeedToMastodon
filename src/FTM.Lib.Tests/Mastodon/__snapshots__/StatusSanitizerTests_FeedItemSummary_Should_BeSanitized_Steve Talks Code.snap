[
  {
    "itemId": "https://stevetalkscode.co.uk/regex-source-generator",
    "raw": "In this post, I describe the new source code generated RegEx that has been introduced with .NET 7",
    "sanitized": "In this post, I describe the new source code generated RegEx that has been introduced with .NET 7"
  },
  {
    "itemId": "https://stevetalkscode.co.uk/speccyimageloader",
    "raw": "This post is a bit of fun showing how I recreated a ZX Spectrum loading screen for my Source Generation Game talk",
    "sanitized": "This post is a bit of fun showing how I recreated a ZX Spectrum loading screen for my Source Generation Game talk"
  },
  {
    "itemId": "https://stevetalkscode.co.uk/sourcegeneratorattacks",
    "raw": "This post highlights the dangers of trusting third party .NET Source Generators & shows ways to spot supply chain attacks.",
    "sanitized": "This post highlights the dangers of trusting third party .NET Source Generators & shows ways to spot supply chain attacks."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/debug-source-generators-with-vs2019-1610",
    "raw": "In this post, I provide a step by step guide to debugging C#9 source generators using the new features in Visual Studio 2019 16.10",
    "sanitized": "In this post, I provide a step by step guide to debugging C#9 source generators using the new features in Visual Studio 2019 16.10"
  },
  {
    "itemId": "https://stevetalkscode.co.uk/jetbrains-di-webinar",
    "raw": "Last week, I had the honour of presenting a live webinar for JetBrains where I gave a presentation about using Dependency Injection in .NET Core and .NET 5. The recording is now available on YouTube.",
    "sanitized": "Last week, I had the honour of presenting a live webinar for JetBrains where I gave a presentation about using Dependency Injection in .NET Core and .NET 5. The recording is now available on YouTube."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/openapireference-commands",
    "raw": "I this post I show how you can customise the code generated by the OpenApiReference tooling from Visual Studio's Connected Services using NSwag commands.",
    "sanitized": "I this post I show how you can customise the code generated by the OpenApiReference tooling from Visual Studio's Connected Services using NSwag commands."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/middleware-styles",
    "raw": "In this post, I discuss the differences between convention and factory styles of writing middleware in ASP.NET Core along with the differences in how the instances are created and interact with dependency injection.",
    "sanitized": "In this post, I discuss the differences between convention and factory styles of writing middleware in ASP.NET Core along with the differences in how the instances are created and interact with dependency injection."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/stronglytypedheaders-part1",
    "raw": "In this first part of a series of posts, I discuss the thinking behind taking  string based HTTP Headers and presenting them to your .NET code via dependency injection as strongly typed objects.",
    "sanitized": "In this first part of a series of posts, I discuss the thinking behind taking  string based HTTP Headers and presenting them to your .NET code via dependency injection as strongly typed objects."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/null-injection",
    "raw": "In this post, I present my Top 5 scenarios of null injections from the .NET Dependency Injection container and use these to justify adding guard clauses to your C# constructors in consuming classes.",
    "sanitized": "In this post, I present my Top 5 scenarios of null injections from the .NET Dependency Injection container and use these to justify adding guard clauses to your C# constructors in consuming classes."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/disposables-in-di-part-3",
    "raw": "Following on from Parts 1 and 2, in this final part of the series, I move on to dealing with types that you do not have source control for and therefore cannot change directly to hide the Dispose method using the techniques I have described in the previous posts.",
    "sanitized": "Following on from Parts 1 and 2, in this final part of the series, I move on to dealing with types that you do not have source control for and therefore cannot change directly to hide the Dispose method using the techniques I have described in the previous posts."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/disposables-in-di-part-2",
    "raw": "Following on from Part 1 where I provide an overview of hiding the Dispose method from consumers of the Dependency Injection container, in this part, I move on to dealing with objects that are created outside, but registered with the DI container.",
    "sanitized": "Following on from Part 1 where I provide an overview of hiding the Dispose method from consumers of the Dependency Injection container, in this part, I move on to dealing with objects that are created outside, but registered with the DI container."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/disposables-in-di-part-1",
    "raw": "In this post I will be discussing the traps that can catch you out by potentially creating memory leaks when registering types that implement the IDisposable interface as services with the out-of-the-box .NET Dependency Injection container.",
    "sanitized": "In this post I will be discussing the traps that can catch you out by potentially creating memory leaks when registering types that implement the IDisposable interface as services with the out-of-the-box .NET Dependency Injection container."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/c-sharp-9-record-factories",
    "raw": "In this post, I walk through using the Factory Pattern to create instances of C# 9 records where instances can be created using a combination of input from the IoC container, caller input and computed values derived from these.",
    "sanitized": "In this post, I walk through using the Factory Pattern to create instances of C# 9 records where instances can be created using a combination of input from the IoC container, caller input and computed values derived from these."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/merge-to-monorepo-2",
    "raw": "Following on from Part 1 where I give the background as to the reasons that I wanted to move to a single Git repository (also known as a mono-repo), this post provides a walk-through of the PowerShell script that I created to do the job.",
    "sanitized": "Following on from Part 1 where I give the background as to the reasons that I wanted to move to a single Git repository (also known as a mono-repo), this post provides a walk-through of the PowerShell script that I created to do the job."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/merge-to-monorepo-1",
    "raw": "Following on from my last blog about the problems I had setting up Octopus Deploy with a service account, this is another DevOps related post that describes the approach I have taken to merging multiple Git repositories into a single Git repository (commonly known as a mono-repo).",
    "sanitized": "Following on from my last blog about the problems I had setting up Octopus Deploy with a service account, this is another DevOps related post that describes the approach I have taken to merging multiple Git repositories into a single Git repository (commonly known as a mono-repo)."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/install-octopus-with-domain-account",
    "raw": "This post covers how to address problems that can occur when installing Octopus Deploy and setting it to use a domain account as the service account.",
    "sanitized": "This post covers how to address problems that can occur when installing Octopus Deploy and setting it to use a domain account as the service account."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/simplifying-di-with-functions",
    "raw": "This post shows how to apply functional programming techniques to dependency injection to simplify single method classes.",
    "sanitized": "This post shows how to apply functional programming techniques to dependency injection to simplify single method classes."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/named-dependencies-part-2",
    "raw": "This post describes how the use of custom typed delegates can be used to implement named or keyed dependency resolution using the Microsoft DI container that comes with .NET Core.",
    "sanitized": "This post describes how the use of custom typed delegates can be used to implement named or keyed dependency resolution using the Microsoft DI container that comes with .NET Core."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/named-dependencies-part-1",
    "raw": "In this post, I demonstrate how to use custom typed delegates to perform named/keyed dependency injection using the Microsoft Dependency Injection container in .NET core.",
    "sanitized": "In this post, I demonstrate how to use custom typed delegates to perform named/keyed dependency injection using the Microsoft Dependency Injection container in .NET core."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/separating-aspnetcore-startup",
    "raw": "In this post, I look at whether it is worth moving the dependency registrations in the Startup.cs class into its own assembly to maintain a clean code approach to the top level web application.",
    "sanitized": "In this post, I look at whether it is worth moving the dependency registrations in the Startup.cs class into its own assembly to maintain a clean code approach to the top level web application."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/using-iconfigureoptions",
    "raw": "In this post, I look at using the IConfigureOptions interface to apply changes to a configuration as an alternative to the bridge pattern I have described in previous posts.",
    "sanitized": "In this post, I look at using the IConfigureOptions interface to apply changes to a configuration as an alternative to the bridge pattern I have described in previous posts."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/istartup-gotcha",
    "raw": "In this post I address a problem with injecting values into the constructor of a class that implemented IStartup and why doing this does not work.",
    "sanitized": "In this post I address a problem with injecting values into the constructor of a class that implemented IStartup and why doing this does not work."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/configuration-bridging-part-4",
    "raw": "This is part 4 of a series where I have been looking at moving to a SOLID approach of implementing configuration binding in ASP.Net Core using a bridging class to remove the need for consumers of the configuration object to use IOptions<T>  or IOptionsSnapshot<T>. In this post I move onto looking at injecting some functionality into the bridge class to decrypt settings and validate the settings read. Lastly I show registering the bridge class via multiple fine grained interfaces.",
    "sanitized": "This is part 4 of a series where I have been looking at moving to a SOLID approach of implementing configuration binding in ASP.Net Core using a bridging class to remove the need for consumers of the configuration object to use IOptions  or IOptionsSnapshot. In this post I move onto looking at injecting some functionality into the bridge class to decrypt settings and validate the settings read. Lastly I show registering the bridge class via multiple fine grained interfaces."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/configuration-bridging-part-3",
    "raw": "In this post, I move on from the lambda expression way of creating a bridge and look at splitting this out into an interface and classes.",
    "sanitized": "In this post, I move on from the lambda expression way of creating a bridge and look at splitting this out into an interface and classes."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/configuration-bridging-part-2",
    "raw": "In this post I looks at using an anonymous function to create a bridge between IOptionsSnapshot and T so that the controller does not need to be aware of the options pattern.",
    "sanitized": "In this post I looks at using an anonymous function to create a bridge between IOptionsSnapshot and T so that the controller does not need to be aware of the options pattern."
  },
  {
    "itemId": "https://stevetalkscode.co.uk/configuration-bridging-part-1",
    "raw": "This post is intended to set the stage for a later post (though may become a series) I have planned in which I look at using the Bridge design pattern to break the immediate dependency on the IOptions pattern in a .Net Core application.",
    "sanitized": "This post is intended to set the stage for a later post (though may become a series) I have planned in which I look at using the Bridge design pattern to break the immediate dependency on the IOptions pattern in a .Net Core application."
  }
]
