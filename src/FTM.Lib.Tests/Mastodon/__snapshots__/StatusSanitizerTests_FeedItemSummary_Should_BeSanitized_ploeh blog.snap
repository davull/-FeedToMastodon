[
  {
    "itemId": "https://blog.ploeh.dk/2024/11/18/collecting-and-handling-result-values",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>The answer is traverse. It's always traverse.</em>\n    </p>\n    <p>\n        I recently came across <a href=\"https://stackoverflow.com/q/79112836/126014\">a Stack Overflow question</a> about collecting and handling <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">sum types</a> (AKA discriminated unions or, in this case, result types). While the question was tagged <em>functional-programming</em>, the overall structure of the code was so imperative, with so much interleaved <a href=\"https://en.wikipedia.org/wiki/Input/output\">I/O</a>, that it hardly <a href=\"/2018/11/19/functional-architecture-a-definition\">qualified as functional architecture</a>.\n    </p>\n    <p>\n        Instead, I gave <a href=\"https://stackoverflow.com/a/79112992/126014\">an answer which involved a minimal change to the code</a>. Subsequently, the original poster asked to see a more functional version of the code. That's a bit too large a task for a Stack Overflow answer, I think, so I'll do it here on the blog instead.\n    </p>\n    <p>\n        Further comments and discussion on the original post reveal that the poster is interested in two alternatives. I'll start with the alternative that's only discussed, but not shown, in the question. The motivation for this ordering is that this variation is easier to implement than the other one, and I consider it pedagogical to start with the simplest case.\n    </p>\n    <p>\n        I'll do that in this article, and then follow up with another article that covers the short-circuiting case.\n    </p>\n    <h3 id=\"9b3987ad5daf4df48c8155a54fb39318\">\n        Imperative outset <a href=\"#9b3987ad5daf4df48c8155a54fb39318\">#</a>\n    </h3>\n    <p>\n        To begin, consider this mostly imperative code snippet:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;();\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>);\n<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">updateResult</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;(<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;)&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;},\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;{&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>);&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n}\n \n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n \n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Results</span>.<span style=\"color:#74531f;\">Ok</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItems</span>],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">failedItems</span>],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">errors</span>]));</pre>\n    </p>\n    <p>\n        There's quite a few things to take in, and one has to infer most of the types and APIs, since the original post didn't show more code than that. If you're used to engaging with Stack Overflow questions, however, it's not too hard to figure out what most of the moving parts do.\n    </p>\n    <p>\n        The most non-obvious detail is that the code uses a library called <a href=\"https://github.com/mcintyre321/OneOf/\">OneOf</a>, which supplies general-purpose, but rather abstract, sum types. Both the container type <code>OneOf</code>, as well as the two indicator types <code>NotFound</code> and <code>Error</code> are defined in that library.\n    </p>\n    <p>\n        The <code>Match</code> method implements standard <a href=\"/2018/05/22/church-encoding\">Church encoding</a>, which enables the code to pattern-match on the three alternative values that <code>UpdateItem</code> returns.\n    </p>\n    <p>\n        One more detail also warrants an explicit description: The <code>itemsToUpdate</code> object is an input argument of the type <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;</code>.\n    </p>\n    <p>\n        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?\n    </p>\n    <h3 id=\"c4e1b030e919464aa22ade11a511414f\">\n        Standard traversal <a href=\"#c4e1b030e919464aa22ade11a511414f\">#</a>\n    </h3>\n    <p>\n        I'll pretend that we only need to turn the above code snippet into a functional design. Thus, I'm ignoring that the code is most likely part of a larger code base. Because of the implied database interaction, the method isn't a <a href=\"https://en.wikipedia.org/wiki/Pure_function\">pure function</a>. Unless it's a top-level method (that is, at the boundary of the application), it doesn't exemplify larger-scale <a href=\"/2018/11/19/functional-architecture-a-definition\">functional architecture</a>.\n    </p>\n    <p>\n        That said, my goal is to refactor the code to an <a href=\"/2020/03/02/impureim-sandwich\">Impureim Sandwich</a>: Impure actions first, then the meat of the functionality as a pure function, and then some more impure actions to complete the functionality. This strongly suggests that the first step should be to map over <code>itemsToUpdate</code> and call <code>UpdateItem</code> for each.\n    </p>\n    <p>\n        If, however, you do that, you get this:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));</pre>\n    </p>\n    <p>\n        The <code>results</code> object is a sequence of tasks. If we consider <a href=\"/2020/07/27/task-asynchronous-programming-as-an-io-surrogate\">Task as a surrogate for IO</a>, each task should be considered impure, as it's either non-deterministic, has side effects, or both. This means that we can't pass <code>results</code> to a pure function, and that frustrates the ambition to structure the code as an Impureim Sandwich.\n    </p>\n    <p>\n        This is one of the most common problems in functional programming, and the answer is usually: Use a <a href=\"/2024/11/11/traversals\">traversal</a>.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));</pre>\n    </p>\n    <p>\n        Because this first, impure layer of the sandwich awaits the task, <code>results</code> is now an immutable value that can be passed to the pure step. This, by the way, assumes that <code>ShoppingListItem</code> is immutable, too.\n    </p>\n    <p>\n        Notice that I adjusted one of the cases of the discriminated union to <code><span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;</code> rather than just <code>NotFound</code>. While the OneOf library ships with a <code>NotFound</code> type, it doesn't have a generic container of that name, so I defined it myself:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>);</pre>\n    </p>\n    <p>\n        I added it to make the next step simpler.\n    </p>\n    <h3 id=\"8f0e6fb0f34047ed99c59f6140a2b08f\">\n        Aggregating the results <a href=\"#8f0e6fb0f34047ed99c59f6140a2b08f\">#</a>\n    </h3>\n    <p>\n        The next step is to sort the <code>results</code> into three 'buckets', as it were.\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.<span style=\"color:#74531f;\">Empty</span>&lt;<span style=\"color:#2b91af;\">Error</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;);\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">seed</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item1,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item2,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.Item3.<span style=\"font-weight:bold;color:#74531f;\">Append</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>))));</pre>\n    </p>\n    <p>\n        It's also possible to inline the <code>seed</code> value, but here I defined it in a separate expression in an attempt at making the code a little more readable. I don't know if I succeeded, because regardless of where it goes, it's hardly <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> to break tuple initialization over multiple lines. I had to, though, because otherwise the code would run <a href=\"/2019/11/04/the-80-24-rule\">too far to the right</a>.\n    </p>\n    <p>\n        The lambda expression handles each <code>result</code> in <code>results</code> and uses <code>Match</code> to append the value to its proper 'bucket'. The outer <code>result</code> is a tuple of the three collections.\n    </p>\n    <h3 id=\"035012be047e431d8904686ec9915b8f\">\n        Saving the changes and returning the results <a href=\"#035012be047e431d8904686ec9915b8f\">#</a>\n    </h3>\n    <p>\n        The final, impure step in the sandwich is to save the changes and return the results:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkResult</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item1],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item2],&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.Item3]));</pre>\n    </p>\n    <p>\n        To be honest, the last line of code is pure, but <a href=\"/2023/10/09/whats-a-sandwich\">that's not unusual</a> when it comes to Impureim Sandwiches.\n    </p>\n    <h3 id=\"178ff7d455e44a619b67d911a6aecba7\">\n        Accumulating the bulk-update result <a href=\"#178ff7d455e44a619b67d911a6aecba7\">#</a>\n    </h3>\n    <p>\n        So far, I've assumed that the final <code>BulkUpdateResult</code> class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use them to aggregate the result, instead of an anonymous tuple.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>([..&nbsp;StoredItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>],&nbsp;FailedItems,&nbsp;Errors);\n \n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"color:#2b91af;\">ShoppingListItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>(StoredItems,&nbsp;[..&nbsp;FailedItems,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>],&nbsp;Errors);\n \n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Error</span>(<span style=\"color:#2b91af;\">Error</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>(StoredItems,&nbsp;FailedItems,&nbsp;[..&nbsp;Errors,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>]);</pre>\n    </p>\n    <p>\n        I would have personally preferred the name <code>NotFound</code> instead of <code>Fail</code>, but I was going with the original post's <code>failedItems</code> terminology, and I thought that it made more sense to call a method <code>Fail</code> when it adds to a collection called <code>FailedItems</code>.\n    </p>\n    <p>\n        Adding these three instance methods to <code>BulkUpdateResult</code> simplifies the composing code:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">OneOf</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>,&nbsp;<span style=\"color:#2b91af;\">NotFound</span>&lt;<span style=\"color:#2b91af;\">ShoppingListItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">Error</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">itemsToUpdate</span>.<span style=\"font-weight:bold;color:#74531f;\">Traverse</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&gt;&nbsp;<span style=\"color:#74531f;\">UpdateItem</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>));\n \n<span style=\"color:green;\">//&nbsp;Pure</span>\n<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">results</span>.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BulkUpdateResult</span>([],&nbsp;[],&nbsp;[]),\n&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">state</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">result</span>.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Store</span>(<span style=\"font-weight:bold;color:#1f377f;\">storedItem</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Fail</span>(<span style=\"font-weight:bold;color:#1f377f;\">notFound</span>.Item),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">error</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">state</span>.<span style=\"font-weight:bold;color:#74531f;\">Error</span>(<span style=\"font-weight:bold;color:#1f377f;\">error</span>)));\n \n<span style=\"color:green;\">//&nbsp;Impure</span>\n<span style=\"color:blue;\">await</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dbContext</span>.<span style=\"font-weight:bold;color:#74531f;\">SaveChangesAsync</span>();\n<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OkResult</span>(<span style=\"font-weight:bold;color:#1f377f;\">result</span>);</pre>\n    </p>\n    <p>\n        This variation starts with an empty <code>BulkUpdateResult</code> and then uses <code>Store</code>, <code>Fail</code>, or <code>Error</code> as appropriate to update the state.\n    </p>\n    <h3 id=\"32e680ea1dbb4bc7bc097e8fcfcb90e9\">\n        Parallel Sequence <a href=\"#32e680ea1dbb4bc7bc097e8fcfcb90e9\">#</a>\n    </h3>\n    <p>\n        If the tasks you want to traverse are thread-safe, you might consider making the traversal concurrent. You can use <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task.whenall\">Task.WhenAll</a> for that. It has the same type as <code>Sequence</code>, so if you can live with the extra non-determinism that comes with parallel execution, you can use that instead:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"color:#74531f;\">Sequence</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Task</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;<span style=\"color:#2b91af;\">Task</span>.<span style=\"color:#74531f;\">WhenAll</span>(<span style=\"font-weight:bold;color:#1f377f;\">tasks</span>);\n}</pre>\n    </p>\n    <p>\n        Since the method signature doesn't change, the rest of the code remains unchanged.\n    </p>\n    <h3 id=\"a54fe20498bd4aca99d7d4184209a4df\">\n        Conclusion <a href=\"#a54fe20498bd4aca99d7d4184209a4df\">#</a>\n    </h3>\n    <p>\n        One of the most common stumbling blocks in functional programming is when you have a collection of values, and you need to perform an impure action (typically I/O) for each. This leaves you with a collection of impure values (<code>Task</code> in C#, <code>Task</code> or <code>Async</code> in <a href=\"https://fsharp.org/\">F#</a>, <code>IO</code> in <a href=\"https://www.haskell.org/\">Haskell</a>, etc.). What you actually need is a single impure value that contains the collection of results.\n    </p>\n    <p>\n        The solution to this kind of problem is to <em>traverse</em> the collection, rather than mapping over it (with <code>Select</code>, <code>map</code>, <code>fmap</code>, or similar). Note that computer scientists often talk about <em>traversing</em> a data structure like a <a href=\"https://en.wikipedia.org/wiki/Tree_(abstract_data_type)\">tree</a>. This is a less well-defined use of the word, and not directly related. That said, you <em>can</em> also write <code>Traverse</code> and <code>Sequence</code> functions for trees.\n    </p>\n    <p>\n        This article used a Stack Overflow question as the starting point for an example showing how to refactor imperative code to an Impureim Sandwich.\n    </p>\n    <p>\n        This completes the first variation requested in the Stack Overflow question.\n    </p>\n    <p>\n        <strong>Next:</strong> Short-circuiting an asynchronous traversal.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "The answer is traverse. It's always traverse.\n    \n    \n        I recently came across a Stack Overflow question about collecting and handling sum types (AKA discriminated unions or, in this case, result types). While the question was tagged functional-programming, the overall structure of the code was so imperative, with so much interleaved I/O, that it hardly qualified as functional architecture.\n    \n    \n        Instead, I gave an answer which involved a minimal change to the code. Subsequently, the original poster asked to see a more functional version of the code. That's a bit too large a task for a Stack Overflow answer, I think, so I'll do it here on the blog instead.\n    \n    \n        Further comments and discussion on the original post reveal that the poster is interested in two alternatives. I'll start with the alternative that's only discussed, but not shown, in the question. The motivation for this ordering is that this variation is easier to implement than the other one, and I consider it pedagogical to start with the simplest case.\n    \n    \n        I'll do that in this article, and then follow up with another article that covers the short-circuiting case.\n    \n    \n        Imperative outset #\n    \n    \n        To begin, consider this mostly imperative code snippet:\n    \n    \n        var storedItems = new List<ShoppingListItem>();\nvar failedItems = new List<ShoppingListItem>();\nvar errors = new List<Error>();\nvar state = (storedItems, failedItems, errors);\nforeach (var item in itemsToUpdate)\n{\n    OneOf<ShoppingListItem, NotFound, Error> updateResult = await UpdateItem(item, dbContext);\n    state = updateResult.Match<(List<ShoppingListItem>, List<ShoppingListItem>, List<Error>)>(\n        storedItem => { storedItems.Add(storedItem); return state;  },\n        notFound => { failedItems.Add(item); return state; },\n        error => { errors.Add(error); return state; }\n        );\n}\n \nawait dbContext.SaveChangesAsync();\n \nreturn Results.Ok(new BulkUpdateResult([.. storedItems], [.. failedItems], [.. errors]));\n    \n    \n        There's quite a few things to take in, and one has to infer most of the types and APIs, since the original post didn't show more code than that. If you're used to engaging with Stack Overflow questions, however, it's not too hard to figure out what most of the moving parts do.\n    \n    \n        The most non-obvious detail is that the code uses a library called OneOf, which supplies general-purpose, but rather abstract, sum types. Both the container type OneOf, as well as the two indicator types NotFound and Error are defined in that library.\n    \n    \n        The Match method implements standard Church encoding, which enables the code to pattern-match on the three alternative values that UpdateItem returns.\n    \n    \n        One more detail also warrants an explicit description: The itemsToUpdate object is an input argument of the type IEnumerable<ShoppingListItem>.\n    \n    \n        The implementation makes use of mutable state and undisciplined I/O. How do you refactor it to a more functional design?\n    \n    \n        Standard traversal #\n    \n    \n        I'll pretend that we only need to turn the above code snippet into a functional design. Thus, I'm ignoring that the code is most likely part of a larger code base. Because of the implied database interaction, the method isn't a pure function. Unless it's a top-level method (that is, at the boundary of the application), it doesn't exemplify larger-scale functional architecture.\n    \n    \n        That said, my goal is to refactor the code to an Impureim Sandwich: Impure actions first, then the meat of the functionality as a pure function, and then some more impure actions to complete the functionality. This strongly suggests that the first step should be to map over itemsToUpdate and call UpdateItem for each.\n    \n    \n        If, however, you do that, you get this:\n    \n    \n        IEnumerable<Task<OneOf<ShoppingListItem, NotFound, Error>>> results =\n    itemsToUpdate.Select(item => UpdateItem(item, dbContext));\n    \n    \n        The results object is a sequence of tasks. If we consider Task as a surrogate for IO, each task should be considered impure, as it's either non-deterministic, has side effects, or both. This means that we can't pass results to a pure function, and that frustrates the ambition to structure the code as an Impureim Sandwich.\n    \n    \n        This is one of the most common problems in functional programming, and the answer is usually: Use a traversal.\n    \n    \n        IEnumerable<OneOf<ShoppingListItem, NotFound<ShoppingListItem>, Error>> results =\n    await itemsToUpdate.Traverse(item => UpdateItem(item, dbContext));\n    \n    \n        Because this first, impure layer of the sandwich awaits the task, results is now an immutable value that can be passed to the pure step. This, by the way, assumes that ShoppingListItem is immutable, too.\n    \n    \n        Notice that I adjusted one of the cases of the discriminated union to NotFound<ShoppingListItem> rather than just NotFound. While the OneOf library ships with a NotFound type, it doesn't have a generic container of that name, so I defined it myself:\n    \n    \n        internal sealed record NotFound<T>(T Item);\n    \n    \n        I added it to make the next step simpler.\n    \n    \n        Aggregating the results #\n    \n    \n        The next step is to sort the results into three 'buckets', as it were.\n    \n    \n        // Pure\nvar seed =\n    (\n        Enumerable.Empty<ShoppingListItem>(),\n        Enumerable.Empty<ShoppingListItem>(),\n        Enumerable.Empty<Error>()\n    );\nvar result = results.Aggregate(\n    seed,\n    (state, result) =>\n        result.Match(\n            storedItem => (state.Item1.Append(storedItem), state.Item2, state.Item3),\n            notFound => (state.Item1, state.Item2.Append(notFound.Item), state.Item3),\n            error => (state.Item1, state.Item2, state.Item3.Append(error))));\n    \n    \n        It's also possible to inline the seed value, but here I defined it in a separate expression in an attempt at making the code a little more readable. I don't know if I succeeded, because regardless of where it goes, it's hardly idiomatic to break tuple initialization over multiple lines. I had to, though, because otherwise the code would run too far to the right.\n    \n    \n        The lambda expression handles each result in results and uses Match to append the value to its proper 'bucket'. The outer result is a tuple of the three collections.\n    \n    \n        Saving the changes and returning the results #\n    \n    \n        The final, impure step in the sandwich is to save the changes and return the results:\n    \n    \n        // Impure\nawait dbContext.SaveChangesAsync();\nreturn new OkResult(\n    new BulkUpdateResult([.. result.Item1], [.. result.Item2], [.. result.Item3]));\n    \n    \n        To be honest, the last line of code is pure, but that's not unusual when it comes to Impureim Sandwiches.\n    \n    \n        Accumulating the bulk-update result #\n    \n    \n        So far, I've assumed that the final BulkUpdateResult class is just a simple immutable container without much functionality. If, however, we add some copy-and-update functions to it, we can use them to aggregate the result, instead of an anonymous tuple.\n    \n    \n        internal BulkUpdateResult Store(ShoppingListItem item) =>\n    new([.. StoredItems, item], FailedItems, Errors);\n \ninternal BulkUpdateResult Fail(ShoppingListItem item) =>\n    new(StoredItems, [.. FailedItems, item], Errors);\n \ninternal BulkUpdateResult Error(Error error) =>\n    new(StoredItems, FailedItems, [.. Errors, error]);\n    \n    \n        I would have personally preferred the name NotFound instead of Fail, but I was going with the original post's failedItems terminology, and I thought that it made more sense to call a method Fail when it adds to a collection called FailedItems.\n    \n    \n        Adding these three instance methods to BulkUpdateResult simplifies the composing code:\n    \n    \n        // Impure\nIEnumerable<OneOf<ShoppingListItem, NotFound<ShoppingListItem>, Error>> results =\n    await itemsToUpdate.Traverse(item => UpdateItem(item, dbContext));\n \n// Pure\nvar result = results.Aggregate(\n    new BulkUpdateResult([], [], []),\n    (state, result) =>\n        result.Match(\n            storedItem => state.Store(storedItem),\n            notFound => state.Fail(notFound.Item),\n            error => state.Error(error)));\n \n// Impure\nawait dbContext.SaveChangesAsync();\nreturn new OkResult(result);\n    \n    \n        This variation starts with an empty BulkUpdateResult and then uses Store, Fail, or Error as appropriate to update the state.\n    \n    \n        Parallel Sequence #\n    \n    \n        If the tasks you want to traverse are thread-safe, you might consider making the traversal concurrent. You can use Task.WhenAll for that. It has the same type as Sequence, so if you can live with the extra non-determinism that comes with parallel execution, you can use that instead:\n    \n    \n        internal static async Task<IEnumerable<T>> Sequence<T>(this IEnumerable<Task<T>> tasks)\n{\n    return await Task.WhenAll(tasks);\n}\n    \n    \n        Since the method signature doesn't change, the rest of the code remains unchanged.\n    \n    \n        Conclusion #\n    \n    \n        One of the most common stumbling blocks in functional programming is when you have a collection of values, and you need to perform an impure action (typically I/O) for each. This leaves you with a collection of impure values (Task in C#, Task or Async in F#, IO in Haskell, etc.). What you actually need is a single impure value that contains the collection of results.\n    \n    \n        The solution to this kind of problem is to traverse the collection, rather than mapping over it (with Select, map, fmap, or similar). Note that computer scientists often talk about traversing a data structure like a tree. This is a less well-defined use of the word, and not directly related. That said, you can also write Traverse and Sequence functions for trees.\n    \n    \n        This article used a Stack Overflow question as the starting point for an example showing how to refactor imperative code to an Impureim Sandwich.\n    \n    \n        This completes the first variation requested in the Stack Overflow question.\n    \n    \n        Next: Short-circuiting an asynchronous traversal.\n    \n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/11/11/traversals",
    "raw": "\n\n\n<div id=\"post\">\n\t<p>\n\t\t<em>How to convert a list of tasks into an asynchronous list, and similar problems.</em>\n\t</p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In a previous article you learned about <a href=\"/2022/07/18/natural-transformations\">natural transformations</a>, and then how <a href=\"/2018/03/22/functors\">functors</a> compose. You can skip several of them if you like, but you might find the one about <a href=\"/2024/10/28/functor-compositions\">functor compositions</a> relevant. Still, this article can be read independently of the rest of the series.\n\t</p>\n\t<p>\n\t\tYou can go a long way with just a single functor or <a href=\"/2022/03/28/monads\">monad</a>. Consider how useful C#'s LINQ API is, or similar kinds of APIs in other languages - typically <code>map</code> and <code>flatMap</code> methods. These APIs work exclusively with the <a href=\"/2022/04/19/the-list-monad\">List monad</a> (which is also a functor). Working with lists, sequences, or collections is so useful that many languages have other kinds of special syntax specifically aimed at working with multiple values: <a href=\"https://en.wikipedia.org/wiki/List_comprehension\">List comprehension</a>.\n\t</p>\n\t<p>\n\t\t<a href=\"/2022/06/06/asynchronous-monads\">Asynchronous monads</a> like <a href=\"https://docs.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task&lt;T&gt;</a> or <a href=\"https://fsharp.org/\">F#</a>'s <a href=\"https://fsharp.github.io/fsharp-core-docs/reference/fsharp-control-fsharpasync-1.html\">Async&lt;'T&gt;</a> are another kind of functor so useful in their own right that languages have special <code>async</code> and <code>await</code> keywords to compose them.\n\t</p>\n\t<p>\n\t\tSooner or later, though, you run into situations where you'd like to combine two different functors.\n\t</p>\n\t<h3 id=\"ebf67a9789e44ad8997832e1ac7c17da\">\n\t\tLists and tasks <a href=\"#ebf67a9789e44ad8997832e1ac7c17da\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tIt's not unusual to combine collections and asynchrony. If you make an asynchronous database query, you could easily receive something like <code>Task&lt;IEnumerable&lt;Reservation&gt;&gt;</code>. This, in isolation, hardly causes problems, but things get more interesting when you need to compose multiple reads.\n\t</p>\n\t<p>\n\t\tConsider a query like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Foo&gt;&nbsp;Read(<span style=\"color:blue;\">int</span>&nbsp;id)</pre>\n\t</p>\n\t<p>\n\t\tWhat happens if you have a collection of IDs that you'd like to read? This happens:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">var</span>&nbsp;ids&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;42,&nbsp;1337,&nbsp;2112&nbsp;};\nIEnumerable&lt;Task&lt;Foo&gt;&gt;&nbsp;fooTasks&nbsp;=&nbsp;ids.Select(id&nbsp;=&gt;&nbsp;Foo.Read(id));</pre>\n\t</p>\n\t<p>\n\t\tYou get a collection of Tasks, which may be awkward because you can't <code>await</code> it. Perhaps you'd rather prefer a single Task that contains a collection: <code>Task&lt;IEnumerable&lt;Foo&gt;&gt;</code>. In other words, you'd like to flip the functors:\n\t</p>\n\t<p>\n\t\t<pre>IEnumerable&lt;Task&lt;Foo&gt;&gt;\nTask&lt;IEnumerable&lt;Foo&gt;&gt;</pre>\n\t</p>\n\t<p>\n\t\tThe top type is what you have. The bottom type is what you'd like to have.\n\t</p>\n\t<p>\n\t\tThe combination of asynchrony and collections is so common that .NET has special methods to do that. I'll briefly mention one of these later, but what's the <em>general</em> solution to this problem?\n\t</p>\n\t<p>\n\t\tWhenever you need to flip two functors, you need a <em>traversal</em>.\n\t</p>\n\t<h3 id=\"b962041a5e3d4eb9ba5101641407ca3f\">\n\t\tSequence <a href=\"#b962041a5e3d4eb9ba5101641407ca3f\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tAs is almost always the case, we can look to <a href=\"https://www.haskell.org/\">Haskell</a> for a canonical definition of traversals - or, as the type class is called: <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html\">Traversable</a>.\n\t</p>\n\t<p>\n\t\tA <em>traversable functor</em> is a functor that enables you to flip that functor and another functor, like the above C# example. In more succinct syntax:\n\t</p>\n\t<p>\n\t\t<pre>t (f a) -&gt; f (t a)</pre>\n\t</p>\n\t<p>\n\t\tHere, <code>t</code> symbolises any traversable functor (like <code>IEnumerable&lt;T&gt;</code> in the above C# example), and <code>f</code> is another functor (like <code>Task&lt;T&gt;</code>, above). By flipping the functors I mean making <code>t</code> and <code>f</code> change places; just like <code>IEnumerable</code> and <code>Task</code>, above.\n\t</p>\n\t<p>\n\t\tThinking of <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">functors as containers</a> we might depict the function like this:\n\t</p>\n\t<p>\n\t\t<img src=\"/content/binary/traversal-sequence.png\" alt=\"Nested functors depicted as concentric circles. To the left the circle t contains the circle f that again contains the circle a. To the right the circle f contains the circle t that again contains the circle a. An arrow points from the left circles to the right circles.\">\n\t</p>\n\t<p>\n\t\tTo the left, we have an outer functor <code>t</code> (e.g. <code>IEnumerable</code>) that contains another functor <code>f</code> (e.g. <code>Task</code>) that again 'contains' values of type <code>a</code> (in C# typically called <code>T</code>). We'd like to flip how the containers are nested so that <code>f</code> contains <code>t</code>.\n\t</p>\n\t<p>\n\t\tContrary to what you might expect, the function that does that isn't called <em>traverse</em>; it's called <em>sequence</em>. (For those readers who are interested in Haskell specifics, the function I'm going to be talking about is actually called <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequenceA\">sequenceA</a>. There's also a function called <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html#v:sequence\">sequence</a>, but it's not as general. The reason for the odd names are related to the evolution of various Haskell type classes.)\n\t</p>\n\t<p>\n\t\tThe <em>sequence</em> function doesn't work for any old functor. First, <code>t</code> has to be a <em>traversable functor</em>. We'll get back to that later. Second, <code>f</code> has to be an <a href=\"/2018/10/01/applicative-functors\">applicative functor</a>. (To be honest, I'm not sure if this is <em>always</em> required, or if it's possible to produce an example of a specific functor that isn't applicative, but where it's still possible to implement a <em>sequence</em> function. The Haskell <code>sequenceA</code> function has <code>Applicative f</code> as a constraint, but as far as I can tell, this only means that this is a <em>sufficient</em> requirement - not that it's necessary.)\n\t</p>\n\t<p>\n\t\tSince tasks (e.g. <code>Task&lt;T&gt;</code>) are applicative functors (they are, because <a href=\"/2022/06/06/asynchronous-monads\">they are monads</a>, and <a href=\"/2022/03/28/monads\">all monads are applicative functors</a>), that second requirement is fulfilled for the above example. I'll show you how to implement a <code>Sequence</code> function in C# and how to use it, and then we'll return to the general discussion of what a traversable functor is:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;IEnumerable&lt;T&gt;&gt;&nbsp;Sequence&lt;<span style=\"color:#2b91af;\">T</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;Task&lt;T&gt;&gt;&nbsp;source)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Aggregate(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Task.FromResult(Enumerable.Empty&lt;T&gt;()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">async</span>&nbsp;(acc,&nbsp;t)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;xs&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;acc;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;x&nbsp;=&nbsp;<span style=\"color:blue;\">await</span>&nbsp;t;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;xs.Concat(<span style=\"color:blue;\">new</span>[]&nbsp;{&nbsp;x&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n}</pre>\n\t</p>\n\t<p>\n\t\tThis <code>Sequence</code> function enables you to flip any <code>IEnumerable&lt;Task&lt;T&gt;&gt;</code> to a <code>Task&lt;IEnumerable&lt;T&gt;&gt;</code>, including the above <code>fooTasks</code>:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;fooTasks.Sequence();</pre>\n\t</p>\n\t<p>\n\t\tYou can also implement <code>sequence</code> in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;Async&lt;&#39;a&gt;&nbsp;list&nbsp;-&gt;&nbsp;Async&lt;&#39;a&nbsp;list&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;sequence&nbsp;asyncs&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;go&nbsp;acc&nbsp;t&nbsp;=&nbsp;async&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;xs&nbsp;=&nbsp;acc\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;x&nbsp;&nbsp;=&nbsp;t\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;List.append&nbsp;xs&nbsp;[x]&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;List.fold&nbsp;go&nbsp;(fromValue&nbsp;[])&nbsp;asyncs</pre>\n\t</p>\n\t<p>\n\t\tand use it like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;fooTasks&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read\n<span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;fooTasks&nbsp;|&gt;&nbsp;Async.sequence</pre>\n\t</p>\n\t<p>\n\t\tFor this example, I put the <code>sequence</code> function in a local <code>Async</code> module; it's not part of any published <code>Async</code> module.\n\t</p>\n\t<p>\n\t\tThese C# and F# examples are specific translations: From lists of tasks to a task of list. If you need another translation, you'll have to write a new function for that particular combination of functors. Haskell has more general capabilities, so that you don't have to write functions for all combinations. I'm not assuming that you know Haskell, however, so I'll proceed with the description.\n\t</p>\n\t<h3 id=\"d63d059d841b4d9783f42c0360b21662\">\n\t\tTraversable functor <a href=\"#d63d059d841b4d9783f42c0360b21662\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tThe <em>sequence</em> function requires that the 'other' functor (the one that's <em>not</em> the traversable functor) is an applicative functor, but what about the traversable functor itself? What does it take to be a traversable functor?\n\t</p>\n\t<p>\n\t\tI have to admit that I have to rely on Haskell specifics to a greater extent than normal. For most other concepts and abstractions in <a href=\"/2017/10/04/from-design-patterns-to-category-theory\">the overall article series</a>, I've been able to draw on various sources, chief of which are <a href=\"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/\">Category Theory for Programmers</a>. In various articles, I've cited my sources whenever possible. While I've relied on Haskell libraries for 'canonical' ways to <em>represent</em> concepts in a programming language, I've tried to present ideas as having a more universal origin than just Haskell.\n\t</p>\n\t<p>\n\t\tWhen it comes to traversable functors, I haven't come across universal reasoning like that which gives rise to concepts like <a href=\"/2017/10/06/monoids\">monoids</a>, functors, <a href=\"/2018/05/22/church-encoding\">Church encodings</a>, or <a href=\"/2019/04/29/catamorphisms\">catamorphisms</a>. This is most likely a failing on my part.\n\t</p>\n\t<p>\n\t\tTraversals of the Haskell kind are, however, so <em>useful</em> that I find it appropriate to describe them. When consulting, it's a common solution to a lot of problems that people are having with functional programming.\n\t</p>\n\t<p>\n\t\tThus, based on Haskell's <a href=\"https://hackage.haskell.org/package/base/docs/Data-Traversable.html\">Data.Traversable</a>, a traversable functor must:\n\t\t<ul>\n\t\t\t<li>be a functor</li>\n\t\t\t<li>be a 'foldable' functor</li>\n\t\t\t<li>define a <em>sequence</em> or <em>traverse</em> function</li>\n\t\t</ul>\n\t\tYou've already seen examples of <em>sequence</em> functions, and I'm also assuming that (since you've made it so far in the article already) you know what a functor is. But what's a <em>foldable</em> functor?\n\t</p>\n\t<p>\n\t\tHaskell comes with a <a href=\"https://hackage.haskell.org/package/base/docs/Data-Foldable.html\">Foldable</a> type class. It defines a class of data that has a particular type of <a href=\"/2019/04/29/catamorphisms\">catamorphism</a>. As I've outlined in my article on catamorphisms, Haskell's notion of a <em>fold</em> sometimes coincides with a (or 'the') catamorphism for a type, and sometimes not. For <a href=\"/2019/05/20/maybe-catamorphism\">Maybe</a> and <a href=\"/2019/05/27/list-catamorphism\">List</a> they do coincide, while they don't for <a href=\"/2019/06/03/either-catamorphism\">Either</a> or <a href=\"/2019/06/10/tree-catamorphism\">Tree</a>. It's not that you can't define <code>Foldable</code> for <a href=\"/2018/06/11/church-encoded-either\">Either</a> or <a href=\"/2018/08/06/a-tree-functor\">Tree</a>, it's just that it's not 'the' <em>general</em> catamorphism for that type.\n\t</p>\n\t<p>\n\t\tI can't tell whether <code>Foldable</code> is a universal abstraction, or if it's just an ad-hoc API that turns out to be useful in practice. It looks like the latter to me, but my knowledge is only limited. Perhaps I'll be wiser in a year or two.\n\t</p>\n\t<p>\n\t\tI will, however, take it as licence to treat this topic a little less formally than I've done with other articles. While there <em>are</em> laws associated with <code>Traversable</code>, they are rather complex, so I'm going to skip them.\n\t</p>\n\t<p>\n\t\tThe above requirements will enable you to define traversable functors if you run into some more exotic ones, but in practice, the common functors List, <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a>, <a href=\"/2019/01/14/an-either-functor\">Either</a>, <a href=\"/2018/08/06/a-tree-functor\">Tree</a>, and <a href=\"/2018/09/03/the-identity-functor\">Identity</a> are all traversable. That it useful to know. If any of those functors is the outer functor in a composition of functors, then you can flip them to the inner position as long as the other functor is an applicative functor.\n\t</p>\n\t<p>\n\t\tSince <code>IEnumerable&lt;T&gt;</code> is traversable, and <code>Task&lt;T&gt;</code> (or <code>Async&lt;'T&gt;</code>) is an applicative functor, it's possible to use <code>Sequence</code> to convert <code>IEnumerable&lt;Task&lt;Foo&gt;&gt;</code> to <code>Task&lt;IEnumerable&lt;Foo&gt;&gt;</code>.\n\t</p>\n\t<h3 id=\"3346c092666c4dacb9a61cc1f622fc0f\">\n\t\tTraverse <a href=\"#3346c092666c4dacb9a61cc1f622fc0f\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tThe C# and F# examples you've seen so far arrive at the desired type in a two-step process. First they produce the 'wrong' type with <code>ids.Select(Foo.Read)</code> or <code>ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read</code>, and then they use <code>Sequence</code> to arrive at the desired type.\n\t</p>\n\t<p>\n\t\tWhen you use two expressions, you need two lines of code, and you also need to come up with a name for the intermediary value. It might be easier to chain the two function calls into a single expression:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;ids.Select(Foo.Read).Sequence();</pre>\n\t</p>\n\t<p>\n\t\tOr, in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;List.map&nbsp;Foo.Read&nbsp;|&gt;&nbsp;Async.sequence</pre>\n\t</p>\n\t<p>\n\t\tChaining <code>Select</code>/<code>map</code> with <code>Sequence</code>/<code>sequence</code> is so common that it's a named function: <em>traverse</em>. In C#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;IEnumerable&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Select(selector).Sequence();\n}</pre>\n\t</p>\n\t<p>\n\t\tThis makes usage a little easier:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;IEnumerable&lt;Foo&gt;&gt;&nbsp;foosTask&nbsp;=&nbsp;ids.Traverse(Foo.Read);</pre>\n\t</p>\n\t<p>\n\t\tIn F# the implementation might be similar:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;(&#39;a&nbsp;-&gt;&nbsp;Async&lt;&#39;b&gt;)&nbsp;-&gt;&nbsp;&#39;a&nbsp;list&nbsp;-&gt;&nbsp;Async&lt;&#39;b&nbsp;list&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;traverse&nbsp;f&nbsp;xs&nbsp;=&nbsp;xs&nbsp;|&gt;&nbsp;List.map&nbsp;f&nbsp;|&gt;&nbsp;sequence</pre>\n\t</p>\n\t<p>\n\t\tUsage then looks like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;foosTask&nbsp;=&nbsp;ids&nbsp;|&gt;&nbsp;Async.traverse&nbsp;Foo.Read</pre>\n\t</p>\n\t<p>\n\t\tAs you can tell, if you've already implemented <em>sequence</em> you can always implement <em>traverse</em>. The converse is also true: If you've already implemented <em>traverse</em>, you can always implement <em>sequence</em>. You'll see an example of that later.\n\t</p>\n\t<h3 id=\"117fac3b686e4db8b6c3c4e0ac556929\">\n\t\tA reusable idea <a href=\"#117fac3b686e4db8b6c3c4e0ac556929\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tIf you know the .NET Task Parallel Library (TPL), you may demur that my implementation of <code>Sequence</code> seems like an inefficient version of <a href=\"https://docs.microsoft.com/dotnet/api/system.threading.tasks.task.whenall\">Task.WhenAll</a>, and that <code>Traverse</code> could be written like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IEnumerable&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;IEnumerable&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Task.WhenAll(source.Select(selector));\n}</pre>\n\t</p>\n\t<p>\n\t\tThis alternative is certainly possible. Whether it's more efficient I don't know; I haven't measured. As foreshadowed in the beginning of the article, the combination of collections and asynchrony is so common that .NET has special APIs to handle that. You may ask, then: <em>What's the point?</em>\n\t</p>\n\t<p>\n\t\tThe point of is that a traversable functor is <em>a reusable idea</em>.\n\t</p>\n\t<p>\n\t\tYou may be able to find existing APIs like <code>Task.WhenAll</code> to deal with combinations of collections and asynchrony, but what if you need to deal with asynchronous Maybe or Either? Or a List of Maybes?\n\t</p>\n\t<p>\n\t\tThere may be no existing API to flip things around - before you add it. Now you know that there's a (dare I say it?) design pattern you can implement.\n\t</p>\n\t<h3 id=\"f81375a0121247698f0ad5eac4deebff\">\n\t\tAsynchronous Maybe <a href=\"#f81375a0121247698f0ad5eac4deebff\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tOnce people go beyond collections they often run into problems. You may, for example, decide to use the <a href=\"/2022/04/25/the-maybe-monad\">Maybe monad</a> in order to model the presence or absence of a value. Then, once you combine Maybe-based decision values with asynchronous processesing, you may run into problems.\n\t</p>\n\t<p>\n\t\tFor example, in my article <a href=\"/2019/02/11/asynchronous-injection\">Asynchronous Injection</a> I modelled the core domaim logic as returning <code>Maybe&lt;Reservation&gt;</code>. When handling an HTTP request, the application should use that value to determine what to do next. If the return value is empty it should do nothing, but when the Maybe value is populated, it should save the reservation in a data store using this method:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;<span style=\"color:blue;\">int</span>&gt;&nbsp;Create(Reservation&nbsp;reservation)</pre>\n\t</p>\n\t<p>\n\t\tFinally, if accepting the reservation, the HTTP handler (<code>ReservationsController</code>) should return the resevation ID, which is the <code>int</code> returned by <code>Create</code>. Please refer to the article for details. It also links to the sample code on GitHub.\n\t</p>\n\t<p>\n\t\tThe entire expression is, however, <code>Task</code>-based:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">async</span>&nbsp;Task&lt;IActionResult&gt;&nbsp;Post(Reservation&nbsp;reservation)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">await</span>&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(m&nbsp;=&gt;&nbsp;m.Traverse(Repository.Create))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Match(InternalServerError(<span style=\"color:#a31515;\">&quot;Table&nbsp;unavailable&quot;</span>),&nbsp;Ok);\n}</pre>\n\t</p>\n\t<p>\n\t\tThe <code>Select</code> and <code>SelectMany</code> methods are defined on the <code>Task</code> monad. The <code>m</code> in the <code>SelectMany</code> lambda expression is the <code>Maybe&lt;Reservation&gt;</code> returned by <code>TryAccept</code>. What would happen if you didn't have a <code>Traverse</code> method?\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;&nbsp;whatIsThis&nbsp;=&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(m&nbsp;=&gt;&nbsp;m.Select(Repository.Create));</pre>\n\t</p>\n\t<p>\n\t\tNotice that <code>whatIsThis</code> (so named because it's a temporary variable used to investigate the type of the expression so far) has an awkward type: <code>Task&lt;Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;</code>. That's a Task within a Maybe within a Task.\n\t</p>\n\t<p>\n\t\tThis makes it difficult to continue the composition and return an HTTP result.\n\t</p>\n\t<p>\n\t\tInstead, use <code>Traverse</code>:\n\t</p>\n\t<p>\n\t\t<pre>Task&lt;Task&lt;Maybe&lt;<span style=\"color:blue;\">int</span>&gt;&gt;&gt;&nbsp;whatIsThis&nbsp;=&nbsp;Repository.ReadReservations(reservation.Date)\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(rs&nbsp;=&gt;&nbsp;maîtreD.TryAccept(rs,&nbsp;reservation))\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(m&nbsp;=&gt;&nbsp;m.Traverse(Repository.Create));</pre>\n\t</p>\n\t<p>\n\t\tThis flips the inner <code>Maybe&lt;Task&lt;<span style=\"color:blue;\">int</span>&gt;&gt;</code> to <code>Task&lt;Maybe&lt;<span style=\"color:blue;\">int</span>&gt;&gt;</code>. Now you have a Maybe within a Task within a Task. The outer two Tasks are now nicely nested, and it's a job for a monad to remove one level of nesting. That's the reason that the final composition uses <code>SelectMany</code> instead of <code>Select</code>.\n\t</p>\n\t<p>\n\t\tThe <code>Traverse</code> function is implemented like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Maybe&lt;TResult&gt;&gt;&nbsp;Traverse&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;Maybe&lt;T&gt;&nbsp;source,\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;T,&nbsp;Task&lt;TResult&gt;&gt;&nbsp;selector)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Match(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nothing:&nbsp;Task.FromResult(<span style=\"color:blue;\">new</span>&nbsp;Maybe&lt;TResult&gt;()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;just:&nbsp;<span style=\"color:blue;\">async</span>&nbsp;x&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Maybe&lt;TResult&gt;(<span style=\"color:blue;\">await</span>&nbsp;selector(x)));\n}</pre>\n\t</p>\n\t<p>\n\t\tThe <em>idea</em> is reusable. You can also implement a similar traversal in F#:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;(&#39;a&nbsp;-&gt;&nbsp;Async&lt;&#39;b&gt;)&nbsp;-&gt;&nbsp;&#39;a&nbsp;option&nbsp;-&gt;&nbsp;Async&lt;&#39;b&nbsp;option&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;traverse&nbsp;f&nbsp;=&nbsp;<span style=\"color:blue;\">function</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Some&nbsp;x&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;async&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let!</span>&nbsp;x&#39;&nbsp;=&nbsp;f&nbsp;x\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Some&nbsp;x&#39;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;None&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;async&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;None&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tYou can see the F# function as well as a usage example in the article <a href=\"/2019/12/02/refactoring-registration-flow-to-functional-architecture\">Refactoring registration flow to functional architecture</a>.\n\t</p>\n\t<h3 id=\"a9e25f8c3dc24d99b669f90a4e46afa0\">\n\t\tSequence from traverse <a href=\"#a9e25f8c3dc24d99b669f90a4e46afa0\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tYou've already seen that if you have a <em>sequence</em> function, you can implement <em>traverse</em>. I also claimed that the reverse is true: If you have <em>traverse</em> you can implement <em>sequence</em>.\n\t</p>\n\t<p>\n\t\tWhen you've encountered these kinds of dual definitions a couple of times, you start to expect the ubiquitous identity function to make an appearance, and indeed it does:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">let</span>&nbsp;sequence&nbsp;x&nbsp;=&nbsp;traverse&nbsp;id&nbsp;x</pre>\n\t</p>\n\t<p>\n\t\tThat's the F# version where the identity function is built in as <code>id</code>. In C# you'd use a lambda expression:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Task&lt;Maybe&lt;T&gt;&gt;&nbsp;Sequence&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:blue;\">this</span>&nbsp;Maybe&lt;Task&lt;T&gt;&gt;&nbsp;source)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;source.Traverse(x&nbsp;=&gt;&nbsp;x);\n}</pre>\n\t</p>\n\t<p>\n\t\tSince C# doesn't come with a predefined identity function, it's <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a> to use <code>x&nbsp;=&gt;&nbsp;x</code> instead.\n\t</p>\n\t<h3 id=\"cc6c409706e24ea9b3ebefa49fcc3235\">\n\t\tConclusion <a href=\"#cc6c409706e24ea9b3ebefa49fcc3235\" title=\"permalink\">#</a>\n\t</h3>\n\t<p>\n\t\tTraversals are useful when you need to 'flip' the order of two different, nested functors. The outer one must be a traversable functor, and the inner an applicative functor.\n\t</p>\n\t<p>\n\t\tCommon traversable functors are List, Maybe, Either, Tree, and Identity, but there are more than those. In .NET you often need them when combining them with Tasks. In Haskell, they are useful when combined with <code>IO</code>.\n\t</p>\n\t<p>\n\t\t<strong>Next:</strong> Nested monads.\n\t</p>\n</div>\n\n<div id=\"comments\">\n    <hr>\n    <h2 id=\"comments-header\">\n        Comments\n    </h2>\n    <div class=\"comment\" id=\"c72c30e16cdd48419f95fd7ad5c74f81\">\n        <div class=\"comment-author\">qfilip <a href=\"#c72c30e16cdd48419f95fd7ad5c74f81\">#</a></div>\n        <div class=\"comment-content\">\n            <p>\n\t\t\t\tThanks for this one. You might be interested in <a href=\"https://andrewlock.net/working-with-the-result-pattern-part-1-replacing-exceptions-as-control-flow/\">Andrew Lock's</a> take on the whole subject as well.\n\t\t\t</p>\n        </div>\n        <div class=\"comment-date\">2024-11-17 14:51 UTC</div>\n    </div>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "How to convert a list of tasks into an asynchronous list, and similar problems.\n\t\n\t\n\t\tThis article is part of a series of articles about functor relationships. In a previous article you learned about natural transformations, and then how functors compose. You can skip several of them if you like, but you might find the one about functor compositions relevant. Still, this article can be read independently of the rest of the series.\n\t\n\t\n\t\tYou can go a long way with just a single functor or monad. Consider how useful C#'s LINQ API is, or similar kinds of APIs in other languages - typically map and flatMap methods. These APIs work exclusively with the List monad (which is also a functor). Working with lists, sequences, or collections is so useful that many languages have other kinds of special syntax specifically aimed at working with multiple values: List comprehension.\n\t\n\t\n\t\tAsynchronous monads like Task<T> or F#'s Async<'T> are another kind of functor so useful in their own right that languages have special async and await keywords to compose them.\n\t\n\t\n\t\tSooner or later, though, you run into situations where you'd like to combine two different functors.\n\t\n\t\n\t\tLists and tasks #\n\t\n\t\n\t\tIt's not unusual to combine collections and asynchrony. If you make an asynchronous database query, you could easily receive something like Task<IEnumerable<Reservation>>. This, in isolation, hardly causes problems, but things get more interesting when you need to compose multiple reads.\n\t\n\t\n\t\tConsider a query like this:\n\t\n\t\n\t\tpublic static Task<Foo> Read(int id)\n\t\n\t\n\t\tWhat happens if you have a collection of IDs that you'd like to read? This happens:\n\t\n\t\n\t\tvar ids = new[] { 42, 1337, 2112 };\nIEnumerable<Task<Foo>> fooTasks = ids.Select(id => Foo.Read(id));\n\t\n\t\n\t\tYou get a collection of Tasks, which may be awkward because you can't await it. Perhaps you'd rather prefer a single Task that contains a collection: Task<IEnumerable<Foo>>. In other words, you'd like to flip the functors:\n\t\n\t\n\t\tIEnumerable<Task<Foo>>\nTask<IEnumerable<Foo>>\n\t\n\t\n\t\tThe top type is what you have. The bottom type is what you'd like to have.\n\t\n\t\n\t\tThe combination of asynchrony and collections is so common that .NET has special methods to do that. I'll briefly mention one of these later, but what's the general solution to this problem?\n\t\n\t\n\t\tWhenever you need to flip two functors, you need a traversal.\n\t\n\t\n\t\tSequence #\n\t\n\t\n\t\tAs is almost always the case, we can look to Haskell for a canonical definition of traversals - or, as the type class is called: Traversable.\n\t\n\t\n\t\tA traversable functor is a functor that enables you to flip that functor and another functor, like the above C# example. In more succinct syntax:\n\t\n\t\n\t\tt (f a) -> f (t a)\n\t\n\t\n\t\tHere, t symbolises any traversable functor (like IEnumerable<T> in the above C# example), and f is another functor (like Task<T>, above). By flipping the functors I mean making t and f change places; just like IEnumerable and Task, above.\n\t\n\t\n\t\tThinking of functors as containers we might depict the function like this:\n\t\n\t\n\t\t\n\t\n\t\n\t\tTo the left, we have an outer functor t (e.g. IEnumerable) that contains another functor f (e.g. Task) that again 'contains' values of type a (in C# typically called T). We'd like to flip how the containers are nested so that f contains t.\n\t\n\t\n\t\tContrary to what you might expect, the function that does that isn't called traverse; it's called sequence. (For those readers who are interested in Haskell specifics, the function I'm going to be talking about is actually called sequenceA. There's also a function called sequence, but it's not as general. The reason for the odd names are related to the evolution of various Haskell type classes.)\n\t\n\t\n\t\tThe sequence function doesn't work for any old functor. First, t has to be a traversable functor. We'll get back to that later. Second, f has to be an applicative functor. (To be honest, I'm not sure if this is always required, or if it's possible to produce an example of a specific functor that isn't applicative, but where it's still possible to implement a sequence function. The Haskell sequenceA function has Applicative f as a constraint, but as far as I can tell, this only means that this is a sufficient requirement - not that it's necessary.)\n\t\n\t\n\t\tSince tasks (e.g. Task<T>) are applicative functors (they are, because they are monads, and all monads are applicative functors), that second requirement is fulfilled for the above example. I'll show you how to implement a Sequence function in C# and how to use it, and then we'll return to the general discussion of what a traversable functor is:\n\t\n\t\n\t\tpublic static Task<IEnumerable<T>> Sequence<T>(\n    this IEnumerable<Task<T>> source)\n{\n    return source.Aggregate(\n        Task.FromResult(Enumerable.Empty<T>()),\n        async (acc, t) =>\n        {\n            var xs = await acc;\n            var x = await t;\n            return xs.Concat(new[] { x });\n        });\n}\n\t\n\t\n\t\tThis Sequence function enables you to flip any IEnumerable<Task<T>> to a Task<IEnumerable<T>>, including the above fooTasks:\n\t\n\t\n\t\tTask<IEnumerable<Foo>> foosTask = fooTasks.Sequence();\n\t\n\t\n\t\tYou can also implement sequence in F#:\n\t\n\t\n\t\t// Async<'a> list -> Async<'a list>\nlet sequence asyncs =\n    let go acc t = async {\n        let! xs = acc\n        let! x  = t\n        return List.append xs [x] }\n    List.fold go (fromValue []) asyncs\n\t\n\t\n\t\tand use it like this:\n\t\n\t\n\t\tlet fooTasks = ids |> List.map Foo.Read\nlet foosTask = fooTasks |> Async.sequence\n\t\n\t\n\t\tFor this example, I put the sequence function in a local Async module; it's not part of any published Async module.\n\t\n\t\n\t\tThese C# and F# examples are specific translations: From lists of tasks to a task of list. If you need another translation, you'll have to write a new function for that particular combination of functors. Haskell has more general capabilities, so that you don't have to write functions for all combinations. I'm not assuming that you know Haskell, however, so I'll proceed with the description.\n\t\n\t\n\t\tTraversable functor #\n\t\n\t\n\t\tThe sequence function requires that the 'other' functor (the one that's not the traversable functor) is an applicative functor, but what about the traversable functor itself? What does it take to be a traversable functor?\n\t\n\t\n\t\tI have to admit that I have to rely on Haskell specifics to a greater extent than normal. For most other concepts and abstractions in the overall article series, I've been able to draw on various sources, chief of which are Category Theory for Programmers. In various articles, I've cited my sources whenever possible. While I've relied on Haskell libraries for 'canonical' ways to represent concepts in a programming language, I've tried to present ideas as having a more universal origin than just Haskell.\n\t\n\t\n\t\tWhen it comes to traversable functors, I haven't come across universal reasoning like that which gives rise to concepts like monoids, functors, Church encodings, or catamorphisms. This is most likely a failing on my part.\n\t\n\t\n\t\tTraversals of the Haskell kind are, however, so useful that I find it appropriate to describe them. When consulting, it's a common solution to a lot of problems that people are having with functional programming.\n\t\n\t\n\t\tThus, based on Haskell's Data.Traversable, a traversable functor must:\n\t\t\n\t\t\tbe a functor\n\t\t\tbe a 'foldable' functor\n\t\t\tdefine a sequence or traverse function\n\t\t\n\t\tYou've already seen examples of sequence functions, and I'm also assuming that (since you've made it so far in the article already) you know what a functor is. But what's a foldable functor?\n\t\n\t\n\t\tHaskell comes with a Foldable type class. It defines a class of data that has a particular type of catamorphism. As I've outlined in my article on catamorphisms, Haskell's notion of a fold sometimes coincides with a (or 'the') catamorphism for a type, and sometimes not. For Maybe and List they do coincide, while they don't for Either or Tree. It's not that you can't define Foldable for Either or Tree, it's just that it's not 'the' general catamorphism for that type.\n\t\n\t\n\t\tI can't tell whether Foldable is a universal abstraction, or if it's just an ad-hoc API that turns out to be useful in practice. It looks like the latter to me, but my knowledge is only limited. Perhaps I'll be wiser in a year or two.\n\t\n\t\n\t\tI will, however, take it as licence to treat this topic a little less formally than I've done with other articles. While there are laws associated with Traversable, they are rather complex, so I'm going to skip them.\n\t\n\t\n\t\tThe above requirements will enable you to define traversable functors if you run into some more exotic ones, but in practice, the common functors List, Maybe, Either, Tree, and Identity are all traversable. That it useful to know. If any of those functors is the outer functor in a composition of functors, then you can flip them to the inner position as long as the other functor is an applicative functor.\n\t\n\t\n\t\tSince IEnumerable<T> is traversable, and Task<T> (or Async<'T>) is an applicative functor, it's possible to use Sequence to convert IEnumerable<Task<Foo>> to Task<IEnumerable<Foo>>.\n\t\n\t\n\t\tTraverse #\n\t\n\t\n\t\tThe C# and F# examples you've seen so far arrive at the desired type in a two-step process. First they produce the 'wrong' type with ids.Select(Foo.Read) or ids |> List.map Foo.Read, and then they use Sequence to arrive at the desired type.\n\t\n\t\n\t\tWhen you use two expressions, you need two lines of code, and you also need to come up with a name for the intermediary value. It might be easier to chain the two function calls into a single expression:\n\t\n\t\n\t\tTask<IEnumerable<Foo>> foosTask = ids.Select(Foo.Read).Sequence();\n\t\n\t\n\t\tOr, in F#:\n\t\n\t\n\t\tlet foosTask = ids |> List.map Foo.Read |> Async.sequence\n\t\n\t\n\t\tChaining Select/map with Sequence/sequence is so common that it's a named function: traverse. In C#:\n\t\n\t\n\t\tpublic static Task<IEnumerable<TResult>> Traverse<T, TResult>(\n    this IEnumerable<T> source,\n    Func<T, Task<TResult>> selector)\n{\n    return source.Select(selector).Sequence();\n}\n\t\n\t\n\t\tThis makes usage a little easier:\n\t\n\t\n\t\tTask<IEnumerable<Foo>> foosTask = ids.Traverse(Foo.Read);\n\t\n\t\n\t\tIn F# the implementation might be similar:\n\t\n\t\n\t\t// ('a -> Async<'b>) -> 'a list -> Async<'b list>\nlet traverse f xs = xs |> List.map f |> sequence\n\t\n\t\n\t\tUsage then looks like this:\n\t\n\t\n\t\tlet foosTask = ids |> Async.traverse Foo.Read\n\t\n\t\n\t\tAs you can tell, if you've already implemented sequence you can always implement traverse. The converse is also true: If you've already implemented traverse, you can always implement sequence. You'll see an example of that later.\n\t\n\t\n\t\tA reusable idea #\n\t\n\t\n\t\tIf you know the .NET Task Parallel Library (TPL), you may demur that my implementation of Sequence seems like an inefficient version of Task.WhenAll, and that Traverse could be written like this:\n\t\n\t\n\t\tpublic static async Task<IEnumerable<TResult>> Traverse<T, TResult>(\n    this IEnumerable<T> source,\n    Func<T, Task<TResult>> selector)\n{\n    return await Task.WhenAll(source.Select(selector));\n}\n\t\n\t\n\t\tThis alternative is certainly possible. Whether it's more efficient I don't know; I haven't measured. As foreshadowed in the beginning of the article, the combination of collections and asynchrony is so common that .NET has special APIs to handle that. You may ask, then: What's the point?\n\t\n\t\n\t\tThe point of is that a traversable functor is a reusable idea.\n\t\n\t\n\t\tYou may be able to find existing APIs like Task.WhenAll to deal with combinations of collections and asynchrony, but what if you need to deal with asynchronous Maybe or Either? Or a List of Maybes?\n\t\n\t\n\t\tThere may be no existing API to flip things around - before you add it. Now you know that there's a (dare I say it?) design pattern you can implement.\n\t\n\t\n\t\tAsynchronous Maybe #\n\t\n\t\n\t\tOnce people go beyond collections they often run into problems. You may, for example, decide to use the Maybe monad in order to model the presence or absence of a value. Then, once you combine Maybe-based decision values with asynchronous processesing, you may run into problems.\n\t\n\t\n\t\tFor example, in my article Asynchronous Injection I modelled the core domaim logic as returning Maybe<Reservation>. When handling an HTTP request, the application should use that value to determine what to do next. If the return value is empty it should do nothing, but when the Maybe value is populated, it should save the reservation in a data store using this method:\n\t\n\t\n\t\tTask<int> Create(Reservation reservation)\n\t\n\t\n\t\tFinally, if accepting the reservation, the HTTP handler (ReservationsController) should return the resevation ID, which is the int returned by Create. Please refer to the article for details. It also links to the sample code on GitHub.\n\t\n\t\n\t\tThe entire expression is, however, Task-based:\n\t\n\t\n\t\tpublic async Task<IActionResult> Post(Reservation reservation)\n{\n    return await Repository.ReadReservations(reservation.Date)\n        .Select(rs => maîtreD.TryAccept(rs, reservation))\n        .SelectMany(m => m.Traverse(Repository.Create))\n        .Match(InternalServerError(\"Table unavailable\"), Ok);\n}\n\t\n\t\n\t\tThe Select and SelectMany methods are defined on the Task monad. The m in the SelectMany lambda expression is the Maybe<Reservation> returned by TryAccept. What would happen if you didn't have a Traverse method?\n\t\n\t\n\t\tTask<Maybe<Task<int>>> whatIsThis = Repository.ReadReservations(reservation.Date)\n    .Select(rs => maîtreD.TryAccept(rs, reservation))\n    .Select(m => m.Select(Repository.Create));\n\t\n\t\n\t\tNotice that whatIsThis (so named because it's a temporary variable used to investigate the type of the expression so far) has an awkward type: Task<Maybe<Task<int>>>. That's a Task within a Maybe within a Task.\n\t\n\t\n\t\tThis makes it difficult to continue the composition and return an HTTP result.\n\t\n\t\n\t\tInstead, use Traverse:\n\t\n\t\n\t\tTask<Task<Maybe<int>>> whatIsThis = Repository.ReadReservations(reservation.Date)\n    .Select(rs => maîtreD.TryAccept(rs, reservation))\n    .Select(m => m.Traverse(Repository.Create));\n\t\n\t\n\t\tThis flips the inner Maybe<Task<int>> to Task<Maybe<int>>. Now you have a Maybe within a Task within a Task. The outer two Tasks are now nicely nested, and it's a job for a monad to remove one level of nesting. That's the reason that the final composition uses SelectMany instead of Select.\n\t\n\t\n\t\tThe Traverse function is implemented like this:\n\t\n\t\n\t\tpublic static Task<Maybe<TResult>> Traverse<T, TResult>(\n    this Maybe<T> source,\n    Func<T, Task<TResult>> selector)\n{\n    return source.Match(\n        nothing: Task.FromResult(new Maybe<TResult>()),\n        just: async x => new Maybe<TResult>(await selector(x)));\n}\n\t\n\t\n\t\tThe idea is reusable. You can also implement a similar traversal in F#:\n\t\n\t\n\t\t// ('a -> Async<'b>) -> 'a option -> Async<'b option>\nlet traverse f = function\n    | Some x -> async {\n        let! x' = f x\n        return Some x' }\n    | None -> async { return None }\n\t\n\t\n\t\tYou can see the F# function as well as a usage example in the article Refactoring registration flow to functional architecture.\n\t\n\t\n\t\tSequence from traverse #\n\t\n\t\n\t\tYou've already seen that if you have a sequence function, you can implement traverse. I also claimed that the reverse is true: If you have traverse you can implement sequence.\n\t\n\t\n\t\tWhen you've encountered these kinds of dual definitions a couple of times, you start to expect the ubiquitous identity function to make an appearance, and indeed it does:\n\t\n\t\n\t\tlet sequence x = traverse id x\n\t\n\t\n\t\tThat's the F# version where the identity function is built in as id. In C# you'd use a lambda expression:\n\t\n\t\n\t\tpublic static Task<Maybe<T>> Sequence<T>(this Maybe<Task<T>> source)\n{\n    return source.Traverse(x => x);\n}\n\t\n\t\n\t\tSince C# doesn't come with a predefined identity function, it's idiomatic to use x => x instead.\n\t\n\t\n\t\tConclusion #\n\t\n\t\n\t\tTraversals are useful when you need to 'flip' the order of two different, nested functors. The outer one must be a traversable functor, and the inner an applicative functor.\n\t\n\t\n\t\tCommon traversable functors are List, Maybe, Either, Tree, and Identity, but there are more than those. In .NET you often need them when combining them with Tasks. In Haskell, they are useful when combined with IO.\n\t\n\t\n\t\tNext: Nested monads.\n\t\n\n\n\n    \n    \n        Comments\n    \n    \n        qfilip #\n        \n            \n\t\t\t\tThanks for this one. You might be interested in Andrew Lock's take on the whole subject as well.\n\t\t\t\n        \n        2024-11-17 14:51 UTC\n    \n\n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/11/04/pendulum-swing-no-haskell-type-annotation-by-default",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Are Haskell IDE plugins now good enough that you don't need explicit type annotations?</em>\n    </p>\n    <p>\n        More than three years ago, I published <a href=\"/2021/02/22/pendulum-swings\">a small article series</a> to document that I'd changed my mind on various small practices. Belatedly, here comes a fourth article, which, frankly, is a cousin rather than a sibling. Still, it fits the overall theme well enough to become another instalment in the series.\n    </p>\n    <p>\n        Here, I consider using fewer <a href=\"https://www.haskell.org/\">Haskell</a> type annotations, following a practice that I've always followed in <a href=\"https://fsharp.org/\">F#</a>.\n    </p>\n    <p>\n        To be honest, though, it's not that I've already applied the following practice for a long time, and only now write about it. It's rather that I feel the need to write this article to kick an old habit and start a new.\n    </p>\n    <h3 id=\"227874a509f24b93b9a091429b9ad03e\">\n        Inertia <a href=\"#227874a509f24b93b9a091429b9ad03e\">#</a>\n    </h3>\n    <p>\n        As I write in the dedication in <a href=\"/2021/06/14/new-book-code-that-fits-in-your-head\">Code That Fits in Your Head</a>,\n    </p>\n    <blockquote>\n        <p>\n            \"To my parents:\n        </p>\n        <p>\n            \"My mother, Ulla Seemann, to whom I owe my attention to detail.\n        </p>\n        <p>\n            \"My father, Leif Seemann, from whom I inherited my contrarian streak.\"\n        </p>\n        <footer><cite><a href=\"/code-that-fits-in-your-head\">Code That Fits in Your Head</a></cite>, dedication</footer>\n    </blockquote>\n    <p>\n        One should always be careful simplifying one's personality to a simple, easy-to-understand model, but a major point here is that I have two traits that pull in almost the opposite direction.\n    </p>\n    <p>\n        <img src=\"/content/binary/neatness-contrariness-vector-sum.png\" alt=\"Two vectors labelled respectively neatness and contrariness pulling in almost opposing directions, while still not quite cancelling each other out, leaving a short vector sum pointing to the right.\">\n    </p>\n    <p>\n        Despite much work, I only make slow progress. My desire to make things neat and proper almost cancel out my tendency to go against the norms. I tend to automatically toe whatever line that exists until the cognitive dissonance becomes so great that I can no longer ignore it.\n    </p>\n    <p>\n        I then write an article for the blog to clarify my thoughts.\n    </p>\n    <p>\n        You may read what comes next and ask, <em>what took you so long?!</em>\n    </p>\n    <p>\n        I can only refer to the above. I may look calm on the surface, but underneath I'm paddling like the dickens. Despite much work, though, only limited progress is visible.\n    </p>\n    <h3 id=\"a00a292d223a435b873f7cc1de1730c3\">\n        Nudge <a href=\"#a00a292d223a435b873f7cc1de1730c3\">#</a>\n    </h3>\n    <p>\n        Haskell is a statically typed language with the most powerful type system I know my way around. The types carry so much information that one can often infer <a href=\"/2022/10/24/encapsulation-in-functional-programming\">a function's contract</a> from the type alone. This is also fortunate, since many Haskell libraries tend to have, shall we say, minimal documentation. Even so, I've often found myself able to figure out how to use an unfamiliar Haskell API by examining the various types that a library exports.\n    </p>\n    <p>\n        In fact, the type system is so powerful that it drives <a href=\"https://hoogle.haskell.org/\">a specialized search engine</a>. If you need a function with the type <code>(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;<span style=\"color:#2b91af;\">Int</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:#2b91af;\">String</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;[<span style=\"color:#2b91af;\">Int</span>]</code> you can search for it. Hoogle will list all functions that match that type, including functions that are more abstract than your specialized need. You don't even have to imagine what the name might be.\n    </p>\n    <p>\n        Since the type system is so powerful, it's a major means of communication. Thus, it makes sense that <a href=\"https://en.wikipedia.org/wiki/Glasgow_Haskell_Compiler\">GHC</a> regularly issues <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wmissing-signatures\">a warning</a> if a function lacks a type annotation.\n    </p>\n    <p>\n        While the compiler enables you to control which warnings are turned on, the <code>missing-signatures</code> warning is included in the popular <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wall\">all</a> flag that most people, I take it, use. I do, at least.\n    </p>\n    <p>\n        If you forget to declare the type of a function, the compiler will complain:\n    </p>\n    <p>\n        <pre>src\\SecurityManager.hs:15:1: <span style=\"color:red;\">warning</span>: [<span style=\"color:red;\">GHC-38417</span>] [<span style=\"color:red;\">-Wmissing-signatures</span>]\n    Top-level binding with no type signature:\n      createUser :: (Monad m, Text.Printf.PrintfArg b,\n                     Text.Printf.PrintfArg (t a), Foldable t, Eq (t a)) =&gt;\n                    (String -&gt; m ()) -&gt; m (t a) -&gt; (t a -&gt; b) -&gt; m ()\n<span style=\"color:blue;\">   |</span>\n<span style=\"color:blue;\">15 |</span> <span style=\"color:red;\">createUser</span> writeLine readLine encrypt = do\n<span style=\"color:blue;\">   |</span> <span style=\"color:red;\">^^^^^^^^^^</span></pre>\n    </p>\n    <p>\n        This is a strong nudge that you're supposed to give each function a type declaration, so I've been doing that for years. Neat and proper.\n    </p>\n    <p>\n        Of course, if you treat warnings as errors, as <a href=\"/code-that-fits-in-your-head\">I recommend</a>, the nudge becomes a law.\n    </p>\n    <h3 id=\"cf16318003ef46ed8c67d81217e56011\">\n        Learning from F# <a href=\"#cf16318003ef46ed8c67d81217e56011\">#</a>\n    </h3>\n    <p>\n        While I try to adopt the style and <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idioms</a> of any language I work in, it's always annoyed me that I had to add a type annotation to a Haskell function. After all, the compiler can usually infer the type. Frankly, adding a type signature feels like redundant ceremony. It's like having to declare a function in a header file before being able to implement it in another file.\n    </p>\n    <p>\n        This particularly bothers me because I've long since abandoned type annotations in F#. As far as I can tell, most of the F# community has, too.\n    </p>\n    <p>\n        When you implement an F# function, you just write the implementation and let the compiler infer the type. (Code example from <a href=\"/2019/12/16/zone-of-ceremony\">Zone of Ceremony</a>.)\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:blue;\">inline</span>&nbsp;<span style=\"color:#74531f;\">consume</span>&nbsp;<span style=\"color:#1f377f;\">quantity</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>,&nbsp;<span style=\"color:#1f377f;\">xs</span>)&nbsp;<span style=\"color:#1f377f;\">x</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:#1f377f;\">quantity</span>&nbsp;&lt;=&nbsp;<span style=\"color:#1f377f;\">acc</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>,&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">append</span>&nbsp;<span style=\"color:#1f377f;\">xs</span>&nbsp;(<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">singleton</span>&nbsp;<span style=\"color:#1f377f;\">x</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;(<span style=\"color:#1f377f;\">acc</span>&nbsp;+&nbsp;<span style=\"color:#1f377f;\">x</span>,&nbsp;<span style=\"color:#1f377f;\">xs</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Seq</span>.<span style=\"color:#74531f;\">fold</span>&nbsp;<span style=\"color:#74531f;\">go</span>&nbsp;(<span style=\"color:#2b91af;\">LanguagePrimitives</span>.GenericZero,&nbsp;<span style=\"color:#2b91af;\">Seq</span>.empty)&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">snd</span></pre>\n    </p>\n    <p>\n        Since F# often has to interact with .NET code written in C#, you regularly have to add <em>some</em> type annotations to help the compiler along:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">average</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">NonEmpty</span>&lt;<span style=\"color:#2b91af;\">TimeSpan</span>&gt;)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>.Head&nbsp;]&nbsp;@&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">ofSeq</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">timeSpans</span>.Tail\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">List</span>.<span style=\"color:#74531f;\">averageBy</span>&nbsp;(_.Ticks&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">double</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#74531f;\">int64</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span>.<span style=\"font-weight:bold;color:#74531f;\">FromTicks</span></pre>\n    </p>\n    <p>\n        Even so, I follow the rule of minimal annotations: Only add the type information required to compile, and let the compiler infer the rest. For example, the above <a href=\"/2024/05/06/conservative-codomain-conjecture\">average function</a> has the inferred type <code><span style=\"color:#2b91af;\">NonEmpty</span><span style=\"color:#2b91af;\">&lt;</span><span style=\"color:#2b91af;\">TimeSpan</span><span style=\"color:#2b91af;\">&gt;</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">TimeSpan</span></code>. While I had to specify the input type in order to be able to use the <a href=\"https://learn.microsoft.com/dotnet/api/system.datetime.ticks\">Ticks property</a>, I didn't have to specify the return type. So I didn't.\n    </p>\n    <p>\n        My impression from reading other people's F# code is that this is a common, albeit not universal, approach to type annotation.\n    </p>\n    <p>\n        This minimizes ceremony, since you only need to declare and maintain the types that the compiler can't infer. There's no reason to repeat the work that the compiler can already do, and in practice, if you do, it just gets in the way.\n    </p>\n    <h3 id=\"fdd9161164f64f438aa0bedf5ff6f9a8\">\n        Motivation for explicit type definitions <a href=\"#fdd9161164f64f438aa0bedf5ff6f9a8\">#</a>\n    </h3>\n    <p>\n        When I extol the merits of static types, proponents of dynamically typed languages often argue that the types are in the way. Granted, this is <a href=\"/2021/08/09/am-i-stuck-in-a-local-maximum\">a discussion that I still struggle with</a>, but based on my understanding of the argument, it seems entirely reasonable. After all, if you have to spend time declaring the type of each and every parameter, as well as a function's return type, it does seem to be in the way. This is only exacerbated if you later change your mind.\n    </p>\n    <p>\n        Programming is, to a large extend, an explorative activity. You start with one notion of how your code should be structured, but as you progress, you learn. You'll often have to go back and change existing code. This, as far as I can tell, is much easier in, say, <a href=\"https://www.python.org/\">Python</a> or <a href=\"https://clojure.org/\">Clojure</a> than in C# or <a href=\"https://www.java.com/\">Java</a>.\n    </p>\n    <p>\n        If, however, one extrapolates from the experience with Java or C# to all statically typed languages, that would be a logical fallacy. My point with <a href=\"/2019/12/16/zone-of-ceremony\">Zone of Ceremony</a> was exactly that there's a group of languages 'to the right' of high-ceremony languages with low levels of ceremony. Even though they're statically typed.\n    </p>\n    <p>\n        I have to admit, however, that in that article I cheated a little in order to drive home a point. While you <em>can</em> write Haskell code in a low-ceremony style, the tooling (in the form of the <code>all</code> warning set, at least) encourages a high-ceremony style. Add those type definitions, even thought they're redundant.\n    </p>\n    <p>\n        It's not that I don't understand some of the underlying motivation behind that rule. <a href=\"http://dmwit.com/\">Daniel Wagner</a> enumerated several reasons in <a href=\"https://stackoverflow.com/a/19626857/126014\">a 2013 Stack Overflow answer</a>. Some of the reasons still apply, but on the other hand, the world has also moved on in the intervening decade.\n    </p>\n    <p>\n        To be honest, the Haskell <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\">IDE</a> situation has always been precarious. One day, it works really well; the next day, I struggle with it. Over the years, though, things have improved.\n    </p>\n    <p>\n        There was a time when an explicit type definition was a indisputable help, because you couldn't rely on tools to light up and tell you what the inferred type was.\n    </p>\n    <p>\n        Today, on the other hand, the <a href=\"https://marketplace.visualstudio.com/items?itemName=haskell.haskell\">Haskell extension for Visual Studio Code</a> automatically displays the inferred type above a function implementation:\n    </p>\n    <p>\n        <img src=\"/content/binary/haskell-code-with-inferred-type-displayed-by-vs-code.png\" alt=\"Screen shot of a Haskell function in Visual Studio Code with the function's type automatically displayed above it by the Haskell extension.\">\n    </p>\n    <p>\n        To be clear, the top line that shows the type definition is not part of the source code. It's just shown by Visual Studio Code as a code lens (I think it's called), and it automatically changes if I edit the code in such a way that the type changes.\n    </p>\n    <p>\n        If you can rely on such automatic type information, it seems that an explicit type declaration is less useful. It's at least one less reason to add type annotations to the source code.\n    </p>\n    <h3 id=\"367135868de54bcb8eebd2d9bc9a0f8c\">\n        Ceremony example <a href=\"#367135868de54bcb8eebd2d9bc9a0f8c\">#</a>\n    </h3>\n    <p>\n        In order to explain what I mean by <em>the types being in the way</em>, I'll give an example. Consider the code example from the article <a href=\"/2024/10/21/legacy-security-manager-in-haskell\">Legacy Security Manager in Haskell</a>. In it, I described how every time I made a change to the <code>createUser</code> action, I had to effectively remove and re-add the type declaration.\n    </p>\n    <p>\n        It doesn't have to be like that. If instead I'd started without type annotations, I could have moved forward without being slowed down by having to edit type definitions. Take the first edit, breaking the dependency on the console, as an example. Without type annotations, the <code>createUser</code> action would look exactly as before, just without the type declaration. Its type would still be <code>IO ()</code>.\n    </p>\n    <p>\n        After the first edit, the first lines of the action now look like this:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;...</span></pre>\n    </p>\n    <p>\n        Even without a type definition, the action still has a type. The compiler infers it to be <code>(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;a,&nbsp;<span style=\"color:blue;\">IsChar</span>&nbsp;a)&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;[a]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code>, which is certainly a bit of a mouthful, but exactly what I had explicitly added in the other article.\n    </p>\n    <p>\n        The code doesn't compile until I also change the <code>main</code> method to pass the new parameters:\n    </p>\n    <p>\n        <pre>main&nbsp;=&nbsp;createUser&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:blue;\">getLine</span></pre>\n    </p>\n    <p>\n        You'd have to make a similar edit in, say, Python, although there'd be no compiler to remind you. My point isn't that this is better than a dynamically typed language, but rather that it's on par. The types aren't in the way.\n    </p>\n    <p>\n        We see the similar lack of required ceremony when the <code>createUser</code> action finally pulls in the <code>comparePasswords</code> and <code>validatePassword</code> functions:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;writeLine&nbsp;$&nbsp;either\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;(printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;.&nbsp;encrypt)\n&nbsp;&nbsp;&nbsp;&nbsp;(validatePassword&nbsp;=&lt;&lt;&nbsp;comparePasswords&nbsp;password&nbsp;confirmPassword)</pre>\n    </p>\n    <p>\n        Again, there's no type annotation, and while the type actually <em>does</em> change to\n    </p>\n    <p>\n        <pre>(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;b,&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;(t&nbsp;a),&nbsp;<span style=\"color:blue;\">Foldable</span>&nbsp;t,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;(t&nbsp;a))&nbsp;<span style=\"color:blue;\">=&gt;</span>\n(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;(t&nbsp;a)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(t&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;b)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        it impacts none of the existing code. Again, the types aren't in the way, and no ceremony is required.\n    </p>\n    <p>\n        Compare that inferred type signature with the explicit final type annotation in <a href=\"/2024/10/21/legacy-security-manager-in-haskell\">the previous article</a>. The inferred type is much more abstract and permissive than the explicit declaration, although I also grant that Daniel Wagner had a point that you can make explicit type definitions more reader-friendly.\n    </p>\n    <h3 id=\"d4469073def54f289edb56d1ca8417ee\">\n        Flies in the ointment <a href=\"#d4469073def54f289edb56d1ca8417ee\">#</a>\n    </h3>\n    <p>\n        Do the inferred types communicate intent? That's debatable. For example, it's not immediately clear that the above <code>t a</code> allows <code>String</code>.\n    </p>\n    <p>\n        Another thing that annoys me is that I had to add that <em>unit</em> binding on the first line:\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;...</span></pre>\n    </p>\n    <p>\n        The reason for that is that if I don't do that (that is, if I just write <code>writeLine \"Xyz\"</code> all the way), the compiler infers the type of <code>writeLine</code> to be <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;b2</code>, rather than just <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code>. In effect, I want <code>b2 ~ ()</code>, but because the compiler thinks that <code>b2</code> may be anything, it issues an <a href=\"https://downloads.haskell.org/ghc/latest/docs/users_guide/using-warnings.html#ghc-flag--Wunused-do-bind\">unused-do-bind</a> warning.\n    </p>\n    <p>\n        The idiomatic way to resolve that situation is to add a type definition, but that's the situation I'm trying to avoid. Thus, my desire to do without annotations pushes me to write unnatural implementation code. This reminds me of the notion of <a href=\"https://dhh.dk/2014/test-induced-design-damage.html\">test-induced damage</a>. This is at best a disagreeable compromise.\n    </p>\n    <p>\n        It also annoys me that implementation details leak out to the inferred type, witnessed by the <code>PrintfArg</code> type constraint. What happens if I change the implementation to use list concatenation?\n    </p>\n    <p>\n        <pre>createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">()</span>&nbsp;&lt;-&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;createMsg&nbsp;pwd&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(&quot;</span>&nbsp;++&nbsp;username&nbsp;++<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>&nbsp;++&nbsp;fullName&nbsp;++&nbsp;<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>&nbsp;++&nbsp;pwd&nbsp;++<span style=\"color:#a31515;\">&quot;)&quot;</span>\n&nbsp;&nbsp;writeLine&nbsp;$&nbsp;either\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;(createMsg&nbsp;.&nbsp;encrypt)\n&nbsp;&nbsp;&nbsp;&nbsp;(validatePassword&nbsp;=&lt;&lt;&nbsp;comparePasswords&nbsp;password&nbsp;confirmPassword)</pre>\n    </p>\n    <p>\n        If I do that, the type also changes:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">Monad</span>&nbsp;m&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;[<span style=\"color:#2b91af;\">Char</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;([<span style=\"color:#2b91af;\">Char</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:#2b91af;\">Char</span>])&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        While we get rid of the <code>PrintfArg</code> type constraint, the type becomes otherwise more concrete, now operating on <code>String</code> values (keeping in mind that <code>String</code> is a type synonym for <code>[Char]</code>).\n    </p>\n    <p>\n        The code still compiles, and all tests still pass, because the abstraction I've had in mind all along is essentially this last type.\n    </p>\n    <p>\n        The <code>writeLine</code> action should take a <code>String</code> and have some side effect, but return no data. The type <code><span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</code> nicely models that, striking a fine balance between being sufficiently concrete to capture intent, but still abstract enough to be testable.\n    </p>\n    <p>\n        The <code>readLine</code> action should provide input <code>String</code> values, and again <code>m String</code> nicely models that concern.\n    </p>\n    <p>\n        Finally, <code>encrypt</code> is indeed a naked <code>String</code> <a href=\"https://en.wikipedia.org/wiki/Endomorphism\">endomorphism</a>: <code>String -&gt; String</code>.\n    </p>\n    <p>\n        With my decades of experience with object-oriented design, it still strikes me as odd that implementation details can make a type more abstract, but once you think it over, it may be okay.\n    </p>\n    <h3 id=\"a82d4017be064ce980c40e22aa6f801e\">\n        More liberal abstractions <a href=\"#a82d4017be064ce980c40e22aa6f801e\">#</a>\n    </h3>\n    <p>\n        The inferred types are consistently more liberal than the abstraction I have in mind, which is\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">Monad</span>&nbsp;m&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()</pre>\n    </p>\n    <p>\n        In all cases, the inferred types include that type as a subset.\n    </p>\n    <p>\n        <img src=\"/content/binary/create-user-abstraction-sets.png\" alt=\"Various sets of inferred types.\">\n    </p>\n    <p>\n        I hope that I've created the above diagram so that it makes sense, but the point I'm trying to get across is that the two type definitions in the lower middle are equivalent, and are the most specific types. That's the intended abstraction. Thinking of <a href=\"/2021/11/15/types-as-sets\">types as sets</a>, all the other inferred types are supersets of that type, in various ways. Even though implementation details leak out in the shape of <code>PrintfArg</code> and <code>IsChar</code>, these are effectually larger sets.\n    </p>\n    <p>\n        This takes some getting used to: The implementation details are <em>more</em> liberal than the abstraction. This seems to be at odds with the <a href=\"https://en.wikipedia.org/wiki/Dependency_inversion_principle\">Dependency Inversion Principle</a> (DIP), which suggests that abstractions shouldn't depend on implementation details. I'm not yet sure what to make of this, but I suspect that this is more of problem of overlapping linguistic semantics than software design. What I mean is that I have a feeling that 'implementation detail' have more than one meaning. At least, in the perspective of the DIP, an implementation detail <em>limits</em> your options. For example, depending on a particular database technology is more constraining than depending on some abstract notion of what the persistence mechanism might be. Contrast this with an implementation detail such as the <code>PrintfArg</code> type constraint. It doesn't narrow your options; on the contrary, it makes the implementation more liberal.\n    </p>\n    <p>\n        Still, while an implementation should <a href=\"https://en.wikipedia.org/wiki/Robustness_principle\">be liberal in what it accepts</a>, it's probably not a good idea to publish such a capability to the wider world. After all, if you do, <a href=\"https://www.hyrumslaw.com/\">someone will eventually rely on it</a>.\n    </p>\n    <h3 id=\"42ffe5249c7542809ca55a95a8f15f6c\">\n        For internal use only <a href=\"#42ffe5249c7542809ca55a95a8f15f6c\">#</a>\n    </h3>\n    <p>\n        Going through all these considerations, I think I'll revise my position as the following.\n    </p>\n    <p>\n        I'll forgo type annotations as long as I explore a problem space. For internal application use, this may effectively mean forever, in the sense that how you compose an application from smaller building blocks is likely to be in permanent flux. Here I have in mind your average web asset or other public-facing service that's in constant development. You keep adding new features, or changing domain logic as the overall business evolves.\n    </p>\n    <p>\n        As I've also recently discussed, <a href=\"/2024/02/05/statically-and-dynamically-typed-scripts\">Haskell is a great scripting language</a>, and I think that here, too, I'll dial down the type definitions.\n    </p>\n    <p>\n        If I ever do another <a href=\"https://adventofcode.com/\">Advent of Code</a> in Haskell, I think I'll also eschew explicit type annotations.\n    </p>\n    <p>\n        On the other hand, I can see that once an API stabilizes, you may want to lock it down. This may also apply to internal abstractions if you're working in a team and you explicitly want to communicate what a contract is.\n    </p>\n    <p>\n        If the code is a reusable library, I think that explicit type definitions are still required. Both for the reasons outlined by Daniel Wagner, and also to avoid being the victim of <a href=\"https://www.hyrumslaw.com/\">Hyrum's law</a>.\n    </p>\n    <p>\n        That's why I phrase this pendulum swing as a new <em>default</em>. I'll begin programming without type definitions, but add them as needed. The point is rather that there may be parts of a code base where they're never needed, and then it's okay to keep going without them.\n    </p>\n    <p>\n        You can use a language pragma to opt out of the <code>missing-signatures</code> compiler warning on a module-by-module basis:\n    </p>\n    <p>\n        <pre>{-#&nbsp;<span style=\"color:gray;\">OPTIONS_GHC</span>&nbsp;-Wno-missing-signatures&nbsp;#-}</pre>\n    </p>\n    <p>\n        This will enable me to rely on type inference in parts of the code base, while keeping the build clean of compiler warnings.\n    </p>\n    <h3 id=\"36e2b141fff548678e34d24eda5a3e03\">\n        Conclusion <a href=\"#36e2b141fff548678e34d24eda5a3e03\">#</a>\n    </h3>\n    <p>\n        I've always appreciated the F# compiler's ability to infer types and just let type changes automatically ripple through the code base. For that reason, the Haskell norm of explicitly adding a (redundant) type annotation has always vexed me.\n    </p>\n    <p>\n        It often takes me a long time to reach seemingly obvious conclusions, such as: Don't always add type definitions to Haskell functions. Let the type inference engine do its job.\n    </p>\n    <p>\n        The reason it takes me so long to take such a small step is that I want to follow 'best practice'; I want to write idiomatic code. When the standard compiler-warning set complains about missing type definitions, it takes me significant deliberation to discard such advice. I could imagine other programmers being in the same situation, which is one reason I wrote this article.\n    </p>\n    <p>\n        The point isn't that type definitions are a universally bad idea. They aren't. Rather, the point is only that it's also okay to do without them in parts of a code base. Perhaps only temporarily, but in some cases maybe permanently.\n    </p>\n    <p>\n        The <code>missing-signatures</code> warning shouldn't, I now believe, be considered an absolute law, but rather a contextual rule.\n    </p>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "Are Haskell IDE plugins now good enough that you don't need explicit type annotations?\n    \n    \n        More than three years ago, I published a small article series to document that I'd changed my mind on various small practices. Belatedly, here comes a fourth article, which, frankly, is a cousin rather than a sibling. Still, it fits the overall theme well enough to become another instalment in the series.\n    \n    \n        Here, I consider using fewer Haskell type annotations, following a practice that I've always followed in F#.\n    \n    \n        To be honest, though, it's not that I've already applied the following practice for a long time, and only now write about it. It's rather that I feel the need to write this article to kick an old habit and start a new.\n    \n    \n        Inertia #\n    \n    \n        As I write in the dedication in Code That Fits in Your Head,\n    \n    \n        \n            \"To my parents:\n        \n        \n            \"My mother, Ulla Seemann, to whom I owe my attention to detail.\n        \n        \n            \"My father, Leif Seemann, from whom I inherited my contrarian streak.\"\n        \n        Code That Fits in Your Head, dedication\n    \n    \n        One should always be careful simplifying one's personality to a simple, easy-to-understand model, but a major point here is that I have two traits that pull in almost the opposite direction.\n    \n    \n        \n    \n    \n        Despite much work, I only make slow progress. My desire to make things neat and proper almost cancel out my tendency to go against the norms. I tend to automatically toe whatever line that exists until the cognitive dissonance becomes so great that I can no longer ignore it.\n    \n    \n        I then write an article for the blog to clarify my thoughts.\n    \n    \n        You may read what comes next and ask, what took you so long?!\n    \n    \n        I can only refer to the above. I may look calm on the surface, but underneath I'm paddling like the dickens. Despite much work, though, only limited progress is visible.\n    \n    \n        Nudge #\n    \n    \n        Haskell is a statically typed language with the most powerful type system I know my way around. The types carry so much information that one can often infer a function's contract from the type alone. This is also fortunate, since many Haskell libraries tend to have, shall we say, minimal documentation. Even so, I've often found myself able to figure out how to use an unfamiliar Haskell API by examining the various types that a library exports.\n    \n    \n        In fact, the type system is so powerful that it drives a specialized search engine. If you need a function with the type (String -> IO Int) -> [String] -> IO [Int] you can search for it. Hoogle will list all functions that match that type, including functions that are more abstract than your specialized need. You don't even have to imagine what the name might be.\n    \n    \n        Since the type system is so powerful, it's a major means of communication. Thus, it makes sense that GHC regularly issues a warning if a function lacks a type annotation.\n    \n    \n        While the compiler enables you to control which warnings are turned on, the missing-signatures warning is included in the popular all flag that most people, I take it, use. I do, at least.\n    \n    \n        If you forget to declare the type of a function, the compiler will complain:\n    \n    \n        src\\SecurityManager.hs:15:1: warning: [GHC-38417] [-Wmissing-signatures]\n    Top-level binding with no type signature:\n      createUser :: (Monad m, Text.Printf.PrintfArg b,\n                     Text.Printf.PrintfArg (t a), Foldable t, Eq (t a)) =>\n                    (String -> m ()) -> m (t a) -> (t a -> b) -> m ()\n   |\n15 | createUser writeLine readLine encrypt = do\n   | ^^^^^^^^^^\n    \n    \n        This is a strong nudge that you're supposed to give each function a type declaration, so I've been doing that for years. Neat and proper.\n    \n    \n        Of course, if you treat warnings as errors, as I recommend, the nudge becomes a law.\n    \n    \n        Learning from F# #\n    \n    \n        While I try to adopt the style and idioms of any language I work in, it's always annoyed me that I had to add a type annotation to a Haskell function. After all, the compiler can usually infer the type. Frankly, adding a type signature feels like redundant ceremony. It's like having to declare a function in a header file before being able to implement it in another file.\n    \n    \n        This particularly bothers me because I've long since abandoned type annotations in F#. As far as I can tell, most of the F# community has, too.\n    \n    \n        When you implement an F# function, you just write the implementation and let the compiler infer the type. (Code example from Zone of Ceremony.)\n    \n    \n        let inline consume quantity =\n    let go (acc, xs) x =\n        if quantity <= acc\n        then (acc, Seq.append xs (Seq.singleton x))\n        else (acc + x, xs)\n    Seq.fold go (LanguagePrimitives.GenericZero, Seq.empty) >> snd\n    \n    \n        Since F# often has to interact with .NET code written in C#, you regularly have to add some type annotations to help the compiler along:\n    \n    \n        let average (timeSpans : NonEmpty<TimeSpan>) =\n    [ timeSpans.Head ] @ List.ofSeq timeSpans.Tail\n    |> List.averageBy (_.Ticks >> double)\n    |> int64\n    |> TimeSpan.FromTicks\n    \n    \n        Even so, I follow the rule of minimal annotations: Only add the type information required to compile, and let the compiler infer the rest. For example, the above average function has the inferred type NonEmpty<TimeSpan> -> TimeSpan. While I had to specify the input type in order to be able to use the Ticks property, I didn't have to specify the return type. So I didn't.\n    \n    \n        My impression from reading other people's F# code is that this is a common, albeit not universal, approach to type annotation.\n    \n    \n        This minimizes ceremony, since you only need to declare and maintain the types that the compiler can't infer. There's no reason to repeat the work that the compiler can already do, and in practice, if you do, it just gets in the way.\n    \n    \n        Motivation for explicit type definitions #\n    \n    \n        When I extol the merits of static types, proponents of dynamically typed languages often argue that the types are in the way. Granted, this is a discussion that I still struggle with, but based on my understanding of the argument, it seems entirely reasonable. After all, if you have to spend time declaring the type of each and every parameter, as well as a function's return type, it does seem to be in the way. This is only exacerbated if you later change your mind.\n    \n    \n        Programming is, to a large extend, an explorative activity. You start with one notion of how your code should be structured, but as you progress, you learn. You'll often have to go back and change existing code. This, as far as I can tell, is much easier in, say, Python or Clojure than in C# or Java.\n    \n    \n        If, however, one extrapolates from the experience with Java or C# to all statically typed languages, that would be a logical fallacy. My point with Zone of Ceremony was exactly that there's a group of languages 'to the right' of high-ceremony languages with low levels of ceremony. Even though they're statically typed.\n    \n    \n        I have to admit, however, that in that article I cheated a little in order to drive home a point. While you can write Haskell code in a low-ceremony style, the tooling (in the form of the all warning set, at least) encourages a high-ceremony style. Add those type definitions, even thought they're redundant.\n    \n    \n        It's not that I don't understand some of the underlying motivation behind that rule. Daniel Wagner enumerated several reasons in a 2013 Stack Overflow answer. Some of the reasons still apply, but on the other hand, the world has also moved on in the intervening decade.\n    \n    \n        To be honest, the Haskell IDE situation has always been precarious. One day, it works really well; the next day, I struggle with it. Over the years, though, things have improved.\n    \n    \n        There was a time when an explicit type definition was a indisputable help, because you couldn't rely on tools to light up and tell you what the inferred type was.\n    \n    \n        Today, on the other hand, the Haskell extension for Visual Studio Code automatically displays the inferred type above a function implementation:\n    \n    \n        \n    \n    \n        To be clear, the top line that shows the type definition is not part of the source code. It's just shown by Visual Studio Code as a code lens (I think it's called), and it automatically changes if I edit the code in such a way that the type changes.\n    \n    \n        If you can rely on such automatic type information, it seems that an explicit type declaration is less useful. It's at least one less reason to add type annotations to the source code.\n    \n    \n        Ceremony example #\n    \n    \n        In order to explain what I mean by the types being in the way, I'll give an example. Consider the code example from the article Legacy Security Manager in Haskell. In it, I described how every time I made a change to the createUser action, I had to effectively remove and re-add the type declaration.\n    \n    \n        It doesn't have to be like that. If instead I'd started without type annotations, I could have moved forward without being slowed down by having to edit type definitions. Take the first edit, breaking the dependency on the console, as an example. Without type annotations, the createUser action would look exactly as before, just without the type declaration. Its type would still be IO ().\n    \n    \n        After the first edit, the first lines of the action now look like this:\n    \n    \n        createUser writeLine readLine = do\n  () <- writeLine \"Enter a username\"\n  -- ...\n    \n    \n        Even without a type definition, the action still has a type. The compiler infers it to be (Monad m, Eq a, IsChar a) => (String -> m ()) -> m [a] -> m (), which is certainly a bit of a mouthful, but exactly what I had explicitly added in the other article.\n    \n    \n        The code doesn't compile until I also change the main method to pass the new parameters:\n    \n    \n        main = createUser putStrLn getLine\n    \n    \n        You'd have to make a similar edit in, say, Python, although there'd be no compiler to remind you. My point isn't that this is better than a dynamically typed language, but rather that it's on par. The types aren't in the way.\n    \n    \n        We see the similar lack of required ceremony when the createUser action finally pulls in the comparePasswords and validatePassword functions:\n    \n    \n        createUser writeLine readLine encrypt = do\n  () <- writeLine \"Enter a username\"\n  username <- readLine\n  writeLine \"Enter your full name\"\n  fullName <- readLine\n  writeLine \"Enter your password\"\n  password <- readLine\n  writeLine \"Re-enter your password\"\n  confirmPassword <- readLine\n \n  writeLine $ either\n    id\n    (printf \"Saving Details for User (%s, %s, %s)\" username fullName . encrypt)\n    (validatePassword =<< comparePasswords password confirmPassword)\n    \n    \n        Again, there's no type annotation, and while the type actually does change to\n    \n    \n        (Monad m, PrintfArg b, PrintfArg (t a), Foldable t, Eq (t a)) =>\n(String -> m ()) -> m (t a) -> (t a -> b) -> m ()\n    \n    \n        it impacts none of the existing code. Again, the types aren't in the way, and no ceremony is required.\n    \n    \n        Compare that inferred type signature with the explicit final type annotation in the previous article. The inferred type is much more abstract and permissive than the explicit declaration, although I also grant that Daniel Wagner had a point that you can make explicit type definitions more reader-friendly.\n    \n    \n        Flies in the ointment #\n    \n    \n        Do the inferred types communicate intent? That's debatable. For example, it's not immediately clear that the above t a allows String.\n    \n    \n        Another thing that annoys me is that I had to add that unit binding on the first line:\n    \n    \n        createUser writeLine readLine encrypt = do\n  () <- writeLine \"Enter a username\"\n  -- ...\n    \n    \n        The reason for that is that if I don't do that (that is, if I just write writeLine \"Xyz\" all the way), the compiler infers the type of writeLine to be String -> m b2, rather than just String -> m (). In effect, I want b2 ~ (), but because the compiler thinks that b2 may be anything, it issues an unused-do-bind warning.\n    \n    \n        The idiomatic way to resolve that situation is to add a type definition, but that's the situation I'm trying to avoid. Thus, my desire to do without annotations pushes me to write unnatural implementation code. This reminds me of the notion of test-induced damage. This is at best a disagreeable compromise.\n    \n    \n        It also annoys me that implementation details leak out to the inferred type, witnessed by the PrintfArg type constraint. What happens if I change the implementation to use list concatenation?\n    \n    \n        createUser writeLine readLine encrypt = do\n  () <- writeLine \"Enter a username\"\n  username <- readLine\n  writeLine \"Enter your full name\"\n  fullName <- readLine\n  writeLine \"Enter your password\"\n  password <- readLine\n  writeLine \"Re-enter your password\"\n  confirmPassword <- readLine\n \n  let createMsg pwd =\n        \"Saving Details for User (\" ++ username ++\", \" ++ fullName ++ \", \" ++ pwd ++\")\"\n  writeLine $ either\n    id\n    (createMsg . encrypt)\n    (validatePassword =<< comparePasswords password confirmPassword)\n    \n    \n        If I do that, the type also changes:\n    \n    \n        Monad m => (String -> m ()) -> m [Char] -> ([Char] -> [Char]) -> m ()\n    \n    \n        While we get rid of the PrintfArg type constraint, the type becomes otherwise more concrete, now operating on String values (keeping in mind that String is a type synonym for [Char]).\n    \n    \n        The code still compiles, and all tests still pass, because the abstraction I've had in mind all along is essentially this last type.\n    \n    \n        The writeLine action should take a String and have some side effect, but return no data. The type String -> m () nicely models that, striking a fine balance between being sufficiently concrete to capture intent, but still abstract enough to be testable.\n    \n    \n        The readLine action should provide input String values, and again m String nicely models that concern.\n    \n    \n        Finally, encrypt is indeed a naked String endomorphism: String -> String.\n    \n    \n        With my decades of experience with object-oriented design, it still strikes me as odd that implementation details can make a type more abstract, but once you think it over, it may be okay.\n    \n    \n        More liberal abstractions #\n    \n    \n        The inferred types are consistently more liberal than the abstraction I have in mind, which is\n    \n    \n        Monad m => (String -> m ()) -> m String -> (String -> String) -> m ()\n    \n    \n        In all cases, the inferred types include that type as a subset.\n    \n    \n        \n    \n    \n        I hope that I've created the above diagram so that it makes sense, but the point I'm trying to get across is that the two type definitions in the lower middle are equivalent, and are the most specific types. That's the intended abstraction. Thinking of types as sets, all the other inferred types are supersets of that type, in various ways. Even though implementation details leak out in the shape of PrintfArg and IsChar, these are effectually larger sets.\n    \n    \n        This takes some getting used to: The implementation details are more liberal than the abstraction. This seems to be at odds with the Dependency Inversion Principle (DIP), which suggests that abstractions shouldn't depend on implementation details. I'm not yet sure what to make of this, but I suspect that this is more of problem of overlapping linguistic semantics than software design. What I mean is that I have a feeling that 'implementation detail' have more than one meaning. At least, in the perspective of the DIP, an implementation detail limits your options. For example, depending on a particular database technology is more constraining than depending on some abstract notion of what the persistence mechanism might be. Contrast this with an implementation detail such as the PrintfArg type constraint. It doesn't narrow your options; on the contrary, it makes the implementation more liberal.\n    \n    \n        Still, while an implementation should be liberal in what it accepts, it's probably not a good idea to publish such a capability to the wider world. After all, if you do, someone will eventually rely on it.\n    \n    \n        For internal use only #\n    \n    \n        Going through all these considerations, I think I'll revise my position as the following.\n    \n    \n        I'll forgo type annotations as long as I explore a problem space. For internal application use, this may effectively mean forever, in the sense that how you compose an application from smaller building blocks is likely to be in permanent flux. Here I have in mind your average web asset or other public-facing service that's in constant development. You keep adding new features, or changing domain logic as the overall business evolves.\n    \n    \n        As I've also recently discussed, Haskell is a great scripting language, and I think that here, too, I'll dial down the type definitions.\n    \n    \n        If I ever do another Advent of Code in Haskell, I think I'll also eschew explicit type annotations.\n    \n    \n        On the other hand, I can see that once an API stabilizes, you may want to lock it down. This may also apply to internal abstractions if you're working in a team and you explicitly want to communicate what a contract is.\n    \n    \n        If the code is a reusable library, I think that explicit type definitions are still required. Both for the reasons outlined by Daniel Wagner, and also to avoid being the victim of Hyrum's law.\n    \n    \n        That's why I phrase this pendulum swing as a new default. I'll begin programming without type definitions, but add them as needed. The point is rather that there may be parts of a code base where they're never needed, and then it's okay to keep going without them.\n    \n    \n        You can use a language pragma to opt out of the missing-signatures compiler warning on a module-by-module basis:\n    \n    \n        {-# OPTIONS_GHC -Wno-missing-signatures #-}\n    \n    \n        This will enable me to rely on type inference in parts of the code base, while keeping the build clean of compiler warnings.\n    \n    \n        Conclusion #\n    \n    \n        I've always appreciated the F# compiler's ability to infer types and just let type changes automatically ripple through the code base. For that reason, the Haskell norm of explicitly adding a (redundant) type annotation has always vexed me.\n    \n    \n        It often takes me a long time to reach seemingly obvious conclusions, such as: Don't always add type definitions to Haskell functions. Let the type inference engine do its job.\n    \n    \n        The reason it takes me so long to take such a small step is that I want to follow 'best practice'; I want to write idiomatic code. When the standard compiler-warning set complains about missing type definitions, it takes me significant deliberation to discard such advice. I could imagine other programmers being in the same situation, which is one reason I wrote this article.\n    \n    \n        The point isn't that type definitions are a universally bad idea. They aren't. Rather, the point is only that it's also okay to do without them in parts of a code base. Perhaps only temporarily, but in some cases maybe permanently.\n    \n    \n        The missing-signatures warning shouldn't, I now believe, be considered an absolute law, but rather a contextual rule.\n    \n\n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/10/28/functor-compositions",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A functor nested within another functor forms a functor. With examples in C# and another language.</em>\n    </p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In this one you'll learn about a universal composition of functors. In short, if you have one functor nested within another functor, then this composition itself gives rise to a functor.\n\t</p>\n    <p>\n        Together with other articles in this series, this result can help you answer questions such as: <em>Does this data structure form a functor?</em>\n    </p>\n    <p>\n        Since <a href=\"/2018/03/22/functors\">functors</a> tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like <code>Foo&lt;T&gt;</code> (C# syntax) or <code>Bar&lt;T1, T2&gt;</code>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it's a functor strongly suggests that you should give it a <code>Select</code> method in C#, a <code>map</code> function in <a href=\"https://fsharp.org/\">F#</a>, and so on.\n    </p>\n    <p>\n        Not all generic types give rise to a (covariant) functor. Some are rather <a href=\"/2021/09/02/contravariant-functors\">contravariant functors</a>, and some are <a href=\"/2022/08/01/invariant-functors\">invariant</a>.\n    </p>\n    <p>\n        If, on the other hand, you have a data type where one functor is nested within another functor, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    </p>\n    <h3 id=\"a97b2f6471b74db6a83362a552ee5b03\">\n        Abstract shape <a href=\"#a97b2f6471b74db6a83362a552ee5b03\">#</a>\n    </h3>\n    <p>\n        Before we look at some examples found in other code, it helps if we know what we're looking for. Imagine that you have two functors <code>F</code> and <code>G</code>, and you're now considering a data structure that contains a value where <code>G</code> is nested inside of <code>F</code>.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;ginf;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>(<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ginf</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.ginf&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ginf</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Methods&nbsp;go&nbsp;here...</span></pre>\n    </p>\n    <p>\n        The <code><span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class has a single class field. The type of this field is an <code>F</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a>, but 'inside' <code>F</code> there's a <code>G</code> functor.\n    </p>\n    <p>\n        This kind of data structure gives rise to a functor. Knowing that, you can give it a <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(ginf.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">g</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        The composed <code>Select</code> method calls <code>Select</code> on the <code>F</code> functor, passing it a lambda expression that calls <code>Select</code> on the <code>G</code> functor. That nested <code>Select</code> call produces an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&gt;</code> that the composed <code>Select</code> method finally wraps in a <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code> object that it returns.\n    </p>\n    <p>\n        I'll have more to say about how this generalizes to a nested composition of more than two functors, but first, let's consider some examples.\n    </p>\n    <h3 id=\"fcd4126b51c24b10867de4280f5e8844\">\n        Priority list <a href=\"#fcd4126b51c24b10867de4280f5e8844\">#</a>\n    </h3>\n    <p>\n        A common configuration is when the 'outer' functor is a collection, and the 'inner' functor is some other kind of container. The article <a href=\"/2024/07/01/an-immutable-priority-collection\">An immutable priority collection</a> shows a straightforward example. The <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class composes a single class field:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;[]&nbsp;priorities;</pre>\n    </p>\n    <p>\n        The <code>priorities</code> field is an array (a collection) of <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> objects. That type is a simple <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">record</a> type:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>);</pre>\n    </p>\n    <p>\n        If we squint a little and consider only the parameter list, we may realize that this is fundamentally an 'embellished' tuple: <code>(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>)</code>. <a href=\"/2018/12/31/tuple-bifunctor\">A pair forms a bifunctor</a>, but in the <a href=\"https://www.haskell.org/\">Haskell</a> <code>Prelude</code> a tuple is also a <code>Functor</code> instance over its rightmost element. In other words, if we'd swapped the <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> constructor parameters, it might have naturally looked like something we could <code>fmap</code>:\n    </p>\n    <p>\n        <pre>ghci&gt; fmap (elem 'r') (55, \"foo\")\n(55,False)</pre>\n    </p>\n    <p>\n        Here we have a tuple of an integer and a string. Imagine that the number <code>55</code> is the priority that we give to the label <code>\"foo\"</code>. This little ad-hoc example demonstrates how to map that tuple to another tuple with a priority, but now it instead holds a Boolean value indicating whether or not the string contained the character <code>'r'</code> (which it didn't).\n    </p>\n    <p>\n        You can easily swap the elements:\n    </p>\n    <p>\n        <pre>ghci&gt; import Data.Tuple\nghci&gt; swap (55, \"foo\")\n(\"foo\",55)</pre>\n    </p>\n    <p>\n        This looks just like the <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> parameter list. This also implies that if you originally have the parameter list in that order, you could <code>swap</code> it, map it, and swap it again:\n    </p>\n    <p>\n        <pre>ghci&gt; swap $ fmap (elem 'r') $ swap (\"foo\", 55)\n(False,55)</pre>\n    </p>\n    <p>\n        My point is only that <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> is isomorphic to a known functor. In reality you rarely need to analyze things that thoroughly to come to that realization, but the bottom line is that you can give <code><span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> a lawful <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Item</span>,&nbsp;<span style=\"color:blue;\">byte</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Priority</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Prioritized</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(Item),&nbsp;Priority);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        Hardly surprising, but since this article postulates that a functor of a functor is a functor, and since we already know that collections give rise to a functor, we should deduce that we can give <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> a <code>Select</code> method. And we can:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;priorities.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">p</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">p</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)).<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>());\n}</pre>\n    </p>\n    <p>\n        Notice how much this implementation looks like the above <code><span style=\"color:#2b91af;\">GInF</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> 'shape' implementation.\n    </p>\n    <h3 id=\"32b4e828d4584c3d8cda81a9682aee34\">\n        Tree <a href=\"#32b4e828d4584c3d8cda81a9682aee34\">#</a>\n    </h3>\n    <p>\n        An example only marginally more complicated than the above is shown in <a href=\"/2018/08/06/a-tree-functor\">A Tree functor</a>. The <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class shown in that article contains two constituents:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;children;\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">T</span>&nbsp;Item&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n    </p>\n    <p>\n        Just like <code><span style=\"color:#2b91af;\">PriorityCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> there's a collection, as well as a 'naked' <code>T</code> value. The main difference is that here, the collection is of the same type as the object itself: <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>.\n    </p>\n    <p>\n        You've seen a similar example in <a href=\"/2024/10/14/functor-sums\">the previous article</a>, which also had a recursive data structure. If you assume, however, that <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> gives rise to a functor, then so does the nested composition of putting it in a collection. This means, from the 'theorem' put forth in this article, that <code><span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code> composes as a functor. Finally you have a product of a <code>T</code> (which is isomorphic to the <a href=\"/2018/09/03/the-identity-functor\">Identity functor</a>) and that composed functor. From <a href=\"/2024/09/16/functor-products\">Functor products</a> it follows that that's a functor too, which explains why <code><span style=\"color:#2b91af;\">Tree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> forms a functor. <a href=\"/2018/08/06/a-tree-functor\">The article</a> shows the <code>Select</code> implementation.\n    </p>\n    <h3 id=\"17209725eab64da598ba924342dafbd0\">\n        Binary tree Zipper <a href=\"#17209725eab64da598ba924342dafbd0\">#</a>\n    </h3>\n    <p>\n        In both previous articles you've seen pieces of the puzzle explaining why the <a href=\"/2024/09/09/a-binary-tree-zipper-in-c\">binary tree Zipper</a> gives rise to functor. There's one missing piece, however, that we can now finally address.\n    </p>\n    <p>\n        Recall that <code><span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> composes these two objects:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;Tree&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;Breadcrumbs&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n    </p>\n    <p>\n        We've already established that both <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> and <code><span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> form functors. In this article you've learned that a functor in a functor is a functor, which applies to <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code>. Both of the above read-only properties are functors, then, which means that the entire class is a product of functors. The <code>Select</code> method follows:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tree.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">c</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">c</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        Notice that this <code>Select</code> implementation calls <code>Select</code> on the 'outer' <code>Breadcrumbs</code> by calling <code>Select</code> on each <code><span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>. This is similar to the previous examples in this article.\n    </p>\n    <h3 id=\"800728c4c9c54aec815c62352843d52b\">\n        Other nested containers <a href=\"#800728c4c9c54aec815c62352843d52b\">#</a>\n    </h3>\n    <p>\n        There are plenty of other examples of functors that contains other functor values. Asynchronous programming supplies its own family of examples.\n    </p>\n    <p>\n        The way that C# and many other languages model asynchronous or I/O-bound actions is to wrap them in a <a href=\"https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1\">Task</a> container. If the value inside the <code>Task&lt;T&gt;</code> container is itself a functor, you can make that a functor, too. Examples include <code>Task&lt;IEnumerable&lt;T&gt;&gt;</code>, <code>Task&lt;Maybe&lt;T&gt;&gt;</code> (or its close cousin <code>Task&lt;T?&gt;</code>; notice <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/nullable-reference-types\">the question mark</a>), <code>Task&lt;Result&lt;T1, T2&gt;&gt;</code>, etc. You'll run into such types every time you have an I/O-bound or concurrent operation that returns <code>IEnumerable&lt;T&gt</code>, <code>Maybe&lt;T&gt;</code> etc. as an asynchronous result.\n    </p>\n    <p>\n        While you <em>can</em> make such nested task functors a functor in its own right, you rarely need that in languages with native <code>async</code> and <code>await</code> features, since those languages nudge you in other directions.\n    </p>\n    <p>\n        You can, however, run into other issues with task-based programming, but you'll see examples and solutions in <a href=\"/2024/11/11/traversals\">a future article</a>.\n    </p>\n    <p>\n        You'll run into other examples of nested containers with many property-based testing libraries. They typically define <a href=\"/2017/09/18/the-test-data-generator-functor\">Test Data Generators</a>, often called <code>Gen&lt;T&gt;</code>. For .NET, both <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a>, <a href=\"https://github.com/hedgehogqa/fsharp-hedgehog\">Hedgehog</a>, and <a href=\"https://github.com/AnthonyLloyd/CsCheck\">CsCheck</a> does this. For Haskell, <a href=\"https://hackage.haskell.org/package/QuickCheck\">QuickCheck</a>, too, defines <code>Gen a</code>.\n    </p>\n    <p>\n        You often need to generate random collections, in which case you'd work with <code>Gen&lt;IEnumerable&lt;T&gt;&gt;</code> or a similar collection type. If you need random <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a> values, you'll work with <code>Gen&lt;Maybe&lt;T&gt;&gt;</code>, and so on.\n    </p>\n    <p>\n        On the other hand, <a href=\"/2016/06/28/roman-numerals-via-property-based-tdd\">sometimes you need</a> to work with a collection of generators, such as <code>seq&lt;Gen&lt;'a&gt;&gt;</code>.\n    </p>\n    <p>\n        These are all examples of functors within functors. It's not a given that you <em>must</em> treat such a combination as a functor in its own right. To be honest, typically, you don't. On the other hand, if you find yourself writing <code>Select</code> within <code>Select</code>, or <code>map</code> within <code>map</code>, depending on your language, it might make your code more succinct and readable if you give that combination a specialized functor affordance.\n    </p>\n    <h3 id=\"bffe8909eb904260be8aa4ab1a22efb2\">\n        Higher arities <a href=\"#bffe8909eb904260be8aa4ab1a22efb2\">#</a>\n    </h3>\n    <p>\n        Like the previous two articles, the 'theorem' presented here generalizes to more than two functors. If you have a third <code>H</code> functor, then <code>F&lt;G&lt;H&lt;T&gt;&gt;&gt;</code> also gives rise to a functor. You can easily prove this by simple induction. We may first consider the base case. With a single functor (<em>n = 1</em>) any functor (say, <code>F</code>) is trivially a functor.\n    </p>\n    <p>\n        In the induction step (<em>n > 1</em>), you then assume that the <em>n - 1</em> 'stack' of functors already gives rise to a functor, and then proceed to prove that the configuration where all those nested functors are wrapped by yet another functor also forms a functor. Since the 'inner stack' of functors forms a functor (by assumption), you only need to prove that a configuration of the outer functor, and that 'inner stack', gives rise to a functor. You've seen how this works in this article, but I admit that a few examples constitute no proof. I'll leave you with only a sketch of this step, but you may consider using equational reasoning <a href=\"https://bartoszmilewski.com/2015/01/20/functors/\">as demonstrated by Bartosz Milewski</a> and then prove the functor laws for such a composition.\n    </p>\n    <p>\n        The Haskell <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Compose.html\">Data.Functor.Compose</a> module defines a general-purpose data type to compose functors. You may, for example, compose a tuple inside a Maybe inside a list:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">thriceNested</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Compose</span>&nbsp;[]&nbsp;(<span style=\"color:blue;\">Compose</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;((,)&nbsp;<span style=\"color:#2b91af;\">Integer</span>))&nbsp;<span style=\"color:#2b91af;\">String</span>\nthriceNested&nbsp;=&nbsp;Compose&nbsp;[Compose&nbsp;(Just&nbsp;(42,&nbsp;<span style=\"color:#a31515;\">&quot;foo&quot;</span>)),&nbsp;Compose&nbsp;Nothing,&nbsp;Compose&nbsp;(Just&nbsp;(89,&nbsp;<span style=\"color:#a31515;\">&quot;ba&quot;</span>))]</pre>\n    </p>\n    <p>\n        You can easily <code>fmap</code> that data structure, for example by evaluating whether the number of characters in each string is an odd number (if it's there at all):\n    </p>\n    <p>\n        <pre>ghci&gt; fmap (odd . length) thriceNested\nCompose [Compose (Just (42,True)),Compose Nothing,Compose (Just (89,False))]</pre>\n    </p>\n    <p>\n        The first element now has <code>True</code> as the second tuple element, since <code>\"foo\"</code> has an odd number of characters (3). The next element is <code>Nothing</code>, because <code>Nothing</code> maps to <code>Nothing</code>. The third element has <code>False</code> in the rightmost tuple element, since <code>\"ba\"</code> doesn't have an odd number of characters (it has 2).\n    </p>\n    <h3 id=\"8c6ca7bcdc554856bee94bd11981aa6f\">\n        Relations to monads <a href=\"#8c6ca7bcdc554856bee94bd11981aa6f\">#</a>\n    </h3>\n    <p>\n        A nested 'stack' of functors may remind you of the way that I prefer to teach <a href=\"/2022/03/28/monads\">monads</a>: <em>A monad is a functor your can flatten</em>. In short, the definition is the ability to 'flatten' <code>F&lt;F&lt;T&gt;&gt;</code> to <code>F&lt;T&gt;</code>. A function that can do that is often called <code>join</code> or <code>Flatten</code>.\n    </p>\n    <p>\n        So far in this article, we've been looking at stacks of different functors, abstractly denoted <code>F&lt;G&lt;T&gt;&gt;</code>. There's no rule, however, that says that <code>F</code> and <code>G</code> may not be the same. If <code>F = G</code> then <code>F&lt;G&lt;T&gt;&gt;</code> is really <code>F&lt;F&lt;T&gt;&gt;</code>. This starts to look like the <a href=\"https://en.wikipedia.org/wiki/Antecedent_(logic)\">antecedent</a> of the monad definition.\n    </p>\n    <p>\n        While the starting point may be the same, these notions are not equivalent. Yes, <code>F&lt;F&lt;T&gt;&gt;</code> <em>may</em> form a monad (if you can flatten it), but it does, universally, give rise to a functor. On the other hand, we can hardly talk about flattening <code>F&lt;G&lt;T&gt;&gt;</code>, because that would imply that you'd have to somehow 'throw away' either <code>F</code> or <code>G</code>. There may be specific functors (e.g. Identity) for which this is possible, but there's no universal law to that effect.\n    </p>\n    <p>\n        Not all 'stacks' of functors are monads. <a href=\"/2022/03/28/monads\">All monads, on the other hand, are functors</a>.\n    </p>\n    <h3 id=\"14f39729b7ab426e83a35a067cf8f3a1\">\n        Conclusion <a href=\"#14f39729b7ab426e83a35a067cf8f3a1\">#</a>\n    </h3>\n    <p>\n        A data structure that configures one type of functor inside of another functor itself forms a functor. The examples shown in this article are mostly constrained to two functors, but if you have a 'stack' of three, four, or more functors, that arrangement still gives rise to a functor.\n    </p>\n\t<p>\n\t\tThis is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such stacks into functors, in the way that Haskell's <code>Compose</code> container almost does. Thus, knowing when you can safely give your generic types a <code>Select</code> method or <code>map</code> function may come in handy.\n\t</p>\n    <p>\n        To be honest, though, this result is hardly the most important 'theorem' concerning stacks of functors. In reality, you often run into situations where you <em>do</em> have a stack of functors, but they're in the wrong order. You may have a collection of asynchronous tasks, but you really need an asynchronous task that contains a collection of values. The next article addresses that problem.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2024/11/11/traversals\">Traversals</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "A functor nested within another functor forms a functor. With examples in C# and another language.\n    \n\t\n\t\tThis article is part of a series of articles about functor relationships. In this one you'll learn about a universal composition of functors. In short, if you have one functor nested within another functor, then this composition itself gives rise to a functor.\n\t\n    \n        Together with other articles in this series, this result can help you answer questions such as: Does this data structure form a functor?\n    \n    \n        Since functors tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like Foo<T> (C# syntax) or Bar<T1, T2>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it's a functor strongly suggests that you should give it a Select method in C#, a map function in F#, and so on.\n    \n    \n        Not all generic types give rise to a (covariant) functor. Some are rather contravariant functors, and some are invariant.\n    \n    \n        If, on the other hand, you have a data type where one functor is nested within another functor, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    \n    \n        Abstract shape #\n    \n    \n        Before we look at some examples found in other code, it helps if we know what we're looking for. Imagine that you have two functors F and G, and you're now considering a data structure that contains a value where G is nested inside of F.\n    \n    \n        public sealed class GInF<T>\n{\n    private readonly F<G<T>> ginf;\n \n    public GInF(F<G<T>> ginf)\n    {\n        this.ginf = ginf;\n    }\n \n    // Methods go here...\n    \n    \n        The GInF<T> class has a single class field. The type of this field is an F container, but 'inside' F there's a G functor.\n    \n    \n        This kind of data structure gives rise to a functor. Knowing that, you can give it a Select method:\n    \n    \n        public GInF<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new GInF<TResult>(ginf.Select(g => g.Select(selector)));\n}\n    \n    \n        The composed Select method calls Select on the F functor, passing it a lambda expression that calls Select on the G functor. That nested Select call produces an F<G<TResult>> that the composed Select method finally wraps in a new GInF<TResult> object that it returns.\n    \n    \n        I'll have more to say about how this generalizes to a nested composition of more than two functors, but first, let's consider some examples.\n    \n    \n        Priority list #\n    \n    \n        A common configuration is when the 'outer' functor is a collection, and the 'inner' functor is some other kind of container. The article An immutable priority collection shows a straightforward example. The PriorityCollection<T> class composes a single class field:\n    \n    \n        private readonly Prioritized<T>[] priorities;\n    \n    \n        The priorities field is an array (a collection) of Prioritized<T> objects. That type is a simple record type:\n    \n    \n        public sealed record Prioritized<T>(T Item, byte Priority);\n    \n    \n        If we squint a little and consider only the parameter list, we may realize that this is fundamentally an 'embellished' tuple: (T Item, byte Priority). A pair forms a bifunctor, but in the Haskell Prelude a tuple is also a Functor instance over its rightmost element. In other words, if we'd swapped the Prioritized<T> constructor parameters, it might have naturally looked like something we could fmap:\n    \n    \n        ghci> fmap (elem 'r') (55, \"foo\")\n(55,False)\n    \n    \n        Here we have a tuple of an integer and a string. Imagine that the number 55 is the priority that we give to the label \"foo\". This little ad-hoc example demonstrates how to map that tuple to another tuple with a priority, but now it instead holds a Boolean value indicating whether or not the string contained the character 'r' (which it didn't).\n    \n    \n        You can easily swap the elements:\n    \n    \n        ghci> import Data.Tuple\nghci> swap (55, \"foo\")\n(\"foo\",55)\n    \n    \n        This looks just like the Prioritized<T> parameter list. This also implies that if you originally have the parameter list in that order, you could swap it, map it, and swap it again:\n    \n    \n        ghci> swap $ fmap (elem 'r') $ swap (\"foo\", 55)\n(False,55)\n    \n    \n        My point is only that Prioritized<T> is isomorphic to a known functor. In reality you rarely need to analyze things that thoroughly to come to that realization, but the bottom line is that you can give Prioritized<T> a lawful Select method:\n    \n    \n        public sealed record Prioritized<T>(T Item, byte Priority)\n{\n    public Prioritized<TResult> Select<TResult>(Func<T, TResult> selector)\n    {\n        return new(selector(Item), Priority);\n    }\n}\n    \n    \n        Hardly surprising, but since this article postulates that a functor of a functor is a functor, and since we already know that collections give rise to a functor, we should deduce that we can give PriorityCollection<T> a Select method. And we can:\n    \n    \n        public PriorityCollection<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new PriorityCollection<TResult>(\n        priorities.Select(p => p.Select(selector)).ToArray());\n}\n    \n    \n        Notice how much this implementation looks like the above GInF<T> 'shape' implementation.\n    \n    \n        Tree #\n    \n    \n        An example only marginally more complicated than the above is shown in A Tree functor. The Tree<T> class shown in that article contains two constituents:\n    \n    \n        private readonly IReadOnlyCollection<Tree<T>> children;\n \npublic T Item { get; }\n    \n    \n        Just like PriorityCollection<T> there's a collection, as well as a 'naked' T value. The main difference is that here, the collection is of the same type as the object itself: Tree<T>.\n    \n    \n        You've seen a similar example in the previous article, which also had a recursive data structure. If you assume, however, that Tree<T> gives rise to a functor, then so does the nested composition of putting it in a collection. This means, from the 'theorem' put forth in this article, that IReadOnlyCollection<Tree<T>> composes as a functor. Finally you have a product of a T (which is isomorphic to the Identity functor) and that composed functor. From Functor products it follows that that's a functor too, which explains why Tree<T> forms a functor. The article shows the Select implementation.\n    \n    \n        Binary tree Zipper #\n    \n    \n        In both previous articles you've seen pieces of the puzzle explaining why the binary tree Zipper gives rise to functor. There's one missing piece, however, that we can now finally address.\n    \n    \n        Recall that BinaryTreeZipper<T> composes these two objects:\n    \n    \n        public BinaryTree<T> Tree { get; }\npublic IEnumerable<Crumb<T>> Breadcrumbs { get; }\n    \n    \n        We've already established that both BinaryTree<T> and Crumb<T> form functors. In this article you've learned that a functor in a functor is a functor, which applies to IEnumerable<Crumb<T>>. Both of the above read-only properties are functors, then, which means that the entire class is a product of functors. The Select method follows:\n    \n    \n        public BinaryTreeZipper<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new BinaryTreeZipper<TResult>(\n        Tree.Select(selector),\n        Breadcrumbs.Select(c => c.Select(selector)));\n}\n    \n    \n        Notice that this Select implementation calls Select on the 'outer' Breadcrumbs by calling Select on each Crumb<T>. This is similar to the previous examples in this article.\n    \n    \n        Other nested containers #\n    \n    \n        There are plenty of other examples of functors that contains other functor values. Asynchronous programming supplies its own family of examples.\n    \n    \n        The way that C# and many other languages model asynchronous or I/O-bound actions is to wrap them in a Task container. If the value inside the Task<T> container is itself a functor, you can make that a functor, too. Examples include Task<IEnumerable<T>>, Task<Maybe<T>> (or its close cousin Task<T?>; notice the question mark), Task<Result<T1, T2>>, etc. You'll run into such types every time you have an I/O-bound or concurrent operation that returns IEnumerable<T&gt, Maybe<T> etc. as an asynchronous result.\n    \n    \n        While you can make such nested task functors a functor in its own right, you rarely need that in languages with native async and await features, since those languages nudge you in other directions.\n    \n    \n        You can, however, run into other issues with task-based programming, but you'll see examples and solutions in a future article.\n    \n    \n        You'll run into other examples of nested containers with many property-based testing libraries. They typically define Test Data Generators, often called Gen<T>. For .NET, both FsCheck, Hedgehog, and CsCheck does this. For Haskell, QuickCheck, too, defines Gen a.\n    \n    \n        You often need to generate random collections, in which case you'd work with Gen<IEnumerable<T>> or a similar collection type. If you need random Maybe values, you'll work with Gen<Maybe<T>>, and so on.\n    \n    \n        On the other hand, sometimes you need to work with a collection of generators, such as seq<Gen<'a>>.\n    \n    \n        These are all examples of functors within functors. It's not a given that you must treat such a combination as a functor in its own right. To be honest, typically, you don't. On the other hand, if you find yourself writing Select within Select, or map within map, depending on your language, it might make your code more succinct and readable if you give that combination a specialized functor affordance.\n    \n    \n        Higher arities #\n    \n    \n        Like the previous two articles, the 'theorem' presented here generalizes to more than two functors. If you have a third H functor, then F<G<H<T>>> also gives rise to a functor. You can easily prove this by simple induction. We may first consider the base case. With a single functor (n = 1) any functor (say, F) is trivially a functor.\n    \n    \n        In the induction step (n > 1), you then assume that the n - 1 'stack' of functors already gives rise to a functor, and then proceed to prove that the configuration where all those nested functors are wrapped by yet another functor also forms a functor. Since the 'inner stack' of functors forms a functor (by assumption), you only need to prove that a configuration of the outer functor, and that 'inner stack', gives rise to a functor. You've seen how this works in this article, but I admit that a few examples constitute no proof. I'll leave you with only a sketch of this step, but you may consider using equational reasoning as demonstrated by Bartosz Milewski and then prove the functor laws for such a composition.\n    \n    \n        The Haskell Data.Functor.Compose module defines a general-purpose data type to compose functors. You may, for example, compose a tuple inside a Maybe inside a list:\n    \n    \n        thriceNested :: Compose [] (Compose Maybe ((,) Integer)) String\nthriceNested = Compose [Compose (Just (42, \"foo\")), Compose Nothing, Compose (Just (89, \"ba\"))]\n    \n    \n        You can easily fmap that data structure, for example by evaluating whether the number of characters in each string is an odd number (if it's there at all):\n    \n    \n        ghci> fmap (odd . length) thriceNested\nCompose [Compose (Just (42,True)),Compose Nothing,Compose (Just (89,False))]\n    \n    \n        The first element now has True as the second tuple element, since \"foo\" has an odd number of characters (3). The next element is Nothing, because Nothing maps to Nothing. The third element has False in the rightmost tuple element, since \"ba\" doesn't have an odd number of characters (it has 2).\n    \n    \n        Relations to monads #\n    \n    \n        A nested 'stack' of functors may remind you of the way that I prefer to teach monads: A monad is a functor your can flatten. In short, the definition is the ability to 'flatten' F<F<T>> to F<T>. A function that can do that is often called join or Flatten.\n    \n    \n        So far in this article, we've been looking at stacks of different functors, abstractly denoted F<G<T>>. There's no rule, however, that says that F and G may not be the same. If F = G then F<G<T>> is really F<F<T>>. This starts to look like the antecedent of the monad definition.\n    \n    \n        While the starting point may be the same, these notions are not equivalent. Yes, F<F<T>> may form a monad (if you can flatten it), but it does, universally, give rise to a functor. On the other hand, we can hardly talk about flattening F<G<T>>, because that would imply that you'd have to somehow 'throw away' either F or G. There may be specific functors (e.g. Identity) for which this is possible, but there's no universal law to that effect.\n    \n    \n        Not all 'stacks' of functors are monads. All monads, on the other hand, are functors.\n    \n    \n        Conclusion #\n    \n    \n        A data structure that configures one type of functor inside of another functor itself forms a functor. The examples shown in this article are mostly constrained to two functors, but if you have a 'stack' of three, four, or more functors, that arrangement still gives rise to a functor.\n    \n\t\n\t\tThis is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such stacks into functors, in the way that Haskell's Compose container almost does. Thus, knowing when you can safely give your generic types a Select method or map function may come in handy.\n\t\n    \n        To be honest, though, this result is hardly the most important 'theorem' concerning stacks of functors. In reality, you often run into situations where you do have a stack of functors, but they're in the wrong order. You may have a collection of asynchronous tasks, but you really need an asynchronous task that contains a collection of values. The next article addresses that problem.\n    \n    \n        Next: Traversals.\n    \n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/10/21/legacy-security-manager-in-haskell",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A translation of the kata, and my first attempt at it.</em>\n    </p>\n    <p>\n        In early 2013 Richard Dalton published an article about <a href=\"https://www.devjoy.com/blog/legacy-code-katas/\">legacy code katas</a>. The idea is to present a piece of 'legacy code' that you have to somehow refactor or improve. Of course, in order to make the exercise manageable, it's necessary to reduce it to some essence of what we might regard as legacy code. It'll only be one aspect of true legacy code. For the legacy Security Manager exercise, the main problem is that the code is difficult to unit test.\n    </p>\n    <p>\n        The original kata presents the 'legacy code' in C#, which may exclude programmers who aren't familiar with that language and platform. Since I find the exercise useful, I've previous published <a href=\"https://github.com/ploeh/SecurityManagerPython\">a port to Python</a>. In this article, I'll port the exercise to <a href=\"https://www.haskell.org/\">Haskell</a>, as well as walk through one attempt at achieving the goals of the kata.\n    </p>\n    <h3 id=\"03ee8805b5a44e77b92f9f6d132513bf\">\n        The legacy code <a href=\"#03ee8805b5a44e77b92f9f6d132513bf\">#</a>\n    </h3>\n    <p>\n        The original C# code is a <code>static</code> procedure that uses the <a href=\"https://learn.microsoft.com/dotnet/api/system.console\">Console</a> API to ask a user a few simple questions, do some basic input validation, and print a message to the standard output stream. That's easy enough to port to Haskell:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">module</span>&nbsp;SecurityManager&nbsp;(<span style=\"color:#2b91af;\">createUser</span>)&nbsp;<span style=\"color:blue;\">where</span>\n \n<span style=\"color:blue;\">import</span>&nbsp;Text.Printf&nbsp;(<span style=\"color:#2b91af;\">printf</span>)\n \n<span style=\"color:#2b91af;\">createUser</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;()\ncreateUser&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">getLine</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">getLine</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">getLine</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">getLine</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;password&nbsp;/=&nbsp;confirmPassword\n&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:blue;\">length</span>&nbsp;password&nbsp;&lt;&nbsp;8\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:#a31515;\">&quot;Password&nbsp;must&nbsp;be&nbsp;at&nbsp;least&nbsp;8&nbsp;characters&nbsp;in&nbsp;length&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Encrypt&nbsp;the&nbsp;password&nbsp;(just&nbsp;reverse&nbsp;it,&nbsp;should&nbsp;be&nbsp;secure)\n</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;array&nbsp;=&nbsp;<span style=\"color:blue;\">reverse</span>&nbsp;password\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;array</pre>\n    </p>\n    <p>\n        Notice how the Haskell code seems to suffer slightly from the <a href=\"https://wiki.c2.com/?ArrowAntiPattern\">Arrow code smell</a>, which is a problem that the C# code actually doesn't exhibit. The reason is that when using Haskell in an 'imperative style' (which you can, after a fashion, with <code>do</code> notation), you can't 'exit early' from a an <code>if</code> check. The problem is that you can't have <code>if</code>-<code>then</code> without <code>else</code>.\n    </p>\n    <p>\n        Haskell has other language features that enable you to get rid of Arrow code, but in the spirit of the exercise, this would take us too far away from the original C# code. Making the code prettier should be a task for the refactoring exercise, rather than the starting point.\n    </p>\n    <p>\n        I've <a href=\"https://github.com/ploeh/SecurityManagerHaskell\">published the code to GitHub</a>, if you want a leg up.\n    </p>\n    <p>\n        Combined with Richard Dalton's original article, that's all you need to try your hand at the exercise. In the rest of this article, I'll go through my own attempt at the exercise. That said, while this was my first attempt at the Haskell version of it, I've done it multiple times in C#, and once in <a href=\"https://www.python.org/\">Python</a>. In other words, this isn't my first rodeo.\n    </p>\n    <h3 id=\"b5098b724e8443c4afeaa56e92c2f0d2\">\n        Break the dependency on the Console <a href=\"#b5098b724e8443c4afeaa56e92c2f0d2\">#</a>\n    </h3>\n    <p>\n        As warned, the rest of the article is a walkthrough of the exercise, so if you'd like to try it yourself, stop reading now. On the other hand, if you want to read on, but follow along in the GitHub repository, I've pushed the rest of the code to a branch called <code>first-pass</code>.\n    </p>\n    <p>\n        The first part of the exercise is to <em>break the dependency on the console</em>. In a language like Haskell where functions are first-class citizens, this part is trivial. I removed the type declaration, moved <code>putStrLn</code> and <code>getLine</code> to parameters and renamed them. Finally, I asked the compiler what the new type is, and added the new type signature.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">import</span>&nbsp;Text.Printf&nbsp;(<span style=\"color:#2b91af;\">printf</span>,&nbsp;<span style=\"color:blue;\">IsChar</span>)\n \n<span style=\"color:#2b91af;\">createUser</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;a,&nbsp;<span style=\"color:blue;\">IsChar</span>&nbsp;a)&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;[a]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()\ncreateUser&nbsp;writeLine&nbsp;readLine&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;password&nbsp;/=&nbsp;confirmPassword\n&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:blue;\">length</span>&nbsp;password&nbsp;&lt;&nbsp;8\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Password&nbsp;must&nbsp;be&nbsp;at&nbsp;least&nbsp;8&nbsp;characters&nbsp;in&nbsp;length&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">--&nbsp;Encrypt&nbsp;the&nbsp;password&nbsp;(just&nbsp;reverse&nbsp;it,&nbsp;should&nbsp;be&nbsp;secure)\n</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;array&nbsp;=&nbsp;<span style=\"color:blue;\">reverse</span>&nbsp;password\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;array</pre>\n    </p>\n    <p>\n        I also changed the <code>main</code> action of the program to pass <code>putStrLn</code> and <code>getLine</code> as arguments:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">import</span>&nbsp;SecurityManager&nbsp;(<span style=\"color:#2b91af;\">createUser</span>)\n \n<span style=\"color:#2b91af;\">main</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;()\nmain&nbsp;=&nbsp;createUser&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:blue;\">getLine</span></pre>\n    </p>\n    <p>\n        Manual testing indicates that I didn't break any functionality.\n    </p>\n    <h3 id=\"53e3144fa5b04528a8d54ae035dc40b8\">\n        Get the password comparison feature under test <a href=\"#53e3144fa5b04528a8d54ae035dc40b8\">#</a>\n    </h3>\n    <p>\n        The next task is to <em>get the password comparison feature under test</em>. Over a small series of Git commits, I added these <a href=\"/2018/05/07/inlined-hunit-test-lists\">inlined, parametrized HUnit tests</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;Matching&nbsp;passwords&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;pw&nbsp;&lt;-&nbsp;[<span style=\"color:#a31515;\">&quot;password&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;12345678&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;abcdefgh&quot;</span>]\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;actual&nbsp;=&nbsp;comparePasswords&nbsp;pw&nbsp;pw\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;Right&nbsp;pw&nbsp;~=?&nbsp;actual\n,\n<span style=\"color:#a31515;\">&quot;Non-matching&nbsp;passwords&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;(pw1,&nbsp;pw2)&nbsp;&lt;-\n&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#a31515;\">&quot;password&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;PASSWORD&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#a31515;\">&quot;12345678&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;12345677&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#a31515;\">&quot;abcdefgh&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;bacdefgh&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#a31515;\">&quot;aaa&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;bbb&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;]\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;actual&nbsp;=&nbsp;comparePasswords&nbsp;pw1&nbsp;pw2\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;Left&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span>&nbsp;~=?&nbsp;actual</pre>\n    </p>\n    <p>\n        The resulting implementation is this <code>comparePasswords</code> function:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">comparePasswords</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:#2b91af;\">String</span>\ncomparePasswords&nbsp;pw1&nbsp;pw2&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;pw1&nbsp;==&nbsp;pw2\n&nbsp;&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Right&nbsp;pw1\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;Left&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span></pre>\n    </p>\n    <p>\n        You'll notice that I chose to implement it as an <code>Either</code>-valued function. While I consider <a href=\"/2020/12/14/validation-a-solved-problem\">validation a solved problem</a>, the usual solution involves some <a href=\"/2018/11/05/applicative-validation\">applicative validation</a> container. In this exercise, validation is already short-circuiting, which means that we can use the standard monadic composition that <code>Either</code> affords.\n    </p>\n    <p>\n        At this point in the exercise, I just left the <code>comparePasswords</code> function there, without trying to use it within <code>createUser</code>. The reason for that is that <code>Either</code>-based composition is sufficiently different from <code>if</code>-<code>then</code>-<code>else</code> code that I wanted to get the entire system under test before I attempted that.\n    </p>\n    <h3 id=\"a1dc5d33f8eb4d5b80d015b197d1afc3\">\n        Get the password validation feature under test <a href=\"#a1dc5d33f8eb4d5b80d015b197d1afc3\">#</a>\n    </h3>\n    <p>\n        The third task of the exercise is to <em>get the password validation feature under test</em>. That's similar to the previous task. Once more, I'll show the tests first, and then the function driven by those tests, but I want to point out that both code artefacts came iteratively into existence through the usual <a href=\"/2019/10/21/a-red-green-refactor-checklist\">red-green-refactor</a> cycle.\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;Validate&nbsp;short&nbsp;password&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;pw&nbsp;&lt;-&nbsp;[<span style=\"color:#a31515;\">&quot;&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;1&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;12&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;abc&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;1234&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;gtrex&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;123456&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;1234567&quot;</span>]\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;actual&nbsp;=&nbsp;validatePassword&nbsp;pw\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;Left&nbsp;<span style=\"color:#a31515;\">&quot;Password&nbsp;must&nbsp;be&nbsp;at&nbsp;least&nbsp;8&nbsp;characters&nbsp;in&nbsp;length&quot;</span>&nbsp;~=?&nbsp;actual\n,\n<span style=\"color:#a31515;\">&quot;Validate&nbsp;long&nbsp;password&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;pw&nbsp;&lt;-&nbsp;[<span style=\"color:#a31515;\">&quot;12345678&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;123456789&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;abcdefghij&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;elevenchars&quot;</span>]\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;actual&nbsp;=&nbsp;validatePassword&nbsp;pw\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;Right&nbsp;pw&nbsp;~=?&nbsp;actual</pre>\n    </p>\n    <p>\n        The resulting function is hardly surprising.\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">validatePassword</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:#2b91af;\">String</span>\nvalidatePassword&nbsp;pw&nbsp;=\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:blue;\">length</span>&nbsp;pw&nbsp;&lt;&nbsp;8\n&nbsp;&nbsp;<span style=\"color:blue;\">then</span>&nbsp;Left&nbsp;<span style=\"color:#a31515;\">&quot;Password&nbsp;must&nbsp;be&nbsp;at&nbsp;least&nbsp;8&nbsp;characters&nbsp;in&nbsp;length&quot;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;Right&nbsp;pw</pre>\n    </p>\n    <p>\n        As in the previous step, I chose to postpone <em>using</em> this function from within <code>createUser</code> until I had a set of characterization tests. That may not be entirely in the spirit of the four subtasks of the exercise, but on the other hand, I intended to do more than just those four activities. The code here is actually simple enough that I could easily refactor without full test coverage, but recalling that this is a legacy code exercise, I find it warranted to <em>pretend</em> that it's complicated.\n    </p>\n    <p>\n        To be fair to the exercise, there'd <em>also</em> be a valuable exercise in attempting to extract each feature piecemeal, because it's not alway possible to add complete characterization test coverage to a piece of gnarly legacy code. Be that as it may, I've already done that kind of exercise in C# a few times, and I had a different agenda for the Haskell exercise. In short, I was curious about what sort of inferred type <code>createUser</code> would have, once I'd gone through all four subtasks. I'll return to that topic in a moment. First, I want to address the fourth subtask.\n    </p>\n    <h3 id=\"dc17b82e5e374cce8d59e2791eadfdfb\">\n        Allow different encryption algorithms to be used <a href=\"#dc17b82e5e374cce8d59e2791eadfdfb\">#</a>\n    </h3>\n    <p>\n        The final part of the exercise is to <em>add a feature to allow different encryption algorithms to be used</em>. Once again, when you're working in a language where functions are first-class citizens, and <a href=\"https://en.wikipedia.org/wiki/Higher-order_function\">higher-order functions</a> are <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatic</a>, one solution is easily at hand:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">createUser</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">Foldable</span>&nbsp;t,&nbsp;<span style=\"color:blue;\">Eq</span>&nbsp;(t&nbsp;a),&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;(t&nbsp;a),&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;b)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;(t&nbsp;a)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(t&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;b)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()\ncreateUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;password&nbsp;/=&nbsp;confirmPassword\n&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>&nbsp;<span style=\"color:blue;\">length</span>&nbsp;password&nbsp;&lt;&nbsp;8\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Password&nbsp;must&nbsp;be&nbsp;at&nbsp;least&nbsp;8&nbsp;characters&nbsp;in&nbsp;length&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;array&nbsp;=&nbsp;encrypt&nbsp;password\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeLine&nbsp;$\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;array</pre>\n    </p>\n    <p>\n        The only change I've made is to promote <code>encrypt</code> to a parameter. This, of course, ripples through the code that calls the action, but currently, that's only the <code>main</code> action, where I had to add <code>reverse</code> as a third argument:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">main</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">IO</span>&nbsp;()\nmain&nbsp;=&nbsp;createUser&nbsp;<span style=\"color:blue;\">putStrLn</span>&nbsp;<span style=\"color:blue;\">getLine</span>&nbsp;<span style=\"color:blue;\">reverse</span></pre>\n    </p>\n    <p>\n        Before I made the change, I removed the type annotation from <code>createUser</code>, because adding a parameter causes the type to change. Keeping the type annotation would have caused a compilation error. Eschewing type annotations makes it easier to make changes. Once I'd made the change, I added the new annotation, inferred by the <a href=\"https://marketplace.visualstudio.com/items?itemName=haskell.haskell\">Haskell Visual Studio Code extension</a>.\n    </p>\n    <p>\n        I was curious what kind of abstraction would arise. Would it be testable in some way?\n    </p>\n    <h3 id=\"da305705261f4c1fae7842d204097c6b\">\n        Testability <a href=\"#da305705261f4c1fae7842d204097c6b\">#</a>\n    </h3>\n    <p>\n        Consider the inferred type of <code>createUser</code> above. It's quite abstract, and I was curious if it was flexible enough to allow testability without adding <a href=\"https://dhh.dk/2014/test-induced-design-damage.html\">test-induced damage</a>. In short, in object-oriented programming, you often need to add Dependency Injection to make code testable, and the valid criticism is that this makes code more complicated than it would otherwise have been. I consider such reproval justified, although I disagree with the conclusion. It's not the desire for testability that causes the damage, but rather that object-oriented design is at odds with testability.\n    </p>\n    <p>\n        That's my conjecture, anyway, so I'm always curious when working with other paradigms like functional programming. Is idiomatic code already testable, or do you need to 'do damage to it' in order to make it testable?\n    </p>\n    <p>\n        As a Haskell action goes, I would consider its type fairly idiomatic. The code, too, is straightforward, although perhaps rather naive. It looks like beginner Haskell, and as we'll see later, we can rewrite it to be more elegant.\n    </p>\n    <p>\n        Before I started the exercise, I wondered whether it'd be necessary to <a href=\"/2017/07/11/hello-pure-command-line-interaction\">use free monads to model pure command-line interactions</a>. Since <code>createUser</code> returns <code>m ()</code>, where <code>m</code> is any <code>Monad</code> instance, using a free monad would be possible, but turns out to be overkill. After having thought about it a bit, I recalled that in many languages and platforms, you can <a href=\"https://stackoverflow.com/a/2139303/126014\">redirect <em>standard in</em> and <em>standard out</em> for testing purposes</a>. The way you do that is typically by replacing each with some kind of text stream. Based on that knowledge, I thought I could use <a href=\"/2022/06/20/the-state-monad\">the State monad</a> for characterization testing, with a list of strings for each text stream.\n    </p>\n    <p>\n        In other words, the code is already testable as it is. No test-induced damage here.\n    </p>\n    <h3 id=\"ae4ba5da448b4e248cb63f124b135834\">\n        Characterization tests <a href=\"#ae4ba5da448b4e248cb63f124b135834\">#</a>\n    </h3>\n    <p>\n        To use the State monad, I started by importing <a href=\"https://hackage.haskell.org/package/transformers/docs/Control-Monad-Trans-State-Lazy.html\">Control.Monad.Trans.State.Lazy</a> into my test code. This enabled me to write the first characterization test:\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;Happy&nbsp;path&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">flip</span>&nbsp;evalState\n&nbsp;&nbsp;&nbsp;&nbsp;([<span style=\"color:#a31515;\">&quot;just.inhale&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Justin&nbsp;Hale&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;12345678&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;12345678&quot;</span>],&nbsp;<span style=\"color:blue;\">[]</span>)&nbsp;$&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;writeLine&nbsp;x&nbsp;=&nbsp;modify&nbsp;(second&nbsp;(++&nbsp;[x]))\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;readLine&nbsp;=&nbsp;state&nbsp;(\\(i,&nbsp;o)&nbsp;-&gt;&nbsp;(<span style=\"color:blue;\">head</span>&nbsp;i,&nbsp;(<span style=\"color:blue;\">tail</span>&nbsp;i,&nbsp;o)))\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">reverse</span>\n \n&nbsp;&nbsp;createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt\n \n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;gets&nbsp;<span style=\"color:blue;\">snd</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;expected&nbsp;=&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(just.inhale,&nbsp;Justin&nbsp;Hale,&nbsp;87654321)&quot;</span>]\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;expected&nbsp;~=?&nbsp;actual</pre>\n    </p>\n    <p>\n        I consulted my earlier code from <a href=\"/2019/03/11/an-example-of-state-based-testing-in-haskell\">An example of state-based testing in Haskell</a> instead of reinventing the wheel, so if you want a more detailed walkthrough, you may want to consult that article as well as this one.\n    </p>\n    <p>\n        The type of the state that the test makes use of is <code>([String], [String])</code>. As the lambda expression suggests by naming the elements <code>i</code> and <code>o</code>, the two string lists are used for respectively input and output. The test starts with an 'input stream' populated by 'user input' values, corresponding to each of the four answers a user might give to the questions asked.\n    </p>\n    <p>\n        The <code>readLine</code> function works by pulling the <code>head</code> off the input list <code>i</code>, while on the other hand not touching the output list <code>o</code>. Its type is <code>State ([a], b) a</code>, compatible with <code>createUser</code>, which requires its <code>readLine</code> parameter to have the type <code>m (t a)</code>, where <code>m</code> is a <code>Monad</code> instance, and <code>t</code> a <code>Foldable</code> instance. The effective type turns out to be <code>t a ~ [Char] = String</code>, so that <code>readLine</code> effectively has the type <code>State ([String], b) String</code>. Since <code>State ([String], b)</code> is a <code>Monad</code> instance, it fits the <code>m</code> type argument of the requirement.\n    </p>\n    <p>\n        The same kind of reasoning applies to <code>writeLine</code>, which appends the input value to the 'output stream', which is the second list in the I/O tuple.\n    </p>\n    <p>\n        The test runs the <code>createUser</code> action and then checks that the output list contains the <code>expected</code> values.\n    </p>\n    <p>\n        A similar test verifies the behaviour when the passwords don't match:\n    </p>\n    <p>\n        <pre><span style=\"color:#a31515;\">&quot;Mismatched&nbsp;passwords&quot;</span>&nbsp;~:&nbsp;<span style=\"color:blue;\">flip</span>&nbsp;evalState\n&nbsp;&nbsp;&nbsp;&nbsp;([<span style=\"color:#a31515;\">&quot;i.lean.right&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Ilene&nbsp;Wright&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;password&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Password&quot;</span>],&nbsp;<span style=\"color:blue;\">[]</span>)&nbsp;$&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;writeLine&nbsp;x&nbsp;=&nbsp;modify&nbsp;(second&nbsp;(++&nbsp;[x]))\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;readLine&nbsp;=&nbsp;state&nbsp;(\\(i,&nbsp;o)&nbsp;-&gt;&nbsp;(<span style=\"color:blue;\">head</span>&nbsp;i,&nbsp;(<span style=\"color:blue;\">tail</span>&nbsp;i,&nbsp;o)))\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">reverse</span>\n \n&nbsp;&nbsp;createUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt\n \n&nbsp;&nbsp;actual&nbsp;&lt;-&nbsp;gets&nbsp;<span style=\"color:blue;\">snd</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;expected&nbsp;=&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;passwords&nbsp;don&#39;t&nbsp;match&quot;</span>]\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;$&nbsp;expected&nbsp;~=?&nbsp;actual</pre>\n    </p>\n    <p>\n        You can see the third and final characterization test in the GitHub repository.\n    </p>\n    <h3 id=\"ba7601efc69a4b929e738396588dc69a\">\n        Refactored action <a href=\"#ba7601efc69a4b929e738396588dc69a\">#</a>\n    </h3>\n    <p>\n        With <a href=\"/2015/11/16/code-coverage-is-a-useless-target-measure\">full test coverage</a> I could proceed to refactor the <code>createUser</code> action, pulling in the two functions I'd test-driven into existence earlier:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">createUser</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Monad</span>&nbsp;m,&nbsp;<span style=\"color:blue;\">PrintfArg</span>&nbsp;a)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">=&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;())&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(<span style=\"color:#2b91af;\">String</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;a)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;m&nbsp;()\ncreateUser&nbsp;writeLine&nbsp;readLine&nbsp;encrypt&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;a&nbsp;username&quot;</span>\n&nbsp;&nbsp;username&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;full&nbsp;name&quot;</span>\n&nbsp;&nbsp;fullName&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;password&nbsp;&lt;-&nbsp;readLine\n&nbsp;&nbsp;writeLine&nbsp;<span style=\"color:#a31515;\">&quot;Re-enter&nbsp;your&nbsp;password&quot;</span>\n&nbsp;&nbsp;confirmPassword&nbsp;&lt;-&nbsp;readLine\n \n&nbsp;&nbsp;writeLine&nbsp;$&nbsp;either\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;(printf&nbsp;<span style=\"color:#a31515;\">&quot;Saving&nbsp;Details&nbsp;for&nbsp;User&nbsp;(%s,&nbsp;%s,&nbsp;%s)&quot;</span>&nbsp;username&nbsp;fullName&nbsp;.&nbsp;encrypt)\n&nbsp;&nbsp;&nbsp;&nbsp;(validatePassword&nbsp;=&lt;&lt;&nbsp;comparePasswords&nbsp;password&nbsp;confirmPassword)</pre>\n    </p>\n    <p>\n        Because <code>createUser</code> now calls <code>comparePasswords</code> and <code>validatePassword</code>, the type of the overall composition is also more concrete. That's really just an artefact of my (misguided?) decision to give each of the two helper functions types that are more concrete than necessary.\n    </p>\n    <p>\n        As you can see, I left the initial call-and-response sequence intact, since I didn't feel that it needed improvement.\n    </p>\n    <h3 id=\"5dcbfa4c67c64780a76dc380fb64b138\">\n        Conclusion <a href=\"#5dcbfa4c67c64780a76dc380fb64b138\">#</a>\n    </h3>\n    <p>\n        I ported the Legacy Security Manager kata to Haskell because I thought it'd be easy enough to port the code itself, and I also found the exercise compelling enough in its own right.\n    </p>\n    <p>\n        The most interesting point, I think, is that the <code>createUser</code> action remains testable without making any other concession to testability than turning it into a higher-order function. For pure functions, we would expect this to be the case, since <a href=\"/2015/05/07/functional-design-is-intrinsically-testable\">pure functions are intrinsically testable</a>, but for impure actions like <code>createUser</code>, this isn't a given. Interacting exclusively with the command-line API is, however, sufficiently simple that we can get by with the State monad. No free monad is needed, and so test-induced damage is kept at a minimum.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "A translation of the kata, and my first attempt at it.\n    \n    \n        In early 2013 Richard Dalton published an article about legacy code katas. The idea is to present a piece of 'legacy code' that you have to somehow refactor or improve. Of course, in order to make the exercise manageable, it's necessary to reduce it to some essence of what we might regard as legacy code. It'll only be one aspect of true legacy code. For the legacy Security Manager exercise, the main problem is that the code is difficult to unit test.\n    \n    \n        The original kata presents the 'legacy code' in C#, which may exclude programmers who aren't familiar with that language and platform. Since I find the exercise useful, I've previous published a port to Python. In this article, I'll port the exercise to Haskell, as well as walk through one attempt at achieving the goals of the kata.\n    \n    \n        The legacy code #\n    \n    \n        The original C# code is a static procedure that uses the Console API to ask a user a few simple questions, do some basic input validation, and print a message to the standard output stream. That's easy enough to port to Haskell:\n    \n    \n        module SecurityManager (createUser) where\n \nimport Text.Printf (printf)\n \ncreateUser :: IO ()\ncreateUser = do\n  putStrLn \"Enter a username\"\n  username <- getLine\n  putStrLn \"Enter your full name\"\n  fullName <- getLine\n  putStrLn \"Enter your password\"\n  password <- getLine\n  putStrLn \"Re-enter your password\"\n  confirmPassword <- getLine\n \n  if password /= confirmPassword\n  then\n    putStrLn \"The passwords don't match\"\n  else\n    if length password < 8\n    then\n      putStrLn \"Password must be at least 8 characters in length\"\n    else do\n      -- Encrypt the password (just reverse it, should be secure)\n      let array = reverse password\n      putStrLn $\n        printf \"Saving Details for User (%s, %s, %s)\" username fullName array\n    \n    \n        Notice how the Haskell code seems to suffer slightly from the Arrow code smell, which is a problem that the C# code actually doesn't exhibit. The reason is that when using Haskell in an 'imperative style' (which you can, after a fashion, with do notation), you can't 'exit early' from a an if check. The problem is that you can't have if-then without else.\n    \n    \n        Haskell has other language features that enable you to get rid of Arrow code, but in the spirit of the exercise, this would take us too far away from the original C# code. Making the code prettier should be a task for the refactoring exercise, rather than the starting point.\n    \n    \n        I've published the code to GitHub, if you want a leg up.\n    \n    \n        Combined with Richard Dalton's original article, that's all you need to try your hand at the exercise. In the rest of this article, I'll go through my own attempt at the exercise. That said, while this was my first attempt at the Haskell version of it, I've done it multiple times in C#, and once in Python. In other words, this isn't my first rodeo.\n    \n    \n        Break the dependency on the Console #\n    \n    \n        As warned, the rest of the article is a walkthrough of the exercise, so if you'd like to try it yourself, stop reading now. On the other hand, if you want to read on, but follow along in the GitHub repository, I've pushed the rest of the code to a branch called first-pass.\n    \n    \n        The first part of the exercise is to break the dependency on the console. In a language like Haskell where functions are first-class citizens, this part is trivial. I removed the type declaration, moved putStrLn and getLine to parameters and renamed them. Finally, I asked the compiler what the new type is, and added the new type signature.\n    \n    \n        import Text.Printf (printf, IsChar)\n \ncreateUser :: (Monad m, Eq a, IsChar a) => (String -> m ()) -> m [a] -> m ()\ncreateUser writeLine readLine = do\n  writeLine \"Enter a username\"\n  username <- readLine\n  writeLine \"Enter your full name\"\n  fullName <- readLine\n  writeLine \"Enter your password\"\n  password <- readLine\n  writeLine \"Re-enter your password\"\n  confirmPassword <- readLine\n \n  if password /= confirmPassword\n  then\n    writeLine \"The passwords don't match\"\n  else\n    if length password < 8\n    then\n      writeLine \"Password must be at least 8 characters in length\"\n    else do\n      -- Encrypt the password (just reverse it, should be secure)\n      let array = reverse password\n      writeLine $\n        printf \"Saving Details for User (%s, %s, %s)\" username fullName array\n    \n    \n        I also changed the main action of the program to pass putStrLn and getLine as arguments:\n    \n    \n        import SecurityManager (createUser)\n \nmain :: IO ()\nmain = createUser putStrLn getLine\n    \n    \n        Manual testing indicates that I didn't break any functionality.\n    \n    \n        Get the password comparison feature under test #\n    \n    \n        The next task is to get the password comparison feature under test. Over a small series of Git commits, I added these inlined, parametrized HUnit tests:\n    \n    \n        \"Matching passwords\" ~: do\n  pw <- [\"password\", \"12345678\", \"abcdefgh\"]\n  let actual = comparePasswords pw pw\n  return $ Right pw ~=? actual\n,\n\"Non-matching passwords\" ~: do\n  (pw1, pw2) <-\n    [\n      (\"password\", \"PASSWORD\"),\n      (\"12345678\", \"12345677\"),\n      (\"abcdefgh\", \"bacdefgh\"),\n      (\"aaa\", \"bbb\")\n    ]\n  let actual = comparePasswords pw1 pw2\n  return $ Left \"The passwords don't match\" ~=? actual\n    \n    \n        The resulting implementation is this comparePasswords function:\n    \n    \n        comparePasswords :: String -> String -> Either String String\ncomparePasswords pw1 pw2 =\n  if pw1 == pw2\n  then Right pw1\n  else Left \"The passwords don't match\"\n    \n    \n        You'll notice that I chose to implement it as an Either-valued function. While I consider validation a solved problem, the usual solution involves some applicative validation container. In this exercise, validation is already short-circuiting, which means that we can use the standard monadic composition that Either affords.\n    \n    \n        At this point in the exercise, I just left the comparePasswords function there, without trying to use it within createUser. The reason for that is that Either-based composition is sufficiently different from if-then-else code that I wanted to get the entire system under test before I attempted that.\n    \n    \n        Get the password validation feature under test #\n    \n    \n        The third task of the exercise is to get the password validation feature under test. That's similar to the previous task. Once more, I'll show the tests first, and then the function driven by those tests, but I want to point out that both code artefacts came iteratively into existence through the usual red-green-refactor cycle.\n    \n    \n        \"Validate short password\" ~: do\n  pw <- [\"\", \"1\", \"12\", \"abc\", \"1234\", \"gtrex\", \"123456\", \"1234567\"]\n  let actual = validatePassword pw\n  return $ Left \"Password must be at least 8 characters in length\" ~=? actual\n,\n\"Validate long password\" ~: do\n  pw <- [\"12345678\", \"123456789\", \"abcdefghij\", \"elevenchars\"]\n  let actual = validatePassword pw\n  return $ Right pw ~=? actual\n    \n    \n        The resulting function is hardly surprising.\n    \n    \n        validatePassword :: String -> Either String String\nvalidatePassword pw =\n  if length pw < 8\n  then Left \"Password must be at least 8 characters in length\"\n  else Right pw\n    \n    \n        As in the previous step, I chose to postpone using this function from within createUser until I had a set of characterization tests. That may not be entirely in the spirit of the four subtasks of the exercise, but on the other hand, I intended to do more than just those four activities. The code here is actually simple enough that I could easily refactor without full test coverage, but recalling that this is a legacy code exercise, I find it warranted to pretend that it's complicated.\n    \n    \n        To be fair to the exercise, there'd also be a valuable exercise in attempting to extract each feature piecemeal, because it's not alway possible to add complete characterization test coverage to a piece of gnarly legacy code. Be that as it may, I've already done that kind of exercise in C# a few times, and I had a different agenda for the Haskell exercise. In short, I was curious about what sort of inferred type createUser would have, once I'd gone through all four subtasks. I'll return to that topic in a moment. First, I want to address the fourth subtask.\n    \n    \n        Allow different encryption algorithms to be used #\n    \n    \n        The final part of the exercise is to add a feature to allow different encryption algorithms to be used. Once again, when you're working in a language where functions are first-class citizens, and higher-order functions are idiomatic, one solution is easily at hand:\n    \n    \n        createUser :: (Monad m, Foldable t, Eq (t a), PrintfArg (t a), PrintfArg b)\n           => (String -> m ()) -> m (t a) -> (t a -> b) -> m ()\ncreateUser writeLine readLine encrypt = do\n  writeLine \"Enter a username\"\n  username <- readLine\n  writeLine \"Enter your full name\"\n  fullName <- readLine\n  writeLine \"Enter your password\"\n  password <- readLine\n  writeLine \"Re-enter your password\"\n  confirmPassword <- readLine\n \n  if password /= confirmPassword\n  then\n    writeLine \"The passwords don't match\"\n  else\n    if length password < 8\n    then\n      writeLine \"Password must be at least 8 characters in length\"\n    else do\n      let array = encrypt password\n      writeLine $\n        printf \"Saving Details for User (%s, %s, %s)\" username fullName array\n    \n    \n        The only change I've made is to promote encrypt to a parameter. This, of course, ripples through the code that calls the action, but currently, that's only the main action, where I had to add reverse as a third argument:\n    \n    \n        main :: IO ()\nmain = createUser putStrLn getLine reverse\n    \n    \n        Before I made the change, I removed the type annotation from createUser, because adding a parameter causes the type to change. Keeping the type annotation would have caused a compilation error. Eschewing type annotations makes it easier to make changes. Once I'd made the change, I added the new annotation, inferred by the Haskell Visual Studio Code extension.\n    \n    \n        I was curious what kind of abstraction would arise. Would it be testable in some way?\n    \n    \n        Testability #\n    \n    \n        Consider the inferred type of createUser above. It's quite abstract, and I was curious if it was flexible enough to allow testability without adding test-induced damage. In short, in object-oriented programming, you often need to add Dependency Injection to make code testable, and the valid criticism is that this makes code more complicated than it would otherwise have been. I consider such reproval justified, although I disagree with the conclusion. It's not the desire for testability that causes the damage, but rather that object-oriented design is at odds with testability.\n    \n    \n        That's my conjecture, anyway, so I'm always curious when working with other paradigms like functional programming. Is idiomatic code already testable, or do you need to 'do damage to it' in order to make it testable?\n    \n    \n        As a Haskell action goes, I would consider its type fairly idiomatic. The code, too, is straightforward, although perhaps rather naive. It looks like beginner Haskell, and as we'll see later, we can rewrite it to be more elegant.\n    \n    \n        Before I started the exercise, I wondered whether it'd be necessary to use free monads to model pure command-line interactions. Since createUser returns m (), where m is any Monad instance, using a free monad would be possible, but turns out to be overkill. After having thought about it a bit, I recalled that in many languages and platforms, you can redirect standard in and standard out for testing purposes. The way you do that is typically by replacing each with some kind of text stream. Based on that knowledge, I thought I could use the State monad for characterization testing, with a list of strings for each text stream.\n    \n    \n        In other words, the code is already testable as it is. No test-induced damage here.\n    \n    \n        Characterization tests #\n    \n    \n        To use the State monad, I started by importing Control.Monad.Trans.State.Lazy into my test code. This enabled me to write the first characterization test:\n    \n    \n        \"Happy path\" ~: flip evalState\n    ([\"just.inhale\", \"Justin Hale\", \"12345678\", \"12345678\"], []) $ do\n  let writeLine x = modify (second (++ [x]))\n  let readLine = state (\\(i, o) -> (head i, (tail i, o)))\n  let encrypt = reverse\n \n  createUser writeLine readLine encrypt\n \n  actual <- gets snd\n  let expected = [\n        \"Enter a username\",\n        \"Enter your full name\",\n        \"Enter your password\",\n        \"Re-enter your password\",\n        \"Saving Details for User (just.inhale, Justin Hale, 87654321)\"]\n  return $ expected ~=? actual\n    \n    \n        I consulted my earlier code from An example of state-based testing in Haskell instead of reinventing the wheel, so if you want a more detailed walkthrough, you may want to consult that article as well as this one.\n    \n    \n        The type of the state that the test makes use of is ([String], [String]). As the lambda expression suggests by naming the elements i and o, the two string lists are used for respectively input and output. The test starts with an 'input stream' populated by 'user input' values, corresponding to each of the four answers a user might give to the questions asked.\n    \n    \n        The readLine function works by pulling the head off the input list i, while on the other hand not touching the output list o. Its type is State ([a], b) a, compatible with createUser, which requires its readLine parameter to have the type m (t a), where m is a Monad instance, and t a Foldable instance. The effective type turns out to be t a ~ [Char] = String, so that readLine effectively has the type State ([String], b) String. Since State ([String], b) is a Monad instance, it fits the m type argument of the requirement.\n    \n    \n        The same kind of reasoning applies to writeLine, which appends the input value to the 'output stream', which is the second list in the I/O tuple.\n    \n    \n        The test runs the createUser action and then checks that the output list contains the expected values.\n    \n    \n        A similar test verifies the behaviour when the passwords don't match:\n    \n    \n        \"Mismatched passwords\" ~: flip evalState\n    ([\"i.lean.right\", \"Ilene Wright\", \"password\", \"Password\"], []) $ do\n  let writeLine x = modify (second (++ [x]))\n  let readLine = state (\\(i, o) -> (head i, (tail i, o)))\n  let encrypt = reverse\n \n  createUser writeLine readLine encrypt\n \n  actual <- gets snd\n  let expected = [\n        \"Enter a username\",\n        \"Enter your full name\",\n        \"Enter your password\",\n        \"Re-enter your password\",\n        \"The passwords don't match\"]\n  return $ expected ~=? actual\n    \n    \n        You can see the third and final characterization test in the GitHub repository.\n    \n    \n        Refactored action #\n    \n    \n        With full test coverage I could proceed to refactor the createUser action, pulling in the two functions I'd test-driven into existence earlier:\n    \n    \n        createUser :: (Monad m, PrintfArg a)\n           => (String -> m ()) -> m String -> (String -> a) -> m ()\ncreateUser writeLine readLine encrypt = do\n  writeLine \"Enter a username\"\n  username <- readLine\n  writeLine \"Enter your full name\"\n  fullName <- readLine\n  writeLine \"Enter your password\"\n  password <- readLine\n  writeLine \"Re-enter your password\"\n  confirmPassword <- readLine\n \n  writeLine $ either\n    id\n    (printf \"Saving Details for User (%s, %s, %s)\" username fullName . encrypt)\n    (validatePassword =<< comparePasswords password confirmPassword)\n    \n    \n        Because createUser now calls comparePasswords and validatePassword, the type of the overall composition is also more concrete. That's really just an artefact of my (misguided?) decision to give each of the two helper functions types that are more concrete than necessary.\n    \n    \n        As you can see, I left the initial call-and-response sequence intact, since I didn't feel that it needed improvement.\n    \n    \n        Conclusion #\n    \n    \n        I ported the Legacy Security Manager kata to Haskell because I thought it'd be easy enough to port the code itself, and I also found the exercise compelling enough in its own right.\n    \n    \n        The most interesting point, I think, is that the createUser action remains testable without making any other concession to testability than turning it into a higher-order function. For pure functions, we would expect this to be the case, since pure functions are intrinsically testable, but for impure actions like createUser, this isn't a given. Interacting exclusively with the command-line API is, however, sufficiently simple that we can get by with the State monad. No free monad is needed, and so test-induced damage is kept at a minimum.\n    \n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/10/14/functor-sums",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A choice of two or more functors gives rise to a functor. An article for object-oriented programmers.</em>\n    </p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In this one you'll learn about a universal composition of functors. In short, if you have a <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">sum type</a> of functors, that data structure itself gives rise to a functor.\n\t</p>\n    <p>\n        Together with other articles in this series, this result can help you answer questions such as: <em>Does this data structure form a functor?</em>\n    </p>\n    <p>\n        Since <a href=\"/2018/03/22/functors\">functors</a> tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like <code>Foo&lt;T&gt;</code> (C# syntax) or <code>Bar&lt;T1, T2&gt;</code>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it's a functor strongly suggests that you should give it a <code>Select</code> method in C#, a <code>map</code> function in <a href=\"https://fsharp.org/\">F#</a>, and so on.\n    </p>\n    <p>\n        Not all generic types give rise to a (covariant) functor. Some are rather <a href=\"/2021/09/02/contravariant-functors\">contravariant functors</a>, and some are <a href=\"/2022/08/01/invariant-functors\">invariant</a>.\n    </p>\n    <p>\n        If, on the other hand, you have a data type which is a sum of two or more (covariant) functors <em>with the same type parameter</em>, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    </p>\n    <h3 id=\"fd1c2960d14946008a49b07698151647\">\n        Abstract shape in F# <a href=\"#fd1c2960d14946008a49b07698151647\">#</a>\n    </h3>\n    <p>\n        Before we look at some examples found in other code, it helps if we know what we're looking for. You'll see a C# example in a minute, but since sum types require so much <a href=\"/2019/12/16/zone-of-ceremony\">ceremony</a> in C#, we'll make a brief detour around F#.\n    </p>\n    <p>\n        Imagine that you have two lawful functors, <code>F</code> and <code>G</code>. Also imagine that you have a data structure that holds either an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</code> value or a <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</code> value:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">FOrGF</span>&nbsp;<span style=\"color:blue;\">of</span>&nbsp;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;&nbsp;|&nbsp;<span style=\"color:#2b91af;\">FOrGG</span>&nbsp;<span style=\"color:blue;\">of</span>&nbsp;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</pre>\n    </p>\n    <p>\n        The name of the type is <code>FOrG</code>. In the <code>FOrGF</code> case, it holds an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</code> value, and in the <code>FOrGG</code> case it holds a <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</code> value.\n    </p>\n    <p>\n        The point of this article is that since both <code>F</code> and <code>G</code> are (lawful) functors, then <code>FOrG</code> also gives rise to a functor. The composed <code>map</code> function can pattern-match on each case and call the respective <code>map</code> function that belongs to each of the two functors.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">forg</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">match</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">forg</span>&nbsp;<span style=\"color:blue;\">with</span>\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:#2b91af;\">FOrGF</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fa</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">FOrGF</span>&nbsp;(<span style=\"color:#2b91af;\">F</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fa</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;<span style=\"color:#2b91af;\">FOrGG</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ga</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">FOrGG</span>&nbsp;(<span style=\"color:#2b91af;\">G</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ga</span>)</pre>\n    </p>\n    <p>\n        For clarity I've named the values <code>fa</code> indicating <em>f of a</em> and <code>ga</code> indicating <em>g of a</em>.\n    </p>\n    <p>\n        Notice that it's an essential requirement that the individual functors (here <code>F</code> and <code>G</code>) are parametrized by the same type parameter (here <code>'a</code>). If your data structure contains <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;</code> and <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">&#39;b</span>&gt;</code>, the 'theorem' doesn't apply.\n    </p>\n    <h3 id=\"9ff2f85804104bf192941ec8634757b6\">\n        Abstract shape in C# <a href=\"#9ff2f85804104bf192941ec8634757b6\">#</a>\n    </h3>\n    <p>\n        The same kind of abstract shape requires much more boilerplate in C#. When defining a sum type in a language that doesn't support them, we may instead either <a href=\"/2018/06/25/visitor-as-a-sum-type\">turn to the Visitor design pattern</a> or alternatively use <a href=\"/2018/05/22/church-encoding\">Church encoding</a>. While the two are isomorphic, Church encoding is a bit simpler while the <a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor pattern</a> seems more object-oriented. In this example I've chosen the simplicity of Church encoding.\n    </p>\n    <p>\n        Like in the above F# code, I've named the data structure the same, but it's now a class:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</pre>\n    </p>\n    <p>\n        Two constructors enable you to initialize it with either an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> or a <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> value.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>(<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>)\n\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>(<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>)</pre>\n    </p>\n    <p>\n        Notice that <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> and <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> share the same type parameter <code>T</code>. If a class had, instead, composed either <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T1</span>&gt;</code> or <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T2</span>&gt;</code>, the 'theorem' doesn't apply.\n    </p>\n    <p>\n        Finally, a <code>Match</code> method completes the Church encoding.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenF</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenG</span>)</pre>\n    </p>\n    <p>\n        Regardless of exactly what <code>F</code> and <code>G</code> are, you can add a <code>Select</code> method to <code><span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenF</span>:&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">f</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenG</span>:&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">g</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        Since we assume that <code>F</code> and <code>G</code> are functors, which in C# <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> have a <code>Select</code> method, we pass the <code>selector</code> to their respective <code>Select</code> methods. <code>f.Select</code> returns a new <code>F</code> value, while <code>g.Select</code> returns a new <code>G</code> value, but there's a constructor for each case, so the composed <code>Select</code> method repackages those return values in <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FOrG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code> objects.\n    </p>\n    <p>\n        I'll have more to say about how this generalizes to a sum of more than two alternatives, but first, let's consider some examples.\n    </p>\n    <h3 id=\"03a6f1ef94ca4ca2927b38d95e34c31f\">\n        Open or closed endpoints <a href=\"#03a6f1ef94ca4ca2927b38d95e34c31f\">#</a>\n    </h3>\n    <p>\n        The simplest example that I can think of is that of <a href=\"/2024/01/01/variations-of-the-range-kata\">range</a> endpoints. A range may be open, closed, or a mix thereof. Some mathematical notations use <code>(1, 6]</code> to indicate the range between 1 and 6, where 1 is excluded from the range, but 6 is included. An alternative notation is <code>]1, 6]</code>.\n    </p>\n    <p>\n        A given endpoint (1 and 6, above) is either open or closed, which implies a sum type. <a href=\"/2024/01/15/a-range-kata-implementation-in-f\">In F# I defined it like this</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;Endpoint&lt;&#39;a&gt;&nbsp;=&nbsp;Open&nbsp;<span style=\"color:blue;\">of</span>&nbsp;&#39;a&nbsp;|&nbsp;Closed&nbsp;<span style=\"color:blue;\">of</span>&nbsp;&#39;a</pre>\n    </p>\n    <p>\n        If you're at all familiar with F#, this is clearly a <a href=\"https://learn.microsoft.com/dotnet/fsharp/language-reference/discriminated-unions\">discriminated union</a>, which is just what the F# documentation calls sum types.\n    </p>\n    <p>\n        The article <a href=\"/2024/02/12/range-as-a-functor\">Range as a functor</a> goes through examples in both <a href=\"https://www.haskell.org/\">Haskell</a>, F#, and C#, demonstrating, among other points, how an endpoint sum type forms a functor.\n    </p>\n    <h3 id=\"9cf974abd1fb497aa43087e7697bb982\">\n        Binary tree <a href=\"#9cf974abd1fb497aa43087e7697bb982\">#</a>\n    </h3>\n    <p>\n        The next example we'll consider is the binary tree from <a href=\"/2024/09/09/a-binary-tree-zipper-in-c\">A Binary Tree Zipper in C#</a>. In the <a href=\"https://learnyouahaskell.com/zippers\">original Haskell Zippers article</a>, the data type is defined like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Tree&nbsp;a&nbsp;=&nbsp;Empty&nbsp;|&nbsp;Node&nbsp;a&nbsp;(Tree&nbsp;a)&nbsp;(Tree&nbsp;a)&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>)</pre>\n    </p>\n    <p>\n        Even if you're not familiar with Haskell syntax, the vertical bar (<code>|</code>) indicates a choice between the left-hand side and the right-hand side. Many programming languages use the <code>|</code> character for Boolean disjunction (<em>or</em>), so the syntax should be intuitive. In this definition, a binary tree is either empty or a node with a value and two subtrees. What interests us here is that it's a sum type.\n    </p>\n    <p>\n        One way this manifests in C# is in the choice of two alternative constructors:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>()&nbsp;:&nbsp;<span style=\"color:blue;\">this</span>(<span style=\"color:#2b91af;\">Empty</span>.Instance)\n{\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span style=\"color:blue;\">this</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Node</span>(<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>.root,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>.root))\n{\n}</pre>\n    </p>\n    <p>\n        <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> clearly has a generic type parameter. Does the class give rise to a functor?\n    </p>\n    <p>\n        It does if it's composed from a sum of two functors. Is that the case?\n    </p>\n    <p>\n        On the 'left' side, it seems that we have nothing. In the Haskell code, it's called <code>Empty</code>. In the C# code, this case is represented by the parameterless constructor (also known as the <em>default constructor</em>). There's no <code>T</code> there, so that doesn't look much like a functor.\n    </p>\n    <p>\n        All is, however, not lost. We may view this lack of data as a particular value ('nothing') wrapped in <a href=\"/2024/10/07/the-const-functor\">the Const functor</a>. In Haskell and F# a value without data is called <em>unit</em> and written <code>()</code>. In C# or <a href=\"https://www.java.com/\">Java</a> you may <a href=\"/2018/01/15/unit-isomorphisms\">think of it as void</a>, although <em>unit</em> is a value that you can pass around, which isn't the case for <code>void</code>.\n    </p>\n    <p>\n        In Haskell, we could instead represent <code>Empty</code> as <code>Const ()</code>, which is a bona-fide <code>Functor</code> instance that you can <code>fmap</code>:\n    </p>\n    <p>\n        <pre>ghci&gt; emptyNode = Const ()\nghci&gt; fmap (+1) emptyNode\nConst ()</pre>\n    </p>\n    <p>\n        This examples pretends to 'increment' a number that isn't there. Not that you'd need to do this. I'm only showing you this to make the argument that the empty node forms a functor.\n    </p>\n    <p>\n        The 'right' side of the sum type is most succinctly summarized by the Haskell code:\n    </p>\n    <p>\n        <pre>Node&nbsp;a&nbsp;(Tree&nbsp;a)&nbsp;(Tree&nbsp;a)</pre>\n    </p>\n    <p>\n        It's a 'naked' generic value and two generic trees. In C# it's the parameter list\n    </p>\n    <p>\n        <pre>(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)</pre>\n    </p>\n    <p>\n        Does that make a functor? Yes, it's a triple of a 'naked' generic value and two recursive subtrees, all sharing the same <code>T</code>. Just like in the <a href=\"/2024/09/16/functor-products\">previous article</a> we can view a 'naked' generic value as equivalent to <a href=\"/2018/09/03/the-identity-functor\">the Identity functor</a>, so that parameter is a functor. The other ones are recursive types: They are of the same type as the type we're trying to evaluate, <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>. If we assume that that forms a functor, that triple is a product type of functors. From the previous article, we know that that gives rise to a functor.\n    </p>\n    <p>\n        This means that in C#, for example, you can add the idiomatic <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenEmpty</span>:&nbsp;()&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenNode</span>:&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">value</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>));\n}</pre>\n    </p>\n    <p>\n        In languages that support pattern-matching on sum types (such as F#), you'd have to match on each case and explicitly deal with the recursive mapping. Notice, however, that here I've used the <code>Aggregate</code> method to implement <code>Select</code>. The <code>Aggregate</code> method is the <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class' <a href=\"/2019/04/29/catamorphisms\">catamorphism</a>, and it already handles the recursion for us. In other words, <code>left</code> and <code>right</code> are already <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code> objects.\n    </p>\n    <p>\n        What remains is only to tell <code>Aggregate</code> what to do when the tree is empty, and how to transform the 'naked' node <code>value</code>. The <code>Select</code> implementation handles the former by returning a new empty tree, and the latter by invoking <code><span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">value</span>)</code>.\n    </p>\n    <p>\n        Not only does the binary tree form a functor, but it turns out that the <a href=\"/2024/08/19/zippers\">Zipper</a> does as well, because the breadcrumbs also give rise to a functor.\n    </p>\n    <h3 id=\"02e7e55d7f6f4c0d94c50cf577238859\">\n        Breadcrumbs <a href=\"#02e7e55d7f6f4c0d94c50cf577238859\">#</a>\n    </h3>\n    <p>\n        The <a href=\"https://learnyouahaskell.com/zippers\">original Haskell Zippers article</a> defines a breadcrumb for the binary tree Zipper like this:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Crumb&nbsp;a&nbsp;=&nbsp;LeftCrumb&nbsp;a&nbsp;(Tree&nbsp;a)&nbsp;|&nbsp;RightCrumb&nbsp;a&nbsp;(Tree&nbsp;a)&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>)</pre>\n    </p>\n    <p>\n        That's another sum type with generics on the left as well as the right. In C# the two options may be best illustrated by these two creation methods:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"color:#74531f;\">Left</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;.<span style=\"color:#74531f;\">Left</span>(<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>);\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"color:#74531f;\">Right</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;.<span style=\"color:#74531f;\">Right</span>(<span style=\"font-weight:bold;color:#1f377f;\">value</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>);\n}</pre>\n    </p>\n    <p>\n        Notice that the <code>Left</code> and <code>Right</code> choices have the same structure: A 'naked' generic <code>T</code> value, and a <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> object. Only the names differ. This suggests that we only need to think about one of them, and then we can reuse our conclusion for the other.\n    </p>\n    <p>\n        As we've already done once, we consider a <code>T</code> value equivalent with <code><span style=\"color:#2b91af;\">Identity</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>, which is a functor. We've also, just above, established that <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> forms a functor. We have a product (argument list, or tuple) of functors, so that combination forms a functor.\n    </p>\n    <p>\n        Since this is true for both alternatives, this sum type, too, gives rise to a functor. This enables you to implement a <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">v</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>)&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Crumb</span>.<span style=\"color:#74531f;\">Left</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">v</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">r</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">v</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">l</span>)&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Crumb</span>.<span style=\"color:#74531f;\">Right</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">v</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">l</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n    </p>\n    <p>\n        By now the pattern should be familiar. Call <code><span style=\"font-weight:bold;color:#1f377f;\">selector</span>(<span style=\"font-weight:bold;color:#1f377f;\">v</span>)</code> directly on the 'naked' values, and pass <code>selector</code> to any other functors' <code>Select</code> method.\n    </p>\n    <p>\n        That's <em>almost</em> all the building blocks we have to declare <code><span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> a functor as well, but we need one last theorem before we can do that. We'll conclude this work in <a href=\"/2024/10/28/functor-compositions\">the next article</a>.\n    </p>\n    <h3 id=\"2b3a70f8791c41eb952ff160398fe441\">\n        Higher arities <a href=\"#2b3a70f8791c41eb952ff160398fe441\">#</a>\n    </h3>\n    <p>\n        Although we finally saw a 'real' triple product, all the sum types have involved binary choices between a 'left side' and a 'right side'. As was the case with functor products, the result generalizes to higher arities. A sum type with any number of cases forms a functor if all the cases give rise to a functor.\n    </p>\n    <p>\n        We can, again, use canonicalized forms to argue the case. (See <a href=\"https://thinkingwithtypes.com/\">Thinking with Types</a> for a clear explanation of canonicalization of types.) A two-way choice is isomorphic to <a href=\"/2019/01/14/an-either-functor\">Either</a>, and a three-way choice is isomorphic to <code>Either a (Either b c)</code>. Just like it's possible to build triples, quadruples, etc. by nesting pairs, we can construct n-ary choices by nesting Eithers. It's the same kind of inductive reasoning.\n    </p>\n    <p>\n        This is relevant because just as Haskell's <a href=\"https://hackage.haskell.org/package/base\">base</a> library provides <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Product.html\">Data.Functor.Product</a> for composing two (and thereby any number of) functors, it also provides <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Sum.html\">Data.Functor.Sum</a> for composing functor sums.\n    </p>\n    <p>\n        The <code>Sum</code> type defines two case constructors: <code>InL</code> and <code>InR</code>, but it's isomorphic with <code>Either</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">canonizeSum</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Sum</span>&nbsp;f&nbsp;g&nbsp;a&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&nbsp;(f&nbsp;a)&nbsp;(g&nbsp;a)\ncanonizeSum&nbsp;(InL&nbsp;x)&nbsp;=&nbsp;Left&nbsp;x\ncanonizeSum&nbsp;(InR&nbsp;y)&nbsp;=&nbsp;Right&nbsp;y\n \n<span style=\"color:#2b91af;\">summarizeEither</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:#2b91af;\">Either</span>&nbsp;(f&nbsp;a)&nbsp;(g&nbsp;a)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Sum</span>&nbsp;f&nbsp;g&nbsp;a\nsummarizeEither&nbsp;(Left&nbsp;x)&nbsp;=&nbsp;InL&nbsp;x\nsummarizeEither&nbsp;(Right&nbsp;y)&nbsp;=&nbsp;InR&nbsp;y</pre>\n    </p>\n    <p>\n        The point is that we can compose not only a choice of two, but of any number of functors, to a single functor type. A simple example is this choice between <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a>, list, or <a href=\"/2018/08/06/a-tree-functor\">Tree</a>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">maybeOrListOrTree</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Sum</span>&nbsp;(<span style=\"color:blue;\">Sum</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;[])&nbsp;<span style=\"color:blue;\">Tree</span>&nbsp;<span style=\"color:#2b91af;\">String</span>\nmaybeOrListOrTree&nbsp;=&nbsp;InL&nbsp;(InL&nbsp;(Just&nbsp;<span style=\"color:#a31515;\">&quot;foo&quot;</span>))</pre>\n    </p>\n    <p>\n        If we rather wanted to embed a list in that type, we can do that as well:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">maybeOrListOrTree&#39;</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Sum</span>&nbsp;(<span style=\"color:blue;\">Sum</span>&nbsp;<span style=\"color:#2b91af;\">Maybe</span>&nbsp;[])&nbsp;<span style=\"color:blue;\">Tree</span>&nbsp;<span style=\"color:#2b91af;\">String</span>\nmaybeOrListOrTree&#39;&nbsp;=&nbsp;InL&nbsp;(InR&nbsp;[<span style=\"color:#a31515;\">&quot;bar&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;baz&quot;</span>])</pre>\n    </p>\n    <p>\n        Both values have the same type, and since it's a <code>Functor</code> instance, you can <code>fmap</code> over it:\n    </p>\n    <p>\n        <pre>ghci&gt; fmap (elem 'r') maybeOrListOrTree\nInL (InL (Just False))\nghci&gt; fmap (elem 'r') maybeOrListOrTree'\nInL (InR [True,False])</pre>\n    </p>\n    <p>\n        These queries examine each <code>String</code> to determine whether or not they contain the letter <code>'r'</code>, which only <code>\"bar\"</code> does.\n    </p>\n    <p>\n        The point, anyway, is that sum types of any arity form a functor if all the cases do.\n    </p>\n    <h3 id=\"8545e09908fb4df4ace08e7b20ffc509\">\n        Conclusion <a href=\"#8545e09908fb4df4ace08e7b20ffc509\">#</a>\n    </h3>\n    <p>\n        In the previous article, you learned that a functor product gives rise to a functor. In this article, you learned that a functor sum does, too. If a data structure contains a choice of two or more functors, then that data type itself forms a functor.\n    </p>\n    <p>\n        As the previous article argues, this is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such sums into functors, in the way that Haskell's <code>Sum</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a> almost does. Thus, knowing when you can safely give your generic types a <code>Select</code> method or <code>map</code> function may come in handy.\n    </p>\n\t<p>\n\t\tThere's one more rule like this one.\n\t</p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2024/10/28/functor-compositions\">Functor compositions</a>.\n    </p>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "A choice of two or more functors gives rise to a functor. An article for object-oriented programmers.\n    \n\t\n\t\tThis article is part of a series of articles about functor relationships. In this one you'll learn about a universal composition of functors. In short, if you have a sum type of functors, that data structure itself gives rise to a functor.\n\t\n    \n        Together with other articles in this series, this result can help you answer questions such as: Does this data structure form a functor?\n    \n    \n        Since functors tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like Foo<T> (C# syntax) or Bar<T1, T2>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined this data type. Recognizing that it's a functor strongly suggests that you should give it a Select method in C#, a map function in F#, and so on.\n    \n    \n        Not all generic types give rise to a (covariant) functor. Some are rather contravariant functors, and some are invariant.\n    \n    \n        If, on the other hand, you have a data type which is a sum of two or more (covariant) functors with the same type parameter, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    \n    \n        Abstract shape in F# #\n    \n    \n        Before we look at some examples found in other code, it helps if we know what we're looking for. You'll see a C# example in a minute, but since sum types require so much ceremony in C#, we'll make a brief detour around F#.\n    \n    \n        Imagine that you have two lawful functors, F and G. Also imagine that you have a data structure that holds either an F<'a> value or a G<'a> value:\n    \n    \n        type FOrG<'a> = FOrGF of F<'a> | FOrGG of G<'a>\n    \n    \n        The name of the type is FOrG. In the FOrGF case, it holds an F<'a> value, and in the FOrGG case it holds a G<'a> value.\n    \n    \n        The point of this article is that since both F and G are (lawful) functors, then FOrG also gives rise to a functor. The composed map function can pattern-match on each case and call the respective map function that belongs to each of the two functors.\n    \n    \n        let map f forg =\n    match forg with\n    | FOrGF fa -> FOrGF (F.map f fa)\n    | FOrGG ga -> FOrGG (G.map f ga)\n    \n    \n        For clarity I've named the values fa indicating f of a and ga indicating g of a.\n    \n    \n        Notice that it's an essential requirement that the individual functors (here F and G) are parametrized by the same type parameter (here 'a). If your data structure contains F<'a> and G<'b>, the 'theorem' doesn't apply.\n    \n    \n        Abstract shape in C# #\n    \n    \n        The same kind of abstract shape requires much more boilerplate in C#. When defining a sum type in a language that doesn't support them, we may instead either turn to the Visitor design pattern or alternatively use Church encoding. While the two are isomorphic, Church encoding is a bit simpler while the Visitor pattern seems more object-oriented. In this example I've chosen the simplicity of Church encoding.\n    \n    \n        Like in the above F# code, I've named the data structure the same, but it's now a class:\n    \n    \n        public sealed class FOrG<T>\n    \n    \n        Two constructors enable you to initialize it with either an F<T> or a G<T> value.\n    \n    \n        public FOrG(F<T> f)\n\npublic FOrG(G<T> g)\n    \n    \n        Notice that F<T> and G<T> share the same type parameter T. If a class had, instead, composed either F<T1> or G<T2>, the 'theorem' doesn't apply.\n    \n    \n        Finally, a Match method completes the Church encoding.\n    \n    \n        public TResult Match<TResult>(\n    Func<F<T>, TResult> whenF,\n    Func<G<T>, TResult> whenG)\n    \n    \n        Regardless of exactly what F and G are, you can add a Select method to FOrG<T> like this:\n    \n    \n        public FOrG<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return Match(\n        whenF: f => new FOrG<TResult>(f.Select(selector)),\n        whenG: g => new FOrG<TResult>(g.Select(selector)));\n}\n    \n    \n        Since we assume that F and G are functors, which in C# idiomatically have a Select method, we pass the selector to their respective Select methods. f.Select returns a new F value, while g.Select returns a new G value, but there's a constructor for each case, so the composed Select method repackages those return values in new FOrG<TResult> objects.\n    \n    \n        I'll have more to say about how this generalizes to a sum of more than two alternatives, but first, let's consider some examples.\n    \n    \n        Open or closed endpoints #\n    \n    \n        The simplest example that I can think of is that of range endpoints. A range may be open, closed, or a mix thereof. Some mathematical notations use (1, 6] to indicate the range between 1 and 6, where 1 is excluded from the range, but 6 is included. An alternative notation is ]1, 6].\n    \n    \n        A given endpoint (1 and 6, above) is either open or closed, which implies a sum type. In F# I defined it like this:\n    \n    \n        type Endpoint<'a> = Open of 'a | Closed of 'a\n    \n    \n        If you're at all familiar with F#, this is clearly a discriminated union, which is just what the F# documentation calls sum types.\n    \n    \n        The article Range as a functor goes through examples in both Haskell, F#, and C#, demonstrating, among other points, how an endpoint sum type forms a functor.\n    \n    \n        Binary tree #\n    \n    \n        The next example we'll consider is the binary tree from A Binary Tree Zipper in C#. In the original Haskell Zippers article, the data type is defined like this:\n    \n    \n        data Tree a = Empty | Node a (Tree a) (Tree a) deriving (Show)\n    \n    \n        Even if you're not familiar with Haskell syntax, the vertical bar (|) indicates a choice between the left-hand side and the right-hand side. Many programming languages use the | character for Boolean disjunction (or), so the syntax should be intuitive. In this definition, a binary tree is either empty or a node with a value and two subtrees. What interests us here is that it's a sum type.\n    \n    \n        One way this manifests in C# is in the choice of two alternative constructors:\n    \n    \n        public BinaryTree() : this(Empty.Instance)\n{\n}\n \npublic BinaryTree(T value, BinaryTree<T> left, BinaryTree<T> right)\n    : this(new Node(value, left.root, right.root))\n{\n}\n    \n    \n        BinaryTree<T> clearly has a generic type parameter. Does the class give rise to a functor?\n    \n    \n        It does if it's composed from a sum of two functors. Is that the case?\n    \n    \n        On the 'left' side, it seems that we have nothing. In the Haskell code, it's called Empty. In the C# code, this case is represented by the parameterless constructor (also known as the default constructor). There's no T there, so that doesn't look much like a functor.\n    \n    \n        All is, however, not lost. We may view this lack of data as a particular value ('nothing') wrapped in the Const functor. In Haskell and F# a value without data is called unit and written (). In C# or Java you may think of it as void, although unit is a value that you can pass around, which isn't the case for void.\n    \n    \n        In Haskell, we could instead represent Empty as Const (), which is a bona-fide Functor instance that you can fmap:\n    \n    \n        ghci> emptyNode = Const ()\nghci> fmap (+1) emptyNode\nConst ()\n    \n    \n        This examples pretends to 'increment' a number that isn't there. Not that you'd need to do this. I'm only showing you this to make the argument that the empty node forms a functor.\n    \n    \n        The 'right' side of the sum type is most succinctly summarized by the Haskell code:\n    \n    \n        Node a (Tree a) (Tree a)\n    \n    \n        It's a 'naked' generic value and two generic trees. In C# it's the parameter list\n    \n    \n        (T value, BinaryTree<T> left, BinaryTree<T> right)\n    \n    \n        Does that make a functor? Yes, it's a triple of a 'naked' generic value and two recursive subtrees, all sharing the same T. Just like in the previous article we can view a 'naked' generic value as equivalent to the Identity functor, so that parameter is a functor. The other ones are recursive types: They are of the same type as the type we're trying to evaluate, BinaryTree<T>. If we assume that that forms a functor, that triple is a product type of functors. From the previous article, we know that that gives rise to a functor.\n    \n    \n        This means that in C#, for example, you can add the idiomatic Select method:\n    \n    \n        public BinaryTree<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return Aggregate(\n        whenEmpty: () => new BinaryTree<TResult>(),\n        whenNode: (value, left, right) =>\n            new BinaryTree<TResult>(selector(value), left, right));\n}\n    \n    \n        In languages that support pattern-matching on sum types (such as F#), you'd have to match on each case and explicitly deal with the recursive mapping. Notice, however, that here I've used the Aggregate method to implement Select. The Aggregate method is the BinaryTree<T> class' catamorphism, and it already handles the recursion for us. In other words, left and right are already BinaryTree<TResult> objects.\n    \n    \n        What remains is only to tell Aggregate what to do when the tree is empty, and how to transform the 'naked' node value. The Select implementation handles the former by returning a new empty tree, and the latter by invoking selector(value).\n    \n    \n        Not only does the binary tree form a functor, but it turns out that the Zipper does as well, because the breadcrumbs also give rise to a functor.\n    \n    \n        Breadcrumbs #\n    \n    \n        The original Haskell Zippers article defines a breadcrumb for the binary tree Zipper like this:\n    \n    \n        data Crumb a = LeftCrumb a (Tree a) | RightCrumb a (Tree a) deriving (Show)\n    \n    \n        That's another sum type with generics on the left as well as the right. In C# the two options may be best illustrated by these two creation methods:\n    \n    \n        public static Crumb<T> Left<T>(T value, BinaryTree<T> right)\n{\n    return Crumb<T>.Left(value, right);\n}\n \npublic static Crumb<T> Right<T>(T value, BinaryTree<T> left)\n{\n    return Crumb<T>.Right(value, left);\n}\n    \n    \n        Notice that the Left and Right choices have the same structure: A 'naked' generic T value, and a BinaryTree<T> object. Only the names differ. This suggests that we only need to think about one of them, and then we can reuse our conclusion for the other.\n    \n    \n        As we've already done once, we consider a T value equivalent with Identity<T>, which is a functor. We've also, just above, established that BinaryTree<T> forms a functor. We have a product (argument list, or tuple) of functors, so that combination forms a functor.\n    \n    \n        Since this is true for both alternatives, this sum type, too, gives rise to a functor. This enables you to implement a Select method:\n    \n    \n        public Crumb<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return Match(\n        (v, r) => Crumb.Left(selector(v), r.Select(selector)),\n        (v, l) => Crumb.Right(selector(v), l.Select(selector)));\n}\n    \n    \n        By now the pattern should be familiar. Call selector(v) directly on the 'naked' values, and pass selector to any other functors' Select method.\n    \n    \n        That's almost all the building blocks we have to declare BinaryTreeZipper<T> a functor as well, but we need one last theorem before we can do that. We'll conclude this work in the next article.\n    \n    \n        Higher arities #\n    \n    \n        Although we finally saw a 'real' triple product, all the sum types have involved binary choices between a 'left side' and a 'right side'. As was the case with functor products, the result generalizes to higher arities. A sum type with any number of cases forms a functor if all the cases give rise to a functor.\n    \n    \n        We can, again, use canonicalized forms to argue the case. (See Thinking with Types for a clear explanation of canonicalization of types.) A two-way choice is isomorphic to Either, and a three-way choice is isomorphic to Either a (Either b c). Just like it's possible to build triples, quadruples, etc. by nesting pairs, we can construct n-ary choices by nesting Eithers. It's the same kind of inductive reasoning.\n    \n    \n        This is relevant because just as Haskell's base library provides Data.Functor.Product for composing two (and thereby any number of) functors, it also provides Data.Functor.Sum for composing functor sums.\n    \n    \n        The Sum type defines two case constructors: InL and InR, but it's isomorphic with Either:\n    \n    \n        canonizeSum :: Sum f g a -> Either (f a) (g a)\ncanonizeSum (InL x) = Left x\ncanonizeSum (InR y) = Right y\n \nsummarizeEither :: Either (f a) (g a) -> Sum f g a\nsummarizeEither (Left x) = InL x\nsummarizeEither (Right y) = InR y\n    \n    \n        The point is that we can compose not only a choice of two, but of any number of functors, to a single functor type. A simple example is this choice between Maybe, list, or Tree:\n    \n    \n        maybeOrListOrTree :: Sum (Sum Maybe []) Tree String\nmaybeOrListOrTree = InL (InL (Just \"foo\"))\n    \n    \n        If we rather wanted to embed a list in that type, we can do that as well:\n    \n    \n        maybeOrListOrTree' :: Sum (Sum Maybe []) Tree String\nmaybeOrListOrTree' = InL (InR [\"bar\", \"baz\"])\n    \n    \n        Both values have the same type, and since it's a Functor instance, you can fmap over it:\n    \n    \n        ghci> fmap (elem 'r') maybeOrListOrTree\nInL (InL (Just False))\nghci> fmap (elem 'r') maybeOrListOrTree'\nInL (InR [True,False])\n    \n    \n        These queries examine each String to determine whether or not they contain the letter 'r', which only \"bar\" does.\n    \n    \n        The point, anyway, is that sum types of any arity form a functor if all the cases do.\n    \n    \n        Conclusion #\n    \n    \n        In the previous article, you learned that a functor product gives rise to a functor. In this article, you learned that a functor sum does, too. If a data structure contains a choice of two or more functors, then that data type itself forms a functor.\n    \n    \n        As the previous article argues, this is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such sums into functors, in the way that Haskell's Sum container almost does. Thus, knowing when you can safely give your generic types a Select method or map function may come in handy.\n    \n\t\n\t\tThere's one more rule like this one.\n\t\n    \n        Next: Functor compositions.\n    \n\n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/10/07/the-const-functor",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Package a constant value, but make it look like a functor. An article for object-oriented programmers.</em>\n    </p>\n\t<p>\n\t\tThis article is an instalment in <a href=\"/2018/03/22/functors\">an article series about functors</a>. In previous articles, you've learned about useful functors such as <a href=\"/2018/03/26/the-maybe-functor\">Maybe</a> and <a href=\"/2019/01/14/an-either-functor\">Either</a>. You've also seen at least one less-than useful functor: <a href=\"/2018/09/03/the-identity-functor\">The Identity functor</a>. In this article, you'll learn about another (practically) useless functor called <em>Const</em>. You can skip this article if you want.\n\t</p>\n    <p>\n        Like Identity, the Const functor may not be that useful, but it nonetheless exists. You'll probably not need it for actual programming tasks, but knowing that it exists, like Identity, can be a useful as an analysis tool. It may help you quickly evaluate whether a particular data structure affords various compositions. For example, it may enable you to quickly identify whether, say, a constant type and a list <a href=\"/2022/07/11/functor-relationships\">may compose to a functor</a>.\n    </p>\n    <p>\n        This article starts with C#, then proceeds over <a href=\"https://fsharp.org/\">F#</a> to finally discuss <a href=\"https://www.haskell.org/\">Haskell</a>'s built-in Const functor. You can just skip the languages you don't care about.\n    </p>\n    <h3 id=\"050cc4bc478f449ca11c28a83f8a2fda\">\n        C# Const class <a href=\"#050cc4bc478f449ca11c28a83f8a2fda\">#</a>\n    </h3>\n    <p>\n        While C# supports <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">records</a>, and you can implement Const as one, I here present it as a full-fledged class. For readers who may not be that familiar with modern C#, a normal class may be more recognizable.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>&gt;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">T1</span>&nbsp;Value&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>(<span style=\"color:#2b91af;\">T1</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Value&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">value</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T2</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;(Value);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Equals</span>(<span style=\"color:blue;\">object</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">@const</span>&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">EqualityComparer</span>&lt;<span style=\"color:#2b91af;\">T1</span>&gt;.Default.<span style=\"font-weight:bold;color:#74531f;\">Equals</span>(Value,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">@const</span>.Value);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetHashCode</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;-1584136870&nbsp;+&nbsp;<span style=\"color:#2b91af;\">EqualityComparer</span>&lt;<span style=\"color:#2b91af;\">T1</span>&gt;.Default.<span style=\"font-weight:bold;color:#74531f;\">GetHashCode</span>(Value);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The point of the Const functor is to make a constant value look like a functor; that is, <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">a container</a> that you can map from one type to another. The difference from the Identity functor is that Const doesn't allow you to map the constant. Rather, it cheats and pretends having a mappable type that, however, has no value associated with it; a <a href=\"https://wiki.haskell.org/Phantom_type\">phantom type</a>.\n    </p>\n    <p>\n        In <code><span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">T1</span>,&nbsp;<span style=\"color:#2b91af;\">T2</span>&gt;</code>, the <code>T2</code> type parameter is the 'pretend' type. While the class contains a <code>T1</code> value, it contains no <code>T2</code> value. The <code>Select</code> method, on the other hand, maps <code>T2</code> to <code>TResult</code>. The operation is close to being a <a href=\"https://en.wikipedia.org/wiki/NOP_(code)\">no-op</a>, but still not quite. While it doesn't do anything particularly practical, it <em>does</em> change the type of the returned value.\n    </p>\n    <p>\n        Here's a simple example of using the <code>Select</code> method:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">double</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">c</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;(<span style=\"color:#a31515;\">&quot;foo&quot;</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Math</span>.<span style=\"color:#74531f;\">Sqrt</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>));</pre>\n    </p>\n    <p>\n        The new <code>c</code> value <em>also</em> contains <code>\"foo\"</code>. Only its type has changed.\n    </p>\n    <p>\n        If you find this peculiar, think of it as similar to mapping an empty list, or an empty Maybe value. In those cases, too, no <em>values</em> change; only the type changes. The difference between empty Maybe objects or empty lists, and the Const functor is that Const isn't empty. There <em>is</em> a value; it's just not the value being mapped.\n    </p>\n    <h3 id=\"3262b7a3818d46bca452500138f776b2\">\n        Functor laws <a href=\"#3262b7a3818d46bca452500138f776b2\">#</a>\n    </h3>\n    <p>\n        Although the Const functor doesn't really do anything, it still obeys the functor laws. To illustrate it (but not to prove it), here's an <a href=\"https://fscheck.github.io/FsCheck/\">FsCheck</a> property that exercises the first functor law:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Property</span>(QuietOnSuccess&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>)]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">ConstObeysFirstFunctorLaw</span>(<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">i</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">i</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>);\n}</pre>\n    </p>\n    <p>\n        If you think it over for a minute, this makes sense. The test creates a <code><span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;</code> that contains the integer <code>i</code>, and then proceeds to map <em>the string that isn't there</em> to 'itself'. Clearly, this doesn't change the <code>i</code> value contained in the <code><span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;</code> container.\n    </p>\n    <p>\n        In the same spirit, a property demonstrates the second functor law:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Property</span>(QuietOnSuccess&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>)]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">ConstObeysSecondFunctorLaw</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">byte</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">int</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">short</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">short</span>,&nbsp;<span style=\"color:blue;\">byte</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">short</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">s</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">g</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">f</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">short</span>,&nbsp;<span style=\"color:blue;\">byte</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:blue;\">short</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">s</span>).<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>(<span style=\"font-weight:bold;color:#1f377f;\">g</span>(<span style=\"font-weight:bold;color:#1f377f;\">x</span>)));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(<span style=\"font-weight:bold;color:#1f377f;\">left</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>);\n}</pre>\n    </p>\n    <p>\n        Again, the same kind of almost-no-op takes place. The <code>g</code> function first changes the <code>int</code> type to <code>string</code>, and then <code>f</code> changes the <code>string</code> type to <code>byte</code>, but no <em>value</em> ever changes; only the second type parameter. Thus, <code>left</code> and <code>right</code> remain equal, since they both contain the same value <code>s</code>.\n    </p>\n    <h3 id=\"ca40bd6e23794a0b9de36b0835dce6cb\">\n        F# Const <a href=\"#ca40bd6e23794a0b9de36b0835dce6cb\">#</a>\n    </h3>\n    <p>\n        In F# we may <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> express Const as a single-case union:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">&#39;v</span>,&nbsp;<span style=\"color:#2b91af;\">&#39;a</span>&gt;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"color:blue;\">of</span>&nbsp;<span style=\"color:#2b91af;\">&#39;v</span></pre>\n    </p>\n    <p>\n        Here I've chosen to name the first type parameter <code>'v</code> (for <em>value</em>) in order to keep the 'functor type parameter' name <code>'a</code>. This enables me to meaningfully annotate the functor mapping function with the type <code><span style=\"color:#2b91af;\">&#39;a</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">&#39;b</span></code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">module</span>&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">get</span>&nbsp;(<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>)&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:#74531f;\">f</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">&#39;a</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">&#39;b</span>)&nbsp;(<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">&#39;v</span>,&nbsp;<span style=\"color:#2b91af;\">&#39;a</span>&gt;)&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Const</span>&lt;<span style=\"color:#2b91af;\">&#39;v</span>,&nbsp;<span style=\"color:#2b91af;\">&#39;b</span>&gt;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span></pre>\n    </p>\n    <p>\n        Usually, you don't need to annotate F# functions like <code>map</code>, but in this case I added explicit types in order to make it a recognizable functor map.\n    </p>\n    <p>\n        I could also have defined <code>map</code> like this:\n    </p>\n    <p>\n        <pre><span style=\"color:green;\">//&nbsp;&#39;a&nbsp;-&gt;&nbsp;Const&lt;&#39;b,&#39;c&gt;&nbsp;-&gt;&nbsp;Const&lt;&#39;b,&#39;d&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#1f377f;\">f</span>&nbsp;(<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span>)&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">x</span></pre>\n    </p>\n    <p>\n        This still works, but is less recognizable as a functor map, since <code>f</code> may be any <code>'a</code>. Notice that if type inference is left to its own devices, it names the input type <code>Const&lt;'b,'c&gt;</code> and the return type <code>Const&lt;'b,'d&gt;</code>. This also means that if you want to supply <code>f</code> as a mapping function, this is legal, because we may consider <code>'a ~ 'c -&gt; 'd</code>. It's still a functor map, but a less familiar representation.\n    </p>\n    <p>\n        Similar to the above C# code, two FsCheck properties demonstrate that the <code>Const</code> type obeys the functor laws.\n    </p>\n    <p>\n        <pre>[&lt;<span style=\"color:#2b91af;\">Property</span>(QuietOnSuccess&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>)&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">``Const&nbsp;obeys&nbsp;first&nbsp;functor&nbsp;law``</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Const</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">id</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=!&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>\n \n[&lt;<span style=\"color:#2b91af;\">Property</span>(QuietOnSuccess&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>)&gt;]\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">``Const&nbsp;obeys&nbsp;second&nbsp;functor&nbsp;law``</span>&nbsp;(<span style=\"color:#74531f;\">f</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">string</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">byte</span>)&nbsp;(<span style=\"color:#74531f;\">g</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">string</span>)&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">int16</span>)&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Const</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">g</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Const</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">let</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Const</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">s</span>&nbsp;|&gt;&nbsp;<span style=\"color:#2b91af;\">Const</span>.<span style=\"color:#74531f;\">map</span>&nbsp;(<span style=\"color:#74531f;\">g</span>&nbsp;&gt;&gt;&nbsp;<span style=\"color:#74531f;\">f</span>)\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>&nbsp;=!&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span></pre>\n    </p>\n    <p>\n        The assertions use <a href=\"https://github.com/SwensenSoftware/unquote\">Unquote</a>'s <code>=!</code> operator, which I usually read as <em>should equal</em> or <em>must equal</em>.\n    </p>\n    <h3 id=\"9474bc7665ed4f1da688dbb2484ccbf9\">\n        Haskell Const <a href=\"#9474bc7665ed4f1da688dbb2484ccbf9\">#</a>\n    </h3>\n    <p>\n        The Haskell <a href=\"https://hackage.haskell.org/package/base\">base</a> library already comes with a <a href=\"https://hackage.haskell.org/package/base/docs/Control-Applicative.html#t:Const\">Const</a> <code>newtype</code>.\n    </p>\n    <p>\n        You can easily create a new <code>Const</code> value:\n    </p>\n    <p>\n        <pre>ghci&gt; Const \"foo\"\nConst \"foo\"</pre>\n    </p>\n    <p>\n        If you inquire about its type, GHCi will tell you in a rather verbose way that the first type parameter is <code>String</code>, but the second may be any type <code>b</code>:\n    </p>\n    <p>\n        <pre>ghci&gt; :t Const \"foo\"\nConst \"foo\" :: forall {k} {b :: k}. Const String b</pre>\n    </p>\n    <p>\n        You can also map by 'incrementing' its non-existent second value:\n    </p>\n    <p>\n        <pre>ghci&gt; (+1) &lt;$&gt; Const \"foo\"\nConst \"foo\"\nghci&gt; :t (+1) &lt;$&gt; Const \"foo\"\n(+1) &lt;$&gt; Const \"foo\" :: Num b =&gt; Const String b</pre>\n    </p>\n    <p>\n        While the value remains <code>Const \"foo\"</code>, the type of <code>b</code> is now constrained to a <a href=\"https://hackage.haskell.org/package/base/docs/Prelude.html#t:Num\">Num</a> instance, which follows from the use of the <code>+</code> operator.\n    </p>\n    <h3 id=\"83eea33a91f84b2c9ff4d364b0c868d6\">\n        Functor law proofs <a href=\"#83eea33a91f84b2c9ff4d364b0c868d6\">#</a>\n    </h3>\n    <p>\n        If you look at the source code for the <code>Functor</code> instance, it looks much like its F# equivalent:\n    </p>\n    <p>\n        <pre>instance Functor (Const m) where\n    fmap _ (Const v) = Const v</pre>\n    </p>\n    <p>\n        We can use equational reasoning with <a href=\"https://bartoszmilewski.com/2015/01/20/functors/\">the notation that Bartosz Milewski uses</a> to prove that both functor laws hold, starting with the first:\n    </p>\n    <p>\n        <pre>  fmap id (Const x)\n= { definition of fmap }\n  Const x</pre>\n    </p>\n    <p>\n        Clearly, there's not much to that part. What about the second functor law?\n    </p>\n    <p>\n        <pre>  fmap (g . f) (Const x)\n= { definition of fmap }\n  Const x\n= { definition of fmap }\n  fmap g (Const x)\n= { definition of fmap }\n  fmap g (fmap f (Const x))\n= { definition of composition }\n  (fmap g . fmap f) (Const x)</pre>\n    </p>\n    <p>\n        While that proof takes a few more steps, most are as trivial as the first proof.\n    </p>\n    <h3 id=\"e71a037a6f3f491ca3f755ce31809123\">\n        Conclusion <a href=\"#e71a037a6f3f491ca3f755ce31809123\">#</a>\n    </h3>\n    <p>\n        The Const functor is hardly a programming construct you'll use in your day-to-day work, but the fact that it exists can be used to generalize some results that involve functors. Now, whenever you have a result that involves a functor, you know that it also generalizes to constant values, just like the Identity functor teaches us that 'naked' type parameters can be thought of as functors.\n    </p>\n    <p>\n        To give a few examples, we may already know that <code>Tree&lt;T&gt;</code> (C# syntax) is a functor, but a 'naked' generic type parameter <code>T</code> also gives rise to a functor (Identity), as does a non-generic type (such as <code>int</code> or <code>MyCustomClass</code>).\n    </p>\n    <p>\n        Thus, if you have a function that operates on any functor, it may also, conceivably, operate on data structures that have non-generic types. This may for example be interesting when we begin to consider <a href=\"/2022/07/11/functor-relationships\">how functors compose</a>.\n    </p>\n    <p>\n        <strong>Next:</strong> <a href=\"/2021/07/19/the-state-functor\">The State functor</a>.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "Package a constant value, but make it look like a functor. An article for object-oriented programmers.\n    \n\t\n\t\tThis article is an instalment in an article series about functors. In previous articles, you've learned about useful functors such as Maybe and Either. You've also seen at least one less-than useful functor: The Identity functor. In this article, you'll learn about another (practically) useless functor called Const. You can skip this article if you want.\n\t\n    \n        Like Identity, the Const functor may not be that useful, but it nonetheless exists. You'll probably not need it for actual programming tasks, but knowing that it exists, like Identity, can be a useful as an analysis tool. It may help you quickly evaluate whether a particular data structure affords various compositions. For example, it may enable you to quickly identify whether, say, a constant type and a list may compose to a functor.\n    \n    \n        This article starts with C#, then proceeds over F# to finally discuss Haskell's built-in Const functor. You can just skip the languages you don't care about.\n    \n    \n        C# Const class #\n    \n    \n        While C# supports records, and you can implement Const as one, I here present it as a full-fledged class. For readers who may not be that familiar with modern C#, a normal class may be more recognizable.\n    \n    \n        public sealed class Const<T1, T2>\n{\n    public T1 Value { get; }\n \n    public Const(T1 value)\n    {\n        Value = value;\n    }\n \n    public Const<T1, TResult> Select<TResult>(Func<T2, TResult> selector)\n    {\n        return new Const<T1, TResult>(Value);\n    }\n \n    public override bool Equals(object obj)\n    {\n        return obj is Const<T1, T2> @const &&\n               EqualityComparer<T1>.Default.Equals(Value, @const.Value);\n    }\n \n    public override int GetHashCode()\n    {\n        return -1584136870 + EqualityComparer<T1>.Default.GetHashCode(Value);\n    }\n}\n    \n    \n        The point of the Const functor is to make a constant value look like a functor; that is, a container that you can map from one type to another. The difference from the Identity functor is that Const doesn't allow you to map the constant. Rather, it cheats and pretends having a mappable type that, however, has no value associated with it; a phantom type.\n    \n    \n        In Const<T1, T2>, the T2 type parameter is the 'pretend' type. While the class contains a T1 value, it contains no T2 value. The Select method, on the other hand, maps T2 to TResult. The operation is close to being a no-op, but still not quite. While it doesn't do anything particularly practical, it does change the type of the returned value.\n    \n    \n        Here's a simple example of using the Select method:\n    \n    \n        Const<string, double> c = new Const<string, int>(\"foo\").Select(i => Math.Sqrt(i));\n    \n    \n        The new c value also contains \"foo\". Only its type has changed.\n    \n    \n        If you find this peculiar, think of it as similar to mapping an empty list, or an empty Maybe value. In those cases, too, no values change; only the type changes. The difference between empty Maybe objects or empty lists, and the Const functor is that Const isn't empty. There is a value; it's just not the value being mapped.\n    \n    \n        Functor laws #\n    \n    \n        Although the Const functor doesn't really do anything, it still obeys the functor laws. To illustrate it (but not to prove it), here's an FsCheck property that exercises the first functor law:\n    \n    \n        [Property(QuietOnSuccess = true)]\npublic void ConstObeysFirstFunctorLaw(int i)\n{\n    var left = new Const<int, string>(i);\n    var right = new Const<int, string>(i).Select(x => x);\n \n    Assert.Equal(left, right);\n}\n    \n    \n        If you think it over for a minute, this makes sense. The test creates a Const<int, string> that contains the integer i, and then proceeds to map the string that isn't there to 'itself'. Clearly, this doesn't change the i value contained in the Const<int, string> container.\n    \n    \n        In the same spirit, a property demonstrates the second functor law:\n    \n    \n        [Property(QuietOnSuccess = true)]\npublic void ConstObeysSecondFunctorLaw(\n    Func<string, byte> f,\n    Func<int, string> g,\n    short s)\n{\n    Const<short, byte> left = new Const<short, int>(s).Select(g).Select(f);\n    Const<short, byte> right = new Const<short, int>(s).Select(x => f(g(x)));\n \n    Assert.Equal(left, right);\n}\n    \n    \n        Again, the same kind of almost-no-op takes place. The g function first changes the int type to string, and then f changes the string type to byte, but no value ever changes; only the second type parameter. Thus, left and right remain equal, since they both contain the same value s.\n    \n    \n        F# Const #\n    \n    \n        In F# we may idiomatically express Const as a single-case union:\n    \n    \n        type Const<'v, 'a> = Const of 'v\n    \n    \n        Here I've chosen to name the first type parameter 'v (for value) in order to keep the 'functor type parameter' name 'a. This enables me to meaningfully annotate the functor mapping function with the type 'a -> 'b:\n    \n    \n        module Const =\n    let get (Const x) = x\n    let map (f : 'a -> 'b) (Const x : Const<'v, 'a>) : Const<'v, 'b> = Const x\n    \n    \n        Usually, you don't need to annotate F# functions like map, but in this case I added explicit types in order to make it a recognizable functor map.\n    \n    \n        I could also have defined map like this:\n    \n    \n        // 'a -> Const<'b,'c> -> Const<'b,'d>\nlet map f (Const x) = Const x\n    \n    \n        This still works, but is less recognizable as a functor map, since f may be any 'a. Notice that if type inference is left to its own devices, it names the input type Const<'b,'c> and the return type Const<'b,'d>. This also means that if you want to supply f as a mapping function, this is legal, because we may consider 'a ~ 'c -> 'd. It's still a functor map, but a less familiar representation.\n    \n    \n        Similar to the above C# code, two FsCheck properties demonstrate that the Const type obeys the functor laws.\n    \n    \n        [<Property(QuietOnSuccess = true)>]\nlet ``Const obeys first functor law`` (i : int) =\n    let  left = Const i\n    let right = Const i |> Const.map id\n \n    left =! right\n \n[<Property(QuietOnSuccess = true)>]\nlet ``Const obeys second functor law`` (f : string -> byte) (g : int -> string) (s : int16) =\n    let  left = Const s |> Const.map g |> Const.map f\n    let right = Const s |> Const.map (g >> f)\n \n    left =! right\n    \n    \n        The assertions use Unquote's =! operator, which I usually read as should equal or must equal.\n    \n    \n        Haskell Const #\n    \n    \n        The Haskell base library already comes with a Const newtype.\n    \n    \n        You can easily create a new Const value:\n    \n    \n        ghci> Const \"foo\"\nConst \"foo\"\n    \n    \n        If you inquire about its type, GHCi will tell you in a rather verbose way that the first type parameter is String, but the second may be any type b:\n    \n    \n        ghci> :t Const \"foo\"\nConst \"foo\" :: forall {k} {b :: k}. Const String b\n    \n    \n        You can also map by 'incrementing' its non-existent second value:\n    \n    \n        ghci> (+1) <$> Const \"foo\"\nConst \"foo\"\nghci> :t (+1) <$> Const \"foo\"\n(+1) <$> Const \"foo\" :: Num b => Const String b\n    \n    \n        While the value remains Const \"foo\", the type of b is now constrained to a Num instance, which follows from the use of the + operator.\n    \n    \n        Functor law proofs #\n    \n    \n        If you look at the source code for the Functor instance, it looks much like its F# equivalent:\n    \n    \n        instance Functor (Const m) where\n    fmap _ (Const v) = Const v\n    \n    \n        We can use equational reasoning with the notation that Bartosz Milewski uses to prove that both functor laws hold, starting with the first:\n    \n    \n          fmap id (Const x)\n= { definition of fmap }\n  Const x\n    \n    \n        Clearly, there's not much to that part. What about the second functor law?\n    \n    \n          fmap (g . f) (Const x)\n= { definition of fmap }\n  Const x\n= { definition of fmap }\n  fmap g (Const x)\n= { definition of fmap }\n  fmap g (fmap f (Const x))\n= { definition of composition }\n  (fmap g . fmap f) (Const x)\n    \n    \n        While that proof takes a few more steps, most are as trivial as the first proof.\n    \n    \n        Conclusion #\n    \n    \n        The Const functor is hardly a programming construct you'll use in your day-to-day work, but the fact that it exists can be used to generalize some results that involve functors. Now, whenever you have a result that involves a functor, you know that it also generalizes to constant values, just like the Identity functor teaches us that 'naked' type parameters can be thought of as functors.\n    \n    \n        To give a few examples, we may already know that Tree<T> (C# syntax) is a functor, but a 'naked' generic type parameter T also gives rise to a functor (Identity), as does a non-generic type (such as int or MyCustomClass).\n    \n    \n        Thus, if you have a function that operates on any functor, it may also, conceivably, operate on data structures that have non-generic types. This may for example be interesting when we begin to consider how functors compose.\n    \n    \n        Next: The State functor.\n    \n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/10/03/das-verflixte-hunde-spiel",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>A puzzle kata, and a possible solution.</em>\n    </p>\n    <p>\n        When I was a boy I had a nine-piece puzzle that I'd been gifted by the Swizz branch of my family. It's called <em>Das verflixte Hunde-Spiel</em>, which means something like <em>the confounded dog game</em> in English. And while a puzzle with nine pieces doesn't sound like much, it is, in fact, incredibly difficult.\n    </p>\n    <p>\n        It's just a specific incarnation of a kind of game that you've almost certainly encountered, too.\n    </p>\n    <p>\n        <img src=\"/content/binary/hunde-spiel.jpg\" alt=\"A picture of the box of the puzzle, together with the tiles spread out in unordered fashion.\">\n    </p>\n    <p>\n        There are nine tiles, each with two dog heads and two dog ends. A dog may be coloured in one of four different patterns. The object of the game is to lay out the nine tiles in a 3x3 square so that all dog halves line up.\n    </p>\n    <h3 id=\"ddf5aa390eed4147a55a35e95803b6ad\">\n        Game details <a href=\"#ddf5aa390eed4147a55a35e95803b6ad\">#</a>\n    </h3>\n    <p>\n        The game is from 1979. Two of the tiles are identical, and, according to the information on the back of the box, two possible solutions exist. Described from top clockwise, the tiles are the following:\n    </p>\n    <ul>\n        <li>Brown head, grey head, umber tail, spotted tail</li>\n        <li>Brown head, spotted head, brown tail, umber tail</li>\n        <li>Brown head, spotted head, grey tail, umber tail</li>\n        <li>Brown head, spotted head, grey tail, umber tail</li>\n        <li>Brown head, umber head, spotted tail, grey tail</li>\n        <li>Grey head, brown head, spotted tail, umber tail</li>\n        <li>Grey head, spotted head, brown tail, umber tail</li>\n        <li>Grey head, umber head, brown tail, spotted tail</li>\n        <li>Grey head, umber head, grey tail, spotted tail</li>\n    </ul>\n    <p>\n        I've taken the liberty of using a shorthand for the patterns. The grey dogs are actually also spotted, but since there's only one grey pattern, the <em>grey</em> label is unambiguous. The dogs I've named <em>umber</em> are actually rather <em>burnt umber</em>, but that's too verbose for my tastes, so I just named them <em>umber</em>. Finally, the label <em>spotted</em> indicates dogs that are actually burnt umber with brown blotches.\n    </p>\n    <p>\n        Notice that there are two tiles with a brown head, a spotted head, a grey tail, and an umber tail.\n    </p>\n    <p>\n        The object of the game is to lay down the tiles in a 3x3 square so that all dogs fit. For further reference, I've numbered each position from one to nine like this:\n    </p>\n    <p>\n        <img src=\"/content/binary/numbered-3x3-tiles.png\" alt=\"Nine tiles arranged in a three-by-three square, numbered from 1 to 9 from top left to bottom right.\">\n    </p>\n    <p>\n        What makes the game hard? There are nine cards, so if you start with the upper left corner, you have nine choices. If you just randomly put down the tiles, you now have eight left for the top middle position, and so on. Standard combinatorics indicate that there are at least 9! = 362,880 permutations.\n    </p>\n    <p>\n        That's not the whole story, however, since you can rotate each tile in four different ways. You can rotate the first tile four ways, the second tile four ways, etc. for a total of 4<sup>9</sup> = 262,144 ways. Multiply these two numbers together, and you get 4<sup>9</sup>9! = 95,126,814,720 combinations. No wonder this puzzle is hard if there's only two solutions.\n    </p>\n    <p>\n        When analysed this way, however, there are actually 16 solutions, but that still makes it incredibly unlikely to arrive at a solution by chance. I'll get back to why there are 16 solutions later. For now, you should have enough information to try your hand with this game, if you'd like.\n    </p>\n    <p>\n        I found that the game made for an interesting <a href=\"/2020/01/13/on-doing-katas\">kata</a>: Write a program that finds all possible solutions to the puzzle.\n    </p>\n    <p>\n        If you'd like to try your hand at this exercise, I suggest that you pause reading here.\n    </p>\n    <p>\n        In the rest of the article, I'll outline my first attempt. Spoiler alert: I'll also show one of the solutions.\n    </p>\n    <h3 id=\"113acd886fde4791b10c4a2b6f394216\">\n        Types <a href=\"#113acd886fde4791b10c4a2b6f394216\">#</a>\n    </h3>\n    <p>\n        When you program in <a href=\"https://www.haskell.org/\">Haskell</a>, it's natural to start by defining some types.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">data</span>&nbsp;Half&nbsp;=&nbsp;Head&nbsp;|&nbsp;Tail&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)\n\n<span style=\"color:blue;\">data</span>&nbsp;Pattern&nbsp;=&nbsp;Brown&nbsp;|&nbsp;Grey&nbsp;|&nbsp;Spotted&nbsp;|&nbsp;Umber&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)\n\n<span style=\"color:blue;\">data</span>&nbsp;Tile&nbsp;=&nbsp;Tile&nbsp;{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">top</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>),\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">right</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>),\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">bottom</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>),\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">left</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>)&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">deriving</span>&nbsp;(<span style=\"color:#2b91af;\">Show</span>,&nbsp;<span style=\"color:#2b91af;\">Eq</span>)</pre>\n    </p>\n    <p>\n        Each tile describes what you find on its <code>top</code>, <code>right</code> side, <code>bottom</code>, and <code>left</code> side.\n    </p>\n    <p>\n        We're also going to need a function to evaluate whether two halves match:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;(<span style=\"color:blue;\">Pattern</span>,&nbsp;<span style=\"color:blue;\">Half</span>)&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\nmatches&nbsp;(p1,&nbsp;h1)&nbsp;(p2,&nbsp;h2)&nbsp;=&nbsp;p1&nbsp;==&nbsp;p2&nbsp;&amp;&amp;&nbsp;h1&nbsp;/=&nbsp;h2</pre>\n    </p>\n    <p>\n        This function demands that the patterns match, but that the halves are opposites.\n    </p>\n    <p>\n        You can use the <code>Tile</code> type and its constituents to define the nine tiles of the game:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tiles</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;[<span style=\"color:blue;\">Tile</span>]\ntiles&nbsp;=\n&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Brown,&nbsp;Head)&nbsp;(Grey,&nbsp;Head)&nbsp;(Umber,&nbsp;Tail)&nbsp;(Spotted,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Brown,&nbsp;Head)&nbsp;(Spotted,&nbsp;Head)&nbsp;(Brown,&nbsp;Tail)&nbsp;(Umber,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Brown,&nbsp;Head)&nbsp;(Spotted,&nbsp;Head)&nbsp;(Grey,&nbsp;Tail)&nbsp;(Umber,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Brown,&nbsp;Head)&nbsp;(Spotted,&nbsp;Head)&nbsp;(Grey,&nbsp;Tail)&nbsp;(Umber,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Brown,&nbsp;Head)&nbsp;(Umber,&nbsp;Head)&nbsp;(Spotted,&nbsp;Tail)&nbsp;(Grey,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Grey,&nbsp;Head)&nbsp;(Brown,&nbsp;Head)&nbsp;(Spotted,&nbsp;Tail)&nbsp;(Umber,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Grey,&nbsp;Head)&nbsp;(Spotted,&nbsp;Head)&nbsp;(Brown,&nbsp;Tail)&nbsp;(Umber,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Grey,&nbsp;Head)&nbsp;(Umber,&nbsp;Head)&nbsp;(Brown,&nbsp;Tail)&nbsp;(Spotted,&nbsp;Tail),\n&nbsp;&nbsp;&nbsp;&nbsp;Tile&nbsp;(Grey,&nbsp;Head)&nbsp;(Umber,&nbsp;Head)&nbsp;(Grey,&nbsp;Tail)&nbsp;(Spotted,&nbsp;Tail)\n&nbsp;&nbsp;]</pre>\n    </p>\n    <p>\n        Because I'm the neatnik that I am, I've sorted the tiles in lexicographic order, but the solution below doesn't rely on that.\n    </p>\n    <h3 id=\"1568796e41484e21bae6bb5734f996eb\">\n        Brute force doesn't work <a href=\"#1568796e41484e21bae6bb5734f996eb\">#</a>\n    </h3>\n    <p>\n        Before I started, I cast around the internet to see if there was an appropriate algorithm for the problem. While I found a few answers on <a href=\"https://stackoverflow.com/\">Stack Overflow</a>, none of them gave me indication that any sophisticated algorithm was available. (Even so, there may be, and I just didn't find it.)\n    </p>\n    <p>\n        It seems clear, however, that you can implement some kind of recursive search-tree algorithm that cuts a branch off as soon as it realizes that it doesn't work. I'll get back to that later, so let's leave that for now.\n    </p>\n    <p>\n        Since I'd planned on writing the code in Haskell, I decided to first try something that might look like brute force. Because Haskell is lazily evaluated, you can sometimes get away with techniques that look wasteful when you're used to strict/eager evaluation. In this case, it turned out to not work, but it's often quicker to just make the attempt than trying to analyze the problem.\n    </p>\n    <p>\n        As already outlined, I first attempted a purely brute-force solution, betting that Haskell's lazy evaluation would be enough to skip over the unnecessary calculations:\n    </p>\n    <p>\n        <pre>allRotationsOf9&nbsp;=&nbsp;replicateM&nbsp;9&nbsp;[0..3]\n\n<span style=\"color:#2b91af;\">allRotations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;[<span style=\"color:blue;\">Tile</span>]&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[[<span style=\"color:blue;\">Tile</span>]]\nallRotations&nbsp;ts&nbsp;=&nbsp;<span style=\"color:blue;\">fmap</span>&nbsp;(\\rs&nbsp;-&gt;&nbsp;(\\(r,&nbsp;t)&nbsp;-&gt;&nbsp;rotations&nbsp;t&nbsp;!!&nbsp;r)&nbsp;&lt;$&gt;&nbsp;<span style=\"color:blue;\">zip</span>&nbsp;rs&nbsp;ts)&nbsp;allRotationsOf9\n\n<span style=\"color:#2b91af;\">allConfigurations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;[[<span style=\"color:blue;\">Tile</span>]]\nallConfigurations&nbsp;=&nbsp;permutations&nbsp;tiles&nbsp;&gt;&gt;=&nbsp;allRotations\n\nsolutions&nbsp;=&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;isSolution&nbsp;allConfigurations</pre>\n    </p>\n    <p>\n        My idea with the <code>allConfigurations</code> value was that it's supposed to enumerate all 95 billion combinations. Whether it actually does that, I was never able to verify, because if I try to run that code, my poor laptop runs for a couple of hours before it eventually runs out of memory. In other words, the GHCi process crashes.\n    </p>\n    <p>\n        I haven't shown <code>isSolution</code> or <code>rotations</code>, because I consider the implementations irrelevant. This attempt doesn't work anyway.\n    </p>\n    <p>\n        Now that I look at it, it's quite clear why this isn't a good strategy. There's little to be gained from lazy evaluation when the final attempt just attempts to <code>filter</code> a list. Even with lazy evaluation, the code still has to run through all 95 billion combinations.\n    </p>\n    <p>\n        Things might have been different if I just had to find one solution. With a little luck, it might be that the first solution appears after, say, a hundred million iterations, and lazy evaluation would then had meant that the remaining combinations would never run. Not so here, but hindsight is 20-20.\n    </p>\n    <h3 id=\"93754ac1a84e4a42b87253f1ffded97b\">\n        Search tree <a href=\"#93754ac1a84e4a42b87253f1ffded97b\">#</a>\n    </h3>\n    <p>\n        Back to the search tree idea. It goes like this: Start from the top left position and pick a random tile and rotation. Now pick an arbitrary tile <em>that fits</em> and place it to the right of it, and so on. As far as I can tell, you can always place the first four cards, but from there, you can easily encounter a combination that allows no further tiles. Here's an example:\n    </p>\n    <p>\n        <img src=\"/content/binary/hunde-spiel-no-fifth-tile.jpg\" alt=\"Four matching tiles put down, with the remaining five tiles arranged to show that none of them fit the fifth position.\">\n    </p>\n    <p>\n        None of the remaining five tiles fit in the fifth position. This means that we don't have to do <em>any</em> permutations that involve these four tiles in that combination. While the algorithm has to search through all five remaining tiles and rotations to discover that none fit in position 5, once it knows that, it doesn't have to go through the remaining four positions. That's 4<sup>4</sup>4! = 6,144 combinations that it can skip every time it discovers an impossible beginning. That doesn't sound like that much, but if we assume that this happens more often than not, it's still an improvement by orders of magnitude.\n    </p>\n    <p>\n        We may think of this algorithm as constructing a search tree, but immediately pruning all branches that aren't viable, as close to the root as possible.\n    </p>\n    <h3 id=\"76d4e7e1898a4da89de0d7afabbdc4e8\">\n        Matches <a href=\"#76d4e7e1898a4da89de0d7afabbdc4e8\">#</a>\n    </h3>\n    <p>\n        Before we get to the algorithm proper we need a few simple helper functions. One kind of function is a predicate that determines if a particular tile can occupy a given position. Since we may place any tile in any rotation in the first position, we don't need to write a predicate for that, but if we wanted to generalize, <code>const True</code> would do.\n    </p>\n    <p>\n        Whether or not we can place a given tile in the second position depends exclusively on the tile in the first position:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile2Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile2Matches&nbsp;t1&nbsp;t2&nbsp;=&nbsp;right&nbsp;t1&nbsp;`matches`&nbsp;left&nbsp;t2</pre>\n    </p>\n    <p>\n        If the <code>right</code> dog part of the first tile <code>matches</code> the <code>left</code> part of the second tile, the return value is <code>True</code>; otherwise, it's <code>False</code>. Note that I'm using infix notation for <code>matches</code>. I could also have written the function as\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile2Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile2Matches&nbsp;t1&nbsp;t2&nbsp;=&nbsp;matches&nbsp;(right&nbsp;t1)&nbsp;(left&nbsp;t2)</pre>\n    </p>\n    <p>\n        but it doesn't read as well.\n    </p>\n    <p>\n        In any case, the corresponding matching functions for the third and forth tile look similar:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile3Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile3Matches&nbsp;t2&nbsp;t3&nbsp;=&nbsp;right&nbsp;t2&nbsp;`matches`&nbsp;left&nbsp;t3\n\n<span style=\"color:#2b91af;\">tile4Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile4Matches&nbsp;t1&nbsp;t4&nbsp;=&nbsp;bottom&nbsp;t1&nbsp;`matches`&nbsp;top&nbsp;t4</pre>\n    </p>\n    <p>\n        Notice that <code>tile4Matches</code> compares the fourth tile with the first tile rather than the third tile, because position 4 is directly beneath position 1, rather than to the right of position 3 (cf. the grid above). For that reason it also compares the <code>bottom</code> of tile 1 to the <code>top</code> of the fourth tile.\n    </p>\n    <p>\n        The matcher for the fifth tile is different:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile5Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile5Matches&nbsp;t2&nbsp;t4&nbsp;t5&nbsp;=&nbsp;bottom&nbsp;t2&nbsp;`matches`&nbsp;top&nbsp;t5&nbsp;&amp;&amp;&nbsp;right&nbsp;t4&nbsp;`matches`&nbsp;left&nbsp;t5</pre>\n    </p>\n    <p>\n        This is the first predicate that depends on two, rather than one, previous tiles. In position 5 we need to examine both the tile in position 2 and the one in position 4.\n    </p>\n    <p>\n        The same is true for position 6:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile6Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile6Matches&nbsp;t3&nbsp;t5&nbsp;t6&nbsp;=&nbsp;bottom&nbsp;t3&nbsp;`matches`&nbsp;top&nbsp;t6&nbsp;&amp;&amp;&nbsp;right&nbsp;t5&nbsp;`matches`&nbsp;left&nbsp;t6</pre>\n    </p>\n    <p>\n        but then the matcher for position 7 looks like the predicate for position 4:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile7Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile7Matches&nbsp;t4&nbsp;t7&nbsp;=&nbsp;bottom&nbsp;t4&nbsp;`matches`&nbsp;top&nbsp;t7</pre>\n    </p>\n    <p>\n        This is, of course, because the tile in position 7 only has to consider the tile in position 4. Finally, not surprising, the two remaining predicates look like something we've already seen:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">tile8Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile8Matches&nbsp;t5&nbsp;t7&nbsp;t8&nbsp;=&nbsp;bottom&nbsp;t5&nbsp;`matches`&nbsp;top&nbsp;t8&nbsp;&amp;&amp;&nbsp;right&nbsp;t7&nbsp;`matches`&nbsp;left&nbsp;t8\n\n<span style=\"color:#2b91af;\">tile9Matches</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\ntile9Matches&nbsp;t6&nbsp;t8&nbsp;t9&nbsp;=&nbsp;bottom&nbsp;t6&nbsp;`matches`&nbsp;top&nbsp;t9&nbsp;&amp;&amp;&nbsp;right&nbsp;t8&nbsp;`matches`&nbsp;left&nbsp;t9</pre>\n    </p>\n    <p>\n        You may suggest that it'd be possible to reduce the number of predicates. After all, there's effectively only three different predicates: One that only looks at the tile to the left, one that only looks at the tile above, and one that looks both to the left and above.\n    </p>\n    <p>\n        Indeed, I could have boiled it down to just three functions:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">matchesHorizontally</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\nmatchesHorizontally&nbsp;x&nbsp;y&nbsp;=&nbsp;right&nbsp;x&nbsp;`matches`&nbsp;left&nbsp;y\n\n<span style=\"color:#2b91af;\">matchesVertically</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\nmatchesVertically&nbsp;x&nbsp;y&nbsp;=&nbsp;bottom&nbsp;x&nbsp;`matches`&nbsp;top&nbsp;y\n\n<span style=\"color:#2b91af;\">matchesBoth</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:#2b91af;\">Bool</span>\nmatchesBoth&nbsp;x&nbsp;y&nbsp;z&nbsp;=&nbsp;matchesVertically&nbsp;x&nbsp;z&nbsp;&amp;&amp;&nbsp;matchesHorizontally&nbsp;y&nbsp;z</pre>\n    </p>\n    <p>\n        but I now run the risk of calling the wrong predicate from my implementation of the algorithm. As you'll see, I'll call each predicate by name at each appropriate step, but if I had only these three functions, there's a risk that I might mistakenly use <code>matchesHorizontally</code> when I should have used <code>matchesVertically</code>, or vice versa. Reducing eight one-liners to three one-liners doesn't really seem to warrant the risk.\n    </p>\n    <h3 id=\"01bf66f9df1947d296a004e93638450d\">\n        Rotations <a href=\"#01bf66f9df1947d296a004e93638450d\">#</a>\n    </h3>\n    <p>\n        In addition to examining whether a given tile fits in a given position, we also need to be able to rotate any tile:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">rotateClockwise</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>\nrotateClockwise&nbsp;(Tile&nbsp;t&nbsp;r&nbsp;b&nbsp;l)&nbsp;=&nbsp;Tile&nbsp;l&nbsp;t&nbsp;r&nbsp;b\n\n<span style=\"color:#2b91af;\">rotateCounterClockwise</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>\nrotateCounterClockwise&nbsp;(Tile&nbsp;t&nbsp;r&nbsp;b&nbsp;l)&nbsp;=&nbsp;Tile&nbsp;r&nbsp;b&nbsp;l&nbsp;t\n\n<span style=\"color:#2b91af;\">upend</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;<span style=\"color:blue;\">Tile</span>\nupend&nbsp;(Tile&nbsp;t&nbsp;r&nbsp;b&nbsp;l)&nbsp;=&nbsp;Tile&nbsp;b&nbsp;l&nbsp;t&nbsp;r</pre>\n    </p>\n    <p>\n        What is really needed, it turns out, is to enumerate all four rotations of a tile:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">rotations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;<span style=\"color:blue;\">Tile</span>&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[<span style=\"color:blue;\">Tile</span>]\nrotations&nbsp;t&nbsp;=&nbsp;[t,&nbsp;rotateClockwise&nbsp;t,&nbsp;upend&nbsp;t,&nbsp;rotateCounterClockwise&nbsp;t]</pre>\n    </p>\n    <p>\n        Since this, like everything else here, is a pure function, I experimented with defining a 'memoized tile' type that embedded all four rotations upon creation, so that the algorithm doesn't need to call the <code>rotations</code> function millions of times, but I couldn't measure any discernable performance improvement from it. There's no reason to make things more complicated than they need to be, so I didn't keep that change. (Since I do, however, <a href=\"https://stackoverflow.blog/2022/12/19/use-git-tactically/\">use Git tactically</a> i did, of course, <a href=\"https://git-scm.com/docs/git-stash\">stash</a> the experiment.)\n    </p>\n    <h3 id=\"8e7ce1c1bb9c4403abd72d5d3d87bf02\">\n        Permutations <a href=\"#8e7ce1c1bb9c4403abd72d5d3d87bf02\">#</a>\n    </h3>\n    <p>\n        While I couldn't make things work by enumerating all 95 billion combinations, enumerating all 362,880 permutations of non-rotated tiles is well within the realm of the possible:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">allPermutations</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nallPermutations&nbsp;=\n&nbsp;&nbsp;(\\[t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9]&nbsp;-&gt;&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9))\n&nbsp;&nbsp;&lt;$&gt;&nbsp;permutations&nbsp;tiles</pre>\n    </p>\n    <p>\n        Doing this in GHCi on my old laptop takes 300 milliseconds, which is good enough compared to what comes next.\n    </p>\n    <p>\n        This list value uses <a href=\"https://hackage.haskell.org/package/base/docs/Data-List.html#v:permutations\">permutations</a> to enumerate all the permutations. You may already have noticed that it converts the result into a nine-tuple. The reason for that is that this enables the algorithm to pattern-match into specific positions without having to resort to the <a href=\"https://hackage.haskell.org/package/base/docs/Data-List.html#v:-33--33-\">index operator</a>, which is both partial and requires iteration of the list to reach the indexed element. Granted, the list is only nine elements long, and often the algorithm will only need to index to the fourth or fifth element. On the other hand, it's going to do it <em>a lot</em>. Perhaps it's a premature optimization, but if it is, it's at least one that makes the code more, rather than less, readable.\n    </p>\n    <h3 id=\"3f0af3d6c91a4cd68b026a0ccf93a0e2\">\n        Algorithm <a href=\"#3f0af3d6c91a4cd68b026a0ccf93a0e2\">#</a>\n    </h3>\n    <p>\n        I found it easiest to begin at the 'bottom' of what is effectively a recursive algorithm, even though I didn't implement it that way. At the 'bottom', I imagine that I'm almost done: That I've found eight tiles that match, and now I only need to examine if I can rotate the final tile so that it matches:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">solve9th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(a,&nbsp;b,&nbsp;c,&nbsp;d,&nbsp;e,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;g,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(a,&nbsp;b,&nbsp;c,&nbsp;d,&nbsp;e,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;g,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve9th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile9Matches&nbsp;t6&nbsp;t8)&nbsp;$&nbsp;rotations&nbsp;t9\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;match)</pre>\n    </p>\n    <p>\n        Recalling that Haskell functions compose from right to left, the function starts by enumerating the four <code>rotations</code> of the ninth and final tile <code>t9</code>. It then filters those four rotations by the <code>tile9Matches</code> predicate.\n    </p>\n    <p>\n        The <code>match</code> value is a rotation of <code>t9</code> that matches <code>t6</code> and <code>t8</code>. Whenever <code>solve9th</code> finds such a match, it returns the entire nine-tuple, because the assumption is that the eight first tiles are already valid.\n    </p>\n    <p>\n        Notice that the function uses <code>do</code> notation in the list monad, so it's quite possible that the first <code>filter</code> expression produces no <code>match</code>. In that case, the second line of code never runs, and instead, the function returns the empty list.\n    </p>\n    <p>\n        How do we find a tuple where the first eight elements are valid? Well, if we have seven valid tiles, we may consider the eighth and subsequently call <code>solve9th</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">solve8th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(a,&nbsp;b,&nbsp;c,&nbsp;d,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(a,&nbsp;b,&nbsp;c,&nbsp;d,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve8th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile8Matches&nbsp;t5&nbsp;t7)&nbsp;$&nbsp;rotations&nbsp;t8\n&nbsp;&nbsp;solve9th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;match,&nbsp;t9)</pre>\n    </p>\n    <p>\n        This function looks a lot like <code>solve9th</code>, but it instead enumerates the four <code>rotations</code> of the eighth tile <code>t8</code> and filters with the <code>tile8Matches</code> predicate. Due to the <code>do</code> notation, it'll only call <code>solve9th</code> if it finds a <code>match</code>.\n    </p>\n    <p>\n        Once more, this function assumes that the first seven tiles are already in a legal constellation. How do we find seven valid tiles? The same way we find eight: By assuming that we have six valid tiles, and then finding the seventh, and so on:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">solve7th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(a,&nbsp;b,&nbsp;c,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(a,&nbsp;b,&nbsp;c,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve7th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile7Matches&nbsp;t4)&nbsp;$&nbsp;rotations&nbsp;t7\n&nbsp;&nbsp;solve8th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;match,&nbsp;t8,&nbsp;t9)\n\n<span style=\"color:#2b91af;\">solve6th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(a,&nbsp;b,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(a,&nbsp;b,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve6th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile6Matches&nbsp;t3&nbsp;t5)&nbsp;$&nbsp;rotations&nbsp;t6\n&nbsp;&nbsp;solve7th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;match,&nbsp;t7,&nbsp;t8,&nbsp;t9)\n\n<span style=\"color:#2b91af;\">solve5th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(a,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(a,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve5th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile5Matches&nbsp;t2&nbsp;t4)&nbsp;$&nbsp;rotations&nbsp;t5\n&nbsp;&nbsp;solve6th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;match,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)\n\n<span style=\"color:#2b91af;\">solve4th</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve4th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile4Matches&nbsp;t1)&nbsp;$&nbsp;rotations&nbsp;t4\n&nbsp;&nbsp;solve5th&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;match,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)\n\n<span style=\"color:#2b91af;\">solve3rd</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve3rd&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile3Matches&nbsp;t2)&nbsp;$&nbsp;rotations&nbsp;t3\n&nbsp;&nbsp;solve4th&nbsp;(t1,&nbsp;t2,&nbsp;match,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)\n\n<span style=\"color:#2b91af;\">solve2nd</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve2nd&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;<span style=\"color:blue;\">filter</span>&nbsp;(tile2Matches&nbsp;t1)&nbsp;$&nbsp;rotations&nbsp;t2\n&nbsp;&nbsp;solve3rd&nbsp;(t1,&nbsp;match,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)</pre>\n    </p>\n    <p>\n        You'll observe that <code>solve7th</code> down to <code>solve2nd</code> are very similar. The only things that really vary are the predicates, and the positions of the tile being examined, as well as its neighbours. Clearly I can generalize this code, but I'm not sure it's worth it. I wrote a few of these in the order I've presented them here, because it helped me think the problem through, and to be honest, once I had two or three of them, <a href=\"https://github.com/features/copilot\">GitHub Copilot</a> picked up on the pattern and wrote the remaining functions for me.\n    </p>\n    <p>\n        Granted, <a href=\"/2018/09/17/typing-is-not-a-programming-bottleneck\">typing isn't a programming bottleneck</a>, so we should rather ask if this kind of duplication looks like a maintenance problem. Given that this is a one-time exercise, I'll just leave it be and move on.\n    </p>\n    <p>\n        Particularly, if you're struggling to understand how this implements the 'truncated search tree', keep in mind that e..g <code>solve5th</code> is likely to produce no valid <code>match</code>, in which case it'll never call <code>solve6th</code>. The same may happen in <code>solve6th</code>, etc.\n    </p>\n    <p>\n        The 'top' function is a bit different because it doesn't need to <code>filter</code> anything:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">solve1st</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;&nbsp;(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">-&gt;</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolve1st&nbsp;(t1,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)&nbsp;=&nbsp;<span style=\"color:blue;\">do</span>\n&nbsp;&nbsp;match&nbsp;&lt;-&nbsp;rotations&nbsp;t1\n&nbsp;&nbsp;solve2nd&nbsp;(match,&nbsp;t2,&nbsp;t3,&nbsp;t4,&nbsp;t5,&nbsp;t6,&nbsp;t7,&nbsp;t8,&nbsp;t9)</pre>\n    </p>\n    <p>\n        In the first position, any tile in any rotation is legal, so <code>solve1st</code> only enumerates all four <code>rotations</code> of <code>t1</code> and calls <code>solve2nd</code> for each.\n    </p>\n    <p>\n        The final step is to compose <code>allPermutations</code> with <code>solve1st</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:#2b91af;\">solutions</span>&nbsp;<span style=\"color:blue;\">::</span>&nbsp;[(<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>,&nbsp;<span style=\"color:blue;\">Tile</span>)]\nsolutions&nbsp;=&nbsp;allPermutations&nbsp;&gt;&gt;=&nbsp;solve1st</pre>\n    </p>\n    <p>\n        Running this in GHCi on my 4½-year old laptop produces all 16 solutions in approximately 22 seconds.\n    </p>\n    <h3 id=\"d3d8c77398334534b5a200a240d7bddc\">\n        Evaluation <a href=\"#d3d8c77398334534b5a200a240d7bddc\">#</a>\n    </h3>\n    <p>\n        Is that good performance? Well, it turns out that it's possible to substantially improve on the situation. As I've mentioned a couple of times, so far I've been running the program from GHCi, the Haskell <a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">REPL</a>. Most of the 22 seconds are spent interpreting or compiling the code.\n    </p>\n    <p>\n        If I compile the code with some optimizations turned on, the executable runs in approximately 300 ms. That seems quite decent, if I may say so.\n    </p>\n    <p>\n        I can think of a few tweaks to the code that might conceivably improve things even more, but when I test, there's no discernable difference. Thus, I'll keep the code as shown here.\n    </p>\n    <p>\n        Here's one of the solutions:\n    </p>\n    <p>\n        <img src=\"/content/binary/hunde-spiel-solution.jpg\" alt=\"One of the game solutions.\">\n    </p>\n    <p>\n        The information on the box claims that there's two solutions. Why does the code shown here produce 16 solutions?\n    </p>\n    <p>\n        There's a good explanation for that. Recall that two of the tiles are identical. In the above solution picture, it's tile 1 and 3, although they're rotated 90° in relation to each other. This implies that you could take tile 1, rotate it counter-clockwise and put it in position 3, while simultaneously taking tile 3, rotating it clockwise, and putting it in position 1. Visually, you can't tell the difference, so they don't count as two distinct solutions. The algorithm, however, doesn't make that distinction, so it enumerates what is effectively the same solution twice.\n    </p>\n    <p>\n        Not surprising, it turns out that all 16 solutions are doublets in that way. We can confirm that by evaluating <code>length $ <a href=\"https://hackage.haskell.org/package/base/docs/Data-List.html#v:nub\">nub</a> solutions</code>, which returns <code>8</code>.\n    </p>\n    <p>\n        Eight solutions are, however, still four times more than two. Can you figure out what's going on?\n    </p>\n    <p>\n        The algorithm also enumerates four rotations of each solution. Once we take this into account, there's only two visually distinct solutions left. One of them is shown above. I also have a picture of the other one, but I'm not going to totally spoil things for you.\n    </p>\n    <h3 id=\"f97500846a6e481ebe1706278f324979\">\n        Conclusion <a href=\"#f97500846a6e481ebe1706278f324979\">#</a>\n    </h3>\n    <p>\n        When I was eight, I might have had the time and the patience to actually lay the puzzle. Despite the incredibly bad odds, I vaguely remember finally solving it. There must be some more holistic processing going on in the brain, if even a kid can solve the puzzle, because it seems inconceivable that it should be done as described here.\n    </p>\n    <p>\n        Today, I don't care for that kind of puzzle in analog form, but I did, on the other hand, find it an interesting programming exercise.\n    </p>\n    <p>\n        The code could be smaller, but I like it as it is. While a bit on the verbose side, I think that it communicates well what's going on.\n    </p>\n    <p>\n        I was pleasantly surprised that I managed to get execution time down to 300 ms. I'd honestly not expected that when I started.\n    </p>\n</div>\n<div id=\"comments\">\n    <hr>\n    <h2 id=\"comments-header\">\n        Comments\n    </h2>\n    <div class=\"comment\" id=\"fa087e5b49ce4a58936ac782cc44561b\">\n        <div class=\"comment-author\"><a href=\"https://github.com/anka-213\">Andreas Källberg</a> <a href=\"#fa087e5b49ce4a58936ac782cc44561b\">#</a></div>\n        <div class=\"comment-content\">\n            <p>\n                Thanks for a nice blog post! I found the challange interesting, so I have written my own version of the code that both tries to be faster and also remove the redundant solutions, so it only generates two solutions in total. The code is available <a href=\"https://github.com/anka-213/haskell_toy_experiments/blob/master/HundeSpiel.hs\">here</a>. It executes in roughly 8 milliseconds both in ghci and compiled (and takes a second to compile and run using runghc) on my laptop.\n            </p>\n            <p>\n                In order to improve the performance, I start with a blank grid and one-by-one add tiles until it is no longer possible to do so, and then bactrack, kind of like how you would do it by hand. As a tiny bonus, that I haven't actually measured if it makes any practical difference, I also selected the order of filling in the grid so that they can constrain each other as much as possible, by filling 2-by-2 squares as early as possible. I have however calculated the number of boards explored in each of the two variations. With a spiral order, 6852 boards are explored, while with a linear order, 9332 boards are explored.\n            </p>\n            <p>\n                In order to eliminate rotational symmetry, I start by filling the center square and fixing its rotation, rather than trying all rotations for it, since we could view any initial rotation of the center square as equivalent to rotating the whole board. In order to eliminate the identical solutions from the two identical tiles, I changed the encoding to use a number next to the tile to say how many copies are left of it, so when we choose a tile, there is only a single way to choose each tile, even if there are multiple copies of it. Both of these would also in theory make the code slightly faster if the time wasn't already dominated by general IO and other unrelated things.\n            </p>\n            <p>\n                I also added various pretty printing and tracing utilites to the code, so you can see exactly how it executes and which partial solutions it explores.\n            </p>\n        </div>\n        <div class=\"comment-date\">2024-10-16 00:32 UTC</div>\n    </div>\n\n    <div class=\"comment\" id=\"984fc5acb2314c79b2f2d7ddfacea285\">\n        <div class=\"comment-author\"><a href=\"/\">Mark Seemann</a> <a href=\"#984fc5acb2314c79b2f2d7ddfacea285\">#</a></div>\n        <div class=\"comment-content\">\n            <p>\n                Thank you for writing. I did try filling the two-by-two square first, as you suggest, but in isolation it makes no discernable difference.\n            </p>\n            <p>\n                I haven't tried your two other optimizations. The one to eliminate rotations should, I guess, reduce the search space to a fourth of mine, unless I'm mistaken. That would reduce my 300 ms to approximately 75 ms.\n            </p>\n            <p>\n                I can't easily guess how much time the other optimization shaves off, but it could be the one that makes the bigger difference.\n            </p>\n        </div>\n        <div class=\"comment-date\">2024-10-19 08:21 UTC</div>\n    </div>\n</div>\n<hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "A puzzle kata, and a possible solution.\n    \n    \n        When I was a boy I had a nine-piece puzzle that I'd been gifted by the Swizz branch of my family. It's called Das verflixte Hunde-Spiel, which means something like the confounded dog game in English. And while a puzzle with nine pieces doesn't sound like much, it is, in fact, incredibly difficult.\n    \n    \n        It's just a specific incarnation of a kind of game that you've almost certainly encountered, too.\n    \n    \n        \n    \n    \n        There are nine tiles, each with two dog heads and two dog ends. A dog may be coloured in one of four different patterns. The object of the game is to lay out the nine tiles in a 3x3 square so that all dog halves line up.\n    \n    \n        Game details #\n    \n    \n        The game is from 1979. Two of the tiles are identical, and, according to the information on the back of the box, two possible solutions exist. Described from top clockwise, the tiles are the following:\n    \n    \n        Brown head, grey head, umber tail, spotted tail\n        Brown head, spotted head, brown tail, umber tail\n        Brown head, spotted head, grey tail, umber tail\n        Brown head, spotted head, grey tail, umber tail\n        Brown head, umber head, spotted tail, grey tail\n        Grey head, brown head, spotted tail, umber tail\n        Grey head, spotted head, brown tail, umber tail\n        Grey head, umber head, brown tail, spotted tail\n        Grey head, umber head, grey tail, spotted tail\n    \n    \n        I've taken the liberty of using a shorthand for the patterns. The grey dogs are actually also spotted, but since there's only one grey pattern, the grey label is unambiguous. The dogs I've named umber are actually rather burnt umber, but that's too verbose for my tastes, so I just named them umber. Finally, the label spotted indicates dogs that are actually burnt umber with brown blotches.\n    \n    \n        Notice that there are two tiles with a brown head, a spotted head, a grey tail, and an umber tail.\n    \n    \n        The object of the game is to lay down the tiles in a 3x3 square so that all dogs fit. For further reference, I've numbered each position from one to nine like this:\n    \n    \n        \n    \n    \n        What makes the game hard? There are nine cards, so if you start with the upper left corner, you have nine choices. If you just randomly put down the tiles, you now have eight left for the top middle position, and so on. Standard combinatorics indicate that there are at least 9! = 362,880 permutations.\n    \n    \n        That's not the whole story, however, since you can rotate each tile in four different ways. You can rotate the first tile four ways, the second tile four ways, etc. for a total of 49 = 262,144 ways. Multiply these two numbers together, and you get 499! = 95,126,814,720 combinations. No wonder this puzzle is hard if there's only two solutions.\n    \n    \n        When analysed this way, however, there are actually 16 solutions, but that still makes it incredibly unlikely to arrive at a solution by chance. I'll get back to why there are 16 solutions later. For now, you should have enough information to try your hand with this game, if you'd like.\n    \n    \n        I found that the game made for an interesting kata: Write a program that finds all possible solutions to the puzzle.\n    \n    \n        If you'd like to try your hand at this exercise, I suggest that you pause reading here.\n    \n    \n        In the rest of the article, I'll outline my first attempt. Spoiler alert: I'll also show one of the solutions.\n    \n    \n        Types #\n    \n    \n        When you program in Haskell, it's natural to start by defining some types.\n    \n    \n        data Half = Head | Tail deriving (Show, Eq)\n\ndata Pattern = Brown | Grey | Spotted | Umber deriving (Show, Eq)\n\ndata Tile = Tile {\n  top :: (Pattern, Half),\n  right :: (Pattern, Half),\n  bottom :: (Pattern, Half),\n  left :: (Pattern, Half) }\n  deriving (Show, Eq)\n    \n    \n        Each tile describes what you find on its top, right side, bottom, and left side.\n    \n    \n        We're also going to need a function to evaluate whether two halves match:\n    \n    \n        matches :: (Pattern, Half) -> (Pattern, Half) -> Bool\nmatches (p1, h1) (p2, h2) = p1 == p2 && h1 /= h2\n    \n    \n        This function demands that the patterns match, but that the halves are opposites.\n    \n    \n        You can use the Tile type and its constituents to define the nine tiles of the game:\n    \n    \n        tiles :: [Tile]\ntiles =\n  [\n    Tile (Brown, Head) (Grey, Head) (Umber, Tail) (Spotted, Tail),\n    Tile (Brown, Head) (Spotted, Head) (Brown, Tail) (Umber, Tail),\n    Tile (Brown, Head) (Spotted, Head) (Grey, Tail) (Umber, Tail),\n    Tile (Brown, Head) (Spotted, Head) (Grey, Tail) (Umber, Tail),\n    Tile (Brown, Head) (Umber, Head) (Spotted, Tail) (Grey, Tail),\n    Tile (Grey, Head) (Brown, Head) (Spotted, Tail) (Umber, Tail),\n    Tile (Grey, Head) (Spotted, Head) (Brown, Tail) (Umber, Tail),\n    Tile (Grey, Head) (Umber, Head) (Brown, Tail) (Spotted, Tail),\n    Tile (Grey, Head) (Umber, Head) (Grey, Tail) (Spotted, Tail)\n  ]\n    \n    \n        Because I'm the neatnik that I am, I've sorted the tiles in lexicographic order, but the solution below doesn't rely on that.\n    \n    \n        Brute force doesn't work #\n    \n    \n        Before I started, I cast around the internet to see if there was an appropriate algorithm for the problem. While I found a few answers on Stack Overflow, none of them gave me indication that any sophisticated algorithm was available. (Even so, there may be, and I just didn't find it.)\n    \n    \n        It seems clear, however, that you can implement some kind of recursive search-tree algorithm that cuts a branch off as soon as it realizes that it doesn't work. I'll get back to that later, so let's leave that for now.\n    \n    \n        Since I'd planned on writing the code in Haskell, I decided to first try something that might look like brute force. Because Haskell is lazily evaluated, you can sometimes get away with techniques that look wasteful when you're used to strict/eager evaluation. In this case, it turned out to not work, but it's often quicker to just make the attempt than trying to analyze the problem.\n    \n    \n        As already outlined, I first attempted a purely brute-force solution, betting that Haskell's lazy evaluation would be enough to skip over the unnecessary calculations:\n    \n    \n        allRotationsOf9 = replicateM 9 [0..3]\n\nallRotations :: [Tile] -> [[Tile]]\nallRotations ts = fmap (\\rs -> (\\(r, t) -> rotations t !! r) <$> zip rs ts) allRotationsOf9\n\nallConfigurations :: [[Tile]]\nallConfigurations = permutations tiles >>= allRotations\n\nsolutions = filter isSolution allConfigurations\n    \n    \n        My idea with the allConfigurations value was that it's supposed to enumerate all 95 billion combinations. Whether it actually does that, I was never able to verify, because if I try to run that code, my poor laptop runs for a couple of hours before it eventually runs out of memory. In other words, the GHCi process crashes.\n    \n    \n        I haven't shown isSolution or rotations, because I consider the implementations irrelevant. This attempt doesn't work anyway.\n    \n    \n        Now that I look at it, it's quite clear why this isn't a good strategy. There's little to be gained from lazy evaluation when the final attempt just attempts to filter a list. Even with lazy evaluation, the code still has to run through all 95 billion combinations.\n    \n    \n        Things might have been different if I just had to find one solution. With a little luck, it might be that the first solution appears after, say, a hundred million iterations, and lazy evaluation would then had meant that the remaining combinations would never run. Not so here, but hindsight is 20-20.\n    \n    \n        Search tree #\n    \n    \n        Back to the search tree idea. It goes like this: Start from the top left position and pick a random tile and rotation. Now pick an arbitrary tile that fits and place it to the right of it, and so on. As far as I can tell, you can always place the first four cards, but from there, you can easily encounter a combination that allows no further tiles. Here's an example:\n    \n    \n        \n    \n    \n        None of the remaining five tiles fit in the fifth position. This means that we don't have to do any permutations that involve these four tiles in that combination. While the algorithm has to search through all five remaining tiles and rotations to discover that none fit in position 5, once it knows that, it doesn't have to go through the remaining four positions. That's 444! = 6,144 combinations that it can skip every time it discovers an impossible beginning. That doesn't sound like that much, but if we assume that this happens more often than not, it's still an improvement by orders of magnitude.\n    \n    \n        We may think of this algorithm as constructing a search tree, but immediately pruning all branches that aren't viable, as close to the root as possible.\n    \n    \n        Matches #\n    \n    \n        Before we get to the algorithm proper we need a few simple helper functions. One kind of function is a predicate that determines if a particular tile can occupy a given position. Since we may place any tile in any rotation in the first position, we don't need to write a predicate for that, but if we wanted to generalize, const True would do.\n    \n    \n        Whether or not we can place a given tile in the second position depends exclusively on the tile in the first position:\n    \n    \n        tile2Matches :: Tile -> Tile -> Bool\ntile2Matches t1 t2 = right t1 `matches` left t2\n    \n    \n        If the right dog part of the first tile matches the left part of the second tile, the return value is True; otherwise, it's False. Note that I'm using infix notation for matches. I could also have written the function as\n    \n    \n        tile2Matches :: Tile -> Tile -> Bool\ntile2Matches t1 t2 = matches (right t1) (left t2)\n    \n    \n        but it doesn't read as well.\n    \n    \n        In any case, the corresponding matching functions for the third and forth tile look similar:\n    \n    \n        tile3Matches :: Tile -> Tile -> Bool\ntile3Matches t2 t3 = right t2 `matches` left t3\n\ntile4Matches :: Tile -> Tile -> Bool\ntile4Matches t1 t4 = bottom t1 `matches` top t4\n    \n    \n        Notice that tile4Matches compares the fourth tile with the first tile rather than the third tile, because position 4 is directly beneath position 1, rather than to the right of position 3 (cf. the grid above). For that reason it also compares the bottom of tile 1 to the top of the fourth tile.\n    \n    \n        The matcher for the fifth tile is different:\n    \n    \n        tile5Matches :: Tile -> Tile -> Tile -> Bool\ntile5Matches t2 t4 t5 = bottom t2 `matches` top t5 && right t4 `matches` left t5\n    \n    \n        This is the first predicate that depends on two, rather than one, previous tiles. In position 5 we need to examine both the tile in position 2 and the one in position 4.\n    \n    \n        The same is true for position 6:\n    \n    \n        tile6Matches :: Tile -> Tile -> Tile -> Bool\ntile6Matches t3 t5 t6 = bottom t3 `matches` top t6 && right t5 `matches` left t6\n    \n    \n        but then the matcher for position 7 looks like the predicate for position 4:\n    \n    \n        tile7Matches :: Tile -> Tile -> Bool\ntile7Matches t4 t7 = bottom t4 `matches` top t7\n    \n    \n        This is, of course, because the tile in position 7 only has to consider the tile in position 4. Finally, not surprising, the two remaining predicates look like something we've already seen:\n    \n    \n        tile8Matches :: Tile -> Tile -> Tile -> Bool\ntile8Matches t5 t7 t8 = bottom t5 `matches` top t8 && right t7 `matches` left t8\n\ntile9Matches :: Tile -> Tile -> Tile -> Bool\ntile9Matches t6 t8 t9 = bottom t6 `matches` top t9 && right t8 `matches` left t9\n    \n    \n        You may suggest that it'd be possible to reduce the number of predicates. After all, there's effectively only three different predicates: One that only looks at the tile to the left, one that only looks at the tile above, and one that looks both to the left and above.\n    \n    \n        Indeed, I could have boiled it down to just three functions:\n    \n    \n        matchesHorizontally :: Tile -> Tile -> Bool\nmatchesHorizontally x y = right x `matches` left y\n\nmatchesVertically :: Tile -> Tile -> Bool\nmatchesVertically x y = bottom x `matches` top y\n\nmatchesBoth :: Tile -> Tile -> Tile -> Bool\nmatchesBoth x y z = matchesVertically x z && matchesHorizontally y z\n    \n    \n        but I now run the risk of calling the wrong predicate from my implementation of the algorithm. As you'll see, I'll call each predicate by name at each appropriate step, but if I had only these three functions, there's a risk that I might mistakenly use matchesHorizontally when I should have used matchesVertically, or vice versa. Reducing eight one-liners to three one-liners doesn't really seem to warrant the risk.\n    \n    \n        Rotations #\n    \n    \n        In addition to examining whether a given tile fits in a given position, we also need to be able to rotate any tile:\n    \n    \n        rotateClockwise :: Tile -> Tile\nrotateClockwise (Tile t r b l) = Tile l t r b\n\nrotateCounterClockwise :: Tile -> Tile\nrotateCounterClockwise (Tile t r b l) = Tile r b l t\n\nupend :: Tile -> Tile\nupend (Tile t r b l) = Tile b l t r\n    \n    \n        What is really needed, it turns out, is to enumerate all four rotations of a tile:\n    \n    \n        rotations :: Tile -> [Tile]\nrotations t = [t, rotateClockwise t, upend t, rotateCounterClockwise t]\n    \n    \n        Since this, like everything else here, is a pure function, I experimented with defining a 'memoized tile' type that embedded all four rotations upon creation, so that the algorithm doesn't need to call the rotations function millions of times, but I couldn't measure any discernable performance improvement from it. There's no reason to make things more complicated than they need to be, so I didn't keep that change. (Since I do, however, use Git tactically i did, of course, stash the experiment.)\n    \n    \n        Permutations #\n    \n    \n        While I couldn't make things work by enumerating all 95 billion combinations, enumerating all 362,880 permutations of non-rotated tiles is well within the realm of the possible:\n    \n    \n        allPermutations :: [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nallPermutations =\n  (\\[t1, t2, t3, t4, t5, t6, t7, t8, t9] -> (t1, t2, t3, t4, t5, t6, t7, t8, t9))\n  <$> permutations tiles\n    \n    \n        Doing this in GHCi on my old laptop takes 300 milliseconds, which is good enough compared to what comes next.\n    \n    \n        This list value uses permutations to enumerate all the permutations. You may already have noticed that it converts the result into a nine-tuple. The reason for that is that this enables the algorithm to pattern-match into specific positions without having to resort to the index operator, which is both partial and requires iteration of the list to reach the indexed element. Granted, the list is only nine elements long, and often the algorithm will only need to index to the fourth or fifth element. On the other hand, it's going to do it a lot. Perhaps it's a premature optimization, but if it is, it's at least one that makes the code more, rather than less, readable.\n    \n    \n        Algorithm #\n    \n    \n        I found it easiest to begin at the 'bottom' of what is effectively a recursive algorithm, even though I didn't implement it that way. At the 'bottom', I imagine that I'm almost done: That I've found eight tiles that match, and now I only need to examine if I can rotate the final tile so that it matches:\n    \n    \n        solve9th ::  (a, b, c, d, e, Tile, g, Tile, Tile)\n         -> [(a, b, c, d, e, Tile, g, Tile, Tile)]\nsolve9th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile9Matches t6 t8) $ rotations t9\n  return (t1, t2, t3, t4, t5, t6, t7, t8, match)\n    \n    \n        Recalling that Haskell functions compose from right to left, the function starts by enumerating the four rotations of the ninth and final tile t9. It then filters those four rotations by the tile9Matches predicate.\n    \n    \n        The match value is a rotation of t9 that matches t6 and t8. Whenever solve9th finds such a match, it returns the entire nine-tuple, because the assumption is that the eight first tiles are already valid.\n    \n    \n        Notice that the function uses do notation in the list monad, so it's quite possible that the first filter expression produces no match. In that case, the second line of code never runs, and instead, the function returns the empty list.\n    \n    \n        How do we find a tuple where the first eight elements are valid? Well, if we have seven valid tiles, we may consider the eighth and subsequently call solve9th:\n    \n    \n        solve8th ::  (a, b, c, d, Tile, Tile, Tile, Tile, Tile)\n         -> [(a, b, c, d, Tile, Tile, Tile, Tile, Tile)]\nsolve8th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile8Matches t5 t7) $ rotations t8\n  solve9th (t1, t2, t3, t4, t5, t6, t7, match, t9)\n    \n    \n        This function looks a lot like solve9th, but it instead enumerates the four rotations of the eighth tile t8 and filters with the tile8Matches predicate. Due to the do notation, it'll only call solve9th if it finds a match.\n    \n    \n        Once more, this function assumes that the first seven tiles are already in a legal constellation. How do we find seven valid tiles? The same way we find eight: By assuming that we have six valid tiles, and then finding the seventh, and so on:\n    \n    \n        solve7th ::  (a, b, c, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(a, b, c, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve7th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile7Matches t4) $ rotations t7\n  solve8th (t1, t2, t3, t4, t5, t6, match, t8, t9)\n\nsolve6th ::  (a, b, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(a, b, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve6th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile6Matches t3 t5) $ rotations t6\n  solve7th (t1, t2, t3, t4, t5, match, t7, t8, t9)\n\nsolve5th ::  (a, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(a, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve5th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile5Matches t2 t4) $ rotations t5\n  solve6th (t1, t2, t3, t4, match, t6, t7, t8, t9)\n\nsolve4th ::  (Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve4th (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile4Matches t1) $ rotations t4\n  solve5th (t1, t2, t3, match, t5, t6, t7, t8, t9)\n\nsolve3rd ::  (Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve3rd (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile3Matches t2) $ rotations t3\n  solve4th (t1, t2, match, t4, t5, t6, t7, t8, t9)\n\nsolve2nd ::  (Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve2nd (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- filter (tile2Matches t1) $ rotations t2\n  solve3rd (t1, match, t3, t4, t5, t6, t7, t8, t9)\n    \n    \n        You'll observe that solve7th down to solve2nd are very similar. The only things that really vary are the predicates, and the positions of the tile being examined, as well as its neighbours. Clearly I can generalize this code, but I'm not sure it's worth it. I wrote a few of these in the order I've presented them here, because it helped me think the problem through, and to be honest, once I had two or three of them, GitHub Copilot picked up on the pattern and wrote the remaining functions for me.\n    \n    \n        Granted, typing isn't a programming bottleneck, so we should rather ask if this kind of duplication looks like a maintenance problem. Given that this is a one-time exercise, I'll just leave it be and move on.\n    \n    \n        Particularly, if you're struggling to understand how this implements the 'truncated search tree', keep in mind that e..g solve5th is likely to produce no valid match, in which case it'll never call solve6th. The same may happen in solve6th, etc.\n    \n    \n        The 'top' function is a bit different because it doesn't need to filter anything:\n    \n    \n        solve1st ::  (Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)\n         -> [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolve1st (t1, t2, t3, t4, t5, t6, t7, t8, t9) = do\n  match <- rotations t1\n  solve2nd (match, t2, t3, t4, t5, t6, t7, t8, t9)\n    \n    \n        In the first position, any tile in any rotation is legal, so solve1st only enumerates all four rotations of t1 and calls solve2nd for each.\n    \n    \n        The final step is to compose allPermutations with solve1st:\n    \n    \n        solutions :: [(Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile, Tile)]\nsolutions = allPermutations >>= solve1st\n    \n    \n        Running this in GHCi on my 4½-year old laptop produces all 16 solutions in approximately 22 seconds.\n    \n    \n        Evaluation #\n    \n    \n        Is that good performance? Well, it turns out that it's possible to substantially improve on the situation. As I've mentioned a couple of times, so far I've been running the program from GHCi, the Haskell REPL. Most of the 22 seconds are spent interpreting or compiling the code.\n    \n    \n        If I compile the code with some optimizations turned on, the executable runs in approximately 300 ms. That seems quite decent, if I may say so.\n    \n    \n        I can think of a few tweaks to the code that might conceivably improve things even more, but when I test, there's no discernable difference. Thus, I'll keep the code as shown here.\n    \n    \n        Here's one of the solutions:\n    \n    \n        \n    \n    \n        The information on the box claims that there's two solutions. Why does the code shown here produce 16 solutions?\n    \n    \n        There's a good explanation for that. Recall that two of the tiles are identical. In the above solution picture, it's tile 1 and 3, although they're rotated 90° in relation to each other. This implies that you could take tile 1, rotate it counter-clockwise and put it in position 3, while simultaneously taking tile 3, rotating it clockwise, and putting it in position 1. Visually, you can't tell the difference, so they don't count as two distinct solutions. The algorithm, however, doesn't make that distinction, so it enumerates what is effectively the same solution twice.\n    \n    \n        Not surprising, it turns out that all 16 solutions are doublets in that way. We can confirm that by evaluating length $ nub solutions, which returns 8.\n    \n    \n        Eight solutions are, however, still four times more than two. Can you figure out what's going on?\n    \n    \n        The algorithm also enumerates four rotations of each solution. Once we take this into account, there's only two visually distinct solutions left. One of them is shown above. I also have a picture of the other one, but I'm not going to totally spoil things for you.\n    \n    \n        Conclusion #\n    \n    \n        When I was eight, I might have had the time and the patience to actually lay the puzzle. Despite the incredibly bad odds, I vaguely remember finally solving it. There must be some more holistic processing going on in the brain, if even a kid can solve the puzzle, because it seems inconceivable that it should be done as described here.\n    \n    \n        Today, I don't care for that kind of puzzle in analog form, but I did, on the other hand, find it an interesting programming exercise.\n    \n    \n        The code could be smaller, but I like it as it is. While a bit on the verbose side, I think that it communicates well what's going on.\n    \n    \n        I was pleasantly surprised that I managed to get execution time down to 300 ms. I'd honestly not expected that when I started.\n    \n\n\n    \n    \n        Comments\n    \n    \n        Andreas Källberg #\n        \n            \n                Thanks for a nice blog post! I found the challange interesting, so I have written my own version of the code that both tries to be faster and also remove the redundant solutions, so it only generates two solutions in total. The code is available here. It executes in roughly 8 milliseconds both in ghci and compiled (and takes a second to compile and run using runghc) on my laptop.\n            \n            \n                In order to improve the performance, I start with a blank grid and one-by-one add tiles until it is no longer possible to do so, and then bactrack, kind of like how you would do it by hand. As a tiny bonus, that I haven't actually measured if it makes any practical difference, I also selected the order of filling in the grid so that they can constrain each other as much as possible, by filling 2-by-2 squares as early as possible. I have however calculated the number of boards explored in each of the two variations. With a spiral order, 6852 boards are explored, while with a linear order, 9332 boards are explored.\n            \n            \n                In order to eliminate rotational symmetry, I start by filling the center square and fixing its rotation, rather than trying all rotations for it, since we could view any initial rotation of the center square as equivalent to rotating the whole board. In order to eliminate the identical solutions from the two identical tiles, I changed the encoding to use a number next to the tile to say how many copies are left of it, so when we choose a tile, there is only a single way to choose each tile, even if there are multiple copies of it. Both of these would also in theory make the code slightly faster if the time wasn't already dominated by general IO and other unrelated things.\n            \n            \n                I also added various pretty printing and tracing utilites to the code, so you can see exactly how it executes and which partial solutions it explores.\n            \n        \n        2024-10-16 00:32 UTC\n    \n\n    \n        Mark Seemann #\n        \n            \n                Thank you for writing. I did try filling the two-by-two square first, as you suggest, but in isolation it makes no discernable difference.\n            \n            \n                I haven't tried your two other optimizations. The one to eliminate rotations should, I guess, reduce the search space to a fourth of mine, unless I'm mistaken. That would reduce my 300 ms to approximately 75 ms.\n            \n            \n                I can't easily guess how much time the other optimization shaves off, but it could be the one that makes the bigger difference.\n            \n        \n        2024-10-19 08:21 UTC\n    \n\n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/09/23/fszipper-in-c",
    "raw": "\n\n\n<div id=\"post\">\n    <p>\n        <em>Another functional model of a file system, with code examples in C#.</em>\n    </p>\n    <p>\n        This article is part of <a href=\"/2024/08/19/zippers\">a series about Zippers</a>. In this one, I port the <code>FSZipper</code> data structure from the <a href=\"https://learnyouahaskell.com/\">Learn You a Haskell for Great Good!</a> article <a href=\"https://learnyouahaskell.com/zippers\">Zippers</a>.\n    </p>\n    <p>\n        A word of warning: I'm assuming that you're familiar with the contents of that article, so I'll skip the pedagogical explanations; I can hardly do it better that it's done there. Additionally, I'll make heavy use of certain standard constructs to port <a href=\"https://www.haskell.org/\">Haskell</a> code, most notably <a href=\"/2018/05/22/church-encoding\">Church encoding</a> to model <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">sum types</a> in languages that don't natively have them. Such as C#. In some cases, I'll implement the Church encoding using the data structure's <a href=\"/2019/04/29/catamorphisms\">catamorphism</a>. Since the <a href=\"https://en.wikipedia.org/wiki/Cyclomatic_complexity\">cyclomatic complexity</a> of the resulting code is quite low, you may be able to follow what's going on even if you don't know what Church encoding or catamorphisms are, but if you want to understand the background and motivation for that style of programming, you can consult the cited resources.\n    </p>\n    <p>\n        The code shown in this article is <a href=\"https://github.com/ploeh/CSharpZippers\">available on GitHub</a>.\n    </p>\n    <h3 id=\"dd4cbc996cfa4347afa4b9279c95f6e1\">\n        File system item initialization and structure <a href=\"#dd4cbc996cfa4347afa4b9279c95f6e1\">#</a>\n    </h3>\n    <p>\n        If you haven't already noticed, Haskell (and other statically typed functional programming languages like <a href=\"https://fsharp.org/\">F#</a>) makes heavy use of <a href=\"https://en.wikipedia.org/wiki/Tagged_union\">sum types</a>, and the <code>FSZipper</code> example is no exception. It starts with a one-liner to define a file system item, which may be either a file or a folder. In C# we must instead use a class:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span></pre>\n    </p>\n    <p>\n        Contrary to the two previous examples, the <code>FSItem</code> class has no generic type parameter. This is because I'm following the Haskell example code as closely as possible, but as I've previously shown, you can <a href=\"/2019/08/26/functional-file-system\">model a file hierarchy with a general-purpose rose tree</a>.\n    </p>\n    <p>\n        Staying consistent with the two previous articles, I'll use Church encoding to model a sum type, and as discussed in <a href=\"/2024/09/09/a-binary-tree-zipper-in-c\">the previous article</a> I use a <code>private</code> implementation for that.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">IFSItem</span>&nbsp;imp;\n \n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span>(<span style=\"color:#2b91af;\">IFSItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">imp</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.imp&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">imp</span>;\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span>&nbsp;<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">data</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">File</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">data</span>));\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span>&nbsp;<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Folder</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>));\n}</pre>\n    </p>\n    <p>\n        Two <code>static</code> creation methods enable client developers to create a single <code>FSItem</code> object, or an entire tree, like the example from the Haskell code, here ported to C#:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span>&nbsp;myDisk&nbsp;=\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;root&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;goat_yelling_like_man.wmv&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;baaaaaa&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;pope_time.avi&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;god&nbsp;bless&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;ape_throwing_up.jpg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;bleargh&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;watermelon_smash.gif&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;smash!!&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Yikes!&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;dijon_poupon.doc&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;best&nbsp;mustard&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;programs&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;fartwizard.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;10gotofart&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;owl_bandit.dmg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;mov&nbsp;eax,&nbsp;h00t&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;not_a_virus.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;really&nbsp;not&nbsp;a&nbsp;virus&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;source&nbsp;code&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;best_hs_prog.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;(fix&nbsp;error)&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;random.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;4&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;]);</pre>\n    </p>\n    <p>\n        Since the <code>imp</code> class field is just a <code>private</code> implementation detail, a client developer needs a way to query an <code>FSItem</code> object about its contents.\n    </p>\n    <h3 id=\"246063d761a94eb880a079f1d31b817d\">\n        File system item catamorphism <a href=\"#246063d761a94eb880a079f1d31b817d\">#</a>\n    </h3>\n    <p>\n        Just like the previous article, I'll start with the catamorphism. This is essentially the <a href=\"/2019/08/05/rose-tree-catamorphism\">rose tree catamorphism</a>, just less generic, since <code>FSItem</code> doesn't have a generic type parameter.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;imp.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>);\n}</pre>\n    </p>\n    <p>\n        The <code>Aggregate</code> method delegates to its internal implementation class field, which is defined as the <code>private</code> nested interface <code>IFSItem</code>:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">interface</span>&nbsp;<span style=\"color:#2b91af;\">IFSItem</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>);\n}</pre>\n    </p>\n    <p>\n        As discussed in the previous article, the interface is hidden away because it's only a vehicle for polymorphism. It's not intended for client developers to be used (although that would be benign) or implemented (which could break <a href=\"/encapsulation-and-solid\">encapsulation</a>). There are only, and should ever only be, two implementations. The one that represents a file is the simplest:\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">record</span>&nbsp;<span style=\"color:#2b91af;\">File</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Name</span>,&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Data</span>)&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IFSItem</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>(Name,&nbsp;Data);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The <code>File</code> record's <code>Aggregate</code> method unconditionally calls the supplied <code>whenFile</code> function argument with the <code>Name</code> and <code>Data</code> that was originally supplied via its constructor.\n    </p>\n    <p>\n        The <code>Folder</code> implementation is a bit trickier, mostly due to its recursive nature, but also because I wanted it to have structural equality.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Folder</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IFSItem</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;name;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;items;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Folder</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Name</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Items</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Name</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">Items</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>.<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>)).<span style=\"font-weight:bold;color:#74531f;\">ToList</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Equals</span>(<span style=\"color:blue;\">object</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">Folder</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">folder</span>&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;==&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">folder</span>.name&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items.<span style=\"font-weight:bold;color:#74531f;\">SequenceEqual</span>(<span style=\"font-weight:bold;color:#1f377f;\">folder</span>.items);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetHashCode</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">HashCode</span>.<span style=\"color:#74531f;\">Combine</span>(name,&nbsp;items);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        It, too, unconditionally calls one of the two functions passed to its <code>Aggregate</code> method, but this time <code>whenFolder</code>. It does that, however, by first <em>recursively</em> calling <code>Aggregate</code> within a <code>Select</code> expression. It needs to do that because the <code>whenFolder</code> function expects the subtree to have been already converted to values of the <code>TResult</code> return type. This is a common pattern with catamorphisms, and takes a bit of time getting used to. You can see similar examples in the articles <a href=\"/2019/06/10/tree-catamorphism\">Tree catamorphism</a>, <a href=\"/2019/08/05/rose-tree-catamorphism\">Rose tree catamorphism</a>, <a href=\"/2019/06/24/full-binary-tree-catamorphism\">Full binary tree catamorphism</a>, as well as the previous one in this series.\n    </p>\n    <p>\n        I also had to make <code>Folder</code> a <code>class</code> rather than a <a href=\"https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/record\">record</a>, because I wanted the type to have structural equality, and you can't override <a href=\"https://learn.microsoft.com/dotnet/api/system.object.equals\">Equals</a> on records (and if the base class library has any collection type with structural equality, I'm not aware of it).\n    </p>\n    <h3 id=\"761c6a5ede2b4df68985e61f6664822f\">\n        File system item Church encoding <a href=\"#761c6a5ede2b4df68985e61f6664822f\">#</a>\n    </h3>\n    <p>\n        True to the structure of the previous article, the catamorphism doesn't look quite like a Church encoding, but it's possible to define the latter from the former.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">TResult</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Aggregate</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>:&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">data</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(item:&nbsp;<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">data</span>),&nbsp;result:&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">data</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>:&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">pairs</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">pairs</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>.item).<span style=\"font-weight:bold;color:#74531f;\">ToList</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;(<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>),&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}).result;\n}</pre>\n    </p>\n    <p>\n        The trick is the same as in the previous article: Build up an intermediate tuple that contains both the current <code>item</code> as well as the <code>result</code> being accumulated. Once the <code>Aggregate</code> method returns, the <code>Match</code> method returns only the <code>result</code> part of the resulting tuple.\n    </p>\n    <p>\n        I implemented the <code>whenFolder</code> expression as a code block, because both tuple elements needed the <code>items</code> collection. You can inline the <code>Select</code> expression, but that would cause it to run twice. That's probably a premature optimization, but it also made the code a bit shorter, and, one may hope, a bit more readable.\n    </p>\n    <h3 id=\"c2ffdb1994bc400d99f359ecf4edb312\">\n        Fily system breadcrumb <a href=\"#c2ffdb1994bc400d99f359ecf4edb312\">#</a>\n    </h3>\n    <p>\n        Finally, things seem to be becoming a little easier. The port of <code>FSCrumb</code> is straightforward.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FSCrumb</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSCrumb</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Left&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">left</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">right</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Name&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;Left&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;&nbsp;Right&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Equals</span>(<span style=\"color:blue;\">object</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">obj</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FSCrumb</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">crumb</span>&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;==&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">crumb</span>.Name&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Left.<span style=\"font-weight:bold;color:#74531f;\">SequenceEqual</span>(<span style=\"font-weight:bold;color:#1f377f;\">crumb</span>.Left)&nbsp;&amp;&amp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Right.<span style=\"font-weight:bold;color:#74531f;\">SequenceEqual</span>(<span style=\"font-weight:bold;color:#1f377f;\">crumb</span>.Right);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GetHashCode</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#2b91af;\">HashCode</span>.<span style=\"color:#74531f;\">Combine</span>(Name,&nbsp;Left,&nbsp;Right);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}</pre>\n    </p>\n    <p>\n        The only reason this isn't a <code>record</code> is, once again, that I want to override <code>Equals</code> so that the type can have structural equality. <a href=\"https://visualstudio.microsoft.com/\">Visual Studio</a> wants me to convert to a <a href=\"https://learn.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/instance-constructors\">primary constructor</a>. That would simplify the code a bit, but actually not that much.\n    </p>\n    <p>\n        (I'm still somewhat conservative in my choice of new C# language features. Not that I have anything against primary constructors which, after all, F# has had forever. The reason I'm holding back is for didactic reasons. Not every reader is on the latest language version, and some readers may be using another programming language entirely. On the other hand, primary constructors seem natural and intuitive, so I may start using them here on the blog as well. I don't think that they're going to be much of a barrier to understanding.)\n    </p>\n    <p>\n        Now that we have both the data type we want to zip, as well as the breadcrumb type we need, we can proceed to add the Zipper.\n    </p>\n    <h3 id=\"bb452627a3c3420a95a412dd33ad0efa\">\n        File system Zipper <a href=\"#bb452627a3c3420a95a412dd33ad0efa\">#</a>\n    </h3>\n    <p>\n        The <code>FSZipper</code> C# class fills the position of the eponymous Haskell type alias. Data structure and initialization is straightforward.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(<span style=\"color:#2b91af;\">FSItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fSItem</span>,&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSCrumb</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">breadcrumbs</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FSItem&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fSItem</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">breadcrumbs</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(<span style=\"color:#2b91af;\">FSItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fSItem</span>)&nbsp;:&nbsp;<span style=\"color:blue;\">this</span>(<span style=\"font-weight:bold;color:#1f377f;\">fSItem</span>,&nbsp;[])\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSItem</span>&nbsp;FSItem&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">FSCrumb</span>&gt;&nbsp;Breadcrumbs&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Methods&nbsp;follow&nbsp;here...</span></pre>\n    </p>\n    <p>\n        True to the style I've already established, I've made the master constructor <code>private</code> in order to highlight that the <code>Breadcrumbs</code> are the responsibility of the <code>FSZipper</code> class itself. It's not something client code need worry about.\n    </p>\n    <h3 id=\"5dd35bee62764a3fb455c406f1a63754\">\n        Going down <a href=\"#5dd35bee62764a3fb455c406f1a63754\">#</a>\n    </h3>\n    <p>\n        The Haskell Zippers article introduces <code>fsUp</code> before <code>fsTo</code>, but if we want to see some example code, we need to navigate <em>to</em> somewhere before we can navigate up. Thus, I'll instead start with the function that navigates to a child node.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>?&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;FSItem.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">_</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">_</span>)&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">null</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">folderName</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>?&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ls</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rs</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">FSItem</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">in</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>&nbsp;&amp;&amp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>.<span style=\"font-weight:bold;color:#74531f;\">IsNamed</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">i</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">else</span>&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ls</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rs</span>.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"font-weight:bold;color:#1f377f;\">i</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">item</span>&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Prepend</span>(<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSCrumb</span>(<span style=\"font-weight:bold;color:#1f377f;\">folderName</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">ls</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">rs</span>)).<span style=\"font-weight:bold;color:#74531f;\">ToList</span>());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n}</pre>\n    </p>\n    <p>\n        This is by far the most complicated navigation we've seen so far, and I've even taken the liberty of writing an imperative implementation. It's not that I don't know how I could implement it in a purely functional fashion, but I've chosen this implementation for a couple of reasons. The first of which is that, frankly, it was easier this way.\n    </p>\n    <p>\n        This stems from the second reason: That the .NET base class library, as far as I know, offers no functionality like Haskell's <a href=\"https://hackage.haskell.org/package/base/docs/Data-List.html#v:break\">break</a> function. I could have written such a function myself, but felt that it was too much of a digression, even for me. Maybe I'll do that another day. It might make for <a href=\"/2020/01/13/on-doing-katas\">a nice little exercise</a>.\n    </p>\n    <p>\n        The third reason is that <a href=\"/2011/10/11/CheckingforexactlyoneiteminasequenceusingCandF\">C# doesn't afford pattern matching on sequences</a>, in the shape of destructuring the head and the tail of a list. (Not that I know of, anyway, but that language changes rapidly at the moment, and it does have <em>some</em> pattern-matching features now.) This means that I have to check <code>item</code> for <code>null</code> anyway.\n    </p>\n    <p>\n        In any case, while the implementation is imperative, an external caller can't tell. The <code>GoTo</code> method is still <a href=\"https://en.wikipedia.org/wiki/Referential_transparency\">referentially transparent</a>. Which means that <a href=\"/2021/07/28/referential-transparency-fits-in-your-head\">it fits in your head</a>.\n    </p>\n    <p>\n        You may have noticed that the implementation calls <code>IsNamed</code>, which is also new.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">IsNamed</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Match</span>((<span style=\"font-weight:bold;color:#1f377f;\">n</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">_</span>)&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;==&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">n</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">_</span>)&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">n</span>&nbsp;==&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">name</span>);\n}</pre>\n    </p>\n    <p>\n        This is an instance method I added to <code>FSItem</code>.\n    </p>\n    <p>\n        In summary, the <code>GoTo</code> method enables client code to navigate down in the file hierarchy, as this unit test demonstrates:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GoToSkullMan</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(myDisk);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>)?.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">NotNull</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Yikes!&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.FSItem);\n}</pre>\n    </p>\n    <p>\n        The example is elementary. First go to the <code>pics</code> folder, and from there to the <code>skull_man(scary).bmp</code>.\n    </p>\n    <h3 id=\"be9c842baa2c4cbb8afc50fdb9ea13c7\">\n        Going up <a href=\"#be9c842baa2c4cbb8afc50fdb9ea13c7\">#</a>\n    </h3>\n    <p>\n        Going back up the hierarchy isn't as complicated.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>?&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GoUp</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(Breadcrumbs.Count&nbsp;==&nbsp;0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">head</span>&nbsp;=&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">First</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tail</span>&nbsp;=&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Skip</span>(1);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"font-weight:bold;color:#1f377f;\">head</span>.Name,&nbsp;[..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">head</span>.Left,&nbsp;FSItem,&nbsp;..&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">head</span>.Right]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tail</span>.<span style=\"font-weight:bold;color:#74531f;\">ToList</span>());\n}</pre>\n    </p>\n    <p>\n        If the <code>Breadcrumbs</code> collection is empty, we're already at the root, in which case we can't go further up. In that case, the <code>GoUp</code> method returns <code>null</code>, as does the <code>GoTo</code> method if it can't find an item with the desired name. This possibility is explicitly indicated by the <code><span style=\"color:#2b91af;\">FSZipper</span>?</code> return type; notice the question mark, <a href=\"https://learn.microsoft.com/dotnet/csharp/nullable-references\">which indicates that the value may be null</a>. If you're working in a context or language where that feature isn't available, you may instead consider taking advantage of the <a href=\"/2022/04/25/the-maybe-monad\">Maybe monad</a> (which is also what you'd <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> do in Haskell).\n    </p>\n    <p>\n        If <code>Breadcrumbs</code> is <em>not</em> empty, it means that there's a place to go up to. It also implies that the previous operation navigated down, and the only way that's possible is if the previous node was a folder. Thus, the <code>GoUp</code> method knows that it needs to reconstitute a folder, and from the <code>head</code> breadcrumb, it knows that folder's name, and what was originally to the <code>Left</code> and <code>Right</code> of the Zipper's <code>FSItem</code> property.\n    </p>\n    <p>\n        This unit test demonstrates how client code may use the <code>GoUp</code> method:\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">GoUpFromSkullMan</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(myDisk);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;This&nbsp;is&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;GoToSkullMan&nbsp;test</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">newFocus</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>)?.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">newFocus</span>?.<span style=\"font-weight:bold;color:#74531f;\">GoUp</span>()?.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;watermelon_smash.gif&quot;</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">NotNull</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;watermelon_smash.gif&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;smash!!&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.FSItem);\n}</pre>\n    </p>\n    <p>\n        This test first repeats the navigation also performed by the other test, then uses <code>GoUp</code> to go one level up, which finally enables it to navigate to the <code>watermelon_smash.gif</code> file.\n    </p>\n    <h3 id=\"7c96d9a847f04adfb660973e66246d13\">\n        Renaming a file or folder <a href=\"#7c96d9a847f04adfb660973e66246d13\">#</a>\n    </h3>\n    <p>\n        A Zipper enables you to navigate a data structure, but you can also use it to modify the element in focus. One option is to rename a file or folder.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Rename</span>(<span style=\"color:blue;\">string</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">newName</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FSItem.<span style=\"font-weight:bold;color:#74531f;\">Match</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">_</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dat</span>)&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"font-weight:bold;color:#1f377f;\">newName</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">dat</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">_</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"font-weight:bold;color:#1f377f;\">newName</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs);\n}</pre>\n    </p>\n    <p>\n        The <code>Rename</code> method 'pattern-matches' on the 'current' <code>FSItem</code> and in both cases creates a new file or folder with the new name. Since it doesn't need the old name for anything, it uses the wildcard pattern to ignore that value. This operation is always possible, so the return type is <code>FSZipper</code>, without a question mark, indicating that the method never returns <code>null</code>.\n    </p>\n    <p>\n        The following unit test replicates the Haskell article's example by renaming the <code>pics</code> folder to <code>cspi</code>.\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">RenamePics</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(myDisk);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>)?.<span style=\"font-weight:bold;color:#74531f;\">Rename</span>(<span style=\"color:#a31515;\">&quot;cspi&quot;</span>).<span style=\"font-weight:bold;color:#74531f;\">GoUp</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">NotNull</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Empty</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.Breadcrumbs);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;root&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;goat_yelling_like_man.wmv&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;baaaaaa&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;pope_time.avi&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;god&nbsp;bless&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;cspi&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;ape_throwing_up.jpg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;bleargh&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;watermelon_smash.gif&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;smash!!&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Yikes!&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;dijon_poupon.doc&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;best&nbsp;mustard&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;programs&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;fartwizard.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;10gotofart&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;owl_bandit.dmg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;mov&nbsp;eax,&nbsp;h00t&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;not_a_virus.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;really&nbsp;not&nbsp;a&nbsp;virus&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;source&nbsp;code&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;best_hs_prog.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;(fix&nbsp;error)&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;random.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;4&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.FSItem);\n}</pre>\n    </p>\n    <p>\n        Since the test uses <code>GoUp</code> after <code>Rename</code>, the <code>actual</code> value contains the entire tree, while the <code>Breadcrumbs</code> collection is empty.\n    </p>\n    <h3 id=\"827bcbd5632844fa97b2a92e8beb17cf\">\n        Adding a new file <a href=\"#827bcbd5632844fa97b2a92e8beb17cf\">#</a>\n    </h3>\n    <p>\n        Finally, we can add a new file to a folder.\n    </p>\n    <p>\n        <pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>?&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"color:#2b91af;\">FSItem</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">item</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;FSItem.<span style=\"font-weight:bold;color:#74531f;\">Match</span>&lt;<span style=\"color:#2b91af;\">FSZipper</span>?&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFile</span>:&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">_</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">_</span>)&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">null</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">whenFolder</span>:&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>)&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"font-weight:bold;color:#1f377f;\">name</span>,&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">items</span>.<span style=\"font-weight:bold;color:#74531f;\">Prepend</span>(<span style=\"font-weight:bold;color:#1f377f;\">item</span>).<span style=\"font-weight:bold;color:#74531f;\">ToList</span>()),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs));\n}</pre>\n    </p>\n    <p>\n        This operation may fail, since we can't add a file to a file. This is, again, clearly indicated by the return type, which allows <code>null</code>.\n    </p>\n    <p>\n        This implementation adds the file to the start of the folder, but it would also be possible to add it at the end. I would consider that slightly more idiomatic in C#, but here I've followed the Haskell example code, which conses the new <code>item</code> to the beginning of the list. As is idiomatic in Haskell.\n    </p>\n    <p>\n        The following unit test reproduces the Haskell article's example.\n    </p>\n    <p>\n        <pre>[<span style=\"color:#2b91af;\">Fact</span>]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"font-weight:bold;color:#74531f;\">AddPic</span>()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FSZipper</span>(myDisk);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">sut</span>.<span style=\"font-weight:bold;color:#74531f;\">GoTo</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>)?.<span style=\"font-weight:bold;color:#74531f;\">Add</span>(<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;heh.jpg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;lol&quot;</span>))?.<span style=\"font-weight:bold;color:#74531f;\">GoUp</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">NotNull</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Equal</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;root&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;goat_yelling_like_man.wmv&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;baaaaaa&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;pope_time.avi&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;god&nbsp;bless&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;pics&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;heh.jpg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;lol&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;ape_throwing_up.jpg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;bleargh&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;watermelon_smash.gif&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;smash!!&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;skull_man(scary).bmp&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Yikes!&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;dijon_poupon.doc&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;best&nbsp;mustard&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;programs&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;fartwizard.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;10gotofart&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;owl_bandit.dmg&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;mov&nbsp;eax,&nbsp;h00t&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;not_a_virus.exe&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;really&nbsp;not&nbsp;a&nbsp;virus&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFolder</span>(<span style=\"color:#a31515;\">&quot;source&nbsp;code&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;best_hs_prog.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;(fix&nbsp;error)&quot;</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FSItem</span>.<span style=\"color:#74531f;\">CreateFile</span>(<span style=\"color:#a31515;\">&quot;random.hs&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;main&nbsp;=&nbsp;print&nbsp;4&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;])\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.FSItem);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Assert</span>.<span style=\"color:#74531f;\">Empty</span>(<span style=\"font-weight:bold;color:#1f377f;\">actual</span>.Breadcrumbs);\n}</pre>\n    </p>\n    <p>\n        This example also follows the edit with a <code>GoUp</code> call, with the effect that the Zipper is once more focused on the entire tree. The assertion verifies that the new <code>heh.jpg</code> file is the first file in the <code>pics</code> folder.\n    </p>\n    <h3 id=\"18720e9e88d94384921a2b664b4e0a7a\">\n        Conclusion <a href=\"#18720e9e88d94384921a2b664b4e0a7a\">#</a>\n    </h3>\n    <p>\n        The code for <code>FSZipper</code> is actually a bit simpler than for the binary tree. This, I think, is mostly attributable to the <code>FSZipper</code> having fewer constituent sum types. While sum types are trivial, and extraordinarily useful in languages that natively support them, they require a lot of boilerplate in a language like C#.\n    </p>\n    <p>\n        Do you need something like <code>FSZipper</code> in C#? Probably not. As I've already discussed, this article series mostly exists as a programming exercise.\n    </p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "Another functional model of a file system, with code examples in C#.\n    \n    \n        This article is part of a series about Zippers. In this one, I port the FSZipper data structure from the Learn You a Haskell for Great Good! article Zippers.\n    \n    \n        A word of warning: I'm assuming that you're familiar with the contents of that article, so I'll skip the pedagogical explanations; I can hardly do it better that it's done there. Additionally, I'll make heavy use of certain standard constructs to port Haskell code, most notably Church encoding to model sum types in languages that don't natively have them. Such as C#. In some cases, I'll implement the Church encoding using the data structure's catamorphism. Since the cyclomatic complexity of the resulting code is quite low, you may be able to follow what's going on even if you don't know what Church encoding or catamorphisms are, but if you want to understand the background and motivation for that style of programming, you can consult the cited resources.\n    \n    \n        The code shown in this article is available on GitHub.\n    \n    \n        File system item initialization and structure #\n    \n    \n        If you haven't already noticed, Haskell (and other statically typed functional programming languages like F#) makes heavy use of sum types, and the FSZipper example is no exception. It starts with a one-liner to define a file system item, which may be either a file or a folder. In C# we must instead use a class:\n    \n    \n        public sealed class FSItem\n    \n    \n        Contrary to the two previous examples, the FSItem class has no generic type parameter. This is because I'm following the Haskell example code as closely as possible, but as I've previously shown, you can model a file hierarchy with a general-purpose rose tree.\n    \n    \n        Staying consistent with the two previous articles, I'll use Church encoding to model a sum type, and as discussed in the previous article I use a private implementation for that.\n    \n    \n        private readonly IFSItem imp;\n \nprivate FSItem(IFSItem imp)\n{\n    this.imp = imp;\n}\n \npublic static FSItem CreateFile(string name, string data)\n{\n    return new(new File(name, data));\n}\n \npublic static FSItem CreateFolder(string name, IReadOnlyCollection<FSItem> items)\n{\n    return new(new Folder(name, items));\n}\n    \n    \n        Two static creation methods enable client developers to create a single FSItem object, or an entire tree, like the example from the Haskell code, here ported to C#:\n    \n    \n        private static readonly FSItem myDisk =\n    FSItem.CreateFolder(\"root\",\n    [\n        FSItem.CreateFile(\"goat_yelling_like_man.wmv\", \"baaaaaa\"),\n        FSItem.CreateFile(\"pope_time.avi\", \"god bless\"),\n        FSItem.CreateFolder(\"pics\",\n        [\n            FSItem.CreateFile(\"ape_throwing_up.jpg\", \"bleargh\"),\n            FSItem.CreateFile(\"watermelon_smash.gif\", \"smash!!\"),\n            FSItem.CreateFile(\"skull_man(scary).bmp\", \"Yikes!\")\n        ]),\n        FSItem.CreateFile(\"dijon_poupon.doc\", \"best mustard\"),\n        FSItem.CreateFolder(\"programs\",\n        [\n            FSItem.CreateFile(\"fartwizard.exe\", \"10gotofart\"),\n            FSItem.CreateFile(\"owl_bandit.dmg\", \"mov eax, h00t\"),\n            FSItem.CreateFile(\"not_a_virus.exe\", \"really not a virus\"),\n            FSItem.CreateFolder(\"source code\",\n            [\n                FSItem.CreateFile(\"best_hs_prog.hs\", \"main = print (fix error)\"),\n                FSItem.CreateFile(\"random.hs\", \"main = print 4\")\n            ])\n        ])\n    ]);\n    \n    \n        Since the imp class field is just a private implementation detail, a client developer needs a way to query an FSItem object about its contents.\n    \n    \n        File system item catamorphism #\n    \n    \n        Just like the previous article, I'll start with the catamorphism. This is essentially the rose tree catamorphism, just less generic, since FSItem doesn't have a generic type parameter.\n    \n    \n        public TResult Aggregate<TResult>(\n    Func<string, string, TResult> whenFile,\n    Func<string, IReadOnlyCollection<TResult>, TResult> whenFolder)\n{\n    return imp.Aggregate(whenFile, whenFolder);\n}\n    \n    \n        The Aggregate method delegates to its internal implementation class field, which is defined as the private nested interface IFSItem:\n    \n    \n        private interface IFSItem\n{\n    TResult Aggregate<TResult>(\n        Func<string, string, TResult> whenFile,\n        Func<string, IReadOnlyCollection<TResult>, TResult> whenFolder);\n}\n    \n    \n        As discussed in the previous article, the interface is hidden away because it's only a vehicle for polymorphism. It's not intended for client developers to be used (although that would be benign) or implemented (which could break encapsulation). There are only, and should ever only be, two implementations. The one that represents a file is the simplest:\n    \n    \n        private sealed record File(string Name, string Data) : IFSItem\n{\n    public TResult Aggregate<TResult>(\n        Func<string, string, TResult> whenFile,\n        Func<string, IReadOnlyCollection<TResult>, TResult> whenFolder)\n    {\n        return whenFile(Name, Data);\n    }\n}\n    \n    \n        The File record's Aggregate method unconditionally calls the supplied whenFile function argument with the Name and Data that was originally supplied via its constructor.\n    \n    \n        The Folder implementation is a bit trickier, mostly due to its recursive nature, but also because I wanted it to have structural equality.\n    \n    \n        private sealed class Folder : IFSItem\n{\n    private readonly string name;\n    private readonly IReadOnlyCollection<FSItem> items;\n \n    public Folder(string Name, IReadOnlyCollection<FSItem> Items)\n    {\n        name = Name;\n        items = Items;\n    }\n \n    public TResult Aggregate<TResult>(\n        Func<string, string, TResult> whenFile,\n        Func<string, IReadOnlyCollection<TResult>, TResult> whenFolder)\n    {\n        return whenFolder(\n            name,\n            items.Select(i => i.Aggregate(whenFile, whenFolder)).ToList());\n    }\n \n    public override bool Equals(object? obj)\n    {\n        return obj is Folder folder &&\n               name == folder.name &&\n               items.SequenceEqual(folder.items);\n    }\n \n    public override int GetHashCode()\n    {\n        return HashCode.Combine(name, items);\n    }\n}\n    \n    \n        It, too, unconditionally calls one of the two functions passed to its Aggregate method, but this time whenFolder. It does that, however, by first recursively calling Aggregate within a Select expression. It needs to do that because the whenFolder function expects the subtree to have been already converted to values of the TResult return type. This is a common pattern with catamorphisms, and takes a bit of time getting used to. You can see similar examples in the articles Tree catamorphism, Rose tree catamorphism, Full binary tree catamorphism, as well as the previous one in this series.\n    \n    \n        I also had to make Folder a class rather than a record, because I wanted the type to have structural equality, and you can't override Equals on records (and if the base class library has any collection type with structural equality, I'm not aware of it).\n    \n    \n        File system item Church encoding #\n    \n    \n        True to the structure of the previous article, the catamorphism doesn't look quite like a Church encoding, but it's possible to define the latter from the former.\n    \n    \n        public TResult Match<TResult>(\n    Func<string, string, TResult> whenFile,\n    Func<string, IReadOnlyCollection<FSItem>, TResult> whenFolder)\n{\n    return Aggregate(\n        whenFile: (name, data) =>\n            (item: CreateFile(name, data), result: whenFile(name, data)),\n        whenFolder: (name, pairs) =>\n        {\n            var items = pairs.Select(i => i.item).ToList();\n            return (CreateFolder(name, items), whenFolder(name, items));\n        }).result;\n}\n    \n    \n        The trick is the same as in the previous article: Build up an intermediate tuple that contains both the current item as well as the result being accumulated. Once the Aggregate method returns, the Match method returns only the result part of the resulting tuple.\n    \n    \n        I implemented the whenFolder expression as a code block, because both tuple elements needed the items collection. You can inline the Select expression, but that would cause it to run twice. That's probably a premature optimization, but it also made the code a bit shorter, and, one may hope, a bit more readable.\n    \n    \n        Fily system breadcrumb #\n    \n    \n        Finally, things seem to be becoming a little easier. The port of FSCrumb is straightforward.\n    \n    \n        public sealed class FSCrumb\n{\n    public FSCrumb(\n        string name,\n        IReadOnlyCollection<FSItem> left,\n        IReadOnlyCollection<FSItem> right)\n    {\n        Name = name;\n        Left = left;\n        Right = right;\n    }\n \n    public string Name { get; }\n    public IReadOnlyCollection<FSItem> Left { get; }\n    public IReadOnlyCollection<FSItem> Right { get; }\n \n    public override bool Equals(object? obj)\n    {\n        return obj is FSCrumb crumb &&\n               Name == crumb.Name &&\n               Left.SequenceEqual(crumb.Left) &&\n               Right.SequenceEqual(crumb.Right);\n    }\n \n    public override int GetHashCode()\n    {\n        return HashCode.Combine(Name, Left, Right);\n    }\n}\n    \n    \n        The only reason this isn't a record is, once again, that I want to override Equals so that the type can have structural equality. Visual Studio wants me to convert to a primary constructor. That would simplify the code a bit, but actually not that much.\n    \n    \n        (I'm still somewhat conservative in my choice of new C# language features. Not that I have anything against primary constructors which, after all, F# has had forever. The reason I'm holding back is for didactic reasons. Not every reader is on the latest language version, and some readers may be using another programming language entirely. On the other hand, primary constructors seem natural and intuitive, so I may start using them here on the blog as well. I don't think that they're going to be much of a barrier to understanding.)\n    \n    \n        Now that we have both the data type we want to zip, as well as the breadcrumb type we need, we can proceed to add the Zipper.\n    \n    \n        File system Zipper #\n    \n    \n        The FSZipper C# class fills the position of the eponymous Haskell type alias. Data structure and initialization is straightforward.\n    \n    \n        public sealed class FSZipper\n{\n    private FSZipper(FSItem fSItem, IReadOnlyCollection<FSCrumb> breadcrumbs)\n    {\n        FSItem = fSItem;\n        Breadcrumbs = breadcrumbs;\n    }\n \n    public FSZipper(FSItem fSItem) : this(fSItem, [])\n    {\n    }\n \n    public FSItem FSItem { get; }\n    public IReadOnlyCollection<FSCrumb> Breadcrumbs { get; }\n \n    // Methods follow here...\n    \n    \n        True to the style I've already established, I've made the master constructor private in order to highlight that the Breadcrumbs are the responsibility of the FSZipper class itself. It's not something client code need worry about.\n    \n    \n        Going down #\n    \n    \n        The Haskell Zippers article introduces fsUp before fsTo, but if we want to see some example code, we need to navigate to somewhere before we can navigate up. Thus, I'll instead start with the function that navigates to a child node.\n    \n    \n        public FSZipper? GoTo(string name)\n{\n    return FSItem.Match(\n        (_, _) => null,\n        (folderName, items) =>\n        {\n            FSItem? item = null;\n            var ls = new List<FSItem>();\n            var rs = new List<FSItem>();\n            foreach (var i in items)\n            {\n                if (item is null && i.IsNamed(name))\n                    item = i;\n                else if (item is null)\n                    ls.Add(i);\n                else\n                    rs.Add(i);\n            }\n \n            if (item is null)\n                return null;\n \n            return new FSZipper(\n                item,\n                Breadcrumbs.Prepend(new FSCrumb(folderName, ls, rs)).ToList());\n        });\n}\n    \n    \n        This is by far the most complicated navigation we've seen so far, and I've even taken the liberty of writing an imperative implementation. It's not that I don't know how I could implement it in a purely functional fashion, but I've chosen this implementation for a couple of reasons. The first of which is that, frankly, it was easier this way.\n    \n    \n        This stems from the second reason: That the .NET base class library, as far as I know, offers no functionality like Haskell's break function. I could have written such a function myself, but felt that it was too much of a digression, even for me. Maybe I'll do that another day. It might make for a nice little exercise.\n    \n    \n        The third reason is that C# doesn't afford pattern matching on sequences, in the shape of destructuring the head and the tail of a list. (Not that I know of, anyway, but that language changes rapidly at the moment, and it does have some pattern-matching features now.) This means that I have to check item for null anyway.\n    \n    \n        In any case, while the implementation is imperative, an external caller can't tell. The GoTo method is still referentially transparent. Which means that it fits in your head.\n    \n    \n        You may have noticed that the implementation calls IsNamed, which is also new.\n    \n    \n        public bool IsNamed(string name)\n{\n    return Match((n, _) => n == name, (n, _) => n == name);\n}\n    \n    \n        This is an instance method I added to FSItem.\n    \n    \n        In summary, the GoTo method enables client code to navigate down in the file hierarchy, as this unit test demonstrates:\n    \n    \n        [Fact]\npublic void GoToSkullMan()\n{\n    var sut = new FSZipper(myDisk);\n \n    var actual = sut.GoTo(\"pics\")?.GoTo(\"skull_man(scary).bmp\");\n \n    Assert.NotNull(actual);\n    Assert.Equal(\n        FSItem.CreateFile(\"skull_man(scary).bmp\", \"Yikes!\"),\n        actual.FSItem);\n}\n    \n    \n        The example is elementary. First go to the pics folder, and from there to the skull_man(scary).bmp.\n    \n    \n        Going up #\n    \n    \n        Going back up the hierarchy isn't as complicated.\n    \n    \n        public FSZipper? GoUp()\n{\n    if (Breadcrumbs.Count == 0)\n        return null;\n \n    var head = Breadcrumbs.First();\n    var tail = Breadcrumbs.Skip(1);\n \n    return new FSZipper(\n        FSItem.CreateFolder(head.Name, [.. head.Left, FSItem, .. head.Right]),\n        tail.ToList());\n}\n    \n    \n        If the Breadcrumbs collection is empty, we're already at the root, in which case we can't go further up. In that case, the GoUp method returns null, as does the GoTo method if it can't find an item with the desired name. This possibility is explicitly indicated by the FSZipper? return type; notice the question mark, which indicates that the value may be null. If you're working in a context or language where that feature isn't available, you may instead consider taking advantage of the Maybe monad (which is also what you'd idiomatically do in Haskell).\n    \n    \n        If Breadcrumbs is not empty, it means that there's a place to go up to. It also implies that the previous operation navigated down, and the only way that's possible is if the previous node was a folder. Thus, the GoUp method knows that it needs to reconstitute a folder, and from the head breadcrumb, it knows that folder's name, and what was originally to the Left and Right of the Zipper's FSItem property.\n    \n    \n        This unit test demonstrates how client code may use the GoUp method:\n    \n    \n        [Fact]\npublic void GoUpFromSkullMan()\n{\n    var sut = new FSZipper(myDisk);\n    // This is the same as the GoToSkullMan test\n    var newFocus = sut.GoTo(\"pics\")?.GoTo(\"skull_man(scary).bmp\");\n \n    var actual = newFocus?.GoUp()?.GoTo(\"watermelon_smash.gif\");\n \n    Assert.NotNull(actual);\n    Assert.Equal(\n        FSItem.CreateFile(\"watermelon_smash.gif\", \"smash!!\"),\n        actual.FSItem);\n}\n    \n    \n        This test first repeats the navigation also performed by the other test, then uses GoUp to go one level up, which finally enables it to navigate to the watermelon_smash.gif file.\n    \n    \n        Renaming a file or folder #\n    \n    \n        A Zipper enables you to navigate a data structure, but you can also use it to modify the element in focus. One option is to rename a file or folder.\n    \n    \n        public FSZipper Rename(string newName)\n{\n    return new FSZipper(\n        FSItem.Match(\n            (_, dat) => FSItem.CreateFile(newName, dat),\n            (_, items) => FSItem.CreateFolder(newName, items)),\n        Breadcrumbs);\n}\n    \n    \n        The Rename method 'pattern-matches' on the 'current' FSItem and in both cases creates a new file or folder with the new name. Since it doesn't need the old name for anything, it uses the wildcard pattern to ignore that value. This operation is always possible, so the return type is FSZipper, without a question mark, indicating that the method never returns null.\n    \n    \n        The following unit test replicates the Haskell article's example by renaming the pics folder to cspi.\n    \n    \n        [Fact]\npublic void RenamePics()\n{\n    var sut = new FSZipper(myDisk);\n \n    var actual = sut.GoTo(\"pics\")?.Rename(\"cspi\").GoUp();\n \n    Assert.NotNull(actual);\n    Assert.Empty(actual.Breadcrumbs);\n    Assert.Equal(\n        FSItem.CreateFolder(\"root\",\n        [\n            FSItem.CreateFile(\"goat_yelling_like_man.wmv\", \"baaaaaa\"),\n            FSItem.CreateFile(\"pope_time.avi\", \"god bless\"),\n            FSItem.CreateFolder(\"cspi\",\n            [\n                FSItem.CreateFile(\"ape_throwing_up.jpg\", \"bleargh\"),\n                FSItem.CreateFile(\"watermelon_smash.gif\", \"smash!!\"),\n                FSItem.CreateFile(\"skull_man(scary).bmp\", \"Yikes!\")\n            ]),\n            FSItem.CreateFile(\"dijon_poupon.doc\", \"best mustard\"),\n            FSItem.CreateFolder(\"programs\",\n            [\n                FSItem.CreateFile(\"fartwizard.exe\", \"10gotofart\"),\n                FSItem.CreateFile(\"owl_bandit.dmg\", \"mov eax, h00t\"),\n                FSItem.CreateFile(\"not_a_virus.exe\", \"really not a virus\"),\n                FSItem.CreateFolder(\"source code\",\n                [\n                    FSItem.CreateFile(\"best_hs_prog.hs\", \"main = print (fix error)\"),\n                    FSItem.CreateFile(\"random.hs\", \"main = print 4\")\n                ])\n            ])\n        ]),\n        actual.FSItem);\n}\n    \n    \n        Since the test uses GoUp after Rename, the actual value contains the entire tree, while the Breadcrumbs collection is empty.\n    \n    \n        Adding a new file #\n    \n    \n        Finally, we can add a new file to a folder.\n    \n    \n        public FSZipper? Add(FSItem item)\n{\n    return FSItem.Match<FSZipper?>(\n        whenFile: (_, _) => null,\n        whenFolder: (name, items) => new FSZipper(\n            FSItem.CreateFolder(name, items.Prepend(item).ToList()),\n            Breadcrumbs));\n}\n    \n    \n        This operation may fail, since we can't add a file to a file. This is, again, clearly indicated by the return type, which allows null.\n    \n    \n        This implementation adds the file to the start of the folder, but it would also be possible to add it at the end. I would consider that slightly more idiomatic in C#, but here I've followed the Haskell example code, which conses the new item to the beginning of the list. As is idiomatic in Haskell.\n    \n    \n        The following unit test reproduces the Haskell article's example.\n    \n    \n        [Fact]\npublic void AddPic()\n{\n    var sut = new FSZipper(myDisk);\n \n    var actual = sut.GoTo(\"pics\")?.Add(FSItem.CreateFile(\"heh.jpg\", \"lol\"))?.GoUp();\n \n    Assert.NotNull(actual);\n    Assert.Equal(\n        FSItem.CreateFolder(\"root\",\n        [\n            FSItem.CreateFile(\"goat_yelling_like_man.wmv\", \"baaaaaa\"),\n            FSItem.CreateFile(\"pope_time.avi\", \"god bless\"),\n            FSItem.CreateFolder(\"pics\",\n            [\n                FSItem.CreateFile(\"heh.jpg\", \"lol\"),\n                FSItem.CreateFile(\"ape_throwing_up.jpg\", \"bleargh\"),\n                FSItem.CreateFile(\"watermelon_smash.gif\", \"smash!!\"),\n                FSItem.CreateFile(\"skull_man(scary).bmp\", \"Yikes!\")\n            ]),\n            FSItem.CreateFile(\"dijon_poupon.doc\", \"best mustard\"),\n            FSItem.CreateFolder(\"programs\",\n            [\n                FSItem.CreateFile(\"fartwizard.exe\", \"10gotofart\"),\n                FSItem.CreateFile(\"owl_bandit.dmg\", \"mov eax, h00t\"),\n                FSItem.CreateFile(\"not_a_virus.exe\", \"really not a virus\"),\n                FSItem.CreateFolder(\"source code\",\n                [\n                    FSItem.CreateFile(\"best_hs_prog.hs\", \"main = print (fix error)\"),\n                    FSItem.CreateFile(\"random.hs\", \"main = print 4\")\n                ])\n            ])\n        ]),\n        actual.FSItem);\n    Assert.Empty(actual.Breadcrumbs);\n}\n    \n    \n        This example also follows the edit with a GoUp call, with the effect that the Zipper is once more focused on the entire tree. The assertion verifies that the new heh.jpg file is the first file in the pics folder.\n    \n    \n        Conclusion #\n    \n    \n        The code for FSZipper is actually a bit simpler than for the binary tree. This, I think, is mostly attributable to the FSZipper having fewer constituent sum types. While sum types are trivial, and extraordinarily useful in languages that natively support them, they require a lot of boilerplate in a language like C#.\n    \n    \n        Do you need something like FSZipper in C#? Probably not. As I've already discussed, this article series mostly exists as a programming exercise.\n    \n\n      This blog is totally free, but if you like it, please consider supporting it."
  },
  {
    "itemId": "https://blog.ploeh.dk/2024/09/16/functor-products",
    "raw": "\n\n\n<div id=\"post\">\n\t<p>\n\t\t<em>A tuple or class of functors is also a functor. An article for object-oriented developers.</em>\n\t</p>\n\t<p>\n\t\tThis article is part of <a href=\"/2022/07/11/functor-relationships\">a series of articles about functor relationships</a>. In this one you'll learn about a universal composition of <a href=\"/2018/03/22/functors\">functors</a>. In short, if you have a <a href=\"https://en.wikipedia.org/wiki/Product_type\">product type</a> of functors, that data structure itself gives rise to a functor.\n\t</p>\n    <p>\n        Together with other articles in this series, this result can help you answer questions such as: <em>Does this data structure form a functor?</em>\n    </p>\n    <p>\n        Since functors tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like <code>Foo&lt;T&gt;</code> (C# syntax) or <code>Bar&lt;T1, T2&gt;</code>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined such a data type. Recognizing that it's a functor strongly suggests that you should give it a <code>Select</code> method in C#, a <code>map</code> function in <a href=\"https://fsharp.org/\">F#</a>, and so on.\n    </p>\n    <p>\n        Not all generic types give rise to a (covariant) functor. Some are rather <a href=\"/2021/09/02/contravariant-functors\">contravariant functors</a>, and some are <a href=\"/2022/08/01/invariant-functors\">invariant</a>.\n    </p>\n    <p>\n        If, on the other hand, you have a data type which is a product of two or more (covariant) functors <em>with the same type parameter</em>, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    </p>\n\t<h3 id=\"9fc25288b4504ff3b4fabe932ecf2ea2\">\n\t\tAbstract shape <a href=\"#9fc25288b4504ff3b4fabe932ecf2ea2\">#</a>\n\t</h3>\n\t<p>\n\t\tBefore we look at some examples found in other code, it helps if we know what we're looking for. Most (if not all?) languages support product types. In canonical form, they're just tuples of values, but in an object-oriented language like C#, such types are typically classes.\n\t</p>\n\t<p>\n\t\tImagine that you have two functors <code>F</code> and <code>G</code>, and you're now considering a data structure that contains a value of both types.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">sealed</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FAndG</span>(<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>,&nbsp;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;F&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">f</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;G&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">g</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;F&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;G&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Methods&nbsp;go&nbsp;here...</span></pre>\n\t</p>\n\t<p>\n\t\tThe name of the type is <code><span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> because it contains both an <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> object and a <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> object.\n\t</p>\n\t<p>\n\t\tNotice that it's an essential requirement that the individual functors (here <code>F</code> and <code>G</code>) are parametrized by the same type parameter (here <code>T</code>). If your data structure contains <code><span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">T1</span>&gt;</code> and <code><span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">T2</span>&gt;</code>, the following 'theorem' doesn't apply.\n\t</p>\n\t<p>\n\t\tThe point of this article is that such an <code><span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> data structure forms a functor. The <code>Select</code> implementation is quite unsurprising:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(F.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>),&nbsp;G.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>));\n}</pre>\n\t</p>\n\t<p>\n\t\tSince we've assumed that both <code>F</code> and <code>G</code> already are functors, they must come with some projection function. In C# it's <a href=\"/2015/08/03/idiomatic-or-idiosyncratic\">idiomatically</a> called <code>Select</code>, while in F# it'd typically be called <code>map</code>:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:green;\">//&nbsp;(&#39;a&nbsp;-&gt;&nbsp;&#39;b)&nbsp;-&gt;&nbsp;FAndG&lt;&#39;a&gt;&nbsp;-&gt;&nbsp;FAndG&lt;&#39;b&gt;</span>\n<span style=\"color:blue;\">let</span>&nbsp;<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fandg</span>&nbsp;=&nbsp;{&nbsp;F&nbsp;=&nbsp;<span style=\"color:#2b91af;\">F</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fandg</span>.F;&nbsp;G&nbsp;=&nbsp;<span style=\"color:#2b91af;\">G</span>.<span style=\"color:#74531f;\">map</span>&nbsp;<span style=\"color:#74531f;\">f</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">fandg</span>.G&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tassuming a record type like\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">type</span>&nbsp;<span style=\"color:#2b91af;\">FAndG</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;&nbsp;=&nbsp;{&nbsp;F&nbsp;:&nbsp;<span style=\"color:#2b91af;\">F</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;;&nbsp;G&nbsp;:&nbsp;<span style=\"color:#2b91af;\">G</span>&lt;<span style=\"color:#2b91af;\">&#39;a</span>&gt;&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tIn both the C# <code>Select</code> example and the F# <code>map</code> function, the composed functor passes the function argument (<code>selector</code> or <code>f</code>) to both <code>F</code> and <code>G</code> and uses it to map both constituents. It then composes a new product from these individual results.\n\t</p>\n\t<p>\n\t\tI'll have more to say about how this generalizes to a product of more than two functors, but first, let's consider some examples.\n\t</p>\n\t<h3 id=\"e3b18df7ac4440d7aada000ce27044f3\">\n\t\tList Zipper <a href=\"#e3b18df7ac4440d7aada000ce27044f3\">#</a>\n\t</h3>\n\t<p>\n\t\tOne of the simplest example I can think of is a List Zipper, which <a href=\"https://learnyouahaskell.com/zippers\">in Haskell</a> is nothing but a type alias of a tuple of lists:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">type</span>&nbsp;ListZipper&nbsp;a&nbsp;=&nbsp;([a],[a])</pre>\n\t</p>\n\t<p>\n\t\tIn the article <a href=\"/2024/08/26/a-list-zipper-in-c\">A List Zipper in C#</a> you saw how the <code><span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class composes two <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> objects.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;values;\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;Breadcrumbs&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">ListZipper</span>(<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">values</span>,&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">breadcrumbs</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.values&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">values</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">breadcrumbs</span>;\n}</pre>\n\t</p>\n\t<p>\n\t\tSince we already know that sequences like <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> form functors, we now know that so must <code><span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>. And indeed, the <code>Select</code> implementation looks similar to the above 'shape outline'.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(values.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>),&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>));\n}</pre>\n\t</p>\n\t<p>\n\t\tIt passes the <code>selector</code> function to the <code>Select</code> method of both <code>values</code> and <code>Breadcrumbs</code>, and composes the results into a <code><span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;</code>.\n\t</p>\n\t<p>\n\t\tWhile this example is straightforward, it may not be the most compelling, because <code><span style=\"color:#2b91af;\">ListZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> composes two identical functors: <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>. The knowledge that functors compose is more general than that.\n\t</p>\n\t<h3 id=\"051a4cc14ad74c2ca2f62fd12051f97c\">\n\t\tNon-empty collection <a href=\"#051a4cc14ad74c2ca2f62fd12051f97c\">#</a>\n\t</h3>\n\t<p>\n\t\tNext after the above List Zipper, the simplest example I can think of is a non-empty list. On this blog I originally introduced it in the article <a href=\"/2017/12/11/semigroups-accumulate\">Semigroups accumulate</a>, but here I'll use the variant from <a href=\"/2023/08/07/nonempty-catamorphism\">NonEmpty catamorphism</a>. It composes a single value of the type <code>T</code> with an <code><span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">NonEmptyCollection</span>(<span style=\"color:#2b91af;\">T</span>&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">head</span>,&nbsp;<span style=\"color:blue;\">params</span>&nbsp;<span style=\"color:#2b91af;\">T</span>[]&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tail</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">if</span>&nbsp;(<span style=\"font-weight:bold;color:#1f377f;\">head</span>&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(<span style=\"color:blue;\">nameof</span>(<span style=\"font-weight:bold;color:#1f377f;\">head</span>));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.Head&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">head</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.Tail&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">tail</span>;\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">T</span>&nbsp;Head&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;Tail&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tThe <code>Tail</code>, being an <code><span style=\"color:#2b91af;\">IReadOnlyCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>, easily forms a functor, since it's a kind of list. But what about <code>Head</code>, which is a 'naked' <code>T</code> value? Does that form a functor? If so, which one?\n\t</p>\n\t<p>\n\t\tIndeed, a 'naked' <code>T</code> value is isomorphic to <a href=\"/2018/09/03/the-identity-functor\">the Identity functor</a>. This situation is an example of how knowing about the Identity functor is useful, even if you never actually write code that uses it. Once you realize that <code>T</code> is equivalent with a functor, you've now established that <code><span style=\"color:#2b91af;\">NonEmptyCollection</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> composes two functors. Therefore, it must itself form a functor, and you realize that you can give it a <code>Select</code> method.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">NonEmptyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">NonEmptyCollection</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>(Head),&nbsp;Tail.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>).<span style=\"font-weight:bold;color:#74531f;\">ToArray</span>());\n}</pre>\n\t</p>\n\t<p>\n\t\tNotice that even though we understand that <code>T</code> is equivalent to the Identity functor, there's no reason to actually wrap <code>Head</code> in an <code><span style=\"color:#2b91af;\">Identity</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> <a href=\"https://bartoszmilewski.com/2014/01/14/functors-are-containers/\">container</a> just to call <code>Select</code> on it and unwrap the result. Rather, the above <code>Select</code> implementation directly invokes <code>selector</code> with <code>Head</code>. It is, after all, a function that takes a <code>T</code> value as input and returns a <code>TResult</code> object as output.\n\t</p>\n\t<h3 id=\"d721c5ba6eda4016be1417ea01105bea\">\n\t\tRanges <a href=\"#d721c5ba6eda4016be1417ea01105bea\">#</a>\n\t</h3>\n\t<p>\n\t\tIt's hard to come up with an example that's both somewhat compelling and realistic, and at the same time prototypically pure. Stripped of all 'noise' functor products are just tuples, but that hardly makes for a compelling example. On the other hand, most other examples I can think of combine results about functors where they compose in more than one way. Not only as products, but also as <a href=\"/2024/10/14/functor-sums\">sums of functors</a>, as well as nested compositions. You'll be able to read about these in future articles, but for the next examples, you'll have to accept some claims about functors at face value.\n\t</p>\n\t<p>\n\t\tIn <a href=\"/2024/02/12/range-as-a-functor\">Range as a functor</a> you saw how both <code><span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> and <code><span style=\"color:#2b91af;\">Range</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> are functors. The article shows functor implementations for each, in both C#, F#, and <a href=\"https://www.haskell.org/\">Haskell</a>. For now we'll ignore the deeper underlying reason why <code><span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> forms a functor, and instead focus on <code><span style=\"color:#2b91af;\">Range</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code>.\n\t</p>\n\t<p>\n\t\tIn Haskell I never defined an explicit <code>Range</code> type, but rather just treated ranges as tuples. As stated repeatedly already, tuples are the essential products, so if you accept that <code>Endpoint</code> gives rise to a functor, then a 'range tuple' does, too.\n\t</p>\n\t<p>\n\t\tIn F# <code>Range</code> is defined like this:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">type</span>&nbsp;Range&lt;&#39;a&gt;&nbsp;=&nbsp;{&nbsp;LowerBound&nbsp;:&nbsp;Endpoint&lt;&#39;a&gt;;&nbsp;UpperBound&nbsp;:&nbsp;Endpoint&lt;&#39;a&gt;&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tSuch a record type is also easily identified as a product type. In a sense, we can think of a record type as a 'tuple with metadata', where the metadata contains <em>names</em> of elements.\n\t</p>\n\t<p>\n\t\tIn C# <code><span style=\"color:#2b91af;\">Range</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> is a class with two <code><span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> fields.\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;min;\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;<span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;max;\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Range</span>(<span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">min</span>,&nbsp;<span style=\"color:#2b91af;\">Endpoint</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">max</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.min&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">min</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.max&nbsp;=&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">max</span>;\n}</pre>\n\t</p>\n\t<p>\n\t\tIn a sense, you can think of such an immutable class as equivalent to a record type, only requiring substantial <a href=\"/2019/12/16/zone-of-ceremony\">ceremony</a>. The point is that because a range is a product of two functors, it itself gives rise to a functor. You can see all the implementations in <a href=\"/2024/02/12/range-as-a-functor\">Range as a functor</a>.\n\t</p>\n\t<h3 id=\"25e4dea36f644217ba1e28f2a509f3ab\">\n\t\tBinary tree Zipper <a href=\"#25e4dea36f644217ba1e28f2a509f3ab\">#</a>\n\t</h3>\n\t<p>\n\t\tIn <a href=\"/2024/09/09/a-binary-tree-zipper-in-c\">A Binary Tree Zipper in C#</a> you saw that the <code><span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> class has two class fields:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&nbsp;Tree&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;&nbsp;Breadcrumbs&nbsp;{&nbsp;<span style=\"color:blue;\">get</span>;&nbsp;}</pre>\n\t</p>\n\t<p>\n\t\tBoth have the same generic type parameter <code>T</code>, so the question is whether <code><span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> may form a functor? We now know that the answer is affirmative if <code><span style=\"color:#2b91af;\">BinaryTree</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;</code> and <code><span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Crumb</span>&lt;<span style=\"color:#2b91af;\">T</span>&gt;&gt;</code> are both functors.\n\t</p>\n\t<p>\n\t\tFor now, believe me when I claim that this is the case. This means that you can add a <code>Select</code> method to the class:\n\t</p>\n\t<p>\n\t\t<pre><span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#74531f;\">Select</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">T</span>,&nbsp;<span style=\"color:#2b91af;\">TResult</span>&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)\n{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-weight:bold;color:#8f08c4;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">BinaryTreeZipper</span>&lt;<span style=\"color:#2b91af;\">TResult</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tree.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Breadcrumbs.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">c</span>&nbsp;=&gt;&nbsp;<span style=\"font-weight:bold;color:#1f377f;\">c</span>.<span style=\"font-weight:bold;color:#74531f;\">Select</span>(<span style=\"font-weight:bold;color:#1f377f;\">selector</span>)));\n}</pre>\n\t</p>\n\t<p>\n\t\tBy now, this should hardly be surprising: Call <code>Select</code> on each constituent functor and create a proper return value from the results.\n\t</p>\n\t<h3 id=\"1179fc33850d430780c843583c16adcb\">\n\t\tHigher arities <a href=\"#1179fc33850d430780c843583c16adcb\">#</a>\n\t</h3>\n\t<p>\n\t\tAll examples have involved products of only two functors, but the result generalizes to higher arities. To gain an understanding of why, consider that it's always possible to rewrite tuples of higher arities as nested pairs. As an example, a triple like <code>(42,&nbsp;<span style=\"color:#a31515;\">&quot;foo&quot;</span>,&nbsp;True)</code> can be rewritten as <code>(42,&nbsp;(<span style=\"color:#a31515;\">&quot;foo&quot;</span>,&nbsp;True))</code> without loss of information. The latter representation is a pair (a two-tuple) where the first element is <code>42</code>, but the second element is another pair. These two representations are isomorphic, meaning that we can go back and forth without losing data.\n\t</p>\n\t<p>\n\t\tBy induction you can generalize this result to any arity. The point is that the only data type you need to describe a product is a pair.\n\t</p>\n\t<p>\n\t\tHaskell's <a href=\"https://hackage.haskell.org/package/base\">base</a> library defines a specialized container called <a href=\"https://hackage.haskell.org/package/base/docs/Data-Functor-Product.html\">Product</a> for this very purpose: If you have two <code>Functor</code> instances, you can <code>Pair</code> them up, and they become a single <code>Functor</code>.\n\t</p>\n\t<p>\n\t\tLet's start with a <code>Pair</code> of <code>Maybe</code> and a list:\n\t</p>\n\t<p>\n\t\t<pre>ghci&gt; Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"]\nPair (Just \"foo\") [\"bar\",\"baz\",\"qux\"]</pre>\n\t</p>\n\t<p>\n\t\tThis is a single 'object', if you will, that composes those two <code>Functor</code> instances. This means that you can map over it:\n\t</p>\n\t<p>\n\t\t<pre>ghci&gt; elem 'b' &lt;$&gt; Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"]\nPair (Just False) [True,True,False]</pre>\n\t</p>\n\t<p>\n\t\tHere I've used the infix <code>&lt;$&gt;</code> operator as an alternative to <code>fmap</code>. By composing with <code>elem 'b'</code>, I'm asking every value inside the container whether or not it contains the character <code>b</code>. The <code>Maybe</code> value doesn't, while the first two list elements do.\n\t</p>\n\t<p>\n\t\tIf you want to compose three, rather than two, <code>Functor</code> instances, you just nest the <code>Pairs</code>, just like you can nest tuples:\n\t</p>\n\t<p>\n\t\t<pre>ghci&gt; elem 'b' &lt;$&gt; Pair (Identity \"quux\") (Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"])\nPair (Identity False) (Pair (Just False) [True,True,False])</pre>\n\t</p>\n\t<p>\n\t\tThis example now introduces the <code>Identity</code> container as a third <code>Functor</code> instance. I could have used any other <code>Functor</code> instance instead of <code>Identity</code>, but some of them are more awkward to create or display. For example, the <a href=\"/2021/08/30/the-reader-functor\">Reader</a> or <a href=\"/2021/07/19/the-state-functor\">State</a> functors have no <code>Show</code> instances in Haskell, meaning that GHCi doesn't know how to print them as values. Other <code>Functor</code> instances didn't work as well for the example, since they tend to be more awkward to create. As an example, any non-trivial <a href=\"https://hackage.haskell.org/package/containers/docs/Data-Tree.html#t:Tree\">Tree</a> requires substantial editor space to express.\n\t</p>\n\t<h3 id=\"329c3274f8f54171905d747867fc293b\">\n\t\tConclusion <a href=\"#329c3274f8f54171905d747867fc293b\">#</a>\n\t</h3>\n\t<p>\n\t\tA product of functors may itself be made a functor. The examples shown in this article are all constrained to two functors, but if you have a product of three, four, or more functors, that product still gives rise to a functor.\n\t</p>\n\t<p>\n\t\tThis is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such products into functors, in the way that Haskell's <code>Product</code> container almost does. Thus, knowing when you can safely give your generic types a <code>Select</code> method or <code>map</code> function may come in handy.\n\t</p>\n\t<p>\n\t\tThere are more rules like this one. The next article examines another.\n\t</p>\n\t<p>\n\t\t<strong>Next:</strong> <a href=\"/2024/10/14/functor-sums\">Functor sums</a>.\n\t</p>\n</div><hr>\n      This blog is totally free, but if you like it, please consider <a href=\"https://blog.ploeh.dk/support\">supporting it</a>.",
    "sanitized": "A tuple or class of functors is also a functor. An article for object-oriented developers.\n\t\n\t\n\t\tThis article is part of a series of articles about functor relationships. In this one you'll learn about a universal composition of functors. In short, if you have a product type of functors, that data structure itself gives rise to a functor.\n\t\n    \n        Together with other articles in this series, this result can help you answer questions such as: Does this data structure form a functor?\n    \n    \n        Since functors tend to be quite common, and since they're useful enough that many programming languages have special support or syntax for them, the ability to recognize a potential functor can be useful. Given a type like Foo<T> (C# syntax) or Bar<T1, T2>, being able to recognize it as a functor can come in handy. One scenario is if you yourself have just defined such a data type. Recognizing that it's a functor strongly suggests that you should give it a Select method in C#, a map function in F#, and so on.\n    \n    \n        Not all generic types give rise to a (covariant) functor. Some are rather contravariant functors, and some are invariant.\n    \n    \n        If, on the other hand, you have a data type which is a product of two or more (covariant) functors with the same type parameter, then the data type itself gives rise to a functor. You'll see some examples in this article.\n    \n\t\n\t\tAbstract shape #\n\t\n\t\n\t\tBefore we look at some examples found in other code, it helps if we know what we're looking for. Most (if not all?) languages support product types. In canonical form, they're just tuples of values, but in an object-oriented language like C#, such types are typically classes.\n\t\n\t\n\t\tImagine that you have two functors F and G, and you're now considering a data structure that contains a value of both types.\n\t\n\t\n\t\tpublic sealed class FAndG<T>\n{\n    public FAndG(F<T> f, G<T> g)\n    {\n        F = f;\n        G = g;\n    }\n \n    public F<T> F { get; }\n    public G<T> G { get; }\n \n    // Methods go here...\n\t\n\t\n\t\tThe name of the type is FAndG<T> because it contains both an F<T> object and a G<T> object.\n\t\n\t\n\t\tNotice that it's an essential requirement that the individual functors (here F and G) are parametrized by the same type parameter (here T). If your data structure contains F<T1> and G<T2>, the following 'theorem' doesn't apply.\n\t\n\t\n\t\tThe point of this article is that such an FAndG<T> data structure forms a functor. The Select implementation is quite unsurprising:\n\t\n\t\n\t\tpublic FAndG<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new FAndG<TResult>(F.Select(selector), G.Select(selector));\n}\n\t\n\t\n\t\tSince we've assumed that both F and G already are functors, they must come with some projection function. In C# it's idiomatically called Select, while in F# it'd typically be called map:\n\t\n\t\n\t\t// ('a -> 'b) -> FAndG<'a> -> FAndG<'b>\nlet map f fandg = { F = F.map f fandg.F; G = G.map f fandg.G }\n\t\n\t\n\t\tassuming a record type like\n\t\n\t\n\t\ttype FAndG<'a> = { F : F<'a>; G : G<'a> }\n\t\n\t\n\t\tIn both the C# Select example and the F# map function, the composed functor passes the function argument (selector or f) to both F and G and uses it to map both constituents. It then composes a new product from these individual results.\n\t\n\t\n\t\tI'll have more to say about how this generalizes to a product of more than two functors, but first, let's consider some examples.\n\t\n\t\n\t\tList Zipper #\n\t\n\t\n\t\tOne of the simplest example I can think of is a List Zipper, which in Haskell is nothing but a type alias of a tuple of lists:\n\t\n\t\n\t\ttype ListZipper a = ([a],[a])\n\t\n\t\n\t\tIn the article A List Zipper in C# you saw how the ListZipper<T> class composes two IEnumerable<T> objects.\n\t\n\t\n\t\tprivate readonly IEnumerable<T> values;\npublic IEnumerable<T> Breadcrumbs { get; }\n \nprivate ListZipper(IEnumerable<T> values, IEnumerable<T> breadcrumbs)\n{\n    this.values = values;\n    Breadcrumbs = breadcrumbs;\n}\n\t\n\t\n\t\tSince we already know that sequences like IEnumerable<T> form functors, we now know that so must ListZipper<T>. And indeed, the Select implementation looks similar to the above 'shape outline'.\n\t\n\t\n\t\tpublic ListZipper<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new ListZipper<TResult>(values.Select(selector), Breadcrumbs.Select(selector));\n}\n\t\n\t\n\t\tIt passes the selector function to the Select method of both values and Breadcrumbs, and composes the results into a new ListZipper<TResult>.\n\t\n\t\n\t\tWhile this example is straightforward, it may not be the most compelling, because ListZipper<T> composes two identical functors: IEnumerable<T>. The knowledge that functors compose is more general than that.\n\t\n\t\n\t\tNon-empty collection #\n\t\n\t\n\t\tNext after the above List Zipper, the simplest example I can think of is a non-empty list. On this blog I originally introduced it in the article Semigroups accumulate, but here I'll use the variant from NonEmpty catamorphism. It composes a single value of the type T with an IReadOnlyCollection<T>.\n\t\n\t\n\t\tpublic NonEmptyCollection(T head, params T[] tail)\n{\n    if (head == null)\n        throw new ArgumentNullException(nameof(head));\n \n    this.Head = head;\n    this.Tail = tail;\n}\n \npublic T Head { get; }\n \npublic IReadOnlyCollection<T> Tail { get; }\n\t\n\t\n\t\tThe Tail, being an IReadOnlyCollection<T>, easily forms a functor, since it's a kind of list. But what about Head, which is a 'naked' T value? Does that form a functor? If so, which one?\n\t\n\t\n\t\tIndeed, a 'naked' T value is isomorphic to the Identity functor. This situation is an example of how knowing about the Identity functor is useful, even if you never actually write code that uses it. Once you realize that T is equivalent with a functor, you've now established that NonEmptyCollection<T> composes two functors. Therefore, it must itself form a functor, and you realize that you can give it a Select method.\n\t\n\t\n\t\tpublic NonEmptyCollection<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new NonEmptyCollection<TResult>(selector(Head), Tail.Select(selector).ToArray());\n}\n\t\n\t\n\t\tNotice that even though we understand that T is equivalent to the Identity functor, there's no reason to actually wrap Head in an Identity<T> container just to call Select on it and unwrap the result. Rather, the above Select implementation directly invokes selector with Head. It is, after all, a function that takes a T value as input and returns a TResult object as output.\n\t\n\t\n\t\tRanges #\n\t\n\t\n\t\tIt's hard to come up with an example that's both somewhat compelling and realistic, and at the same time prototypically pure. Stripped of all 'noise' functor products are just tuples, but that hardly makes for a compelling example. On the other hand, most other examples I can think of combine results about functors where they compose in more than one way. Not only as products, but also as sums of functors, as well as nested compositions. You'll be able to read about these in future articles, but for the next examples, you'll have to accept some claims about functors at face value.\n\t\n\t\n\t\tIn Range as a functor you saw how both Endpoint<T> and Range<T> are functors. The article shows functor implementations for each, in both C#, F#, and Haskell. For now we'll ignore the deeper underlying reason why Endpoint<T> forms a functor, and instead focus on Range<T>.\n\t\n\t\n\t\tIn Haskell I never defined an explicit Range type, but rather just treated ranges as tuples. As stated repeatedly already, tuples are the essential products, so if you accept that Endpoint gives rise to a functor, then a 'range tuple' does, too.\n\t\n\t\n\t\tIn F# Range is defined like this:\n\t\n\t\n\t\ttype Range<'a> = { LowerBound : Endpoint<'a>; UpperBound : Endpoint<'a> }\n\t\n\t\n\t\tSuch a record type is also easily identified as a product type. In a sense, we can think of a record type as a 'tuple with metadata', where the metadata contains names of elements.\n\t\n\t\n\t\tIn C# Range<T> is a class with two Endpoint<T> fields.\n\t\n\t\n\t\tprivate readonly Endpoint<T> min;\nprivate readonly Endpoint<T> max;\n \npublic Range(Endpoint<T> min, Endpoint<T> max)\n{\n    this.min = min;\n    this.max = max;\n}\n\t\n\t\n\t\tIn a sense, you can think of such an immutable class as equivalent to a record type, only requiring substantial ceremony. The point is that because a range is a product of two functors, it itself gives rise to a functor. You can see all the implementations in Range as a functor.\n\t\n\t\n\t\tBinary tree Zipper #\n\t\n\t\n\t\tIn A Binary Tree Zipper in C# you saw that the BinaryTreeZipper<T> class has two class fields:\n\t\n\t\n\t\tpublic BinaryTree<T> Tree { get; }\npublic IEnumerable<Crumb<T>> Breadcrumbs { get; }\n\t\n\t\n\t\tBoth have the same generic type parameter T, so the question is whether BinaryTreeZipper<T> may form a functor? We now know that the answer is affirmative if BinaryTree<T> and IEnumerable<Crumb<T>> are both functors.\n\t\n\t\n\t\tFor now, believe me when I claim that this is the case. This means that you can add a Select method to the class:\n\t\n\t\n\t\tpublic BinaryTreeZipper<TResult> Select<TResult>(Func<T, TResult> selector)\n{\n    return new BinaryTreeZipper<TResult>(\n        Tree.Select(selector),\n        Breadcrumbs.Select(c => c.Select(selector)));\n}\n\t\n\t\n\t\tBy now, this should hardly be surprising: Call Select on each constituent functor and create a proper return value from the results.\n\t\n\t\n\t\tHigher arities #\n\t\n\t\n\t\tAll examples have involved products of only two functors, but the result generalizes to higher arities. To gain an understanding of why, consider that it's always possible to rewrite tuples of higher arities as nested pairs. As an example, a triple like (42, \"foo\", True) can be rewritten as (42, (\"foo\", True)) without loss of information. The latter representation is a pair (a two-tuple) where the first element is 42, but the second element is another pair. These two representations are isomorphic, meaning that we can go back and forth without losing data.\n\t\n\t\n\t\tBy induction you can generalize this result to any arity. The point is that the only data type you need to describe a product is a pair.\n\t\n\t\n\t\tHaskell's base library defines a specialized container called Product for this very purpose: If you have two Functor instances, you can Pair them up, and they become a single Functor.\n\t\n\t\n\t\tLet's start with a Pair of Maybe and a list:\n\t\n\t\n\t\tghci> Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"]\nPair (Just \"foo\") [\"bar\",\"baz\",\"qux\"]\n\t\n\t\n\t\tThis is a single 'object', if you will, that composes those two Functor instances. This means that you can map over it:\n\t\n\t\n\t\tghci> elem 'b' <$> Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"]\nPair (Just False) [True,True,False]\n\t\n\t\n\t\tHere I've used the infix <$> operator as an alternative to fmap. By composing with elem 'b', I'm asking every value inside the container whether or not it contains the character b. The Maybe value doesn't, while the first two list elements do.\n\t\n\t\n\t\tIf you want to compose three, rather than two, Functor instances, you just nest the Pairs, just like you can nest tuples:\n\t\n\t\n\t\tghci> elem 'b' <$> Pair (Identity \"quux\") (Pair (Just \"foo\") [\"bar\", \"baz\", \"qux\"])\nPair (Identity False) (Pair (Just False) [True,True,False])\n\t\n\t\n\t\tThis example now introduces the Identity container as a third Functor instance. I could have used any other Functor instance instead of Identity, but some of them are more awkward to create or display. For example, the Reader or State functors have no Show instances in Haskell, meaning that GHCi doesn't know how to print them as values. Other Functor instances didn't work as well for the example, since they tend to be more awkward to create. As an example, any non-trivial Tree requires substantial editor space to express.\n\t\n\t\n\t\tConclusion #\n\t\n\t\n\t\tA product of functors may itself be made a functor. The examples shown in this article are all constrained to two functors, but if you have a product of three, four, or more functors, that product still gives rise to a functor.\n\t\n\t\n\t\tThis is useful to know, particularly if you're working in a language with only partial support for functors. Mainstream languages aren't going to automatically turn such products into functors, in the way that Haskell's Product container almost does. Thus, knowing when you can safely give your generic types a Select method or map function may come in handy.\n\t\n\t\n\t\tThere are more rules like this one. The next article examines another.\n\t\n\t\n\t\tNext: Functor sums.\n\t\n\n      This blog is totally free, but if you like it, please consider supporting it."
  }
]
