[
  {
    "itemId": "https://ardalis.com/avoid-using-csharp-events-in-aspnetcore-apps/",
    "raw": "<h1>The Hidden Pitfalls of Using C# Events in ASP.NET Core Applications</h1>\n<p>C# events are a powerful feature of the language, providing a simple mechanism for building publish-subscribe communication patterns. However, when used in ASP.NET Core applications, events can lead to subtle, hard-to-diagnose issues that can harm the reliability and scalability of your application. In this article, I'll highlight the main issues with using C# events in ASP.NET Core and share better alternatives.</p>\n<h2>The Appeal of C# Events</h2>\n<p>At first glance, C# events seem like a natural choice for situations where you want to notify other parts of the application about something that has happened. Here's a simple example of an event-based system in a hypothetical alarm service:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>Alarm<span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span></span> AlarmAdded<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddAlarm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Business logic for adding an alarm</span>\n        AlarmAdded<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> alarm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Notify subscribers</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmSubscriber</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AlarmSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmService</span> service<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        service<span class=\"token punctuation\">.</span>AlarmAdded <span class=\"token operator\">+=</span> OnAlarmAdded<span class=\"token punctuation\">;</span> <span class=\"token comment\">// C# event subscription</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAlarmAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Alarm received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">alarm<span class=\"token punctuation\">.</span>Code</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">AlarmService</code> notifies subscribers whenever a new alarm is added. While this works well for small, simple applications, it introduces problems when used in larger or more complex systems, like ASP.NET Core applications.</p>\n<h2>The Problems with Events in ASP.NET Core</h2>\n<p>There are several issues with using C# events in ASP.NET Core applications. Let's look at a few of them just so you have some concrete reasons to avoid them and understand it's not just because I said so.</p>\n<h3>Memory Leaks</h3>\n<p>One of the most common issues with events is that they can lead to memory leaks if you forget to unsubscribe (or you remember but <strong>bad things happen</strong> and the code that would have cleaned them up doesn't end up running). In .NET, the event publisher holds a strong reference to the event handler. If a subscriber is not unsubscribed, it cannot be garbage-collected even if it is no longer in use. This is particularly problematic in ASP.NET Core, where transient objects are common. As you may know, in .NET the garbage collector is the thing that makes sure unused memory is reclaimed for the application. If your application continues to create objects that cannot be garbage collected, you will eventually run out of memory and your application will crash.</p>\n<p>Example of a Memory Leak:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeakyAlarmSubscriber</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">LeakyAlarmSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmService</span> service<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Subscribing to the event but never unsubscribing</span>\n        service<span class=\"token punctuation\">.</span>AlarmAdded <span class=\"token operator\">+=</span> OnAlarmAdded<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAlarmAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Alarm received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">alarm<span class=\"token punctuation\">.</span>Code</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Every time a new <code class=\"language-text\">LeakyAlarmSubscriber</code> is created, it stays in memory indefinitely because the <code class=\"language-text\">AlarmService</code> holds a reference to its event handler. You can see this in the following memory snapshots taken with the Visual Studio debugger:</p>\n<p><img src=\"/img/memory-snapshots-csharp-events.png\" alt=\"Memory Leak in Visual Studio Debugger\"></p>\n<p>You can also demonstrate the issue using BenchmarkDotNet to measure the memory usage of your application over time. Set up the benchmark:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">BenchmarkDotNet<span class=\"token punctuation\">.</span>Attributes</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MemoryDiagnoser</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryLeakBenchmark</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">EventPublisher</span> _publisher<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GlobalSetup</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _publisher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EventPublisher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Benchmark</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CauseLeak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> subscriber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">EventSubscriber</span><span class=\"token punctuation\">(</span>_publisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _publisher<span class=\"token punctuation\">.</span><span class=\"token function\">RaiseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// run it from Main()</span>\nBenchmarkRunner<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Run</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MemoryLeakBenchmark<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then add a FixedSubscriber that uses IDisposable to unsubscribe from the event:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FixedSubscriber</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDisposable</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">EventPublisher</span> _publisher<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">FixedSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventPublisher</span> publisher<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _publisher <span class=\"token operator\">=</span> publisher<span class=\"token punctuation\">;</span>\n        _publisher<span class=\"token punctuation\">.</span>SomethingHappened <span class=\"token operator\">+=</span> OnSomethingHappened<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnSomethingHappened</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">?</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//Console.WriteLine(\"Event received.\");</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _publisher<span class=\"token punctuation\">.</span>SomethingHappened <span class=\"token operator\">-=</span> OnSomethingHappened<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// and another benchmark method</span>\n<span class=\"token punctuation\">[</span>Benchmark<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProperlyDisposeSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">using</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> subscriber <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FixedSubscriber</span><span class=\"token punctuation\">(</span>_publisher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _publisher<span class=\"token punctuation\">.</span><span class=\"token function\">RaiseEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>It will take a few minutes (be sure to comment out the <code class=\"language-text\">Console.WriteLine</code> call, too), and then you'll see the results:</p>\n<p><img src=\"/img/benchmarkdotnet-comparison.png\" alt=\"\"></p>\n<p>The allocated memory is the same in both cases, but notice that garbage collection is happening in the second case. This is because the <code class=\"language-text\">FixedSubscriber</code> is properly unsubscribing from the event, allowing the garbage collector to reclaim the memory.</p>\n<p>But even if you're always diligent about unsubscribing from events, there are other issues to consider.</p>\n<h3>Thread-Safety Issues</h3>\n<p>C# events are not thread-safe by default. If multiple threads raise or subscribe to an event at the same time, it can lead to race conditions or even <code class=\"language-text\">NullReferenceException</code>.</p>\n<p>Example of a Potential Race Condition:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>Alarm<span class=\"token punctuation\">></span><span class=\"token punctuation\">?</span></span> AlarmAdded<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddAlarm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// A race condition can occur if AlarmAdded is modified on another thread</span>\n        AlarmAdded<span class=\"token punctuation\">?.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> alarm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To avoid these issues, you would need to introduce thread-safety mechanisms, such as copying the event delegate to a local variable before invoking it.</p>\n<h3>Tight Coupling</h3>\n<p>C# events create tight coupling between the publisher and the subscribers. The publisher directly depends on the existence of the subscribers, making it harder to maintain and test the system. Other patterns can be more flexible because subscribers (handlers) can be instantiated as needed.</p>\n<p>Why This Is Problematic:</p>\n<ul>\n<li>The <code class=\"language-text\">AlarmService</code> has no control over what the subscribers do.</li>\n<li>Subscribers may unintentionally introduce performance issues or exceptions that impact the entire system.</li>\n</ul>\n<h2>Better Alternatives</h2>\n<p>To avoid these issues, consider the following alternatives to C# events:</p>\n<h3>Use a Mediator Pattern</h3>\n<p>The Mediator pattern decouples the publisher and subscribers, making the system more scalable and testable. Libraries like <a href=\"https://github.com/jbogard/MediatR\">MediatR</a> are great for implementing this pattern in ASP.NET Core. Here's how you could rewrite the alarm example using MediatR:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmAdded</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotification</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Alarm</span> Alarm <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AlarmAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Alarm <span class=\"token operator\">=</span> alarm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IMediator</span> _mediator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AlarmService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IMediator</span> mediator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _mediator <span class=\"token operator\">=</span> mediator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddAlarm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Business logic for adding an alarm</span>\n        _mediator<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AlarmAdded</span><span class=\"token punctuation\">(</span>alarm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotificationHandler<span class=\"token punctuation\">&lt;</span>AlarmAdded<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmAdded</span> notification<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CancellationToken</span> cancellationToken<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Alarm received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">notification<span class=\"token punctuation\">.</span>Alarm<span class=\"token punctuation\">.</span>Code</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span>CompletedTask<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">AlarmService</code> publishes an <code class=\"language-text\">AlarmAdded</code> notification using MediatR, and the <code class=\"language-text\">AlarmHandler</code> subscribes to it. This approach decouples the publisher and subscribers, making the system more maintainable and testable. There's no direct dependency between the components, so there's no risk of memory leaks or tight coupling.</p>\n<h3>Use an Event Aggregator</h3>\n<p>An Event Aggregator is a centralized hub for managing events and subscribers. This pattern is particularly useful in applications with complex communication requirements.</p>\n<p>An example of an Event Aggregator in ASP.NET Core:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventAggregator</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>Type<span class=\"token punctuation\">,</span> List<span class=\"token punctuation\">&lt;</span>Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _subscribers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Subscribe</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> handler<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            handlers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Action<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            _subscribers<span class=\"token punctuation\">[</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> handlers<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        handlers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=></span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token generic-method\"><span class=\"token function\">Publish</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> handler <span class=\"token keyword\">in</span> handlers<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">EventAggregator</span> _eventAggregator<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AlarmService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventAggregator</span> eventAggregator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _eventAggregator <span class=\"token operator\">=</span> eventAggregator<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AddAlarm</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Business logic for adding an alarm</span>\n        _eventAggregator<span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>alarm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmSubscriber</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AlarmSubscriber</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EventAggregator</span> eventAggregator<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        eventAggregator<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Subscribe</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Alarm<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>OnAlarmAdded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAlarmAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alarm</span> alarm<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"Alarm received: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">alarm<span class=\"token punctuation\">.</span>Code</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example, the <code class=\"language-text\">EventAggregator</code> acts as a central hub for managing events and subscribers. The <code class=\"language-text\">AlarmService</code> publishes an <code class=\"language-text\">Alarm</code> message, and the <code class=\"language-text\">AlarmSubscriber</code> subscribes to it. This pattern provides a flexible and scalable way to manage communication between components, without the issues associated with C# events or dependency on third-party libraries.</p>\n<h3>Conclusion</h3>\n<p>C# events can be a useful tool in small, isolated systems, but they often cause more problems than they solve in modern ASP.NET Core applications. By understanding their limitations and considering alternative approaches, you can build more robust, maintainable systems.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://learn.microsoft.com/dotnet/csharp/programming-guide/events/\">C# Events</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/standard/events/\">Handle and Raise Events</a></li>\n<li><a href=\"https://www.reddit.com/r/dotnet/comments/lrby7j/events_and_delegates_in_an_aspnet_core/\">Reddit: Events and delegates in ASP.NET Core</a></li>\n<li><a href=\"https://www.youtube.com/@Ardalis\">Follow Me on YouTube</a></li>\n</ul>",
    "sanitized": "The Hidden Pitfalls of Using C# Events in ASP.NET Core Applications\nC# events are a powerful feature of the language, providing a simple mechanism for building publish-subscribe communication patterns. However, when used in ASP.NET Core applications, events can lead to subtle, hard-to-diagnose issues that can harm the reliability and scalability of your application. In this article, I'll highlight the main issues with using C# events in ASP.NET Core and share better alternatives.\nThe Appeal of C# Events\nAt first glance, C# events seem like a natural choice for situations where you want to notify other parts of the application about something that has happened. Here's a simple example of an event-based system in a hypothetical alarm service:\npublic class AlarmService\n{\n    public event EventHandler<Alarm>? AlarmAdded;\n\n    public void AddAlarm(Alarm alarm)\n    {\n        // Business logic for adding an alarm\n        AlarmAdded?.Invoke(this, alarm); // Notify subscribers\n    }\n}\n\npublic class AlarmSubscriber\n{\n    public AlarmSubscriber(AlarmService service)\n    {\n        service.AlarmAdded += OnAlarmAdded; // C# event subscription\n    }\n\n    private void OnAlarmAdded(object? sender, Alarm alarm)\n    {\n        Console.WriteLine($\"Alarm received: {alarm.Code}\");\n    }\n}\nIn this example, the AlarmService notifies subscribers whenever a new alarm is added. While this works well for small, simple applications, it introduces problems when used in larger or more complex systems, like ASP.NET Core applications.\nThe Problems with Events in ASP.NET Core\nThere are several issues with using C# events in ASP.NET Core applications. Let's look at a few of them just so you have some concrete reasons to avoid them and understand it's not just because I said so.\nMemory Leaks\nOne of the most common issues with events is that they can lead to memory leaks if you forget to unsubscribe (or you remember but bad things happen and the code that would have cleaned them up doesn't end up running). In .NET, the event publisher holds a strong reference to the event handler. If a subscriber is not unsubscribed, it cannot be garbage-collected even if it is no longer in use. This is particularly problematic in ASP.NET Core, where transient objects are common. As you may know, in .NET the garbage collector is the thing that makes sure unused memory is reclaimed for the application. If your application continues to create objects that cannot be garbage collected, you will eventually run out of memory and your application will crash.\nExample of a Memory Leak:\npublic class LeakyAlarmSubscriber\n{\n    public LeakyAlarmSubscriber(AlarmService service)\n    {\n        // Subscribing to the event but never unsubscribing\n        service.AlarmAdded += OnAlarmAdded;\n    }\n\n    private void OnAlarmAdded(object? sender, Alarm alarm)\n    {\n        Console.WriteLine($\"Alarm received: {alarm.Code}\");\n    }\n}\nEvery time a new LeakyAlarmSubscriber is created, it stays in memory indefinitely because the AlarmService holds a reference to its event handler. You can see this in the following memory snapshots taken with the Visual Studio debugger:\n\nYou can also demonstrate the issue using BenchmarkDotNet to measure the memory usage of your application over time. Set up the benchmark:\nusing BenchmarkDotNet.Attributes;\n\n[MemoryDiagnoser]\npublic class MemoryLeakBenchmark\n{\n    private EventPublisher _publisher;\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        _publisher = new EventPublisher();\n    }\n\n    [Benchmark]\n    public void CauseLeak()\n    {\n        var subscriber = new EventSubscriber(_publisher);\n        _publisher.RaiseEvent();\n    }\n}\n\n// run it from Main()\nBenchmarkRunner.Run<MemoryLeakBenchmark>();\nThen add a FixedSubscriber that uses IDisposable to unsubscribe from the event:\npublic class FixedSubscriber : IDisposable\n{\n    private readonly EventPublisher _publisher;\n\n    public FixedSubscriber(EventPublisher publisher)\n    {\n        _publisher = publisher;\n        _publisher.SomethingHappened += OnSomethingHappened;\n    }\n\n    private void OnSomethingHappened(object? sender, EventArgs e)\n    {\n        //Console.WriteLine(\"Event received.\");\n    }\n\n    public void Dispose()\n    {\n        _publisher.SomethingHappened -= OnSomethingHappened;\n    }\n}\n// and another benchmark method\n[Benchmark]\npublic void ProperlyDisposeSubscriber()\n{\n    using var subscriber = new FixedSubscriber(_publisher);\n    _publisher.RaiseEvent();\n}\n\nIt will take a few minutes (be sure to comment out the Console.WriteLine call, too), and then you'll see the results:\n\nThe allocated memory is the same in both cases, but notice that garbage collection is happening in the second case. This is because the FixedSubscriber is properly unsubscribing from the event, allowing the garbage collector to reclaim the memory.\nBut even if you're always diligent about unsubscribing from events, there are other issues to consider.\nThread-Safety Issues\nC# events are not thread-safe by default. If multiple threads raise or subscribe to an event at the same time, it can lead to race conditions or even NullReferenceException.\nExample of a Potential Race Condition:\npublic class AlarmService\n{\n    public event EventHandler<Alarm>? AlarmAdded;\n\n    public void AddAlarm(Alarm alarm)\n    {\n        // A race condition can occur if AlarmAdded is modified on another thread\n        AlarmAdded?.Invoke(this, alarm);\n    }\n}\nTo avoid these issues, you would need to introduce thread-safety mechanisms, such as copying the event delegate to a local variable before invoking it.\nTight Coupling\nC# events create tight coupling between the publisher and the subscribers. The publisher directly depends on the existence of the subscribers, making it harder to maintain and test the system. Other patterns can be more flexible because subscribers (handlers) can be instantiated as needed.\nWhy This Is Problematic:\n\nThe AlarmService has no control over what the subscribers do.\nSubscribers may unintentionally introduce performance issues or exceptions that impact the entire system.\n\nBetter Alternatives\nTo avoid these issues, consider the following alternatives to C# events:\nUse a Mediator Pattern\nThe Mediator pattern decouples the publisher and subscribers, making the system more scalable and testable. Libraries like MediatR are great for implementing this pattern in ASP.NET Core. Here's how you could rewrite the alarm example using MediatR:\npublic class AlarmAdded : INotification\n{\n    public Alarm Alarm { get; }\n\n    public AlarmAdded(Alarm alarm)\n    {\n        Alarm = alarm;\n    }\n}\n\npublic class AlarmService\n{\n    private readonly IMediator _mediator;\n\n    public AlarmService(IMediator mediator)\n    {\n        _mediator = mediator;\n    }\n\n    public void AddAlarm(Alarm alarm)\n    {\n        // Business logic for adding an alarm\n        _mediator.Publish(new AlarmAdded(alarm));\n    }\n}\n\npublic class AlarmHandler : INotificationHandler<AlarmAdded>\n{\n    public Task Handle(AlarmAdded notification, CancellationToken cancellationToken)\n    {\n        Console.WriteLine($\"Alarm received: {notification.Alarm.Code}\");\n        return Task.CompletedTask;\n    }\n}\nIn this example, the AlarmService publishes an AlarmAdded notification using MediatR, and the AlarmHandler subscribes to it. This approach decouples the publisher and subscribers, making the system more maintainable and testable. There's no direct dependency between the components, so there's no risk of memory leaks or tight coupling.\nUse an Event Aggregator\nAn Event Aggregator is a centralized hub for managing events and subscribers. This pattern is particularly useful in applications with complex communication requirements.\nAn example of an Event Aggregator in ASP.NET Core:\npublic class EventAggregator\n{\n    private readonly Dictionary<Type, List<Action<object>>> _subscribers = new();\n\n    public void Subscribe<T>(Action<T> handler)\n    {\n        if (!_subscribers.TryGetValue(typeof(T), out var handlers))\n        {\n            handlers = new List<Action<object>>();\n            _subscribers[typeof(T)] = handlers;\n        }\n\n        handlers.Add(obj => handler((T)obj));\n    }\n\n    public void Publish<T>(T message)\n    {\n        if (_subscribers.TryGetValue(typeof(T), out var handlers))\n        {\n            foreach (var handler in handlers)\n            {\n                handler(message);\n            }\n        }\n    }\n}\n\npublic class AlarmService\n{\n    private readonly EventAggregator _eventAggregator;\n\n    public AlarmService(EventAggregator eventAggregator)\n    {\n        _eventAggregator = eventAggregator;\n    }\n\n    public void AddAlarm(Alarm alarm)\n    {\n        // Business logic for adding an alarm\n        _eventAggregator.Publish(alarm);\n    }\n}\n\npublic class AlarmSubscriber\n{\n    public AlarmSubscriber(EventAggregator eventAggregator)\n    {\n        eventAggregator.Subscribe<Alarm>(OnAlarmAdded);\n    }\n\n    private void OnAlarmAdded(Alarm alarm)\n    {\n        Console.WriteLine($\"Alarm received: {alarm.Code}\");\n    }\n}\nIn this example, the EventAggregator acts as a central hub for managing events and subscribers. The AlarmService publishes an Alarm message, and the AlarmSubscriber subscribes to it. This pattern provides a flexible and scalable way to manage communication between components, without the issues associated with C# events or dependency on third-party libraries.\nConclusion\nC# events can be a useful tool in small, isolated systems, but they often cause more problems than they solve in modern ASP.NET Core applications. By understanding their limitations and considering alternative approaches, you can build more robust, maintainable systems.\nReferences\n\nC# Events\nHandle and Raise Events\nReddit: Events and delegates in ASP.NET Core\nFollow Me on YouTube"
  },
  {
    "itemId": "https://ardalis.com/interfaces-describe-what-implementations-describe-how/",
    "raw": "<p>When working with software development, especially in object-oriented or component-based systems, understanding the distinction between interfaces and implementations is crucial. The two terms often come up in conversations about architecture, design patterns, and coding best practices, but what do they really mean? In this post, we'll break down the difference and why it matters.</p>\n<h2>YouTube</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Cg4w-MgjkLA?si=LcOwZQKK3c4Q_y7U\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n<h2>What is an Interface?</h2>\n<p>An interface in software development defines <em>what</em> a component or class can do. Think of it like a contract or a blueprint. It specifies the methods or behaviors that must be available without dictating <em>how</em> they should be carried out. (While <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/interface-implementation/default-interface-methods-versions\">default interface methods</a> are a special case in modern languages like C#, they don't change the fundamental role of interfaces as abstractions).</p>\n<p>For example, imagine you're creating an interface for a file reader. The interface might define methods like <code class=\"language-text\">Open()</code>, <code class=\"language-text\">Read()</code>, and <code class=\"language-text\">Close()</code>. However, it doesn't specify whether the file is read from a local drive, from the cloud, or even from a database. It simply outlines <em>what</em> the class should be able to do.</p>\n<p>In simpler terms, the interface focuses on the <strong>what</strong>—the behavior and capabilities your system should expose. This allows different parts of a system to interact without needing to know the internal workings of the other parts. It's a definite <a href=\"https://deviq.com/antipatterns/code-smells\">code smell</a> if your interface indicates <strong>how</strong> it accomplishes the operations it exposes.</p>\n<p>Remember:</p>\n<blockquote>\n<p><strong>Interfaces describe what; Implementations describe how.</strong></p>\n</blockquote>\n<h2>What is an Implementation?</h2>\n<p>The implementation, on the other hand, defines <em>how</em> those methods or behaviors are actually carried out. Continuing with the file reader example, the implementation would contain the logic to open, read, and close files in a specific environment, such as reading a local file or making HTTP requests to download a file from the cloud.</p>\n<p>While the interface lays out <em>what</em> needs to be done, the implementation handles the nitty-gritty details of <em>how</em> it's done. This separation is essential because it allows for flexibility and scalability. For example, you could have multiple implementations of the same interface: one for local files, another for cloud storage, and yet another for database access, all without changing how the rest of your system interacts with those components.</p>\n<p>Again, the interface's job is to simply describe <strong>what</strong> needs to happen. The implementation is responsible for <strong>how</strong> it's done, in some specific manner. (and if you're wondering about <strong>why</strong>, see <a href=\"https://ardalis.com/getting-started-with-architecture-decision-records/\">architecture decision records</a>).</p>\n<h2>Why the Separation Matters</h2>\n<h3>Flexibility</h3>\n<p>By separating the <em>what</em> and the <em>how</em>, you gain tremendous flexibility. Changing how something is done (such as switching from reading a local file to reading from a cloud storage service) doesn't require changes to every part of the code that interacts with the file reader. Instead, you simply swap out one implementation for another.</p>\n<p>From the calling code's perspective, it shouldn't be concerned about <em>how</em> the task is performed, as long as it <em>is</em> performed. When you're able to achieve this kind of separation, it makes your software design much simpler.</p>\n<h3>Testability</h3>\n<p>This separation also makes your code much easier to test. You can mock or stub out the <em>how</em> part (the implementation) when writing unit tests and focus solely on whether the system behaves as expected based on the interface. Maybe in production the file access implementation works with real files. However, in your tests you need to change how it works. The test implementation may simply return an expected string or result, or maybe it throws an exception saying the file doesn't exist. It's often much easier to set up and run tests using mock or fake implementations of <em>how</em> than by using the production \"real\" version of <em>how</em> the code implements the interface in question.</p>\n<h3>Maintainability</h3>\n<p>Lastly, maintaining code becomes easier when the <em>what</em> and <em>how</em> are decoupled. Consumers of the interface need only worry about the interface, not the underlying details, making such code simpler and more loosely coupled. Implementations, too, become simpler since they too can focus solely on implementing the (hopefully <a href=\"https://deviq.com/principles/interface-segregation\">small and cohesive</a>) interface, without regard for every possible way the whole system might need to perform related tasks.</p>\n<h2>Real-World Example</h2>\n<p>Let's consider another common real-world example: sending notifications.</p>\n<ul>\n<li><strong>Interface</strong>: You might define an interface called <code class=\"language-text\">ISendEmail</code> with a single method: <code class=\"language-text\">Send()</code>.</li>\n<li><strong>Implementation</strong>: One implementation might send emails using an SMTP server, while another might send emails using a cloud service provider. Yet another might simply send a message on a message queue for some other part of the system to deal with. The rest of the system doesn't care how notifications are sent; it only interacts with the <code class=\"language-text\">ISendEmail</code> interface.</li>\n</ul>\n<p>If later on you need to switch from SMTP to a cloud provider or your own microservice, you need only switch out implementations. The <strong>what</strong> described by the interface remains unchanged, and so too does all of your code that consumes that interface. Only the implementations, which describe <strong>how</strong> the sending is done, need to be changed. Ideally, instead of modifying existing implementations, you introduce new ones as needed, ensuring minimal disruption to the system. <a href=\"https://www.weeklydevtips.com/episodes/015\">Learn more.</a>.</p>\n<h2>Conclusion</h2>\n<p>Understanding the difference between interfaces (what) and implementations (how) is a foundational concept in software design that improves flexibility, testability, and maintainability. It allows you to build systems where the underlying functionality can evolve without breaking the contracts that the rest of your application depends on.</p>\n<p>By focusing on the <em>what</em> with interfaces, and leaving the <em>how</em> to implementations, you can create modular, scalable, and adaptable codebases that are easier to manage over time.</p>",
    "sanitized": "When working with software development, especially in object-oriented or component-based systems, understanding the distinction between interfaces and implementations is crucial. The two terms often come up in conversations about architecture, design patterns, and coding best practices, but what do they really mean? In this post, we'll break down the difference and why it matters.\nYouTube\n\nWhat is an Interface?\nAn interface in software development defines what a component or class can do. Think of it like a contract or a blueprint. It specifies the methods or behaviors that must be available without dictating how they should be carried out. (While default interface methods are a special case in modern languages like C#, they don't change the fundamental role of interfaces as abstractions).\nFor example, imagine you're creating an interface for a file reader. The interface might define methods like Open(), Read(), and Close(). However, it doesn't specify whether the file is read from a local drive, from the cloud, or even from a database. It simply outlines what the class should be able to do.\nIn simpler terms, the interface focuses on the what—the behavior and capabilities your system should expose. This allows different parts of a system to interact without needing to know the internal workings of the other parts. It's a definite code smell if your interface indicates how it accomplishes the operations it exposes.\nRemember:\n\nInterfaces describe what; Implementations describe how.\n\nWhat is an Implementation?\nThe implementation, on the other hand, defines how those methods or behaviors are actually carried out. Continuing with the file reader example, the implementation would contain the logic to open, read, and close files in a specific environment, such as reading a local file or making HTTP requests to download a file from the cloud.\nWhile the interface lays out what needs to be done, the implementation handles the nitty-gritty details of how it's done. This separation is essential because it allows for flexibility and scalability. For example, you could have multiple implementations of the same interface: one for local files, another for cloud storage, and yet another for database access, all without changing how the rest of your system interacts with those components.\nAgain, the interface's job is to simply describe what needs to happen. The implementation is responsible for how it's done, in some specific manner. (and if you're wondering about why, see architecture decision records).\nWhy the Separation Matters\nFlexibility\nBy separating the what and the how, you gain tremendous flexibility. Changing how something is done (such as switching from reading a local file to reading from a cloud storage service) doesn't require changes to every part of the code that interacts with the file reader. Instead, you simply swap out one implementation for another.\nFrom the calling code's perspective, it shouldn't be concerned about how the task is performed, as long as it is performed. When you're able to achieve this kind of separation, it makes your software design much simpler.\nTestability\nThis separation also makes your code much easier to test. You can mock or stub out the how part (the implementation) when writing unit tests and focus solely on whether the system behaves as expected based on the interface. Maybe in production the file access implementation works with real files. However, in your tests you need to change how it works. The test implementation may simply return an expected string or result, or maybe it throws an exception saying the file doesn't exist. It's often much easier to set up and run tests using mock or fake implementations of how than by using the production \"real\" version of how the code implements the interface in question.\nMaintainability\nLastly, maintaining code becomes easier when the what and how are decoupled. Consumers of the interface need only worry about the interface, not the underlying details, making such code simpler and more loosely coupled. Implementations, too, become simpler since they too can focus solely on implementing the (hopefully small and cohesive) interface, without regard for every possible way the whole system might need to perform related tasks.\nReal-World Example\nLet's consider another common real-world example: sending notifications.\n\nInterface: You might define an interface called ISendEmail with a single method: Send().\nImplementation: One implementation might send emails using an SMTP server, while another might send emails using a cloud service provider. Yet another might simply send a message on a message queue for some other part of the system to deal with. The rest of the system doesn't care how notifications are sent; it only interacts with the ISendEmail interface.\n\nIf later on you need to switch from SMTP to a cloud provider or your own microservice, you need only switch out implementations. The what described by the interface remains unchanged, and so too does all of your code that consumes that interface. Only the implementations, which describe how the sending is done, need to be changed. Ideally, instead of modifying existing implementations, you introduce new ones as needed, ensuring minimal disruption to the system. Learn more..\nConclusion\nUnderstanding the difference between interfaces (what) and implementations (how) is a foundational concept in software design that improves flexibility, testability, and maintainability. It allows you to build systems where the underlying functionality can evolve without breaking the contracts that the rest of your application depends on.\nBy focusing on the what with interfaces, and leaving the how to implementations, you can create modular, scalable, and adaptable codebases that are easier to manage over time."
  },
  {
    "itemId": "https://ardalis.com/you-should-blog/",
    "raw": "<p>As a software developer, you might spend most of your time immersed in code, solving problems, and building innovative solutions. But have you ever considered starting a blog? If you haven't, let me give you some compelling reasons why you should. This is advice I frequently give to members of my <a href=\"https://devBetter.com\">developer group coaching program at devBetter.com</a>.</p>\n<h2>Watch the Video</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/yRLaoq_q1a8?si=AhncsYcrusSLaOat\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n<h2>1. Sharpen Your Skills</h2>\n<p>One of the best ways to deepen your understanding of any topic is to teach it to others.</p>\n<blockquote>\n<p>\"To teach is to learn twice.\"</p>\n</blockquote>\n<p>When you blog, you have to explain concepts clearly and coherently, which forces you to truly grasp the material. Whether you're writing about complex algorithms, new technologies, or simple tips and tricks, blogging solidifies your knowledge.</p>\n<p>Every time you sit down to write, it's like attending a mini bootcamp. You're researching, organizing your thoughts, and sometimes even learning new things in the process. Over time, this consistent practice can significantly sharpen your skills.</p>\n<p>If writing doesn't come easily to you, well, that's another reason to start a blog! <a href=\"https://weeklydevtips.com/episodes/040\">If it hurts, do it more often</a>. The more often you do it, the better and more efficient you'll become!</p>\n<h2>2. Build Your Personal Brand</h2>\n<p>In today's digital age, your online presence is more important than ever. A blog is a fantastic way to showcase your expertise, interests, and <em>unique voice</em>. Imagine someone Googles your name and finds a collection of high-quality, insightful content that you've created. That's a powerful personal brand!</p>\n<p>A well-maintained blog can open doors to job opportunities, speaking engagements, and collaborations that you might not have anticipated. It positions you as an authority in your field and sets you apart from others in the industry. It's also an excellent way to establish <em>trust</em>. Having an online presence where you share information about yourself and your expertise in a curated and professional manner is a great way to develop an audience who, over time, will begin to feel like <em>they know you</em> - even though you've never met! Think about some of the folks in our industry you've heard, seen, or read and you'll know what I mean. Videos and podcasts can provide an even closer connection. However, publishing text is often a much easier entry point for developers than jumping into podcasting or YouTube/TikTok...</p>\n<p>Why do you care about your personal brand? Maybe you're not a consultant or independent developer, but rather you just work at a regular job for some company. That's fine, but perhaps you've noticed that many of those regular jobs keep encountering sweeping and often completely unexpected layoffs in the last few years. If, and hopefully not, but if you were to be impacted by such an event, would you rather be trying to find a new position as a relatively unknown entity (along side everyone else applying for similar positions)? Or would you rather write a blog post announcing your newfound availability and, with a large enough audience, have some confidence that someone would <strong>reach out to you</strong> with an opportunity to talk about a role in their organization?</p>\n<h2>3. Document Your Learning Journey</h2>\n<p>Blogging is also an excellent way to document your learning journey. We all start somewhere, and having a record of your progress can be incredibly rewarding. Plus, it's beneficial to others who might be just a few steps behind you in <em>their</em> learning journey. In fact, if you've ever thought <em>\"I don't have anything to say - someone smarter has already written about it\"</em> remember (if nothing else), your content will be more recent than anyone else's. It's going to reflect your personal experience. Your assumptions. The latest version of whatever you're working with. The steps <strong>you</strong> took to approach and hopefully solve any problems encountered.</p>\n<p>Yes, someone else may be the expert, but a lot of the time beginners learn best from a fellow beginner who just went through the process. And guess what? <strong>There are always a lot more beginners than experts</strong> so writing content focused on beginners is a great way to reach a larger audience!</p>\n<p>Your early posts might serve as inspiration or guidance for those who are new to the field. It's a great way to show that learning is a continuous process, and everyone develops at their own pace. Nobody knows everything, and nobody expects you to know everything. Write about things that interest you, including things you're just starting to investigate, and many others who share that interest will tune in.</p>\n<h2>4. Contribute to the Community</h2>\n<p>The developer community thrives on shared knowledge. We've all benefited from tutorials, forums, and blog posts that have helped us solve tough problems or learn something new. By starting your own blog, you can contribute back to this collective pool of resources.</p>\n<p>Your insights and experiences could be exactly what someone else needs to overcome a challenge. It's a great way to give back to the community that has supported your growth as a developer.</p>\n<h2>5. Help Out Future You</h2>\n<p>Have you ever solved a tricky problem, only to forget the details when you run into it again months or even years later? Blogging is a great way to document the solutions you've discovered, creating a personal knowledge base that you can refer back to whenever you need it. I often search for \"some topic ardalis\" to find things I've written about in the past. If you're already taking notes somewhere (paper, Notion, OneNote, whatever) think of your blog as another place you can take notes, but with the added benefit of being able to search for them later from anywhere <strong>and</strong> you get all the other benefits in this article! Win-Win!</p>\n<p>By writing about the problems you encounter and the solutions you devise, you're not just helping others—you're helping your future self. Instead of spending time retracing your steps or searching for that obscure fix you found ages ago, you can simply revisit your own blog and get back on track quickly. It's like creating a manual for your future self, saving you time and frustration down the road. Future You will thank Present You!</p>\n<h2>6. Improve Your Communication Skills</h2>\n<p>Effective communication is a crucial skill in any profession, and blogging is a great way to practice it. Writing forces you to explain technical concepts in a clear, concise, and engaging way. Over time, this practice will enhance your ability to communicate not just in writing, but also in meetings, presentations, and interviews.</p>\n<p>Improved communication skills can lead to better job performance, stronger leadership abilities, and more effective teamwork. It's a(nother) win-win!</p>\n<h2>But But But</h2>\n<p>\"But... I'm already on social media\"</p>\n<p>Social media content, generally, isn't optimized for long term access. A post you write on Twitter, LinkedIn, or Facebook is unlikely to come up on the first page of Google unless it's <em>really</em> popular, even if content is an exact match for the search. Also, there's nothing to prevent any 3rd party platform from de-listing you, or changing their algorithm to stop featuring you, etc. It's always better for you to own your own content so this can't happen.</p>\n<p>\"But... I don't have time\"</p>\n<p>This is a common concern, especially when you're juggling a full-time job, personal projects, and maybe even a family. But here's the thing—blogging doesn't have to consume your life. Start small - write one post a month, or even just a few times a year. The key is consistency, not frequency. Over time, these small efforts add up and can have a big impact. And remember your blog posts don't have to be a certain number of words. Sometimes a short post (unlike this one) is all you need!</p>\n<p>\"But... I'm not a good writer\"</p>\n<p>You don't need to be a professional writer to start a blog. Blogging is about sharing your thoughts, experiences, and knowledge, not about crafting perfect prose. In fact, the more authentic and relatable your voice, the better. Your writing will improve with practice, and the important thing is to get started. Plus, the developer community is generally more interested in the value of your content than your writing style.</p>\n<p>\"But... I don't have anything unique to say\"</p>\n<p>You might feel that there's already so much content out there, and you don't have anything new to add. But remember, your perspective is unique. The way you explain something might resonate with someone in a way that other content hasn't. Plus, even if the topic has been covered before, your personal experiences, tips, and insights can provide a fresh take. Don't underestimate the value of your voice. See point 3 above.</p>\n<p>If you need help coming up with ideas for things to write about, I posted <a href=\"https://ardalis.com/5-solid-ways-to-come-up-with-good-blog-post-topics/\">5 Solid Ways to Come Up with Good Blog Post Topics</a> a few years ago, and I plan on writing an updated version of this soon (since that one doesn't cover things like AI and how it can help you with your blogging).</p>\n<p>\"But... Nobody will read it\"</p>\n<p>At first, your blog might not have a large audience, and that's okay. It takes time to build a readership. However, even if only a few people read your posts, those people could find your content incredibly valuable. And as your blog grows, so will your audience. Focus on creating content that's useful, and the readers will come. And remember, you can start out by just writing your blog as notes <strong>just for you</strong>. That's what I did, and it just so happened that other folks found some of my articles useful, too.</p>\n<p>\"But... Blogging is outdated\"</p>\n<p>Some might argue that blogging has been replaced by video content or social media, but that's not true. While these platforms are popular, blogging remains a powerful medium for in-depth content, tutorials, and technical explanations. It's also highly searchable, which means your content can continue to be discovered long after it's published. Blogs provide a space for deeper dives into topics that short-form content just can't cover.</p>\n<p>For developers, blogs provide a great place to share content that has to do with <em>code</em>. It's much harder for content consumers to search for or extract code from a video or a podcast. Inlining and explaining code blocks in blogs/text is much easier to consume and understand.</p>\n<h2>Start Your Blog Today</h2>\n<p>If you've been thinking about starting a blog, there's no better time than now. Grab a domain, pick a platform, and start writing. The benefits you'll gain—from sharpening your skills to building your personal brand—make it a worthwhile investment in your career and personal development.</p>\n<p>Don't let perfect be the enemy of good. If coming up with a domain or figuring out how to blog is slowing you down from writing that first article, just go to <a href=\"https://dev.to\">DEV.to</a> and start there. I highly recommend that you own your own content, including your blog, so I wouldn't <em>stay</em> at a third-party site. But it's a good way to get started. Similarly, anyone in my devBetter program can blog on <a href=\"https://blogs.devbetter.com/\">blogs.devbetter.com</a> at least until they have their own site.</p>\n<p>Blogging might seem daunting at first, but remember, everyone starts somewhere. Your future self will thank you for taking the plunge. So go ahead, start your blog today, and watch how it transforms your journey as a software developer.</p>\n<p>Thanks for reading! If you have any questions or if you're already blogging, I'd love to hear about your experiences in the comments below. Also, if you have a favorite developer blog that isn't already listed in the comments below, please share, and feel free to share your own as well! Finally, if you're interested in learning about how I use AI to support my blogging habit, let me know that as well and I'll integrate your requests into an upcoming article.</p>\n<p>Happy blogging!</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=yRLaoq_q1a8\">You Should Blog (YouTube)</a></li>\n<li><a href=\"https://www.youtube.com/@Ardalis\">Follow Me on YouTube</a></li>\n</ul>",
    "sanitized": "As a software developer, you might spend most of your time immersed in code, solving problems, and building innovative solutions. But have you ever considered starting a blog? If you haven't, let me give you some compelling reasons why you should. This is advice I frequently give to members of my developer group coaching program at devBetter.com.\nWatch the Video\n\n1. Sharpen Your Skills\nOne of the best ways to deepen your understanding of any topic is to teach it to others.\n\n\"To teach is to learn twice.\"\n\nWhen you blog, you have to explain concepts clearly and coherently, which forces you to truly grasp the material. Whether you're writing about complex algorithms, new technologies, or simple tips and tricks, blogging solidifies your knowledge.\nEvery time you sit down to write, it's like attending a mini bootcamp. You're researching, organizing your thoughts, and sometimes even learning new things in the process. Over time, this consistent practice can significantly sharpen your skills.\nIf writing doesn't come easily to you, well, that's another reason to start a blog! If it hurts, do it more often. The more often you do it, the better and more efficient you'll become!\n2. Build Your Personal Brand\nIn today's digital age, your online presence is more important than ever. A blog is a fantastic way to showcase your expertise, interests, and unique voice. Imagine someone Googles your name and finds a collection of high-quality, insightful content that you've created. That's a powerful personal brand!\nA well-maintained blog can open doors to job opportunities, speaking engagements, and collaborations that you might not have anticipated. It positions you as an authority in your field and sets you apart from others in the industry. It's also an excellent way to establish trust. Having an online presence where you share information about yourself and your expertise in a curated and professional manner is a great way to develop an audience who, over time, will begin to feel like they know you - even though you've never met! Think about some of the folks in our industry you've heard, seen, or read and you'll know what I mean. Videos and podcasts can provide an even closer connection. However, publishing text is often a much easier entry point for developers than jumping into podcasting or YouTube/TikTok...\nWhy do you care about your personal brand? Maybe you're not a consultant or independent developer, but rather you just work at a regular job for some company. That's fine, but perhaps you've noticed that many of those regular jobs keep encountering sweeping and often completely unexpected layoffs in the last few years. If, and hopefully not, but if you were to be impacted by such an event, would you rather be trying to find a new position as a relatively unknown entity (along side everyone else applying for similar positions)? Or would you rather write a blog post announcing your newfound availability and, with a large enough audience, have some confidence that someone would reach out to you with an opportunity to talk about a role in their organization?\n3. Document Your Learning Journey\nBlogging is also an excellent way to document your learning journey. We all start somewhere, and having a record of your progress can be incredibly rewarding. Plus, it's beneficial to others who might be just a few steps behind you in their learning journey. In fact, if you've ever thought \"I don't have anything to say - someone smarter has already written about it\" remember (if nothing else), your content will be more recent than anyone else's. It's going to reflect your personal experience. Your assumptions. The latest version of whatever you're working with. The steps you took to approach and hopefully solve any problems encountered.\nYes, someone else may be the expert, but a lot of the time beginners learn best from a fellow beginner who just went through the process. And guess what? There are always a lot more beginners than experts so writing content focused on beginners is a great way to reach a larger audience!\nYour early posts might serve as inspiration or guidance for those who are new to the field. It's a great way to show that learning is a continuous process, and everyone develops at their own pace. Nobody knows everything, and nobody expects you to know everything. Write about things that interest you, including things you're just starting to investigate, and many others who share that interest will tune in.\n4. Contribute to the Community\nThe developer community thrives on shared knowledge. We've all benefited from tutorials, forums, and blog posts that have helped us solve tough problems or learn something new. By starting your own blog, you can contribute back to this collective pool of resources.\nYour insights and experiences could be exactly what someone else needs to overcome a challenge. It's a great way to give back to the community that has supported your growth as a developer.\n5. Help Out Future You\nHave you ever solved a tricky problem, only to forget the details when you run into it again months or even years later? Blogging is a great way to document the solutions you've discovered, creating a personal knowledge base that you can refer back to whenever you need it. I often search for \"some topic ardalis\" to find things I've written about in the past. If you're already taking notes somewhere (paper, Notion, OneNote, whatever) think of your blog as another place you can take notes, but with the added benefit of being able to search for them later from anywhere and you get all the other benefits in this article! Win-Win!\nBy writing about the problems you encounter and the solutions you devise, you're not just helping others—you're helping your future self. Instead of spending time retracing your steps or searching for that obscure fix you found ages ago, you can simply revisit your own blog and get back on track quickly. It's like creating a manual for your future self, saving you time and frustration down the road. Future You will thank Present You!\n6. Improve Your Communication Skills\nEffective communication is a crucial skill in any profession, and blogging is a great way to practice it. Writing forces you to explain technical concepts in a clear, concise, and engaging way. Over time, this practice will enhance your ability to communicate not just in writing, but also in meetings, presentations, and interviews.\nImproved communication skills can lead to better job performance, stronger leadership abilities, and more effective teamwork. It's a(nother) win-win!\nBut But But\n\"But... I'm already on social media\"\nSocial media content, generally, isn't optimized for long term access. A post you write on Twitter, LinkedIn, or Facebook is unlikely to come up on the first page of Google unless it's really popular, even if content is an exact match for the search. Also, there's nothing to prevent any 3rd party platform from de-listing you, or changing their algorithm to stop featuring you, etc. It's always better for you to own your own content so this can't happen.\n\"But... I don't have time\"\nThis is a common concern, especially when you're juggling a full-time job, personal projects, and maybe even a family. But here's the thing—blogging doesn't have to consume your life. Start small - write one post a month, or even just a few times a year. The key is consistency, not frequency. Over time, these small efforts add up and can have a big impact. And remember your blog posts don't have to be a certain number of words. Sometimes a short post (unlike this one) is all you need!\n\"But... I'm not a good writer\"\nYou don't need to be a professional writer to start a blog. Blogging is about sharing your thoughts, experiences, and knowledge, not about crafting perfect prose. In fact, the more authentic and relatable your voice, the better. Your writing will improve with practice, and the important thing is to get started. Plus, the developer community is generally more interested in the value of your content than your writing style.\n\"But... I don't have anything unique to say\"\nYou might feel that there's already so much content out there, and you don't have anything new to add. But remember, your perspective is unique. The way you explain something might resonate with someone in a way that other content hasn't. Plus, even if the topic has been covered before, your personal experiences, tips, and insights can provide a fresh take. Don't underestimate the value of your voice. See point 3 above.\nIf you need help coming up with ideas for things to write about, I posted 5 Solid Ways to Come Up with Good Blog Post Topics a few years ago, and I plan on writing an updated version of this soon (since that one doesn't cover things like AI and how it can help you with your blogging).\n\"But... Nobody will read it\"\nAt first, your blog might not have a large audience, and that's okay. It takes time to build a readership. However, even if only a few people read your posts, those people could find your content incredibly valuable. And as your blog grows, so will your audience. Focus on creating content that's useful, and the readers will come. And remember, you can start out by just writing your blog as notes just for you. That's what I did, and it just so happened that other folks found some of my articles useful, too.\n\"But... Blogging is outdated\"\nSome might argue that blogging has been replaced by video content or social media, but that's not true. While these platforms are popular, blogging remains a powerful medium for in-depth content, tutorials, and technical explanations. It's also highly searchable, which means your content can continue to be discovered long after it's published. Blogs provide a space for deeper dives into topics that short-form content just can't cover.\nFor developers, blogs provide a great place to share content that has to do with code. It's much harder for content consumers to search for or extract code from a video or a podcast. Inlining and explaining code blocks in blogs/text is much easier to consume and understand.\nStart Your Blog Today\nIf you've been thinking about starting a blog, there's no better time than now. Grab a domain, pick a platform, and start writing. The benefits you'll gain—from sharpening your skills to building your personal brand—make it a worthwhile investment in your career and personal development.\nDon't let perfect be the enemy of good. If coming up with a domain or figuring out how to blog is slowing you down from writing that first article, just go to DEV.to and start there. I highly recommend that you own your own content, including your blog, so I wouldn't stay at a third-party site. But it's a good way to get started. Similarly, anyone in my devBetter program can blog on blogs.devbetter.com at least until they have their own site.\nBlogging might seem daunting at first, but remember, everyone starts somewhere. Your future self will thank you for taking the plunge. So go ahead, start your blog today, and watch how it transforms your journey as a software developer.\nThanks for reading! If you have any questions or if you're already blogging, I'd love to hear about your experiences in the comments below. Also, if you have a favorite developer blog that isn't already listed in the comments below, please share, and feel free to share your own as well! Finally, if you're interested in learning about how I use AI to support my blogging habit, let me know that as well and I'll integrate your requests into an upcoming article.\nHappy blogging!\nReferences\n\nYou Should Blog (YouTube)\nFollow Me on YouTube"
  },
  {
    "itemId": "https://ardalis.com/from-microservices-to-modular-monoliths/",
    "raw": "<p>What do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system? Migrate to a modular monolith.</p>\n<h2>Microservices</h2>\n<p>Microservices have been all the rage for the past several years. They offer a way to break up large, monolithic applications into smaller, more manageable pieces. This can make it easier to scale, deploy, and maintain your application. However, microservices come with their own set of challenges. They can be difficult to manage, especially as the number of services grows. They can also introduce latency and complexity into your system.</p>\n<p>You know who really loves microservices? Cloud hosting companies like Microsoft, Amazon, and Google. They make a lot of money hosting microservices. They also make a lot of money selling you tools to manage your microservices. They make even more money when you have to scale up your microservices to handle the increased load on your system.</p>\n<p>Who else? Consultants. They love microservices. They can charge you a lot of money to help you break up your monolith into microservices. They can charge you even more money to help you manage your microservices. They can charge you even more money to help you scale your microservices.</p>\n<p>And let's not forget your developers. They love microservices. They get to work on lots of different services. They get to learn lots of different technologies. Most importantly, they get to practice Resume-Driven Development, as they happily add microservices experience to their CVs.</p>\n<p><img src=\"/img/dinosaur-howareyouwithmicroservices.png\" alt=\"how are you with microservices?\"></p>\n<h2>Modular Monoliths</h2>\n<p>So what do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system?</p>\n<p>It may be time to (re)consider the modular monolith.</p>\n<p>A modular monolith is a monolithic application that is broken up into modules. Each module is responsible for a specific part of the application. Modules can communicate with each other through well-defined interfaces. This allows you to keep the benefits of a monolithic architecture, while still being able to break up your application into smaller, more manageable pieces.</p>\n<p><img src=\"/img/modular-monoliths-vs-microservices-graph.png\" alt=\"modularity vs number of deployed applications\"></p>\n<p>Yes, you'll still need to deal with some complexity inherent to modularity, such as ensuring modules remain independent while still being able to communicate with one another efficiently. But you'll avoid having to deal with the <a href=\"https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing\">fallacies of distributed computing</a>, such as network latency, bandwidth, and failure.</p>\n<h2>From Microservices to Modular Monoliths</h2>\n<p><a href=\"https://dometrain.com/course/from-zero-to-hero-microservices-to-modular-monoliths/\"><img src=\"/img/micro-to-mod.jpg\" alt=\"Microservices to Modular Monoliths - From Zero to Hero\"></a></p>\n<p>Migrating from microservices to a modular monolith is not a trivial task. It will require careful planning and execution.</p>\n<p>I've authored a short course on <a href=\"https://dometrain.com/author/steve-ardalis-smith/\">Dometrain</a> (where I also have two courses on building modular monoliths in .NET) that covers this topic in more detail. You can check it out here: <a href=\"https://dometrain.com/course/from-zero-to-hero-microservices-to-modular-monoliths/\">From Microservices to Modular Monoliths</a>.</p>\n<p>Use code <strong>SUMMER24</strong> to get 30% off until July 14th, 2024.</p>\n<h2>Keep Up With Me</h2>\n<p>If you're looking for more content from me in your inbox <a href=\"/tips\">subscribe to my weekly tips newsletter</a> and be sure to follow me on <a href=\"https://www.youtube.com/ardalis?sub_confirmation=1\">YouTube</a>.</p>",
    "sanitized": "What do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system? Migrate to a modular monolith.\nMicroservices\nMicroservices have been all the rage for the past several years. They offer a way to break up large, monolithic applications into smaller, more manageable pieces. This can make it easier to scale, deploy, and maintain your application. However, microservices come with their own set of challenges. They can be difficult to manage, especially as the number of services grows. They can also introduce latency and complexity into your system.\nYou know who really loves microservices? Cloud hosting companies like Microsoft, Amazon, and Google. They make a lot of money hosting microservices. They also make a lot of money selling you tools to manage your microservices. They make even more money when you have to scale up your microservices to handle the increased load on your system.\nWho else? Consultants. They love microservices. They can charge you a lot of money to help you break up your monolith into microservices. They can charge you even more money to help you manage your microservices. They can charge you even more money to help you scale your microservices.\nAnd let's not forget your developers. They love microservices. They get to work on lots of different services. They get to learn lots of different technologies. Most importantly, they get to practice Resume-Driven Development, as they happily add microservices experience to their CVs.\n\nModular Monoliths\nSo what do you do when you find yourself in microservice hell? How do you keep the gains you (hopefully) made in breaking up your legacy ball of mud, without having to constantly contend with a massively distributed system?\nIt may be time to (re)consider the modular monolith.\nA modular monolith is a monolithic application that is broken up into modules. Each module is responsible for a specific part of the application. Modules can communicate with each other through well-defined interfaces. This allows you to keep the benefits of a monolithic architecture, while still being able to break up your application into smaller, more manageable pieces.\n\nYes, you'll still need to deal with some complexity inherent to modularity, such as ensuring modules remain independent while still being able to communicate with one another efficiently. But you'll avoid having to deal with the fallacies of distributed computing, such as network latency, bandwidth, and failure.\nFrom Microservices to Modular Monoliths\n\nMigrating from microservices to a modular monolith is not a trivial task. It will require careful planning and execution.\nI've authored a short course on Dometrain (where I also have two courses on building modular monoliths in .NET) that covers this topic in more detail. You can check it out here: From Microservices to Modular Monoliths.\nUse code SUMMER24 to get 30% off until July 14th, 2024.\nKeep Up With Me\nIf you're looking for more content from me in your inbox subscribe to my weekly tips newsletter and be sure to follow me on YouTube."
  },
  {
    "itemId": "https://ardalis.com/navigation-properties-between-aggregates-modules/",
    "raw": "<p>One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of <a href=\"https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/\">my modular monoliths course</a>, which I thought others might appreciate.</p>\n<h2>Student Query</h2>\n<p><em>Modular Monolith course question (EFCore Navigation Properties)</em></p>\n<p>Message:\n<em>Hi Steve,</em></p>\n<p><em>Just got done with your modular monoliths course and loved it. I have a question about how navigation properties work inside each module using EFCore.</em></p>\n<p><em>Let's say I have an entity called Booking, that has a foreign key to a CustomerId, how would I map that using EFCore's <code class=\"language-text\">EntityTypeBuilder</code>? I could usually do:</em></p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">builder<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">HasOne</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Customer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">WithMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">HasForeignKey</span><span class=\"token punctuation\">(</span>booking <span class=\"token operator\">=></span> booking<span class=\"token punctuation\">.</span>CustomerId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">IsRequired</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><em>However this doesn't work, as the Customer entity is in another module so I cannot reference it as the navigation property?</em></p>\n<p><em>Just wondering if you had the answer to this, as i'm struggling to understand it.</em></p>\n<h3>My Response</h3>\n<p>Hi <em>NAME</em>,</p>\n<p>Yes, it's a common question, so don't feel bad about having it. :)</p>\n<p>There are a few ways to look at it but the key is to reframe how you think about related data that belongs to a different module. It's natural to think about that data as being all part of \"your\" application and its data store, and as such to use conveniences like navigation properties and, at the database level, tools like foreign keys to ensure referential integrity. While sometimes you can get away with this (if you opt to use a single database for all of your modules, for instance), it's a tradeoff and always sacrifices independence for that convenience.</p>\n<p>Imagine instead that the data owned by other modules is outside not just that module but outside your organization. You're trying to link to a Customer in this example, via a CustomerId. Well, pretend that the Customer record actually lives in a Salesforce.com CRM (or some other external CRM) and all you have is its key/ID. Sure, if you need info on that customer, you can always make an API call to Salesforce to fetch their data. But you're not going to perform a database join on it, because you don't own that data locally. Does that make sense?</p>\n<p>So, the short answer is, <em>don't use navigation properties for entities that live outside your module</em>. Instead always just use keys, and then use a strategy to get the data like you saw me do in <a href=\"https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/\">the course</a>. You can use MediatR queries to make in-process calls to fetch data as-needed between modules. And if you <em>really</em> want to have the data locally in your database, you can use the <a href=\"https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view\">Materialized View pattern</a> that I demonstrated to keep a local copy of another module's data in your database (and keep it synchronized using events or another strategy). At that point you <em>can</em> have navigation properties and perform joins on that data, but you should take care not to modify any of the data in the MV because it's essentially a read-only cache. If you need to make changes, send a command to the module that owns that data.</p>\n<p>Hopefully that helps,\nSteve</p>\n<h2>Student Response</h2>\n<blockquote>\n<p>Hi Steve,</p>\n</blockquote>\n<blockquote>\n<p>Thanks for getting back to me so quickly and really appreciate the thorough response.</p>\n</blockquote>\n<blockquote>\n<p>That totally makes sense to me now!</p>\n</blockquote>\n<blockquote>\n<p>I think what helped me grasp it was changing my mindset on where the other modules could potentially be stored.</p>\n</blockquote>\n<blockquote>\n<p>Makes complete sense to not have any hard dependencies on other modules (basically modular monolith 101).</p>\n</blockquote>\n<blockquote>\n<p>Much appreciated and look forward to any future content you put out!</p>\n</blockquote>\n<h3>Conclusion</h3>\n<p>Whenever you're segmenting your application into discrete parts, whether these are <a href=\"https://deviq.com/domain-driven-design/aggregate-pattern\">DDD Aggregates</a> or Modules in a <a href=\"https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/\">Modular Monolith</a>, you're going to want to isolate data dependencies between the parts. One way this manifests is in your design of your domain entities. With Aggregates, a general good practice to follow is to only have navigation properties flowing in <strong>only</strong> one direction from the root to its children (and if necessary, their children). If you follow this advice, your modules will automatically be fine, since there will never be a child of an aggregate defined in a separate module from the aggregate's root. But in any case, data that is outside of an aggregate or module should only be referenced using its key or ID, not as a navigation property.</p>\n<p>Note that if, for performance or other reasons, you need to have local access to related data that is owned by another module or system, you can use the Materialized View pattern to keep a local read-only cache of the data you need. And then when it makes sense you can join on this data or include it in EF queries using navigation properties.</p>\n<h3>References</h3>\n<ol>\n<li><a href=\"https://ardalis.com/effectively-sharing-resources-between-modules-modular-monolith/\">Effectively Sharing Resources Between Modules in a Modular Monolith</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view\">Materialized View pattern</a></li>\n</ol>\n<h2>Keep Up With Me</h2>\n<p>If you're looking for more content from me in your inbox <a href=\"/tips\">subscribe to my weekly tips newsletter</a> and be sure to follow me on <a href=\"https://www.youtube.com/ardalis?sub_confirmation=1\">YouTube</a>.</p>",
    "sanitized": "One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of my modular monoliths course, which I thought others might appreciate.\nStudent Query\nModular Monolith course question (EFCore Navigation Properties)\nMessage:\nHi Steve,\nJust got done with your modular monoliths course and loved it. I have a question about how navigation properties work inside each module using EFCore.\nLet's say I have an entity called Booking, that has a foreign key to a CustomerId, how would I map that using EFCore's EntityTypeBuilder? I could usually do:\nbuilder.HasOne<Customer>()\n            .WithMany()\n            .HasForeignKey(booking => booking.CustomerId)\n            .IsRequired();\nHowever this doesn't work, as the Customer entity is in another module so I cannot reference it as the navigation property?\nJust wondering if you had the answer to this, as i'm struggling to understand it.\nMy Response\nHi NAME,\nYes, it's a common question, so don't feel bad about having it. :)\nThere are a few ways to look at it but the key is to reframe how you think about related data that belongs to a different module. It's natural to think about that data as being all part of \"your\" application and its data store, and as such to use conveniences like navigation properties and, at the database level, tools like foreign keys to ensure referential integrity. While sometimes you can get away with this (if you opt to use a single database for all of your modules, for instance), it's a tradeoff and always sacrifices independence for that convenience.\nImagine instead that the data owned by other modules is outside not just that module but outside your organization. You're trying to link to a Customer in this example, via a CustomerId. Well, pretend that the Customer record actually lives in a Salesforce.com CRM (or some other external CRM) and all you have is its key/ID. Sure, if you need info on that customer, you can always make an API call to Salesforce to fetch their data. But you're not going to perform a database join on it, because you don't own that data locally. Does that make sense?\nSo, the short answer is, don't use navigation properties for entities that live outside your module. Instead always just use keys, and then use a strategy to get the data like you saw me do in the course. You can use MediatR queries to make in-process calls to fetch data as-needed between modules. And if you really want to have the data locally in your database, you can use the Materialized View pattern that I demonstrated to keep a local copy of another module's data in your database (and keep it synchronized using events or another strategy). At that point you can have navigation properties and perform joins on that data, but you should take care not to modify any of the data in the MV because it's essentially a read-only cache. If you need to make changes, send a command to the module that owns that data.\nHopefully that helps,\nSteve\nStudent Response\n\nHi Steve,\n\n\nThanks for getting back to me so quickly and really appreciate the thorough response.\n\n\nThat totally makes sense to me now!\n\n\nI think what helped me grasp it was changing my mindset on where the other modules could potentially be stored.\n\n\nMakes complete sense to not have any hard dependencies on other modules (basically modular monolith 101).\n\n\nMuch appreciated and look forward to any future content you put out!\n\nConclusion\nWhenever you're segmenting your application into discrete parts, whether these are DDD Aggregates or Modules in a Modular Monolith, you're going to want to isolate data dependencies between the parts. One way this manifests is in your design of your domain entities. With Aggregates, a general good practice to follow is to only have navigation properties flowing in only one direction from the root to its children (and if necessary, their children). If you follow this advice, your modules will automatically be fine, since there will never be a child of an aggregate defined in a separate module from the aggregate's root. But in any case, data that is outside of an aggregate or module should only be referenced using its key or ID, not as a navigation property.\nNote that if, for performance or other reasons, you need to have local access to related data that is owned by another module or system, you can use the Materialized View pattern to keep a local read-only cache of the data you need. And then when it makes sense you can join on this data or include it in EF queries using navigation properties.\nReferences\n\nEffectively Sharing Resources Between Modules in a Modular Monolith\nMaterialized View pattern\n\nKeep Up With Me\nIf you're looking for more content from me in your inbox subscribe to my weekly tips newsletter and be sure to follow me on YouTube."
  },
  {
    "itemId": "https://ardalis.com/comparing-unit-testable-code-with-maintainable-code/",
    "raw": "<p>Writing maintainable code should be a goal in most software engineering projects. Although definitions and especially hard measurements of what maintainable means with regard to software may vary, it can be useful to compare maintainable code to the much more easily verified unit testability of that code.</p>\n<h2>Introduction</h2>\n<p>When discussing software quality, two important concepts often arise: unit testable code and maintainable code. While these concepts are distinct, they share many characteristics. This article explores the overlap between unit testable code and maintainable code in C#, highlighting how striving for one often leads to achieving the other.</p>\n<p><img src=\"/img/unit-testable-maintainable-code.png\" alt=\"venn diagram of unit testable code and maintainable code\"></p>\n<h2>Characteristics of Unit Testable Code</h2>\n<p>Unit testable code is designed to be easily and effectively tested in isolation. Key characteristics include:</p>\n<ul>\n<li><strong>Loose Coupling</strong>: Dependencies are minimized and managed through interfaces or dependency injection.</li>\n<li><strong>Single Responsibility</strong>: Each class or method has a single responsibility, making it easier to test.</li>\n<li><strong>Minimal External Dependencies</strong>: Code avoids direct dependencies on external systems (e.g., databases, file systems) during tests.</li>\n<li><strong>Deterministic Behavior</strong>: Code produces consistent results, which is crucial for repeatable tests.</li>\n<li><strong>Testable Design Patterns</strong>: Use of design patterns like Dependency Injection (DI) and Inversion of Control (IoC) to facilitate testing.</li>\n<li><strong>Fast</strong>: Unit tests are incredibly fast to run and typically should be capable of being run in parallel to optimize for speed of execution.</li>\n</ul>\n<h2>Characteristics of Maintainable Code</h2>\n<p>Maintainable code is designed to be easily understood, modified, and extended. Key characteristics include:</p>\n<ul>\n<li><strong>Readability</strong>: Code is easy to read and understand.</li>\n<li><strong>Modularity</strong>: Code is divided into distinct, loosely-coupled modules, each with a clear purpose.</li>\n<li><strong>Consistency</strong>: Code follows consistent naming conventions and coding standards.</li>\n<li><strong>Documentation</strong>: Code is well-documented, making it easier for others to understand its purpose and functionality.</li>\n<li><strong>Test Coverage</strong>: Code is well-tested, ensuring that changes do not introduce new bugs.</li>\n</ul>\n<h2>Overlap Between Unit Testable Code and Maintainable Code</h2>\n<p>The overlap between unit testable code and maintainable code includes the following aspects:</p>\n<ol>\n<li><strong>Loose Coupling and Single Responsibility</strong>: Both characteristics enhance readability, maintainability, and testability.</li>\n<li><strong>Minimal External Dependencies</strong>: Reduces complexity and makes code more robust and easier to test and maintain.</li>\n<li><strong>Deterministic Behavior</strong>: Ensures reliability and predictability, essential for both quality and maintainability.</li>\n<li><strong>Testable Design Patterns</strong>: Encourage best practices that improve code quality and maintainability.</li>\n</ol>\n<h2>Code Example</h2>\n<h3>Tightly Coupled Code (Difficult to Test and Maintain)</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileLogger</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.txt\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderProcessor</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">FileLogger</span> _logger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FileLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Logic required to process the order</span>\n\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Order processed: \"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above code example is difficult to unit test because of the direct dependency on the <code class=\"language-text\">FileLogger</code> type, resulting in tight coupling (remember, <a href=\"/new-is-glue\">New is Glue</a>). Any attempt to unit test the <code class=\"language-text\">ProcessOrder</code> method (running to its completion, and thus hitting the logger call) will fail if the test cannot access the log.txt file. Tests run in parallel are likely to result in file access errors, as well.</p>\n<p>Aside from testing concerns, the above code cannot take advantage of alternative file stores, such as Azure Blob Storage or Amazon S3, not to mention redirecting log output to other locations, as may be desirable in various environments.</p>\n<h3>Loosely Coupled Code (Easy to Test and Maintain)</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILogger</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FileLogger</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ILogger</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">WriteAllText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"log.txt\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderProcessor</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ILogger</span> _logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">OrderProcessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILogger</span> logger<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Order</span> order<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Process the order</span>\n        _logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Order processed: \"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that the above <code class=\"language-text\">OrderProcessor</code> version doesn't include any instance of the <code class=\"language-text\">new</code> keyword. Instead if follows the Explicit Dependencies Principle and clearly informs anyone calling or simply reading this class that it requires a logger of type <code class=\"language-text\">ILogger</code>, which is an incredibly simple abstraction.</p>\n<p>As you'll see below, it's now trivial to test the <code class=\"language-text\">ProcessOrder</code> method, and also trivial to swap out the file logger implementation with any number of alternative loggers (or even several using a <a href=\"https://deviq.com/design-patterns/decorator-pattern\">Decorator</a> or <a href=\"https://deviq.com/design-patterns/chain-of-responsibility-pattern\">Chain of Responsibility pattern</a>). The resulting code is much more extensible with zero additional cyclomatic complexity and only one additional interface type.</p>\n<h3>Unit Test for Loosely Coupled Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FakeLogger</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ILogger</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> LoggedMessage <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        LoggedMessage <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderProcessorTests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Fact</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ProcessOrder_LogsOrderProcessedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Arrange</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> fakeLogger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FakeLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> processor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">OrderProcessor</span><span class=\"token punctuation\">(</span>fakeLogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> order <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Order</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">123</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Act</span>\n        processor<span class=\"token punctuation\">.</span><span class=\"token function\">ProcessOrder</span><span class=\"token punctuation\">(</span>order<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Assert</span>\n        Assert<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Order processed: 123\"</span><span class=\"token punctuation\">,</span> fakeLogger<span class=\"token punctuation\">.</span>LoggedMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>Striving for unit testable code often results in maintainable code. By focusing on loose coupling, single responsibility, minimal external dependencies, and deterministic behavior, developers can achieve code that is both easy to test and maintain. Incorporating testable design patterns further ensures code quality, making it more robust and scalable.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://martinfowler.com/articles/injection.html\">Martin Fowler: Inversion of Control Containers and the Dependency Injection pattern</a></li>\n<li><a href=\"https://www.oreilly.com/library/view/clean-architecture-a/9780134494272/\">Robert C. Martin: Clean Architecture: A Craftsman's Guide to Software Structure and Design</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/dotnet/core/testing/\">Microsoft Docs: Unit Testing in .NET</a></li>\n</ul>\n<h2>Keep Up With Me</h2>\n<p>If you're looking for more content from me in your inbox <a href=\"/tips\">subscribe to my weekly tips newsletter</a> and be sure to follow me on <a href=\"https://www.youtube.com/ardalis?sub_confirmation=1\">YouTube</a>.</p>",
    "sanitized": "Writing maintainable code should be a goal in most software engineering projects. Although definitions and especially hard measurements of what maintainable means with regard to software may vary, it can be useful to compare maintainable code to the much more easily verified unit testability of that code.\nIntroduction\nWhen discussing software quality, two important concepts often arise: unit testable code and maintainable code. While these concepts are distinct, they share many characteristics. This article explores the overlap between unit testable code and maintainable code in C#, highlighting how striving for one often leads to achieving the other.\n\nCharacteristics of Unit Testable Code\nUnit testable code is designed to be easily and effectively tested in isolation. Key characteristics include:\n\nLoose Coupling: Dependencies are minimized and managed through interfaces or dependency injection.\nSingle Responsibility: Each class or method has a single responsibility, making it easier to test.\nMinimal External Dependencies: Code avoids direct dependencies on external systems (e.g., databases, file systems) during tests.\nDeterministic Behavior: Code produces consistent results, which is crucial for repeatable tests.\nTestable Design Patterns: Use of design patterns like Dependency Injection (DI) and Inversion of Control (IoC) to facilitate testing.\nFast: Unit tests are incredibly fast to run and typically should be capable of being run in parallel to optimize for speed of execution.\n\nCharacteristics of Maintainable Code\nMaintainable code is designed to be easily understood, modified, and extended. Key characteristics include:\n\nReadability: Code is easy to read and understand.\nModularity: Code is divided into distinct, loosely-coupled modules, each with a clear purpose.\nConsistency: Code follows consistent naming conventions and coding standards.\nDocumentation: Code is well-documented, making it easier for others to understand its purpose and functionality.\nTest Coverage: Code is well-tested, ensuring that changes do not introduce new bugs.\n\nOverlap Between Unit Testable Code and Maintainable Code\nThe overlap between unit testable code and maintainable code includes the following aspects:\n\nLoose Coupling and Single Responsibility: Both characteristics enhance readability, maintainability, and testability.\nMinimal External Dependencies: Reduces complexity and makes code more robust and easier to test and maintain.\nDeterministic Behavior: Ensures reliability and predictability, essential for both quality and maintainability.\nTestable Design Patterns: Encourage best practices that improve code quality and maintainability.\n\nCode Example\nTightly Coupled Code (Difficult to Test and Maintain)\npublic class FileLogger\n{\n    public void Log(string message)\n    {\n        System.IO.File.WriteAllText(\"log.txt\", message);\n    }\n}\n\npublic class OrderProcessor\n{\n    private readonly FileLogger _logger = new FileLogger();\n\n    public void ProcessOrder(Order order)\n    {\n        // Logic required to process the order\n\n        _logger.Log(\"Order processed: \" + order.Id);\n    }\n}\nThe above code example is difficult to unit test because of the direct dependency on the FileLogger type, resulting in tight coupling (remember, New is Glue). Any attempt to unit test the ProcessOrder method (running to its completion, and thus hitting the logger call) will fail if the test cannot access the log.txt file. Tests run in parallel are likely to result in file access errors, as well.\nAside from testing concerns, the above code cannot take advantage of alternative file stores, such as Azure Blob Storage or Amazon S3, not to mention redirecting log output to other locations, as may be desirable in various environments.\nLoosely Coupled Code (Easy to Test and Maintain)\npublic interface ILogger\n{\n    void Log(string message);\n}\n\npublic class FileLogger : ILogger\n{\n    public void Log(string message)\n    {\n        System.IO.File.WriteAllText(\"log.txt\", message);\n    }\n}\n\npublic class OrderProcessor\n{\n    private readonly ILogger _logger;\n\n    public OrderProcessor(ILogger logger)\n    {\n        _logger = logger;\n    }\n\n    public void ProcessOrder(Order order)\n    {\n        // Process the order\n        _logger.Log(\"Order processed: \" + order.Id);\n    }\n}\nNotice that the above OrderProcessor version doesn't include any instance of the new keyword. Instead if follows the Explicit Dependencies Principle and clearly informs anyone calling or simply reading this class that it requires a logger of type ILogger, which is an incredibly simple abstraction.\nAs you'll see below, it's now trivial to test the ProcessOrder method, and also trivial to swap out the file logger implementation with any number of alternative loggers (or even several using a Decorator or Chain of Responsibility pattern). The resulting code is much more extensible with zero additional cyclomatic complexity and only one additional interface type.\nUnit Test for Loosely Coupled Code\npublic class FakeLogger : ILogger\n{\n    public string LoggedMessage { get; private set; }\n\n    public void Log(string message)\n    {\n        LoggedMessage = message;\n    }\n}\n\npublic class OrderProcessorTests\n{\n    [Fact]\n    public void ProcessOrder_LogsOrderProcessedMessage()\n    {\n        // Arrange\n        var fakeLogger = new FakeLogger();\n        var processor = new OrderProcessor(fakeLogger);\n        var order = new Order { Id = 123 };\n\n        // Act\n        processor.ProcessOrder(order);\n\n        // Assert\n        Assert.Equal(\"Order processed: 123\", fakeLogger.LoggedMessage);\n    }\n}\nConclusion\nStriving for unit testable code often results in maintainable code. By focusing on loose coupling, single responsibility, minimal external dependencies, and deterministic behavior, developers can achieve code that is both easy to test and maintain. Incorporating testable design patterns further ensures code quality, making it more robust and scalable.\nReferences\n\nMartin Fowler: Inversion of Control Containers and the Dependency Injection pattern\nRobert C. Martin: Clean Architecture: A Craftsman's Guide to Software Structure and Design\nMicrosoft Docs: Unit Testing in .NET\n\nKeep Up With Me\nIf you're looking for more content from me in your inbox subscribe to my weekly tips newsletter and be sure to follow me on YouTube."
  },
  {
    "itemId": "https://ardalis.com/effectively-sharing-resources-between-modules-modular-monolith/",
    "raw": "<p>One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of <a href=\"https://dometrain.com/bundle/from-zero-to-hero-modular-monoliths-in-dotnet/\">my modular monoliths course</a>, which I thought others might appreciate.</p>\n<h2>Student Query</h2>\n<p><em>Hi Steve, I have another question for you after finishing the deep dive course. Let's say that now I have multiple modules, each of them with IDs of other entities in their domain. I don't want to serve data from module A in module B, so I just return the ID to the consumer and let them call module A with it. The problem is that following this pattern, the consumer could be forced to do a lot of calls just to jump between our domains. Could it make sense to implement an API Gateway? How could it be implemented in a modular monolith environment?</em></p>\n<h3>My Response</h3>\n<p>If you have a single client, like a SPA (Angular, React, Blazor), I would typically use the Backend-For-Frontend (BFF) pattern, which can be implemented either as its own separate project or simply configured as an API Gateway (using something like <a href=\"https://learn.microsoft.com/en-us/azure/api-management/api-management-key-concepts#api-gateway\">Azure API Gateway</a> or something as simple as <a href=\"https://microsoft.github.io/reverse-proxy/\">YARP</a>). In microservices architectures, it's usually a separate standalone instance that has access to the public internet while the rest of the services are behind the firewall. In a modular monolith scenario, it would typically be the same — a separate instance.</p>\n<p>The tradeoff you're making is between modularity/coupling and performance. If you just pass an ID all the way to the client, and then it needs to make a new call to get the details for that record, it's another round trip compared to if you just gave it the data directly. This is a minor problem if it's just one thing, but it gets much worse if it's a collection of things (the <a href=\"https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping\">classic N+1 problem</a> but via APIs not database queries).</p>\n<p>My usual approach is to not worry about the performance problems prematurely, but once you can see (and ideally measure!) them, take some steps to mitigate them. These steps include some usual suspects and some unique to this problem:</p>\n<ol>\n<li><strong>Add Indexes</strong>: Ensure fetching the data is as fast as you can easily make it. Optimized database queries can significantly reduce the latency of data retrieval.</li>\n<li><strong>Read Store Optimization</strong>: Consider having a separate read store that's optimized for queries. This store can be updated asynchronously from the main data store.</li>\n<li><strong>Server Caching</strong>: Implement server-side caching. It's always faster to serve data from memory than to fetch it from a database. Use an in-memory cache or a separate service like Redis.</li>\n<li><strong>Materialized Views</strong>: Add a materialized view to module A containing module B's data. When module A returns data referencing module B items, it can (optionally, with an API parameter specifying the extra data should be pulled back) include those items in its payload directly without the need for any server-side communication (and also eliminating the need for any client-side fetches for the module B items).</li>\n<li><strong>Batch Fetching</strong>: Add APIs for fetching multiple IDs at a time. For instance, when module A returns 10 records and those 10 records include references to 10 module B IDs, those 10 records can be fetched with one call to module B.</li>\n</ol>\n<p>By implementing these strategies, you can maintain the modularity of your monolith while also mitigating potential performance issues that arise from cross-module data dependencies.</p>\n<p>Does that make sense?</p>\n<h2>Student Response</h2>\n<p><em>Steve, you’re simply the best. Thanks for the detailed answer, everything makes sense. Have a wonderful day!</em></p>\n<h3>Conclusion</h3>\n<p>It's worth considering how the client of your APIs will consume them, and how it may be necessary for it to make separate calls to fetch the details of any associated IDs you include in your payloads. It's always a tradeoff in API design between sending too much or too little data, and <a href=\"https://ardalis.com/data-deficient-messages\">data deficient messages</a> are a common problem.</p>\n<p>By leveraging patterns such as BFF (which lets you customize your APIs and their messages specifically to suit the needs of your client), server caching, and optimized data fetching techniques, you can achieve a balance between modular design and system performance.</p>\n<h3>References</h3>\n<ol>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/backends-for-frontends\">Backend For Frontend Pattern</a></li>\n<li><a href=\"https://docs.miclocrosoft.com/en-us/azure/architecture/best-practices/caching\">Caching Guidance</a></li>\n<li><a href=\"https://learn.microsoft.com/en-us/azure/architecture/patterns/materialized-view\">Materialized Views</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">Optimizing Read Stores - CQRS</a></li>\n<li><a href=\"https://microservices.io/patterns/apigateway.html\">API Gateway Pattern</a></li>\n</ol>\n<h2>Keep Up With Me</h2>\n<p>If you're looking for more content from me in your inbox <a href=\"/tips\">subscribe to my weekly tips newsletter</a> and be sure to follow me on <a href=\"https://www.youtube.com/ardalis?sub_confirmation=1\">YouTube</a>.</p>",
    "sanitized": "One of the key challenges in developing a modular monolith is managing the communication between different modules, especially when it comes to handling data dependencies across module boundaries. Recently, I received an interesting question from one of the students of my modular monoliths course, which I thought others might appreciate.\nStudent Query\nHi Steve, I have another question for you after finishing the deep dive course. Let's say that now I have multiple modules, each of them with IDs of other entities in their domain. I don't want to serve data from module A in module B, so I just return the ID to the consumer and let them call module A with it. The problem is that following this pattern, the consumer could be forced to do a lot of calls just to jump between our domains. Could it make sense to implement an API Gateway? How could it be implemented in a modular monolith environment?\nMy Response\nIf you have a single client, like a SPA (Angular, React, Blazor), I would typically use the Backend-For-Frontend (BFF) pattern, which can be implemented either as its own separate project or simply configured as an API Gateway (using something like Azure API Gateway or something as simple as YARP). In microservices architectures, it's usually a separate standalone instance that has access to the public internet while the rest of the services are behind the firewall. In a modular monolith scenario, it would typically be the same — a separate instance.\nThe tradeoff you're making is between modularity/coupling and performance. If you just pass an ID all the way to the client, and then it needs to make a new call to get the details for that record, it's another round trip compared to if you just gave it the data directly. This is a minor problem if it's just one thing, but it gets much worse if it's a collection of things (the classic N+1 problem but via APIs not database queries).\nMy usual approach is to not worry about the performance problems prematurely, but once you can see (and ideally measure!) them, take some steps to mitigate them. These steps include some usual suspects and some unique to this problem:\n\nAdd Indexes: Ensure fetching the data is as fast as you can easily make it. Optimized database queries can significantly reduce the latency of data retrieval.\nRead Store Optimization: Consider having a separate read store that's optimized for queries. This store can be updated asynchronously from the main data store.\nServer Caching: Implement server-side caching. It's always faster to serve data from memory than to fetch it from a database. Use an in-memory cache or a separate service like Redis.\nMaterialized Views: Add a materialized view to module A containing module B's data. When module A returns data referencing module B items, it can (optionally, with an API parameter specifying the extra data should be pulled back) include those items in its payload directly without the need for any server-side communication (and also eliminating the need for any client-side fetches for the module B items).\nBatch Fetching: Add APIs for fetching multiple IDs at a time. For instance, when module A returns 10 records and those 10 records include references to 10 module B IDs, those 10 records can be fetched with one call to module B.\n\nBy implementing these strategies, you can maintain the modularity of your monolith while also mitigating potential performance issues that arise from cross-module data dependencies.\nDoes that make sense?\nStudent Response\nSteve, you’re simply the best. Thanks for the detailed answer, everything makes sense. Have a wonderful day!\nConclusion\nIt's worth considering how the client of your APIs will consume them, and how it may be necessary for it to make separate calls to fetch the details of any associated IDs you include in your payloads. It's always a tradeoff in API design between sending too much or too little data, and data deficient messages are a common problem.\nBy leveraging patterns such as BFF (which lets you customize your APIs and their messages specifically to suit the needs of your client), server caching, and optimized data fetching techniques, you can achieve a balance between modular design and system performance.\nReferences\n\nBackend For Frontend Pattern\nCaching Guidance\nMaterialized Views\nOptimizing Read Stores - CQRS\nAPI Gateway Pattern\n\nKeep Up With Me\nIf you're looking for more content from me in your inbox subscribe to my weekly tips newsletter and be sure to follow me on YouTube."
  },
  {
    "itemId": "https://ardalis.com/clean-architecture-sucks/",
    "raw": "<p>The other day I was participating in a conversation online in an architecture forum. One of the participants was complaining about the mess they were cleaning up from a team they'd joined. The team had, ostensibly, been following <a href=\"https://ardalis.com/clean-architecture-asp-net-core/\">Clean Architecture</a>, but the code they had produced was a mess. Their conclusion:</p>\n<blockquote>\n<p>Clean Architecture sucks.</p>\n</blockquote>\n<p>They led with:</p>\n<blockquote>\n<p>Clean Architecture and its obsession with grouping things into technical concerns can quickly turn into a giant ball of mud as the ability to properly develop and maintain code in such a project style is directly dependent on the technical expertise and skill of each of the developers on the project.</p>\n</blockquote>\n<p>Now, it's true, Clean Architecture is not a silver bullet. Using it, or any other code organization approach, is not going to automatically ensure everyone on the team instinctively writes better, more maintainable code. But it's also not the fault of Clean Architecture that the team produced a mess. It's the fault of the team. I think you'll agree with me in a couple of paragraphs...</p>\n<p>Clean Architecture, aka Ports-and-Adapters, has a primary goal of reducing tight coupling from the business rules of the system to infrastructure, and in particular, the database. That's it. It's not a panacea and it doesn't offer feature modularity - <a href=\"https://ardalis.com/introducing-modular-monoliths-goldilocks-architecture/\">you need modular monoliths or microservices for that</a>. <a href=\"https://www.youtube.com/watch?v=wkAc6K09pKQ&#x26;t=147s\">I talk about why in this video</a>.</p>\n<p>Now, let's get back to this particular conversation, which is a small case study...</p>\n<h2>The Team</h2>\n<p>Another anecdote about the code the original poster was cleaning up:</p>\n<blockquote>\n<p>I have a ridiculous amount of abstractions.\nFor example, I have an interface to inject an <code class=\"language-text\">IHtmlSanitizer</code>.\nIt has one method named <code class=\"language-text\">Sanitize</code> that takes a string in and a string out.\nThere's then an <code class=\"language-text\">HtmlSanitizerService</code>.\nWhy?\nBecause CA says that since it uses a a NuGet dependency thus it should be in its own service.\nLiterally the answer one of my devs gave me.</p>\n</blockquote>\n<p>Me: Where does CA say that?</p>\n<blockquote>\n<p>It doesn't, but that's what unexperienced developers understand from it. And left unattended, this is what it produces.</p>\n</blockquote>\n<p>(Sure Jan...)</p>\n<p>So, what about this team of developers?</p>\n<blockquote>\n<p>Every single developer that's ever been hired by this company since the inception of this product have all been university graduates with no prior work experience.</p>\n</blockquote>\n<p>Ah, we might have found <em>the actual problem</em>. (ding ding ding)</p>\n<h2>The Problem</h2>\n<p>Clean architecture sucks. No architecture sucks. Microservices architecture sucks. Programming sucks. It all sucks <strong>if you don't know what you're doing</strong>. And if you don't know what you're doing, you're (probably) going to produce a mess. Why? Because you just don't know any better, yet.</p>\n<p>And that's exactly what happened with the original poster's project/team that he inherited. The team had <strong>zero experience</strong>. They didn't know how to write good software, much less apply a particular style of architecture, and the result was (in at least some ways) a mess.</p>\n<p>And it's not even the team's fault! They were hired with no experience and no mentorship. <strong>They were set up to fail.</strong> And they did.</p>\n<h2>The Solution</h2>\n<p>There are some applications that are simple and don't require much, if any architecture (what I refer to as <a href=\"https://deviq.com/practices/yolo-architecture\">YOLO architecture</a>). And there are some applications which benefit from minimal structure and just pipelines and handlers (often referred to as <a href=\"https://www.jimmybogard.com/vertical-slice-architecture/\">Vertical Slice Architecture</a> though of course all software benefits from being delivered as <a href=\"https://deviq.com/practices/vertical-slices\">Vertical Slides</a>). And there are some applications that benefit from ports-and-adapters (aka hexagonal, onion, or clean architecture) style architecture, where a significant goal is to shield business logic from persistence and other infrastructure concerns. This is true of almost any application that is being built using <a href=\"https://www.pluralsight.com/courses/domain-driven-design-fundamentals\">Domain-Driven Design</a>, for instance (assuming it warrants using DDD, that is).</p>\n<p>But new grads don't know enough to know which is which. Most of them probably aren't even aware that there are different approaches to these sorts of problems, or when to consider each, or what the tradeoffs are. And <a href=\"https://deviq.com/laws/laws-software-architecture\">in software architecture, everything is a tradeoff</a>.</p>\n<p>The solution is, have at least one experienced developer on the team who can guide the others. And if you don't have one, hire one. Or bring in a consultant. Or send your team to training as a way to <a href=\"https://ardalis.com/scaling-your-software-team-develop-vs-hiring/\">scale the team up, rather than out</a>. Or all of the above.</p>\n<h2>An Analogy</h2>\n<p>Let's say you want to build a house. You have a good idea of the style - you've decided to keep it simple and build a Colonial style home. You're on a budget - so you hire a couple of teens who just graduated from high school and went through the school's construction training program (they built a shed!). You don't actually live locally, so you all agree you'll check in periodically via text message.</p>\n<p>You spend an hour describing the house you have in mind to them, give them a credit card to pick up materials from the hardware store, and fly back home. Over the next year or two, you text back and forth with your contractors, who describe various challenges they've encountered but assure you they're overcoming them with grit and creativity.</p>\n<p>After a couple of years, you're past ready for this house to be done. But unfortunately, it's not passing inspection by the local building inspector. After looking over the inspector's list of faults, you break down and decide to bring in an experienced contractor (or perhaps a building architect) so you can get an assessment of what needs to be fixed in order to make the house livable.</p>\n<p>After taking a look at the mess the inexperienced builders produced, the experienced contractor concludes</p>\n<p>\"Colonial style homes suck. You should have built a Ranch.\"</p>\n<p>I mean, <em>obviously</em> that's the problem 🙄.</p>\n<h2>Conclusion</h2>\n<p>There are no one-size-fits-all architectures, any more than there are one-size-fits-all programming languages. Before blaming whichever architectural style you're using for your problems, make sure you understand that style, its goals, and its tradeoffs. Make sure it's the right choice for your team and application, and that you're using it correctly. If you're not sure, find some help from someone who has the experience to guide you.</p>\n<h2>Keep Up With Me</h2>\n<p>If you're looking for more content from me in your inbox <a href=\"/tips\">subscribe to my weekly tips newsletter</a> and be sure to follow me on <a href=\"https://www.youtube.com/ardalis?sub_confirmation=1\">YouTube</a>.</p>",
    "sanitized": "The other day I was participating in a conversation online in an architecture forum. One of the participants was complaining about the mess they were cleaning up from a team they'd joined. The team had, ostensibly, been following Clean Architecture, but the code they had produced was a mess. Their conclusion:\n\nClean Architecture sucks.\n\nThey led with:\n\nClean Architecture and its obsession with grouping things into technical concerns can quickly turn into a giant ball of mud as the ability to properly develop and maintain code in such a project style is directly dependent on the technical expertise and skill of each of the developers on the project.\n\nNow, it's true, Clean Architecture is not a silver bullet. Using it, or any other code organization approach, is not going to automatically ensure everyone on the team instinctively writes better, more maintainable code. But it's also not the fault of Clean Architecture that the team produced a mess. It's the fault of the team. I think you'll agree with me in a couple of paragraphs...\nClean Architecture, aka Ports-and-Adapters, has a primary goal of reducing tight coupling from the business rules of the system to infrastructure, and in particular, the database. That's it. It's not a panacea and it doesn't offer feature modularity - you need modular monoliths or microservices for that. I talk about why in this video.\nNow, let's get back to this particular conversation, which is a small case study...\nThe Team\nAnother anecdote about the code the original poster was cleaning up:\n\nI have a ridiculous amount of abstractions.\nFor example, I have an interface to inject an IHtmlSanitizer.\nIt has one method named Sanitize that takes a string in and a string out.\nThere's then an HtmlSanitizerService.\nWhy?\nBecause CA says that since it uses a a NuGet dependency thus it should be in its own service.\nLiterally the answer one of my devs gave me.\n\nMe: Where does CA say that?\n\nIt doesn't, but that's what unexperienced developers understand from it. And left unattended, this is what it produces.\n\n(Sure Jan...)\nSo, what about this team of developers?\n\nEvery single developer that's ever been hired by this company since the inception of this product have all been university graduates with no prior work experience.\n\nAh, we might have found the actual problem. (ding ding ding)\nThe Problem\nClean architecture sucks. No architecture sucks. Microservices architecture sucks. Programming sucks. It all sucks if you don't know what you're doing. And if you don't know what you're doing, you're (probably) going to produce a mess. Why? Because you just don't know any better, yet.\nAnd that's exactly what happened with the original poster's project/team that he inherited. The team had zero experience. They didn't know how to write good software, much less apply a particular style of architecture, and the result was (in at least some ways) a mess.\nAnd it's not even the team's fault! They were hired with no experience and no mentorship. They were set up to fail. And they did.\nThe Solution\nThere are some applications that are simple and don't require much, if any architecture (what I refer to as YOLO architecture). And there are some applications which benefit from minimal structure and just pipelines and handlers (often referred to as Vertical Slice Architecture though of course all software benefits from being delivered as Vertical Slides). And there are some applications that benefit from ports-and-adapters (aka hexagonal, onion, or clean architecture) style architecture, where a significant goal is to shield business logic from persistence and other infrastructure concerns. This is true of almost any application that is being built using Domain-Driven Design, for instance (assuming it warrants using DDD, that is).\nBut new grads don't know enough to know which is which. Most of them probably aren't even aware that there are different approaches to these sorts of problems, or when to consider each, or what the tradeoffs are. And in software architecture, everything is a tradeoff.\nThe solution is, have at least one experienced developer on the team who can guide the others. And if you don't have one, hire one. Or bring in a consultant. Or send your team to training as a way to scale the team up, rather than out. Or all of the above.\nAn Analogy\nLet's say you want to build a house. You have a good idea of the style - you've decided to keep it simple and build a Colonial style home. You're on a budget - so you hire a couple of teens who just graduated from high school and went through the school's construction training program (they built a shed!). You don't actually live locally, so you all agree you'll check in periodically via text message.\nYou spend an hour describing the house you have in mind to them, give them a credit card to pick up materials from the hardware store, and fly back home. Over the next year or two, you text back and forth with your contractors, who describe various challenges they've encountered but assure you they're overcoming them with grit and creativity.\nAfter a couple of years, you're past ready for this house to be done. But unfortunately, it's not passing inspection by the local building inspector. After looking over the inspector's list of faults, you break down and decide to bring in an experienced contractor (or perhaps a building architect) so you can get an assessment of what needs to be fixed in order to make the house livable.\nAfter taking a look at the mess the inexperienced builders produced, the experienced contractor concludes\n\"Colonial style homes suck. You should have built a Ranch.\"\nI mean, obviously that's the problem 🙄.\nConclusion\nThere are no one-size-fits-all architectures, any more than there are one-size-fits-all programming languages. Before blaming whichever architectural style you're using for your problems, make sure you understand that style, its goals, and its tradeoffs. Make sure it's the right choice for your team and application, and that you're using it correctly. If you're not sure, find some help from someone who has the experience to guide you.\nKeep Up With Me\nIf you're looking for more content from me in your inbox subscribe to my weekly tips newsletter and be sure to follow me on YouTube."
  },
  {
    "itemId": "https://ardalis.com/technology-edges-bleeding-leading-rusting/",
    "raw": "<p>In the fast-evolving world of software development, keeping pace with technology trends is both a necessity and a challenge. Companies and developers often find themselves making critical decisions about whether to adopt new technologies early (bleeding edge), wait until they mature (leading edge or cutting edge), or continue using older, more established technologies (what I'll call the <strong>dull edge</strong> and <strong>rusting edge</strong>). Understanding the distinctions and implications of these choices can significantly impact both the development process and business outcomes.</p>\n<h2>Bleeding Edge: Innovation at a Risk</h2>\n<p>The term \"bleeding edge\" refers to technology that is so new it hasn’t been widely tested or adopted. These are often preview releases or version 1.0 products that promise innovative features and competitive advantages but come with higher risks of instability and lack of support. For startups or tech-centric businesses aiming to disrupt markets, bleeding edge technologies may offer the crucial differentiation needed to stand out. However for more established businesses who hope to build software that will last years, the frequent changes (and outright failures) common to bleeding edge technology are often better avoided.</p>\n<p>Some examples of bleeding edge technologies that burnt companies who bet on them include <a href=\"https://en.wikipedia.org/wiki/AngularJS\">AngularJS (Angular 1)</a> and <a href=\"https://www.reddit.com/r/sysadmin/comments/tquo2p/silverlight_5_eol_microsoft_removed_the_links/\">Silverlight</a>.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Access to the latest innovations and technologies.</li>\n<li>Potential to gain market advantages by leveraging new capabilities early.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Higher risk of encountering bugs and security vulnerabilities.</li>\n<li>Limited community support and resources, such as working samples and documentation.</li>\n<li>Potential for significant changes or discontinuation by vendors.</li>\n<li>Few developers with experience using the product - everyone must learn on the job</li>\n</ul>\n<p><strong>Examples in .NET in April 2024</strong></p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/dotnet/aspire/get-started/aspire-overview\">.NET Aspire</a>. Currently in preview, this technology is likely to be supported by the end of 2024.</li>\n<li><a href=\"https://dotnet.microsoft.com/en-us/download/dotnet/9.0\">.NET 9 preview 3</a>. Currently ion preview; expected release November 2024.</li>\n</ul>\n<h2>Leading Edge: Established Yet Evolving</h2>\n<p>Leading edge technologies are those that have emerged from their initial testing phase and have proven effective in real-world applications. These are typically at least version 2.x releases and have garnered an active community and robust support. Organizations looking for a balance between innovation and reliability often opt for leading edge technologies.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Lower risk than bleeding edge technologies with a stable release.</li>\n<li>Strong community support and ample learning resources.</li>\n<li>Regular updates and patches from developers.</li>\n<li>Larger pool of experienced developers to draw from.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Some risk of obsolescence as newer technologies emerge.</li>\n<li>Possible limitations if the technology does not evolve quickly enough to meet emerging needs.</li>\n</ul>\n<p><strong>Examples in .NET in April 2024</strong></p>\n<ul>\n<li><a href=\"https://dotnet.microsoft.com/en-us/download/dotnet/8.0\">.NET 8</a>. The latest available version of .NET, also an LTS (Long Term Support) release, with support ending in November 2026.</li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/overview?view=aspnetcore-8.0\">Minimal APIs</a>. The latest approach to building web APIs in .NET. First introduced in .NET 6. Currently in active development.</li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-8.0&#x26;tabs=visual-studio\">Razor Pages</a>. First introduced in .NET Core 2.0. Currently the recommended approach to building server-rendered page-based sites with ASP.NET Core.</li>\n</ul>\n<h2>The Dull Edge: Stably Pervasive Yet Fading</h2>\n<p>No longer sharp or leading, the dull edge refers to tech that is tried and true. It's still in wide use, but mostly out of inertia. It's lost its shine. It's often difficult to upgrade because many systems integrate with or depend on it. It's dull, metaphorically, because it's often not as efficient or effective as more modern toolsets. It often carries a stigma among developers of being 'dull' to work on or with, due to its age and lack of continued innovation.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>Widespread use and familiarity within the industry</li>\n<li>Stable and reliable for existing applications</li>\n<li>Broad support due to a long history of use.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Limited innovation and updates.</li>\n<li>Gradually decreasing community and labor pool.</li>\n<li>Increasing risk of becoming outdated/obsolete (and moving to <em>rusting</em> edge)</li>\n</ul>\n<p><strong>Examples in .NET as of April 2024</strong></p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-8.0\">ASP.NET Core MVC</a>. Introduced in .NET Core 1.0 in 2016 to replace MVC 5. No longer under active development, but still supported. Replaced by Razor Pages, minimal APIs, and Blazor.</li>\n</ul>\n<h2>Rusting Edge: Declining Technologies</h2>\n<p>The \"rusting edge\" describes technologies that are on the decline. They are often nearing the end of their lifecycle but may still be supported and used within many organizations. These technologies are typically well-understood, stable, and have extensive documentation, making them a safe choice for critical systems that require reliability over innovation.</p>\n<p><strong>Pros:</strong></p>\n<ul>\n<li>High stability and reliability.</li>\n<li>Extensive documentation and widespread knowledge.</li>\n<li>Predictable performance and fewer surprises.</li>\n</ul>\n<p><strong>Cons:</strong></p>\n<ul>\n<li>Limited or no updates and improvements.</li>\n<li>Shrinking community and expertise pool. The best talent typically keeps up with tech trends.</li>\n<li>Risk of eventual obsolescence requiring eventual migration or overhaul.</li>\n<li>Lack of commercial support.</li>\n</ul>\n<p><strong>Examples in April 2024</strong></p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/mvc/overview/getting-started/introduction/getting-started\">.NET Framework MVC</a>. MVC 5 is the latest version, released in 2013. Still supported.</li>\n<li><a href=\"https://learn.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api\">.NET Framework Web APIs</a>. Version 2 is the latest version, released in 2013. Still supported.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/ASP.NET\">ASP.NET Web Forms</a>. First released as simply \"ASP.NET\" in 2002. Still supported.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Visual_FoxPro\">(Visual) FoxPro</a>. First released in the 1980s and acquired by Microsoft in the 1990s. Its final release was in 2007, and extended <strong>support ended in 2015</strong>.</li>\n</ul>\n<h2>Making the Right Choice</h2>\n<p>Deciding which edge to lean towards requires a strategic assessment of an organization's goals, risk tolerance, and market position. Innovation-driven companies might prefer the bleeding edge to stay competitive, while those in the most heavily regulated industries might find dull edge tech more appropriate. Most will find the leading edge a safe yet progressive choice, with an optimal mix of risks and productivity.</p>\n<p>In most cases, it would be a mistake to start a new project, expected to be maintained for many years, on a <em>rusting edge</em> technology. Such applications often find themselves obsolete by the time the ship their first version. They have a hard time finding support as well as developers willing to work on dead end technology, and while initially developer resources may be abundant, that pool tends to quickly dry up as experienced developers retire or shift to working with more modern technologies. Thus, companies often must pay a premium to lure developers into working on rusting edge technology.</p>\n<p>In conclusion, whether you’re pioneering with bleeding edge, progressing with leading edge, or maintaining with rusting edge technology, each has its place in the ecosystem of software development. The key is to align your technology strategy with your business objectives and the specific needs of your projects and teams.</p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.gartner.com/en/articles/what-s-new-in-the-2023-gartner-hype-cycle-for-emerging-technologies\">Gartner 2023 Hype Cycle for Emerging Technologies</a></li>\n<li><a href=\"https://www.merriam-webster.com/dictionary/bleeding%20edge\">Merriam-Webster: bleeding edge</a></li>\n<li><a href=\"https://www.merriam-webster.com/dictionary/leading%20edge\">Merriam-Webster: leading edge</a></li>\n<li><a href=\"https://www.merriam-webster.com/dictionary/cutting%20edge\">Merriam-Webster: cutting edge</a></li>\n<li>(rusting edge hasn't made it into the dictionary yet - I just introduced the term)</li>\n</ul>\n<p><em>If you found this useful, consider sharing it with a peer and joining my <a href=\"/tips\">weekly dev tips newsletter</a> or <a href=\"https://youtube.com/ardalis\">subscribe to my YouTube channel</a>. Cheers!</em></p>",
    "sanitized": "In the fast-evolving world of software development, keeping pace with technology trends is both a necessity and a challenge. Companies and developers often find themselves making critical decisions about whether to adopt new technologies early (bleeding edge), wait until they mature (leading edge or cutting edge), or continue using older, more established technologies (what I'll call the dull edge and rusting edge). Understanding the distinctions and implications of these choices can significantly impact both the development process and business outcomes.\nBleeding Edge: Innovation at a Risk\nThe term \"bleeding edge\" refers to technology that is so new it hasn’t been widely tested or adopted. These are often preview releases or version 1.0 products that promise innovative features and competitive advantages but come with higher risks of instability and lack of support. For startups or tech-centric businesses aiming to disrupt markets, bleeding edge technologies may offer the crucial differentiation needed to stand out. However for more established businesses who hope to build software that will last years, the frequent changes (and outright failures) common to bleeding edge technology are often better avoided.\nSome examples of bleeding edge technologies that burnt companies who bet on them include AngularJS (Angular 1) and Silverlight.\nPros:\n\nAccess to the latest innovations and technologies.\nPotential to gain market advantages by leveraging new capabilities early.\n\nCons:\n\nHigher risk of encountering bugs and security vulnerabilities.\nLimited community support and resources, such as working samples and documentation.\nPotential for significant changes or discontinuation by vendors.\nFew developers with experience using the product - everyone must learn on the job\n\nExamples in .NET in April 2024\n\n.NET Aspire. Currently in preview, this technology is likely to be supported by the end of 2024.\n.NET 9 preview 3. Currently ion preview; expected release November 2024.\n\nLeading Edge: Established Yet Evolving\nLeading edge technologies are those that have emerged from their initial testing phase and have proven effective in real-world applications. These are typically at least version 2.x releases and have garnered an active community and robust support. Organizations looking for a balance between innovation and reliability often opt for leading edge technologies.\nPros:\n\nLower risk than bleeding edge technologies with a stable release.\nStrong community support and ample learning resources.\nRegular updates and patches from developers.\nLarger pool of experienced developers to draw from.\n\nCons:\n\nSome risk of obsolescence as newer technologies emerge.\nPossible limitations if the technology does not evolve quickly enough to meet emerging needs.\n\nExamples in .NET in April 2024\n\n.NET 8. The latest available version of .NET, also an LTS (Long Term Support) release, with support ending in November 2026.\nMinimal APIs. The latest approach to building web APIs in .NET. First introduced in .NET 6. Currently in active development.\nRazor Pages. First introduced in .NET Core 2.0. Currently the recommended approach to building server-rendered page-based sites with ASP.NET Core.\n\nThe Dull Edge: Stably Pervasive Yet Fading\nNo longer sharp or leading, the dull edge refers to tech that is tried and true. It's still in wide use, but mostly out of inertia. It's lost its shine. It's often difficult to upgrade because many systems integrate with or depend on it. It's dull, metaphorically, because it's often not as efficient or effective as more modern toolsets. It often carries a stigma among developers of being 'dull' to work on or with, due to its age and lack of continued innovation.\nPros:\n\nWidespread use and familiarity within the industry\nStable and reliable for existing applications\nBroad support due to a long history of use.\n\nCons:\n\nLimited innovation and updates.\nGradually decreasing community and labor pool.\nIncreasing risk of becoming outdated/obsolete (and moving to rusting edge)\n\nExamples in .NET as of April 2024\n\nASP.NET Core MVC. Introduced in .NET Core 1.0 in 2016 to replace MVC 5. No longer under active development, but still supported. Replaced by Razor Pages, minimal APIs, and Blazor.\n\nRusting Edge: Declining Technologies\nThe \"rusting edge\" describes technologies that are on the decline. They are often nearing the end of their lifecycle but may still be supported and used within many organizations. These technologies are typically well-understood, stable, and have extensive documentation, making them a safe choice for critical systems that require reliability over innovation.\nPros:\n\nHigh stability and reliability.\nExtensive documentation and widespread knowledge.\nPredictable performance and fewer surprises.\n\nCons:\n\nLimited or no updates and improvements.\nShrinking community and expertise pool. The best talent typically keeps up with tech trends.\nRisk of eventual obsolescence requiring eventual migration or overhaul.\nLack of commercial support.\n\nExamples in April 2024\n\n.NET Framework MVC. MVC 5 is the latest version, released in 2013. Still supported.\n.NET Framework Web APIs. Version 2 is the latest version, released in 2013. Still supported.\nASP.NET Web Forms. First released as simply \"ASP.NET\" in 2002. Still supported.\n(Visual) FoxPro. First released in the 1980s and acquired by Microsoft in the 1990s. Its final release was in 2007, and extended support ended in 2015.\n\nMaking the Right Choice\nDeciding which edge to lean towards requires a strategic assessment of an organization's goals, risk tolerance, and market position. Innovation-driven companies might prefer the bleeding edge to stay competitive, while those in the most heavily regulated industries might find dull edge tech more appropriate. Most will find the leading edge a safe yet progressive choice, with an optimal mix of risks and productivity.\nIn most cases, it would be a mistake to start a new project, expected to be maintained for many years, on a rusting edge technology. Such applications often find themselves obsolete by the time the ship their first version. They have a hard time finding support as well as developers willing to work on dead end technology, and while initially developer resources may be abundant, that pool tends to quickly dry up as experienced developers retire or shift to working with more modern technologies. Thus, companies often must pay a premium to lure developers into working on rusting edge technology.\nIn conclusion, whether you’re pioneering with bleeding edge, progressing with leading edge, or maintaining with rusting edge technology, each has its place in the ecosystem of software development. The key is to align your technology strategy with your business objectives and the specific needs of your projects and teams.\nReferences\n\nGartner 2023 Hype Cycle for Emerging Technologies\nMerriam-Webster: bleeding edge\nMerriam-Webster: leading edge\nMerriam-Webster: cutting edge\n(rusting edge hasn't made it into the dictionary yet - I just introduced the term)\n\nIf you found this useful, consider sharing it with a peer and joining my weekly dev tips newsletter or subscribe to my YouTube channel. Cheers!"
  },
  {
    "itemId": "https://ardalis.com/stop-debugging-start-running-visual-studio/",
    "raw": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/jxfAoUHH400?si=CvrmjUsJsmk15Pol\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n<p><strong>NOTE:</strong> Watch the video above to see actual timings of starting with and without debugging. Vote for this <a href=\"https://developercommunity.visualstudio.com/t/Change-Menu-Text-from-Start-Debugging-/10639783\">feature request to make Run vs Debug more obvious in Visual Studio.</a>. Thanks!</p>\n<p>I work with a lot of different .NET developers as a trainer, architect, and consultant with <a href=\"https://nimblepros.com\">NimblePros</a>. One thing that I'm frequently pointing out to them is the difference in startup speed for their applications when launching from Visual Studio. Many, I would even say most, .NET developers have developed \"muscle memory\" of hitting F5 (or clicking the \"Play\" button) in order to launch their applications. And why not? This was the only toolbar button available for many years, and F5 is a simple enough key to remember, and is literally called \"Start\".</p>\n<p>The (potential) problem is, the default start behavior actually means \"Debug\". Which means launching the Debugger, totally overhauling the UI of Visual Studio in the process, and adding often significant delay to the process.</p>\n<p>The alternative is to \"Start without Debugging\" (also known as \"Run\" everywhere else but in Visual Studio), which is now available using a hollow \"Play\" icon on the toolbar as well as via keyboard shortcut, Ctrl+F5.</p>\n<p>Which one do you use by default? If you're in the F5/Play by default camp, do me a favor and try Ctrl+F5/Hollow Play with your main app you're always working in and let me know in the comments if it makes a difference. Here's what one (of many) reply on Twitter/X found:</p>\n<p><img src=\"/img/run-incomparably-faster-visual-studio.png\" alt=\"ctrl+F5 incomparably faster than F5\"></p>\n<p>If you use the toolbar, think of it like this:</p>\n<p><img src=\"/img/start-slow-fast.png\" alt=\"Start is slow; Start without debugging is fast\"></p>\n<p>Personally, I like how Rider does it, which is also how the dotnet CLI works. Just call it <strong>\"Run\"</strong> if you want to run the app. Call it \"Debug\" if you want to debug the app.</p>\n<p>You don't need to make it overcomplicated, especially for a menu item which should just be a simple verb.</p>\n<p>None of this \"Start the application but this time don't attach a debugger or do anything else but run it, ok?\" menu text. And there's no need to confuse things with \"Start the debugger and the application and attach the debugger to it all with this button\", either. It's too verbose. It's just more words when <strong>\"Debug\"</strong> suffices. (Yeah, I know it's really <em>only</em> \"Start Debugging\" and \"Start Without Debugging\" but that's still obviously more verbose than necessary; I'm exaggerating to make a point)</p>\n<p>Visual Studio already has a precedent for this, too, with tests:</p>\n<p><img src=\"/img/run-tests-debug-tests-visual-studio.png\" alt=\"Run Tests or Debug Tests\"></p>\n<p>Note that there's not menu option to \"Start Tests With Debugger\" or \"Start Tests Without Debugger\" because that's completely unnecessary.</p>\n<h2>Help Future Developers</h2>\n<p>Ok so why do I care, and why should you? My personal mission is to help developers write better code, faster. Starting the program you're writing is almost certainly a part of your development inner loop, and as such <a href=\"https://xkcd.com/1205/\">relatively small gains can quickly add up since the activity is occurring so frequently</a>. And the investment in this case is minimal - literally just a tiny bit of education so developers can be intentional about how they want to run (or sometimes debug) their applications.</p>\n<p>It's almost certainly too much of a change at this point for Visual Studio to change the behavior of F5/Play. But what they <em>could</em> do is change the menu text, so that it would become clear to developers that one option is for Debugging and the other is for Running. I ran <a href=\"https://twitter.com/ardalis/status/1780290422213915131\">a poll which you can see (and participate in if you're quick) what my corner of Twitter thought about this</a>.</p>\n<p>I also opened up <a href=\"https://developercommunity.visualstudio.com/t/Change-Menu-Text-from-Start-Debugging-/10639783\">this change request with Visual Studio</a>, which you can view and vote up if you agree.</p>\n<h2>What about VS Code</h2>\n<p>Visual Studio Code is a weird hybrid of Visual Studio and Rider when it comes to the names and text they use for their menus. Whereas in Visual Studio <strong>running your app</strong> which should be one of the most common things folks do is hidden behind a top level \"Debug\" menu option, VS Code has a top level menu item called \"Run\". Makes sense so far.</p>\n<p>But then under that menu things look like this:</p>\n<p><img src=\"/img/vs-code-run-menu.png\" alt=\"vs code run menu\"></p>\n<p>You might expect that the first and default option under the \"Run\" menu would be \"Run\" or \"Run the App\" but no doubt because of compatibility with Visual Studio it's \"Start Debugging\" (which doesn't even mention \"Run\"). And then for the second option it's \"Run Without Debugging\" which again is just an overly verbose way of saying \"Run\". Bonus points for using \"Run\" instead of \"Start\" for the non-debugging case, but weirdly inconsistent use of \"Start\" and \"Run\" in the two options...</p>\n<p>For me, I mostly just use the terminal and <code class=\"language-text\">dotnet run</code> or <code class=\"language-text\">dotnet watch run</code> when I'm in VS Code, so these don't make a huge difference in my day to day coding. But some folks in the comments of <a href=\"https://www.youtube.com/watch?v=jxfAoUHH400\">my YouTube video on this topic</a> asked, so I thought I'd include some info here.</p>\n<p><em>If you found this useful, consider sharing it with a peer and joining my <a href=\"/tips\">weekly dev tips newsletter</a> or <a href=\"https://youtube.com/ardalis\">subscribe to my YouTube channel</a>. Cheers!</em></p>",
    "sanitized": "NOTE: Watch the video above to see actual timings of starting with and without debugging. Vote for this feature request to make Run vs Debug more obvious in Visual Studio.. Thanks!\nI work with a lot of different .NET developers as a trainer, architect, and consultant with NimblePros. One thing that I'm frequently pointing out to them is the difference in startup speed for their applications when launching from Visual Studio. Many, I would even say most, .NET developers have developed \"muscle memory\" of hitting F5 (or clicking the \"Play\" button) in order to launch their applications. And why not? This was the only toolbar button available for many years, and F5 is a simple enough key to remember, and is literally called \"Start\".\nThe (potential) problem is, the default start behavior actually means \"Debug\". Which means launching the Debugger, totally overhauling the UI of Visual Studio in the process, and adding often significant delay to the process.\nThe alternative is to \"Start without Debugging\" (also known as \"Run\" everywhere else but in Visual Studio), which is now available using a hollow \"Play\" icon on the toolbar as well as via keyboard shortcut, Ctrl+F5.\nWhich one do you use by default? If you're in the F5/Play by default camp, do me a favor and try Ctrl+F5/Hollow Play with your main app you're always working in and let me know in the comments if it makes a difference. Here's what one (of many) reply on Twitter/X found:\n\nIf you use the toolbar, think of it like this:\n\nPersonally, I like how Rider does it, which is also how the dotnet CLI works. Just call it \"Run\" if you want to run the app. Call it \"Debug\" if you want to debug the app.\nYou don't need to make it overcomplicated, especially for a menu item which should just be a simple verb.\nNone of this \"Start the application but this time don't attach a debugger or do anything else but run it, ok?\" menu text. And there's no need to confuse things with \"Start the debugger and the application and attach the debugger to it all with this button\", either. It's too verbose. It's just more words when \"Debug\" suffices. (Yeah, I know it's really only \"Start Debugging\" and \"Start Without Debugging\" but that's still obviously more verbose than necessary; I'm exaggerating to make a point)\nVisual Studio already has a precedent for this, too, with tests:\n\nNote that there's not menu option to \"Start Tests With Debugger\" or \"Start Tests Without Debugger\" because that's completely unnecessary.\nHelp Future Developers\nOk so why do I care, and why should you? My personal mission is to help developers write better code, faster. Starting the program you're writing is almost certainly a part of your development inner loop, and as such relatively small gains can quickly add up since the activity is occurring so frequently. And the investment in this case is minimal - literally just a tiny bit of education so developers can be intentional about how they want to run (or sometimes debug) their applications.\nIt's almost certainly too much of a change at this point for Visual Studio to change the behavior of F5/Play. But what they could do is change the menu text, so that it would become clear to developers that one option is for Debugging and the other is for Running. I ran a poll which you can see (and participate in if you're quick) what my corner of Twitter thought about this.\nI also opened up this change request with Visual Studio, which you can view and vote up if you agree.\nWhat about VS Code\nVisual Studio Code is a weird hybrid of Visual Studio and Rider when it comes to the names and text they use for their menus. Whereas in Visual Studio running your app which should be one of the most common things folks do is hidden behind a top level \"Debug\" menu option, VS Code has a top level menu item called \"Run\". Makes sense so far.\nBut then under that menu things look like this:\n\nYou might expect that the first and default option under the \"Run\" menu would be \"Run\" or \"Run the App\" but no doubt because of compatibility with Visual Studio it's \"Start Debugging\" (which doesn't even mention \"Run\"). And then for the second option it's \"Run Without Debugging\" which again is just an overly verbose way of saying \"Run\". Bonus points for using \"Run\" instead of \"Start\" for the non-debugging case, but weirdly inconsistent use of \"Start\" and \"Run\" in the two options...\nFor me, I mostly just use the terminal and dotnet run or dotnet watch run when I'm in VS Code, so these don't make a huge difference in my day to day coding. But some folks in the comments of my YouTube video on this topic asked, so I thought I'd include some info here.\nIf you found this useful, consider sharing it with a peer and joining my weekly dev tips newsletter or subscribe to my YouTube channel. Cheers!"
  }
]
